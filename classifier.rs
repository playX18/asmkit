#![allow(unused_parens)]
// UDF-UDF#0
pub const fn classify_impl_1(inst: u32) -> u32 {
  if (inst&0xf0000) != 0x0 { return 0; }
  return 0x200;
}


// MEMX-STXRB#0,MEMX-STLXRB#0
pub const fn classify_impl_2(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x1680,
    0x1 => 0x1681,
    _ => 0,
  };
  return idx;
}


// CASP-CASP#0,CASP-CASPL#0
pub const fn classify_impl_3(inst: u32) -> u32 {
  if (inst&0x7c00) != 0x7c00 { return 0; }
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x6000,
    0x1 => 0x6001,
    _ => 0,
  };
  return idx;
}


// MEMX-LDXRB#0,MEMX-LDAXRB#0
pub const fn classify_impl_4(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x1682,
    0x1 => 0x1683,
    _ => 0,
  };
  return idx;
}


// CASP-CASPA#0,CASP-CASPAL#0
pub const fn classify_impl_5(inst: u32) -> u32 {
  if (inst&0x7c00) != 0x7c00 { return 0; }
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x6002,
    0x1 => 0x6003,
    _ => 0,
  };
  return idx;
}


// MEMOR-STLLRB#0,MEMOR-STLRB#0
pub const fn classify_impl_6(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x1600,
    0x1 => 0x1601,
    _ => 0,
  };
  return idx;
}


// CAS-CASB#0,CAS-CASLB#0
pub const fn classify_impl_7(inst: u32) -> u32 {
  if (inst&0x7c00) != 0x7c00 { return 0; }
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x5f80,
    0x1 => 0x5f81,
    _ => 0,
  };
  return idx;
}


// MEMOR-LDLARB#0,MEMOR-LDARB#0
pub const fn classify_impl_8(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x1602,
    0x1 => 0x1603,
    _ => 0,
  };
  return idx;
}


// CAS-CASAB#0,CAS-CASALB#0
pub const fn classify_impl_9(inst: u32) -> u32 {
  if (inst&0x7c00) != 0x7c00 { return 0; }
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x5f82,
    0x1 => 0x5f83,
    _ => 0,
  };
  return idx;
}


// ANDOREOR_SHIFT-AND_SHIFT#0
pub const fn classify_impl_a(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x580;
}


// ANDOREOR_SHIFT-BIC_SHIFT#0
pub const fn classify_impl_b(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x581;
}


// ADDSUB_SHIFT-ADD_SHIFT#0
pub const fn classify_impl_c(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x400;
}


// ADDSUB_EXT-ADD_EXT#0,ADDSUB_EXT-ADD_EXT#1,ADDSUB_EXT-ADD_EXT#2,ADDSUB_EXT-ADD_EXT#3,ADDSUB_EXT-ADD_EXT#4
pub const fn classify_impl_d(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7 {
    0x0 => 0x300,
    0x1 => 0x300,
    0x2 => 0x300,
    0x3 => 0x300,
    0x4 => 0x300,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    _ => 0,
  };
  return idx;
}


// ADDSUB_SHIFT-ADD_SHIFT#1
pub const fn classify_impl_e(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x400;
}


// ADDSUB_SHIFT-ADD_SHIFT#2
pub const fn classify_impl_f(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x400;
}


// MEMSIMD_MULT-ST4#0,MEMSIMD_MULT-ST4#1,MEMSIMD_MULT-ST4#2,MEMSIMD_MULT-ST1_4#0,MEMSIMD_MULT-ST1_4#1,MEMSIMD_MULT-ST1_4#2,MEMSIMD_MULT-ST1_4#3,MEMSIMD_MULT-ST3#0,MEMSIMD_MULT-ST3#1,MEMSIMD_MULT-ST3#2,MEMSIMD_MULT-ST1_3#0,MEMSIMD_MULT-ST1_3#1,MEMSIMD_MULT-ST1_3#2,MEMSIMD_MULT-ST1_3#3,MEMSIMD_MULT-ST1_1#0,MEMSIMD_MULT-ST1_1#1,MEMSIMD_MULT-ST1_1#2,MEMSIMD_MULT-ST1_1#3,MEMSIMD_MULT-ST2#0,MEMSIMD_MULT-ST2#1,MEMSIMD_MULT-ST2#2,MEMSIMD_MULT-ST1_2#0,MEMSIMD_MULT-ST1_2#1,MEMSIMD_MULT-ST1_2#2,MEMSIMD_MULT-ST1_2#3
pub const fn classify_impl_10(inst: u32) -> u32 {
  if (inst&0xf0000) != 0x0 { return 0; }
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x1c80,
    0x1 => 0x1c80,
    0x2 => 0x1c80,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x1c81,
    0x9 => 0x1c81,
    0xa => 0x1c81,
    0xb => 0x1c81,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x1c82,
    0x11 => 0x1c82,
    0x12 => 0x1c82,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x1c83,
    0x19 => 0x1c83,
    0x1a => 0x1c83,
    0x1b => 0x1c83,
    0x1c => 0x1c84,
    0x1d => 0x1c84,
    0x1e => 0x1c84,
    0x1f => 0x1c84,
    0x20 => 0x1c85,
    0x21 => 0x1c85,
    0x22 => 0x1c85,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x1c86,
    0x29 => 0x1c86,
    0x2a => 0x1c86,
    0x2b => 0x1c86,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// MEMSIMD_MULT-LD4#0,MEMSIMD_MULT-LD4#1,MEMSIMD_MULT-LD4#2,MEMSIMD_MULT-LD1_4#0,MEMSIMD_MULT-LD1_4#1,MEMSIMD_MULT-LD1_4#2,MEMSIMD_MULT-LD1_4#3,MEMSIMD_MULT-LD3#0,MEMSIMD_MULT-LD3#1,MEMSIMD_MULT-LD3#2,MEMSIMD_MULT-LD1_3#0,MEMSIMD_MULT-LD1_3#1,MEMSIMD_MULT-LD1_3#2,MEMSIMD_MULT-LD1_3#3,MEMSIMD_MULT-LD1_1#0,MEMSIMD_MULT-LD1_1#1,MEMSIMD_MULT-LD1_1#2,MEMSIMD_MULT-LD1_1#3,MEMSIMD_MULT-LD2#0,MEMSIMD_MULT-LD2#1,MEMSIMD_MULT-LD2#2,MEMSIMD_MULT-LD1_2#0,MEMSIMD_MULT-LD1_2#1,MEMSIMD_MULT-LD1_2#2,MEMSIMD_MULT-LD1_2#3
pub const fn classify_impl_11(inst: u32) -> u32 {
  if (inst&0xf0000) != 0x0 { return 0; }
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x1c87,
    0x1 => 0x1c87,
    0x2 => 0x1c87,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x1c88,
    0x9 => 0x1c88,
    0xa => 0x1c88,
    0xb => 0x1c88,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x1c89,
    0x11 => 0x1c89,
    0x12 => 0x1c89,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x1c8a,
    0x19 => 0x1c8a,
    0x1a => 0x1c8a,
    0x1b => 0x1c8a,
    0x1c => 0x1c8b,
    0x1d => 0x1c8b,
    0x1e => 0x1c8b,
    0x1f => 0x1c8b,
    0x20 => 0x1c8c,
    0x21 => 0x1c8c,
    0x22 => 0x1c8c,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x1c8d,
    0x29 => 0x1c8d,
    0x2a => 0x1c8d,
    0x2b => 0x1c8d,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// MEMSIMD_MULT_POST-ST4_POST#0,MEMSIMD_MULT_POST-ST4_POST#1,MEMSIMD_MULT_POST-ST4_POST#2,MEMSIMD_MULT_POST-ST1_4_POST#0,MEMSIMD_MULT_POST-ST1_4_POST#1,MEMSIMD_MULT_POST-ST1_4_POST#2,MEMSIMD_MULT_POST-ST1_4_POST#3,MEMSIMD_MULT_POST-ST3_POST#0,MEMSIMD_MULT_POST-ST3_POST#1,MEMSIMD_MULT_POST-ST3_POST#2,MEMSIMD_MULT_POST-ST1_3_POST#0,MEMSIMD_MULT_POST-ST1_3_POST#1,MEMSIMD_MULT_POST-ST1_3_POST#2,MEMSIMD_MULT_POST-ST1_3_POST#3,MEMSIMD_MULT_POST-ST1_1_POST#0,MEMSIMD_MULT_POST-ST1_1_POST#1,MEMSIMD_MULT_POST-ST1_1_POST#2,MEMSIMD_MULT_POST-ST1_1_POST#3,MEMSIMD_MULT_POST-ST2_POST#0,MEMSIMD_MULT_POST-ST2_POST#1,MEMSIMD_MULT_POST-ST2_POST#2,MEMSIMD_MULT_POST-ST1_2_POST#0,MEMSIMD_MULT_POST-ST1_2_POST#1,MEMSIMD_MULT_POST-ST1_2_POST#2,MEMSIMD_MULT_POST-ST1_2_POST#3
pub const fn classify_impl_12(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x1d00,
    0x1 => 0x1d00,
    0x2 => 0x1d00,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x1d01,
    0x9 => 0x1d01,
    0xa => 0x1d01,
    0xb => 0x1d01,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x1d02,
    0x11 => 0x1d02,
    0x12 => 0x1d02,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x1d03,
    0x19 => 0x1d03,
    0x1a => 0x1d03,
    0x1b => 0x1d03,
    0x1c => 0x1d04,
    0x1d => 0x1d04,
    0x1e => 0x1d04,
    0x1f => 0x1d04,
    0x20 => 0x1d05,
    0x21 => 0x1d05,
    0x22 => 0x1d05,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x1d06,
    0x29 => 0x1d06,
    0x2a => 0x1d06,
    0x2b => 0x1d06,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// MEMSIMD_MULT_POST-LD4_POST#0,MEMSIMD_MULT_POST-LD4_POST#1,MEMSIMD_MULT_POST-LD4_POST#2,MEMSIMD_MULT_POST-LD1_4_POST#0,MEMSIMD_MULT_POST-LD1_4_POST#1,MEMSIMD_MULT_POST-LD1_4_POST#2,MEMSIMD_MULT_POST-LD1_4_POST#3,MEMSIMD_MULT_POST-LD3_POST#0,MEMSIMD_MULT_POST-LD3_POST#1,MEMSIMD_MULT_POST-LD3_POST#2,MEMSIMD_MULT_POST-LD1_3_POST#0,MEMSIMD_MULT_POST-LD1_3_POST#1,MEMSIMD_MULT_POST-LD1_3_POST#2,MEMSIMD_MULT_POST-LD1_3_POST#3,MEMSIMD_MULT_POST-LD1_1_POST#0,MEMSIMD_MULT_POST-LD1_1_POST#1,MEMSIMD_MULT_POST-LD1_1_POST#2,MEMSIMD_MULT_POST-LD1_1_POST#3,MEMSIMD_MULT_POST-LD2_POST#0,MEMSIMD_MULT_POST-LD2_POST#1,MEMSIMD_MULT_POST-LD2_POST#2,MEMSIMD_MULT_POST-LD1_2_POST#0,MEMSIMD_MULT_POST-LD1_2_POST#1,MEMSIMD_MULT_POST-LD1_2_POST#2,MEMSIMD_MULT_POST-LD1_2_POST#3
pub const fn classify_impl_13(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x1d07,
    0x1 => 0x1d07,
    0x2 => 0x1d07,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x1d08,
    0x9 => 0x1d08,
    0xa => 0x1d08,
    0xb => 0x1d08,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x1d09,
    0x11 => 0x1d09,
    0x12 => 0x1d09,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x1d0a,
    0x19 => 0x1d0a,
    0x1a => 0x1d0a,
    0x1b => 0x1d0a,
    0x1c => 0x1d0b,
    0x1d => 0x1d0b,
    0x1e => 0x1d0b,
    0x1f => 0x1d0b,
    0x20 => 0x1d0c,
    0x21 => 0x1d0c,
    0x22 => 0x1d0c,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x1d0d,
    0x29 => 0x1d0d,
    0x2a => 0x1d0d,
    0x2b => 0x1d0d,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// MEMSIMD_SINGLE-ST1B#0,MEMSIMD_SINGLE-ST1B#1,MEMSIMD_SINGLE-ST1B#2,MEMSIMD_SINGLE-ST1B#3,MEMSIMD_SINGLE-ST1B#4,MEMSIMD_SINGLE-ST1B#5,MEMSIMD_SINGLE-ST1B#6,MEMSIMD_SINGLE-ST1B#7,MEMSIMD_SINGLE-ST3B#0,MEMSIMD_SINGLE-ST3B#1,MEMSIMD_SINGLE-ST3B#2,MEMSIMD_SINGLE-ST3B#3,MEMSIMD_SINGLE-ST3B#4,MEMSIMD_SINGLE-ST3B#5,MEMSIMD_SINGLE-ST3B#6,MEMSIMD_SINGLE-ST3B#7,MEMSIMD_SINGLE-ST1H#0,MEMSIMD_SINGLE-ST1H#1,MEMSIMD_SINGLE-ST1H#2,MEMSIMD_SINGLE-ST1H#3,MEMSIMD_SINGLE-ST3H#0,MEMSIMD_SINGLE-ST3H#1,MEMSIMD_SINGLE-ST3H#2,MEMSIMD_SINGLE-ST3H#3,MEMSIMD_SINGLE-ST1S#0,MEMSIMD_SINGLE-ST1S#1,MEMSIMD_SINGLE-ST1D#0,MEMSIMD_SINGLE-ST3S#0,MEMSIMD_SINGLE-ST3S#1,MEMSIMD_SINGLE-ST3D#0
pub const fn classify_impl_14(inst: u32) -> u32 {
  if (inst&0xf0000) != 0x0 { return 0; }
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x1d80,
    0x1 => 0x1d80,
    0x2 => 0x1d80,
    0x3 => 0x1d80,
    0x4 => 0x1d80,
    0x5 => 0x1d80,
    0x6 => 0x1d80,
    0x7 => 0x1d80,
    0x8 => 0x1d81,
    0x9 => 0x1d81,
    0xa => 0x1d81,
    0xb => 0x1d81,
    0xc => 0x1d81,
    0xd => 0x1d81,
    0xe => 0x1d81,
    0xf => 0x1d81,
    0x10 => 0x1d82,
    0x11 => 0x0,
    0x12 => 0x1d82,
    0x13 => 0x0,
    0x14 => 0x1d82,
    0x15 => 0x0,
    0x16 => 0x1d82,
    0x17 => 0x0,
    0x18 => 0x1d83,
    0x19 => 0x0,
    0x1a => 0x1d83,
    0x1b => 0x0,
    0x1c => 0x1d83,
    0x1d => 0x0,
    0x1e => 0x1d83,
    0x1f => 0x0,
    0x20 => 0x1d84,
    0x21 => 0x1d85,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x1d84,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x1d86,
    0x29 => 0x1d87,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x1d86,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// MEMSIMD_SINGLE-ST2B#0,MEMSIMD_SINGLE-ST2B#1,MEMSIMD_SINGLE-ST2B#2,MEMSIMD_SINGLE-ST2B#3,MEMSIMD_SINGLE-ST2B#4,MEMSIMD_SINGLE-ST2B#5,MEMSIMD_SINGLE-ST2B#6,MEMSIMD_SINGLE-ST2B#7,MEMSIMD_SINGLE-ST4B#0,MEMSIMD_SINGLE-ST4B#1,MEMSIMD_SINGLE-ST4B#2,MEMSIMD_SINGLE-ST4B#3,MEMSIMD_SINGLE-ST4B#4,MEMSIMD_SINGLE-ST4B#5,MEMSIMD_SINGLE-ST4B#6,MEMSIMD_SINGLE-ST4B#7,MEMSIMD_SINGLE-ST2H#0,MEMSIMD_SINGLE-ST2H#1,MEMSIMD_SINGLE-ST2H#2,MEMSIMD_SINGLE-ST2H#3,MEMSIMD_SINGLE-ST4H#0,MEMSIMD_SINGLE-ST4H#1,MEMSIMD_SINGLE-ST4H#2,MEMSIMD_SINGLE-ST4H#3,MEMSIMD_SINGLE-ST2S#0,MEMSIMD_SINGLE-ST2S#1,MEMSIMD_SINGLE-ST2D#0,MEMSIMD_SINGLE-ST4S#0,MEMSIMD_SINGLE-ST4S#1,MEMSIMD_SINGLE-ST4D#0
pub const fn classify_impl_15(inst: u32) -> u32 {
  if (inst&0xf0000) != 0x0 { return 0; }
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x1d88,
    0x1 => 0x1d88,
    0x2 => 0x1d88,
    0x3 => 0x1d88,
    0x4 => 0x1d88,
    0x5 => 0x1d88,
    0x6 => 0x1d88,
    0x7 => 0x1d88,
    0x8 => 0x1d89,
    0x9 => 0x1d89,
    0xa => 0x1d89,
    0xb => 0x1d89,
    0xc => 0x1d89,
    0xd => 0x1d89,
    0xe => 0x1d89,
    0xf => 0x1d89,
    0x10 => 0x1d8a,
    0x11 => 0x0,
    0x12 => 0x1d8a,
    0x13 => 0x0,
    0x14 => 0x1d8a,
    0x15 => 0x0,
    0x16 => 0x1d8a,
    0x17 => 0x0,
    0x18 => 0x1d8b,
    0x19 => 0x0,
    0x1a => 0x1d8b,
    0x1b => 0x0,
    0x1c => 0x1d8b,
    0x1d => 0x0,
    0x1e => 0x1d8b,
    0x1f => 0x0,
    0x20 => 0x1d8c,
    0x21 => 0x1d8d,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x1d8c,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x1d8e,
    0x29 => 0x1d8f,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x1d8e,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// MEMSIMD_SINGLE-LD1B#0,MEMSIMD_SINGLE-LD1B#1,MEMSIMD_SINGLE-LD1B#2,MEMSIMD_SINGLE-LD1B#3,MEMSIMD_SINGLE-LD1B#4,MEMSIMD_SINGLE-LD1B#5,MEMSIMD_SINGLE-LD1B#6,MEMSIMD_SINGLE-LD1B#7,MEMSIMD_SINGLE-LD3B#0,MEMSIMD_SINGLE-LD3B#1,MEMSIMD_SINGLE-LD3B#2,MEMSIMD_SINGLE-LD3B#3,MEMSIMD_SINGLE-LD3B#4,MEMSIMD_SINGLE-LD3B#5,MEMSIMD_SINGLE-LD3B#6,MEMSIMD_SINGLE-LD3B#7,MEMSIMD_SINGLE-LD1H#0,MEMSIMD_SINGLE-LD1H#1,MEMSIMD_SINGLE-LD1H#2,MEMSIMD_SINGLE-LD1H#3,MEMSIMD_SINGLE-LD3H#0,MEMSIMD_SINGLE-LD3H#1,MEMSIMD_SINGLE-LD3H#2,MEMSIMD_SINGLE-LD3H#3,MEMSIMD_SINGLE-LD1S#0,MEMSIMD_SINGLE-LD1S#1,MEMSIMD_SINGLE-LD1D#0,MEMSIMD_SINGLE-LD3S#0,MEMSIMD_SINGLE-LD3S#1,MEMSIMD_SINGLE-LD3D#0,MEMSIMD_REP-LD1R#0,MEMSIMD_REP-LD3R#0
pub const fn classify_impl_16(inst: u32) -> u32 {
  if (inst&0xf0000) != 0x0 { return 0; }
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x1d90,
    0x1 => 0x1d90,
    0x2 => 0x1d90,
    0x3 => 0x1d90,
    0x4 => 0x1d90,
    0x5 => 0x1d90,
    0x6 => 0x1d90,
    0x7 => 0x1d90,
    0x8 => 0x1d91,
    0x9 => 0x1d91,
    0xa => 0x1d91,
    0xb => 0x1d91,
    0xc => 0x1d91,
    0xd => 0x1d91,
    0xe => 0x1d91,
    0xf => 0x1d91,
    0x10 => 0x1d92,
    0x11 => 0x0,
    0x12 => 0x1d92,
    0x13 => 0x0,
    0x14 => 0x1d92,
    0x15 => 0x0,
    0x16 => 0x1d92,
    0x17 => 0x0,
    0x18 => 0x1d93,
    0x19 => 0x0,
    0x1a => 0x1d93,
    0x1b => 0x0,
    0x1c => 0x1d93,
    0x1d => 0x0,
    0x1e => 0x1d93,
    0x1f => 0x0,
    0x20 => 0x1d94,
    0x21 => 0x1d95,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x1d94,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x1d96,
    0x29 => 0x1d97,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x1d96,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x1e80,
    0x31 => 0x1e80,
    0x32 => 0x1e80,
    0x33 => 0x1e80,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x1e81,
    0x39 => 0x1e81,
    0x3a => 0x1e81,
    0x3b => 0x1e81,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// MEMSIMD_SINGLE-LD2B#0,MEMSIMD_SINGLE-LD2B#1,MEMSIMD_SINGLE-LD2B#2,MEMSIMD_SINGLE-LD2B#3,MEMSIMD_SINGLE-LD2B#4,MEMSIMD_SINGLE-LD2B#5,MEMSIMD_SINGLE-LD2B#6,MEMSIMD_SINGLE-LD2B#7,MEMSIMD_SINGLE-LD4B#0,MEMSIMD_SINGLE-LD4B#1,MEMSIMD_SINGLE-LD4B#2,MEMSIMD_SINGLE-LD4B#3,MEMSIMD_SINGLE-LD4B#4,MEMSIMD_SINGLE-LD4B#5,MEMSIMD_SINGLE-LD4B#6,MEMSIMD_SINGLE-LD4B#7,MEMSIMD_SINGLE-LD2H#0,MEMSIMD_SINGLE-LD2H#1,MEMSIMD_SINGLE-LD2H#2,MEMSIMD_SINGLE-LD2H#3,MEMSIMD_SINGLE-LD4H#0,MEMSIMD_SINGLE-LD4H#1,MEMSIMD_SINGLE-LD4H#2,MEMSIMD_SINGLE-LD4H#3,MEMSIMD_SINGLE-LD2S#0,MEMSIMD_SINGLE-LD2S#1,MEMSIMD_SINGLE-LD2D#0,MEMSIMD_SINGLE-LD4S#0,MEMSIMD_SINGLE-LD4S#1,MEMSIMD_SINGLE-LD4D#0,MEMSIMD_REP-LD2R#0,MEMSIMD_REP-LD4R#0
pub const fn classify_impl_17(inst: u32) -> u32 {
  if (inst&0xf0000) != 0x0 { return 0; }
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x1d98,
    0x1 => 0x1d98,
    0x2 => 0x1d98,
    0x3 => 0x1d98,
    0x4 => 0x1d98,
    0x5 => 0x1d98,
    0x6 => 0x1d98,
    0x7 => 0x1d98,
    0x8 => 0x1d99,
    0x9 => 0x1d99,
    0xa => 0x1d99,
    0xb => 0x1d99,
    0xc => 0x1d99,
    0xd => 0x1d99,
    0xe => 0x1d99,
    0xf => 0x1d99,
    0x10 => 0x1d9a,
    0x11 => 0x0,
    0x12 => 0x1d9a,
    0x13 => 0x0,
    0x14 => 0x1d9a,
    0x15 => 0x0,
    0x16 => 0x1d9a,
    0x17 => 0x0,
    0x18 => 0x1d9b,
    0x19 => 0x0,
    0x1a => 0x1d9b,
    0x1b => 0x0,
    0x1c => 0x1d9b,
    0x1d => 0x0,
    0x1e => 0x1d9b,
    0x1f => 0x0,
    0x20 => 0x1d9c,
    0x21 => 0x1d9d,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x1d9c,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x1d9e,
    0x29 => 0x1d9f,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x1d9e,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x1e82,
    0x31 => 0x1e82,
    0x32 => 0x1e82,
    0x33 => 0x1e82,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x1e83,
    0x39 => 0x1e83,
    0x3a => 0x1e83,
    0x3b => 0x1e83,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// MEMSIMD_SINGLE_POST-ST1B_POST#0,MEMSIMD_SINGLE_POST-ST1B_POST#1,MEMSIMD_SINGLE_POST-ST1B_POST#2,MEMSIMD_SINGLE_POST-ST1B_POST#3,MEMSIMD_SINGLE_POST-ST1B_POST#4,MEMSIMD_SINGLE_POST-ST1B_POST#5,MEMSIMD_SINGLE_POST-ST1B_POST#6,MEMSIMD_SINGLE_POST-ST1B_POST#7,MEMSIMD_SINGLE_POST-ST3B_POST#0,MEMSIMD_SINGLE_POST-ST3B_POST#1,MEMSIMD_SINGLE_POST-ST3B_POST#2,MEMSIMD_SINGLE_POST-ST3B_POST#3,MEMSIMD_SINGLE_POST-ST3B_POST#4,MEMSIMD_SINGLE_POST-ST3B_POST#5,MEMSIMD_SINGLE_POST-ST3B_POST#6,MEMSIMD_SINGLE_POST-ST3B_POST#7,MEMSIMD_SINGLE_POST-ST1H_POST#0,MEMSIMD_SINGLE_POST-ST1H_POST#1,MEMSIMD_SINGLE_POST-ST1H_POST#2,MEMSIMD_SINGLE_POST-ST1H_POST#3,MEMSIMD_SINGLE_POST-ST3H_POST#0,MEMSIMD_SINGLE_POST-ST3H_POST#1,MEMSIMD_SINGLE_POST-ST3H_POST#2,MEMSIMD_SINGLE_POST-ST3H_POST#3,MEMSIMD_SINGLE_POST-ST1S_POST#0,MEMSIMD_SINGLE_POST-ST1S_POST#1,MEMSIMD_SINGLE_POST-ST1D_POST#0,MEMSIMD_SINGLE_POST-ST3S_POST#0,MEMSIMD_SINGLE_POST-ST3S_POST#1,MEMSIMD_SINGLE_POST-ST3D_POST#0
pub const fn classify_impl_18(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x1e00,
    0x1 => 0x1e00,
    0x2 => 0x1e00,
    0x3 => 0x1e00,
    0x4 => 0x1e00,
    0x5 => 0x1e00,
    0x6 => 0x1e00,
    0x7 => 0x1e00,
    0x8 => 0x1e01,
    0x9 => 0x1e01,
    0xa => 0x1e01,
    0xb => 0x1e01,
    0xc => 0x1e01,
    0xd => 0x1e01,
    0xe => 0x1e01,
    0xf => 0x1e01,
    0x10 => 0x1e02,
    0x11 => 0x0,
    0x12 => 0x1e02,
    0x13 => 0x0,
    0x14 => 0x1e02,
    0x15 => 0x0,
    0x16 => 0x1e02,
    0x17 => 0x0,
    0x18 => 0x1e03,
    0x19 => 0x0,
    0x1a => 0x1e03,
    0x1b => 0x0,
    0x1c => 0x1e03,
    0x1d => 0x0,
    0x1e => 0x1e03,
    0x1f => 0x0,
    0x20 => 0x1e04,
    0x21 => 0x1e05,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x1e04,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x1e06,
    0x29 => 0x1e07,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x1e06,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// MEMSIMD_SINGLE_POST-ST2B_POST#0,MEMSIMD_SINGLE_POST-ST2B_POST#1,MEMSIMD_SINGLE_POST-ST2B_POST#2,MEMSIMD_SINGLE_POST-ST2B_POST#3,MEMSIMD_SINGLE_POST-ST2B_POST#4,MEMSIMD_SINGLE_POST-ST2B_POST#5,MEMSIMD_SINGLE_POST-ST2B_POST#6,MEMSIMD_SINGLE_POST-ST2B_POST#7,MEMSIMD_SINGLE_POST-ST4B_POST#0,MEMSIMD_SINGLE_POST-ST4B_POST#1,MEMSIMD_SINGLE_POST-ST4B_POST#2,MEMSIMD_SINGLE_POST-ST4B_POST#3,MEMSIMD_SINGLE_POST-ST4B_POST#4,MEMSIMD_SINGLE_POST-ST4B_POST#5,MEMSIMD_SINGLE_POST-ST4B_POST#6,MEMSIMD_SINGLE_POST-ST4B_POST#7,MEMSIMD_SINGLE_POST-ST2H_POST#0,MEMSIMD_SINGLE_POST-ST2H_POST#1,MEMSIMD_SINGLE_POST-ST2H_POST#2,MEMSIMD_SINGLE_POST-ST2H_POST#3,MEMSIMD_SINGLE_POST-ST4H_POST#0,MEMSIMD_SINGLE_POST-ST4H_POST#1,MEMSIMD_SINGLE_POST-ST4H_POST#2,MEMSIMD_SINGLE_POST-ST4H_POST#3,MEMSIMD_SINGLE_POST-ST2S_POST#0,MEMSIMD_SINGLE_POST-ST2S_POST#1,MEMSIMD_SINGLE_POST-ST2D_POST#0,MEMSIMD_SINGLE_POST-ST4S_POST#0,MEMSIMD_SINGLE_POST-ST4S_POST#1,MEMSIMD_SINGLE_POST-ST4D_POST#0
pub const fn classify_impl_19(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x1e08,
    0x1 => 0x1e08,
    0x2 => 0x1e08,
    0x3 => 0x1e08,
    0x4 => 0x1e08,
    0x5 => 0x1e08,
    0x6 => 0x1e08,
    0x7 => 0x1e08,
    0x8 => 0x1e09,
    0x9 => 0x1e09,
    0xa => 0x1e09,
    0xb => 0x1e09,
    0xc => 0x1e09,
    0xd => 0x1e09,
    0xe => 0x1e09,
    0xf => 0x1e09,
    0x10 => 0x1e0a,
    0x11 => 0x0,
    0x12 => 0x1e0a,
    0x13 => 0x0,
    0x14 => 0x1e0a,
    0x15 => 0x0,
    0x16 => 0x1e0a,
    0x17 => 0x0,
    0x18 => 0x1e0b,
    0x19 => 0x0,
    0x1a => 0x1e0b,
    0x1b => 0x0,
    0x1c => 0x1e0b,
    0x1d => 0x0,
    0x1e => 0x1e0b,
    0x1f => 0x0,
    0x20 => 0x1e0c,
    0x21 => 0x1e0d,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x1e0c,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x1e0e,
    0x29 => 0x1e0f,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x1e0e,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// MEMSIMD_SINGLE_POST-LD1B_POST#0,MEMSIMD_SINGLE_POST-LD1B_POST#1,MEMSIMD_SINGLE_POST-LD1B_POST#2,MEMSIMD_SINGLE_POST-LD1B_POST#3,MEMSIMD_SINGLE_POST-LD1B_POST#4,MEMSIMD_SINGLE_POST-LD1B_POST#5,MEMSIMD_SINGLE_POST-LD1B_POST#6,MEMSIMD_SINGLE_POST-LD1B_POST#7,MEMSIMD_SINGLE_POST-LD3B_POST#0,MEMSIMD_SINGLE_POST-LD3B_POST#1,MEMSIMD_SINGLE_POST-LD3B_POST#2,MEMSIMD_SINGLE_POST-LD3B_POST#3,MEMSIMD_SINGLE_POST-LD3B_POST#4,MEMSIMD_SINGLE_POST-LD3B_POST#5,MEMSIMD_SINGLE_POST-LD3B_POST#6,MEMSIMD_SINGLE_POST-LD3B_POST#7,MEMSIMD_SINGLE_POST-LD1H_POST#0,MEMSIMD_SINGLE_POST-LD1H_POST#1,MEMSIMD_SINGLE_POST-LD1H_POST#2,MEMSIMD_SINGLE_POST-LD1H_POST#3,MEMSIMD_SINGLE_POST-LD3H_POST#0,MEMSIMD_SINGLE_POST-LD3H_POST#1,MEMSIMD_SINGLE_POST-LD3H_POST#2,MEMSIMD_SINGLE_POST-LD3H_POST#3,MEMSIMD_SINGLE_POST-LD1S_POST#0,MEMSIMD_SINGLE_POST-LD1S_POST#1,MEMSIMD_SINGLE_POST-LD1D_POST#0,MEMSIMD_SINGLE_POST-LD3S_POST#0,MEMSIMD_SINGLE_POST-LD3S_POST#1,MEMSIMD_SINGLE_POST-LD3D_POST#0,MEMSIMD_REP_POST-LD1R_POST#0,MEMSIMD_REP_POST-LD3R_POST#0
pub const fn classify_impl_1a(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x1e10,
    0x1 => 0x1e10,
    0x2 => 0x1e10,
    0x3 => 0x1e10,
    0x4 => 0x1e10,
    0x5 => 0x1e10,
    0x6 => 0x1e10,
    0x7 => 0x1e10,
    0x8 => 0x1e11,
    0x9 => 0x1e11,
    0xa => 0x1e11,
    0xb => 0x1e11,
    0xc => 0x1e11,
    0xd => 0x1e11,
    0xe => 0x1e11,
    0xf => 0x1e11,
    0x10 => 0x1e12,
    0x11 => 0x0,
    0x12 => 0x1e12,
    0x13 => 0x0,
    0x14 => 0x1e12,
    0x15 => 0x0,
    0x16 => 0x1e12,
    0x17 => 0x0,
    0x18 => 0x1e13,
    0x19 => 0x0,
    0x1a => 0x1e13,
    0x1b => 0x0,
    0x1c => 0x1e13,
    0x1d => 0x0,
    0x1e => 0x1e13,
    0x1f => 0x0,
    0x20 => 0x1e14,
    0x21 => 0x1e15,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x1e14,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x1e16,
    0x29 => 0x1e17,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x1e16,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x1f00,
    0x31 => 0x1f00,
    0x32 => 0x1f00,
    0x33 => 0x1f00,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x1f01,
    0x39 => 0x1f01,
    0x3a => 0x1f01,
    0x3b => 0x1f01,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// MEMSIMD_SINGLE_POST-LD2B_POST#0,MEMSIMD_SINGLE_POST-LD2B_POST#1,MEMSIMD_SINGLE_POST-LD2B_POST#2,MEMSIMD_SINGLE_POST-LD2B_POST#3,MEMSIMD_SINGLE_POST-LD2B_POST#4,MEMSIMD_SINGLE_POST-LD2B_POST#5,MEMSIMD_SINGLE_POST-LD2B_POST#6,MEMSIMD_SINGLE_POST-LD2B_POST#7,MEMSIMD_SINGLE_POST-LD4B_POST#0,MEMSIMD_SINGLE_POST-LD4B_POST#1,MEMSIMD_SINGLE_POST-LD4B_POST#2,MEMSIMD_SINGLE_POST-LD4B_POST#3,MEMSIMD_SINGLE_POST-LD4B_POST#4,MEMSIMD_SINGLE_POST-LD4B_POST#5,MEMSIMD_SINGLE_POST-LD4B_POST#6,MEMSIMD_SINGLE_POST-LD4B_POST#7,MEMSIMD_SINGLE_POST-LD2H_POST#0,MEMSIMD_SINGLE_POST-LD2H_POST#1,MEMSIMD_SINGLE_POST-LD2H_POST#2,MEMSIMD_SINGLE_POST-LD2H_POST#3,MEMSIMD_SINGLE_POST-LD4H_POST#0,MEMSIMD_SINGLE_POST-LD4H_POST#1,MEMSIMD_SINGLE_POST-LD4H_POST#2,MEMSIMD_SINGLE_POST-LD4H_POST#3,MEMSIMD_SINGLE_POST-LD2S_POST#0,MEMSIMD_SINGLE_POST-LD2S_POST#1,MEMSIMD_SINGLE_POST-LD2D_POST#0,MEMSIMD_SINGLE_POST-LD4S_POST#0,MEMSIMD_SINGLE_POST-LD4S_POST#1,MEMSIMD_SINGLE_POST-LD4D_POST#0,MEMSIMD_REP_POST-LD2R_POST#0,MEMSIMD_REP_POST-LD4R_POST#0
pub const fn classify_impl_1b(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x1e18,
    0x1 => 0x1e18,
    0x2 => 0x1e18,
    0x3 => 0x1e18,
    0x4 => 0x1e18,
    0x5 => 0x1e18,
    0x6 => 0x1e18,
    0x7 => 0x1e18,
    0x8 => 0x1e19,
    0x9 => 0x1e19,
    0xa => 0x1e19,
    0xb => 0x1e19,
    0xc => 0x1e19,
    0xd => 0x1e19,
    0xe => 0x1e19,
    0xf => 0x1e19,
    0x10 => 0x1e1a,
    0x11 => 0x0,
    0x12 => 0x1e1a,
    0x13 => 0x0,
    0x14 => 0x1e1a,
    0x15 => 0x0,
    0x16 => 0x1e1a,
    0x17 => 0x0,
    0x18 => 0x1e1b,
    0x19 => 0x0,
    0x1a => 0x1e1b,
    0x1b => 0x0,
    0x1c => 0x1e1b,
    0x1d => 0x0,
    0x1e => 0x1e1b,
    0x1f => 0x0,
    0x20 => 0x1e1c,
    0x21 => 0x1e1d,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x1e1c,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x1e1e,
    0x29 => 0x1e1f,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x1e1e,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x1f02,
    0x31 => 0x1f02,
    0x32 => 0x1f02,
    0x33 => 0x1f02,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x1f03,
    0x39 => 0x1f03,
    0x3a => 0x1f03,
    0x3b => 0x1f03,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
pub const fn classify_impl_1c_1(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 11) & 0xf {
    0x0 => 0x2a00,
    0x1 => 0x0,
    0x2 => 0x2a01,
    0x3 => 0x2a80,
    0x4 => 0x2a02,
    0x5 => 0x2a81,
    0x6 => 0x2a03,
    0x7 => 0x2a82,
    0x8 => 0x2a04,
    0x9 => 0x0,
    0xa => 0x2a05,
    0xb => 0x2a83,
    0xc => 0x2a06,
    0xd => 0x2a84,
    0xe => 0x2a07,
    0xf => 0x2a85,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#0,DUP_VEC-DUP_GP#0,MOV_TOGP-SMOV#0,MOV_TOGP-UMOV#0,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
pub const fn classify_impl_1c_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x0,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x2981,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#1,DUP_VEC-DUP_GP#1,MOV_TOGP-SMOV#1,MOV_TOGP-UMOV#1,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
pub const fn classify_impl_1c_3(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x0,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x2981,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#2,DUP_VEC-DUP_GP#2,MOV_TOGP-SMOV#2,MOV_TOGP-UMOV#2,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
pub const fn classify_impl_1c_4(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x0,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x2981,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#3,DUP_VEC-DUP_GP#3,MOV_TOGP-UMOV#3,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
pub const fn classify_impl_1c_5(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x0,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x0,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x2981,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#4,DUP_VEC-DUP_GP#4,MOV_TOGP-SMOV#3,MOV_TOGP-UMOV#4,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
pub const fn classify_impl_1c_6(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x0,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x2981,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#5,DUP_VEC-DUP_GP#5,MOV_TOGP-SMOV#4,MOV_TOGP-UMOV#5,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
pub const fn classify_impl_1c_7(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x0,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x2981,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#6,DUP_VEC-DUP_GP#6,MOV_TOGP-SMOV#5,MOV_TOGP-UMOV#6,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
pub const fn classify_impl_1c_8(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x0,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x2981,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#7,DUP_VEC-DUP_GP#7,MOV_TOGP-SMOV#6,MOV_TOGP-UMOV#7,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
pub const fn classify_impl_1c_9(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x0,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x2981,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#8,DUP_VEC-DUP_GP#8,MOV_TOGP-SMOV#7,MOV_TOGP-UMOV#8,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
pub const fn classify_impl_1c_a(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x0,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x2981,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#9,DUP_VEC-DUP_GP#9,MOV_TOGP-SMOV#8,MOV_TOGP-UMOV#9,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
pub const fn classify_impl_1c_b(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x0,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x2981,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#10,DUP_VEC-DUP_GP#10,MOV_TOGP-UMOV#10,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
pub const fn classify_impl_1c_c(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x0,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x0,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x2981,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#11,DUP_VEC-DUP_GP#11,MOV_TOGP-SMOV#9,MOV_TOGP-UMOV#11,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
pub const fn classify_impl_1c_d(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x0,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x2981,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#12,DUP_VEC-DUP_GP#12,MOV_TOGP-SMOV#10,MOV_TOGP-UMOV#12,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
pub const fn classify_impl_1c_e(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x0,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x2981,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#13,DUP_VEC-DUP_GP#13,MOV_TOGP-SMOV#11,MOV_TOGP-UMOV#13,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
pub const fn classify_impl_1c_f(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x0,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x2981,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}

// DUP_VEC-DUP_ELEM#0,DUP_VEC-DUP_ELEM#1,DUP_VEC-DUP_ELEM#2,DUP_VEC-DUP_ELEM#3,DUP_VEC-DUP_ELEM#4,DUP_VEC-DUP_ELEM#5,DUP_VEC-DUP_ELEM#6,DUP_VEC-DUP_ELEM#7,DUP_VEC-DUP_ELEM#8,DUP_VEC-DUP_ELEM#9,DUP_VEC-DUP_ELEM#10,DUP_VEC-DUP_ELEM#11,DUP_VEC-DUP_ELEM#12,DUP_VEC-DUP_ELEM#13,DUP_VEC-DUP_GP#0,DUP_VEC-DUP_GP#1,DUP_VEC-DUP_GP#2,DUP_VEC-DUP_GP#3,DUP_VEC-DUP_GP#4,DUP_VEC-DUP_GP#5,DUP_VEC-DUP_GP#6,DUP_VEC-DUP_GP#7,DUP_VEC-DUP_GP#8,DUP_VEC-DUP_GP#9,DUP_VEC-DUP_GP#10,DUP_VEC-DUP_GP#11,DUP_VEC-DUP_GP#12,DUP_VEC-DUP_GP#13,MOV_TOGP-SMOV#0,MOV_TOGP-SMOV#1,MOV_TOGP-SMOV#2,MOV_TOGP-SMOV#3,MOV_TOGP-SMOV#4,MOV_TOGP-SMOV#5,MOV_TOGP-SMOV#6,MOV_TOGP-SMOV#7,MOV_TOGP-SMOV#8,MOV_TOGP-SMOV#9,MOV_TOGP-SMOV#10,MOV_TOGP-SMOV#11,MOV_TOGP-UMOV#0,MOV_TOGP-UMOV#1,MOV_TOGP-UMOV#2,MOV_TOGP-UMOV#3,MOV_TOGP-UMOV#4,MOV_TOGP-UMOV#5,MOV_TOGP-UMOV#6,MOV_TOGP-UMOV#7,MOV_TOGP-UMOV#8,MOV_TOGP-UMOV#9,MOV_TOGP-UMOV#10,MOV_TOGP-UMOV#11,MOV_TOGP-UMOV#12,MOV_TOGP-UMOV#13,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
pub const fn classify_impl_1c(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  let idx = match (inst >> 16) & 0xf {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x8,
    0x8 => 0x1,
    0x9 => 0x9,
    0xa => 0xa,
    0xb => 0xb,
    0xc => 0xc,
    0xd => 0xd,
    0xe => 0xe,
    0xf => 0xf,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_1c_1(inst), // TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
    0x2 => return classify_impl_1c_2(inst), // DUP_VEC-DUP_ELEM#0,DUP_VEC-DUP_GP#0,MOV_TOGP-SMOV#0,MOV_TOGP-UMOV#0,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
    0x3 => return classify_impl_1c_3(inst), // DUP_VEC-DUP_ELEM#1,DUP_VEC-DUP_GP#1,MOV_TOGP-SMOV#1,MOV_TOGP-UMOV#1,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
    0x4 => return classify_impl_1c_4(inst), // DUP_VEC-DUP_ELEM#2,DUP_VEC-DUP_GP#2,MOV_TOGP-SMOV#2,MOV_TOGP-UMOV#2,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
    0x5 => return classify_impl_1c_5(inst), // DUP_VEC-DUP_ELEM#3,DUP_VEC-DUP_GP#3,MOV_TOGP-UMOV#3,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
    0x6 => return classify_impl_1c_6(inst), // DUP_VEC-DUP_ELEM#4,DUP_VEC-DUP_GP#4,MOV_TOGP-SMOV#3,MOV_TOGP-UMOV#4,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
    0x7 => return classify_impl_1c_7(inst), // DUP_VEC-DUP_ELEM#5,DUP_VEC-DUP_GP#5,MOV_TOGP-SMOV#4,MOV_TOGP-UMOV#5,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
    0x8 => return classify_impl_1c_8(inst), // DUP_VEC-DUP_ELEM#6,DUP_VEC-DUP_GP#6,MOV_TOGP-SMOV#5,MOV_TOGP-UMOV#6,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
    0x9 => return classify_impl_1c_9(inst), // DUP_VEC-DUP_ELEM#7,DUP_VEC-DUP_GP#7,MOV_TOGP-SMOV#6,MOV_TOGP-UMOV#7,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
    0xa => return classify_impl_1c_a(inst), // DUP_VEC-DUP_ELEM#8,DUP_VEC-DUP_GP#8,MOV_TOGP-SMOV#7,MOV_TOGP-UMOV#8,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
    0xb => return classify_impl_1c_b(inst), // DUP_VEC-DUP_ELEM#9,DUP_VEC-DUP_GP#9,MOV_TOGP-SMOV#8,MOV_TOGP-UMOV#9,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
    0xc => return classify_impl_1c_c(inst), // DUP_VEC-DUP_ELEM#10,DUP_VEC-DUP_GP#10,MOV_TOGP-UMOV#10,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
    0xd => return classify_impl_1c_d(inst), // DUP_VEC-DUP_ELEM#11,DUP_VEC-DUP_GP#11,MOV_TOGP-SMOV#9,MOV_TOGP-UMOV#11,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
    0xe => return classify_impl_1c_e(inst), // DUP_VEC-DUP_ELEM#12,DUP_VEC-DUP_GP#12,MOV_TOGP-SMOV#10,MOV_TOGP-UMOV#12,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
    0xf => return classify_impl_1c_f(inst), // DUP_VEC-DUP_ELEM#13,DUP_VEC-DUP_GP#13,MOV_TOGP-SMOV#11,MOV_TOGP-UMOV#13,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
    _ => idx
  };
  return idx;
}


// REV_VEC-REV64_VEC#0
pub const fn classify_impl_1d_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3280;
}


// REV_VEC-REV16_VEC#0
pub const fn classify_impl_1d_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3281;
}


// ADDLP_VEC-SADDLP#0
pub const fn classify_impl_1d_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3100;
}


// ARITH1_VEC-SUQADD_VEC#0
pub const fn classify_impl_1d_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3080;
}


// CLZ_VEC-CLS_VEC#0
pub const fn classify_impl_1d_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3180;
}


// BIT_VEC-CNT_VEC#0
pub const fn classify_impl_1d_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3200;
}


// ADDLP_VEC-SADALP#0
pub const fn classify_impl_1d_7(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3101;
}


// ARITH1_VEC-SQABS_VEC#0
pub const fn classify_impl_1d_8(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3081;
}


// CMZERO_VEC-CMGT_ZERO_VEC#0
pub const fn classify_impl_1d_9(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f80;
}


// CMZERO_VEC-CMEQ_ZERO_VEC#0
pub const fn classify_impl_1d_a(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f81;
}


// CMZERO_VEC-CMLT_ZERO_VEC#0
pub const fn classify_impl_1d_b(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f82;
}


// ARITH1_VEC-ABS_VEC#0
pub const fn classify_impl_1d_c(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3082;
}


// XTN_VEC-XTN_VEC#0
pub const fn classify_impl_1d_d(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3380;
}


// XTN_VEC-SQXTN_VEC#0
pub const fn classify_impl_1d_e(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3381;
}


// FCVTN_VEC-FCVTN#0
pub const fn classify_impl_1d_f(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5180;
}


// FCVTL_VEC-FCVTL_VEC#0
pub const fn classify_impl_1d_10(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f80;
}


// FRINT_VEC-FRINTN_VEC#0
pub const fn classify_impl_1d_11(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5200;
}


// FRINT_VEC-FRINTM_VEC#0
pub const fn classify_impl_1d_12(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5201;
}


// FCVT_VEC-FCVTNS_VEC#0
pub const fn classify_impl_1d_13(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f00;
}


// FCVT_VEC-FCVTMS_VEC#0
pub const fn classify_impl_1d_14(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f01;
}


// FCVT_VEC-FCVTAS_VEC#0
pub const fn classify_impl_1d_15(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f02;
}


// FCVT_FROMINT_VEC-SCVTF_VEC#0
pub const fn classify_impl_1d_16(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5080;
}


// FRINTTS_VEC-FRINT32Z_VEC#0
pub const fn classify_impl_1d_17(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5280;
}


// FRINTTS_VEC-FRINT64Z_VEC#0
pub const fn classify_impl_1d_18(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5281;
}

// HADDSUB_VEC-SHADD#0,HADDSUB_VEC-SRHADD#0,HADDSUB_VEC-SHSUB#0,QADDSUB_VEC-SQADD#0,QADDSUB_VEC-SQSUB#0,CMGT_VEC-CMGTV#0,CMGT_VEC-CMGEV#0,CMEQ_VEC-CMTSTV#0,CMZERO_VEC-CMGT_ZERO_VEC#0,CMZERO_VEC-CMEQ_ZERO_VEC#0,CMZERO_VEC-CMLT_ZERO_VEC#0,ARITH1_VEC-SUQADD_VEC#0,ARITH1_VEC-SQABS_VEC#0,ARITH1_VEC-ABS_VEC#0,ADDLP_VEC-SADDLP#0,ADDLP_VEC-SADALP#0,CLZ_VEC-CLS_VEC#0,BIT_VEC-CNT_VEC#0,REV_VEC-REV64_VEC#0,REV_VEC-REV16_VEC#0,XTN_VEC-XTN_VEC#0,XTN_VEC-SQXTN_VEC#0,SHL_REG_VEC-SSHL#0,SHL_REG_VEC-SQSHL#0,SHL_REG_VEC-SRSHL#0,SHL_REG_VEC-SQRSHL#0,MINMAX_VEC-SMAX#0,MINMAX_VEC-SMIN#0,MINMAX_VEC-SMAXP#0,MINMAX_VEC-SMINP#0,ABD_VEC-SABD#0,ABD_VEC-SABA#0,ADDSUB_VEC-ADD_VEC#0,ADDP_VEC-ADDP#0,MUL_VEC-MLA_VEC#0,MUL_VEC-MUL_VEC#0,FMINMAX_VEC-FMAXNM_VEC#0,FMINMAX_VEC-FMAX_VEC#0,FCMP_REG_VEC-FCMEQ_VEC#0,FADDSUB_VEC-FADD_VEC#0,FRECP_STEP_VEC-FRECPSV#0,FMUL_VEC-FMULXV#0,FMLA_VEC-FMLAV#0,ANDOREOR_VEC-ANDV#0,ADDSUBL_VEC-SADDL#0,ADDSUBL_VEC-SSUBL#0,ADDSUBW_VEC-SADDW#0,ADDSUBW_VEC-SSUBW#0,ADDSUBHN_VEC-ADDHN#0,ADDSUBHN_VEC-SUBHN#0,ABDL_VEC-SABAL#0,ABDL_VEC-SABDL#0,MULL_VEC-SMLAL#0,MULL_VEC-SMLSL#0,MULL_VEC-SMULL#0,PMULL_VEC-PMULL#0,FCVT_VEC-FCVTNS_VEC#0,FCVT_VEC-FCVTMS_VEC#0,FCVT_VEC-FCVTAS_VEC#0,FCVTL_VEC-FCVTL_VEC#0,FCVT_FROMINT_VEC-SCVTF_VEC#0,FCVTN_VEC-FCVTN#0,FRINT_VEC-FRINTN_VEC#0,FRINT_VEC-FRINTM_VEC#0,FRINTTS_VEC-FRINT32Z_VEC#0,FRINTTS_VEC-FRINT64Z_VEC#0,FHM_VEC-FMLAL_VEC#0
pub const fn classify_impl_1d(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x4380,
    0x1 => 0x2b80,
    0x2 => 0x1,
    0x3 => 0x2c80,
    0x4 => 0x4400,
    0x5 => 0x2b81,
    0x6 => 0x2,
    0x7 => 0x4300,
    0x8 => 0x4381,
    0x9 => 0x2b82,
    0xa => 0x3,
    0xb => 0x2c81,
    0xc => 0x4401,
    0xd => 0x2d80,
    0xe => 0x4,
    0xf => 0x2d81,
    0x10 => 0x4480,
    0x11 => 0x3480,
    0x12 => 0x5,
    0x13 => 0x3481,
    0x14 => 0x4500,
    0x15 => 0x3482,
    0x16 => 0x6,
    0x17 => 0x3483,
    0x18 => 0x4481,
    0x19 => 0x3500,
    0x1a => 0x7,
    0x1b => 0x3501,
    0x1c => 0x4501,
    0x1d => 0x3580,
    0x1e => 0x8,
    0x1f => 0x3581,
    0x20 => 0x4580,
    0x21 => 0x3680,
    0x22 => 0x9,
    0x23 => 0x2e80,
    0x24 => 0x0,
    0x25 => 0x3780,
    0x26 => 0xa,
    0x27 => 0x3781,
    0x28 => 0x4581,
    0x29 => 0x3502,
    0x2a => 0xb,
    0x2b => 0x3503,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0xc,
    0x2f => 0x3700,
    0x30 => 0x4582,
    0x31 => 0x3900,
    0x32 => 0x0,
    0x33 => 0x4000,
    0x34 => 0x0,
    0x35 => 0x3c80,
    0x36 => 0x0,
    0x37 => 0x3f80,
    0x38 => 0x4700,
    0x39 => 0x3a80,
    0x3a => 0x0,
    0x3b => 0x5b00,
    0x3c => 0x0,
    0x3d => 0x3901,
    0x3e => 0x0,
    0x3f => 0x3e80,
    0x40 => 0x4380,
    0x41 => 0x2b80,
    0x42 => 0x0,
    0x43 => 0x2c80,
    0x44 => 0x4400,
    0x45 => 0x2b81,
    0x46 => 0x0,
    0x47 => 0x4300,
    0x48 => 0x4381,
    0x49 => 0x2b82,
    0x4a => 0xd,
    0x4b => 0x2c81,
    0x4c => 0x4401,
    0x4d => 0x2d80,
    0x4e => 0x0,
    0x4f => 0x2d81,
    0x50 => 0x4480,
    0x51 => 0x3480,
    0x52 => 0xe,
    0x53 => 0x3481,
    0x54 => 0x4500,
    0x55 => 0x3482,
    0x56 => 0x0,
    0x57 => 0x3483,
    0x58 => 0x4481,
    0x59 => 0x3500,
    0x5a => 0xf,
    0x5b => 0x3501,
    0x5c => 0x4501,
    0x5d => 0x3580,
    0x5e => 0x10,
    0x5f => 0x3581,
    0x60 => 0x4580,
    0x61 => 0x3680,
    0x62 => 0x11,
    0x63 => 0x2e80,
    0x64 => 0x0,
    0x65 => 0x3780,
    0x66 => 0x12,
    0x67 => 0x3781,
    0x68 => 0x4581,
    0x69 => 0x3502,
    0x6a => 0x13,
    0x6b => 0x3503,
    0x6c => 0x0,
    0x6d => 0x0,
    0x6e => 0x14,
    0x6f => 0x3700,
    0x70 => 0x4582,
    0x71 => 0x3900,
    0x72 => 0x15,
    0x73 => 0x4000,
    0x74 => 0x0,
    0x75 => 0x3c80,
    0x76 => 0x16,
    0x77 => 0x3f80,
    0x78 => 0x4700,
    0x79 => 0x3a80,
    0x7a => 0x17,
    0x7b => 0x5b00,
    0x7c => 0x0,
    0x7d => 0x3901,
    0x7e => 0x18,
    0x7f => 0x3e80,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_1d_1(inst), // REV_VEC-REV64_VEC#0
    0x2 => return classify_impl_1d_2(inst), // REV_VEC-REV16_VEC#0
    0x3 => return classify_impl_1d_3(inst), // ADDLP_VEC-SADDLP#0
    0x4 => return classify_impl_1d_4(inst), // ARITH1_VEC-SUQADD_VEC#0
    0x5 => return classify_impl_1d_5(inst), // CLZ_VEC-CLS_VEC#0
    0x6 => return classify_impl_1d_6(inst), // BIT_VEC-CNT_VEC#0
    0x7 => return classify_impl_1d_7(inst), // ADDLP_VEC-SADALP#0
    0x8 => return classify_impl_1d_8(inst), // ARITH1_VEC-SQABS_VEC#0
    0x9 => return classify_impl_1d_9(inst), // CMZERO_VEC-CMGT_ZERO_VEC#0
    0xa => return classify_impl_1d_a(inst), // CMZERO_VEC-CMEQ_ZERO_VEC#0
    0xb => return classify_impl_1d_b(inst), // CMZERO_VEC-CMLT_ZERO_VEC#0
    0xc => return classify_impl_1d_c(inst), // ARITH1_VEC-ABS_VEC#0
    0xd => return classify_impl_1d_d(inst), // XTN_VEC-XTN_VEC#0
    0xe => return classify_impl_1d_e(inst), // XTN_VEC-SQXTN_VEC#0
    0xf => return classify_impl_1d_f(inst), // FCVTN_VEC-FCVTN#0
    0x10 => return classify_impl_1d_10(inst), // FCVTL_VEC-FCVTL_VEC#0
    0x11 => return classify_impl_1d_11(inst), // FRINT_VEC-FRINTN_VEC#0
    0x12 => return classify_impl_1d_12(inst), // FRINT_VEC-FRINTM_VEC#0
    0x13 => return classify_impl_1d_13(inst), // FCVT_VEC-FCVTNS_VEC#0
    0x14 => return classify_impl_1d_14(inst), // FCVT_VEC-FCVTMS_VEC#0
    0x15 => return classify_impl_1d_15(inst), // FCVT_VEC-FCVTAS_VEC#0
    0x16 => return classify_impl_1d_16(inst), // FCVT_FROMINT_VEC-SCVTF_VEC#0
    0x17 => return classify_impl_1d_17(inst), // FRINTTS_VEC-FRINT32Z_VEC#0
    0x18 => return classify_impl_1d_18(inst), // FRINTTS_VEC-FRINT64Z_VEC#0
    _ => idx
  };
  return idx;
}


// INT_HORZ_VEC-SADDLV#0
pub const fn classify_impl_1e_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5380;
}


// INT_HORZ_VEC-SMAXV#0
pub const fn classify_impl_1e_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5381;
}


// FP_HORZ_VEC-FMAXNMV_FP16#0
pub const fn classify_impl_1e_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5480;
}


// FP_HORZ_VEC-FMAXV_FP16#0
pub const fn classify_impl_1e_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5481;
}


// INT_HORZ_VEC-SMINV#0
pub const fn classify_impl_1e_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5382;
}


// INT_HORZ_VEC-ADDV#0
pub const fn classify_impl_1e_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5383;
}

// HADDSUB_VEC-SHADD#0,HADDSUB_VEC-SRHADD#0,HADDSUB_VEC-SHSUB#0,QADDSUB_VEC-SQADD#0,QADDSUB_VEC-SQSUB#0,CMGT_VEC-CMGTV#0,CMGT_VEC-CMGEV#0,CMEQ_VEC-CMTSTV#0,SHL_REG_VEC-SSHL#0,SHL_REG_VEC-SQSHL#0,SHL_REG_VEC-SRSHL#0,SHL_REG_VEC-SQRSHL#0,MINMAX_VEC-SMAX#0,MINMAX_VEC-SMIN#0,MINMAX_VEC-SMAXP#0,MINMAX_VEC-SMINP#0,ABD_VEC-SABD#0,ABD_VEC-SABA#0,ADDSUB_VEC-ADD_VEC#0,ADDP_VEC-ADDP#0,MUL_VEC-MLA_VEC#0,MUL_VEC-MUL_VEC#0,FMINMAX_VEC-FMAXNM_VEC#0,FMINMAX_VEC-FMAX_VEC#0,FCMP_REG_VEC-FCMEQ_VEC#0,FADDSUB_VEC-FADD_VEC#0,FRECP_STEP_VEC-FRECPSV#0,FMUL_VEC-FMULXV#0,FMLA_VEC-FMLAV#0,ANDOREOR_VEC-ANDV#0,ADDSUBL_VEC-SADDL#0,ADDSUBL_VEC-SSUBL#0,ADDSUBW_VEC-SADDW#0,ADDSUBW_VEC-SSUBW#0,ADDSUBHN_VEC-ADDHN#0,ADDSUBHN_VEC-SUBHN#0,ABDL_VEC-SABAL#0,ABDL_VEC-SABDL#0,MULL_VEC-SMLAL#0,MULL_VEC-SMLSL#0,MULL_VEC-SMULL#0,PMULL_VEC-PMULL#0,INT_HORZ_VEC-SADDLV#0,INT_HORZ_VEC-SMAXV#0,INT_HORZ_VEC-SMINV#0,INT_HORZ_VEC-ADDV#0,FP_HORZ_VEC-FMAXNMV_FP16#0,FP_HORZ_VEC-FMAXV_FP16#0,FHM_VEC-FMLAL_VEC#0
pub const fn classify_impl_1e(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x4380,
    0x1 => 0x2b80,
    0x2 => 0x0,
    0x3 => 0x2c80,
    0x4 => 0x4400,
    0x5 => 0x2b81,
    0x6 => 0x0,
    0x7 => 0x4300,
    0x8 => 0x4381,
    0x9 => 0x2b82,
    0xa => 0x0,
    0xb => 0x2c81,
    0xc => 0x4401,
    0xd => 0x2d80,
    0xe => 0x1,
    0xf => 0x2d81,
    0x10 => 0x4480,
    0x11 => 0x3480,
    0x12 => 0x0,
    0x13 => 0x3481,
    0x14 => 0x4500,
    0x15 => 0x3482,
    0x16 => 0x0,
    0x17 => 0x3483,
    0x18 => 0x4481,
    0x19 => 0x3500,
    0x1a => 0x0,
    0x1b => 0x3501,
    0x1c => 0x4501,
    0x1d => 0x3580,
    0x1e => 0x0,
    0x1f => 0x3581,
    0x20 => 0x4580,
    0x21 => 0x3680,
    0x22 => 0x0,
    0x23 => 0x2e80,
    0x24 => 0x0,
    0x25 => 0x3780,
    0x26 => 0x0,
    0x27 => 0x3781,
    0x28 => 0x4581,
    0x29 => 0x3502,
    0x2a => 0x2,
    0x2b => 0x3503,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x3700,
    0x30 => 0x4582,
    0x31 => 0x3900,
    0x32 => 0x3,
    0x33 => 0x4000,
    0x34 => 0x0,
    0x35 => 0x3c80,
    0x36 => 0x0,
    0x37 => 0x3f80,
    0x38 => 0x4700,
    0x39 => 0x3a80,
    0x3a => 0x0,
    0x3b => 0x5b00,
    0x3c => 0x0,
    0x3d => 0x3901,
    0x3e => 0x4,
    0x3f => 0x3e80,
    0x40 => 0x4380,
    0x41 => 0x2b80,
    0x42 => 0x0,
    0x43 => 0x2c80,
    0x44 => 0x4400,
    0x45 => 0x2b81,
    0x46 => 0x0,
    0x47 => 0x4300,
    0x48 => 0x4381,
    0x49 => 0x2b82,
    0x4a => 0x0,
    0x4b => 0x2c81,
    0x4c => 0x4401,
    0x4d => 0x2d80,
    0x4e => 0x0,
    0x4f => 0x2d81,
    0x50 => 0x4480,
    0x51 => 0x3480,
    0x52 => 0x0,
    0x53 => 0x3481,
    0x54 => 0x4500,
    0x55 => 0x3482,
    0x56 => 0x0,
    0x57 => 0x3483,
    0x58 => 0x4481,
    0x59 => 0x3500,
    0x5a => 0x0,
    0x5b => 0x3501,
    0x5c => 0x4501,
    0x5d => 0x3580,
    0x5e => 0x0,
    0x5f => 0x3581,
    0x60 => 0x4580,
    0x61 => 0x3680,
    0x62 => 0x0,
    0x63 => 0x2e80,
    0x64 => 0x0,
    0x65 => 0x3780,
    0x66 => 0x0,
    0x67 => 0x3781,
    0x68 => 0x4581,
    0x69 => 0x3502,
    0x6a => 0x5,
    0x6b => 0x3503,
    0x6c => 0x0,
    0x6d => 0x0,
    0x6e => 0x6,
    0x6f => 0x3700,
    0x70 => 0x4582,
    0x71 => 0x3900,
    0x72 => 0x0,
    0x73 => 0x4000,
    0x74 => 0x0,
    0x75 => 0x3c80,
    0x76 => 0x0,
    0x77 => 0x3f80,
    0x78 => 0x4700,
    0x79 => 0x3a80,
    0x7a => 0x0,
    0x7b => 0x5b00,
    0x7c => 0x0,
    0x7d => 0x3901,
    0x7e => 0x0,
    0x7f => 0x3e80,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_1e_1(inst), // INT_HORZ_VEC-SADDLV#0
    0x2 => return classify_impl_1e_2(inst), // INT_HORZ_VEC-SMAXV#0
    0x3 => return classify_impl_1e_3(inst), // FP_HORZ_VEC-FMAXNMV_FP16#0
    0x4 => return classify_impl_1e_4(inst), // FP_HORZ_VEC-FMAXV_FP16#0
    0x5 => return classify_impl_1e_5(inst), // INT_HORZ_VEC-SMINV#0
    0x6 => return classify_impl_1e_6(inst), // INT_HORZ_VEC-ADDV#0
    _ => idx
  };
  return idx;
}


// ZIP-UZP1#1,ZIP-TRN1#1,ZIP-ZIP1#1,ZIP-UZP2#1,ZIP-TRN2#1,ZIP-ZIP2#1,FP16_3REG_VEC-FMAXNM_VEC_FP16#0,FP16_3REG_VEC-FMLA_VEC_FP16#0,FP16_3REG_VEC-FADD_VEC_FP16#0,FP16_3REG_VEC-FMULX_VEC_FP16#0,FP16_3REG_VEC-FCMEQ_VEC_FP16#0,FP16_3REG_VEC-FMAX_VEC_FP16#0,FP16_3REG_VEC-FRECPS_VEC_FP16#0
pub const fn classify_impl_1f(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x0,
    0x1 => 0x4180,
    0x2 => 0x0,
    0x3 => 0x4181,
    0x4 => 0x0,
    0x5 => 0x4182,
    0x6 => 0x2a80,
    0x7 => 0x4183,
    0x8 => 0x0,
    0x9 => 0x4184,
    0xa => 0x2a81,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4185,
    0xe => 0x2a82,
    0xf => 0x4186,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// REV_VEC-REV64_VEC#1
pub const fn classify_impl_20_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3280;
}


// ADDLP_VEC-SADDLP#1
pub const fn classify_impl_20_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3100;
}


// ARITH1_VEC-SUQADD_VEC#1
pub const fn classify_impl_20_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3080;
}


// CLZ_VEC-CLS_VEC#1
pub const fn classify_impl_20_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3180;
}


// ADDLP_VEC-SADALP#1
pub const fn classify_impl_20_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3101;
}


// ARITH1_VEC-SQABS_VEC#1
pub const fn classify_impl_20_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3081;
}


// CMZERO_VEC-CMGT_ZERO_VEC#1
pub const fn classify_impl_20_7(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f80;
}


// CMZERO_VEC-CMEQ_ZERO_VEC#1
pub const fn classify_impl_20_8(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f81;
}


// CMZERO_VEC-CMLT_ZERO_VEC#1
pub const fn classify_impl_20_9(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f82;
}


// ARITH1_VEC-ABS_VEC#1
pub const fn classify_impl_20_a(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3082;
}


// XTN_VEC-XTN_VEC#1
pub const fn classify_impl_20_b(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3380;
}


// XTN_VEC-SQXTN_VEC#1
pub const fn classify_impl_20_c(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3381;
}


// FCVTN_VEC-FCVTN#1
pub const fn classify_impl_20_d(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5180;
}


// FCVTL_VEC-FCVTL_VEC#0
pub const fn classify_impl_20_e(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f80;
}

// HADDSUB_VEC-SHADD#1,HADDSUB_VEC-SRHADD#1,HADDSUB_VEC-SHSUB#1,QADDSUB_VEC-SQADD#1,QADDSUB_VEC-SQSUB#1,CMGT_VEC-CMGTV#1,CMGT_VEC-CMGEV#1,CMEQ_VEC-CMTSTV#1,CMZERO_VEC-CMGT_ZERO_VEC#1,CMZERO_VEC-CMEQ_ZERO_VEC#1,CMZERO_VEC-CMLT_ZERO_VEC#1,ARITH1_VEC-SUQADD_VEC#1,ARITH1_VEC-SQABS_VEC#1,ARITH1_VEC-ABS_VEC#1,ADDLP_VEC-SADDLP#1,ADDLP_VEC-SADALP#1,CLZ_VEC-CLS_VEC#1,REV_VEC-REV64_VEC#1,XTN_VEC-XTN_VEC#1,XTN_VEC-SQXTN_VEC#1,SHL_REG_VEC-SSHL#1,SHL_REG_VEC-SQSHL#1,SHL_REG_VEC-SRSHL#1,SHL_REG_VEC-SQRSHL#1,MINMAX_VEC-SMAX#1,MINMAX_VEC-SMIN#1,MINMAX_VEC-SMAXP#1,MINMAX_VEC-SMINP#1,ABD_VEC-SABD#1,ABD_VEC-SABA#1,ADDSUB_VEC-ADD_VEC#1,ADDP_VEC-ADDP#1,MUL_VEC-MLA_VEC#1,MUL_VEC-MUL_VEC#1,SQDMULH_VEC-SQDMULH#0,ANDOREOR_VEC-BICV#0,ADDSUBL_VEC-SADDL#1,ADDSUBL_VEC-SSUBL#1,ADDSUBW_VEC-SADDW#1,ADDSUBW_VEC-SSUBW#1,ADDSUBHN_VEC-ADDHN#1,ADDSUBHN_VEC-SUBHN#1,ABDL_VEC-SABAL#1,ABDL_VEC-SABDL#1,MULL_VEC-SMLAL#1,MULL_VEC-SMLSL#1,MULL_VEC-SMULL#1,SQDMULL_VEC-SQDMLAL#0,SQDMULL_VEC-SQDMLSL#0,SQDMULL_VEC-SQDMULL#0,FCVTL_VEC-FCVTL_VEC#0,FCVTN_VEC-FCVTN#1
pub const fn classify_impl_20(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x4380,
    0x1 => 0x2b80,
    0x2 => 0x1,
    0x3 => 0x2c80,
    0x4 => 0x4400,
    0x5 => 0x2b81,
    0x6 => 0x0,
    0x7 => 0x4301,
    0x8 => 0x4381,
    0x9 => 0x2b82,
    0xa => 0x2,
    0xb => 0x2c81,
    0xc => 0x4401,
    0xd => 0x2d80,
    0xe => 0x3,
    0xf => 0x2d81,
    0x10 => 0x4480,
    0x11 => 0x3480,
    0x12 => 0x4,
    0x13 => 0x3481,
    0x14 => 0x4500,
    0x15 => 0x3482,
    0x16 => 0x0,
    0x17 => 0x3483,
    0x18 => 0x4481,
    0x19 => 0x3500,
    0x1a => 0x5,
    0x1b => 0x3501,
    0x1c => 0x4501,
    0x1d => 0x3580,
    0x1e => 0x6,
    0x1f => 0x3581,
    0x20 => 0x4580,
    0x21 => 0x3680,
    0x22 => 0x7,
    0x23 => 0x2e80,
    0x24 => 0x4680,
    0x25 => 0x3780,
    0x26 => 0x8,
    0x27 => 0x3781,
    0x28 => 0x4581,
    0x29 => 0x3502,
    0x2a => 0x9,
    0x2b => 0x3503,
    0x2c => 0x4681,
    0x2d => 0x3880,
    0x2e => 0xa,
    0x2f => 0x3700,
    0x30 => 0x4582,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x4682,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    0x40 => 0x4380,
    0x41 => 0x2b80,
    0x42 => 0x0,
    0x43 => 0x2c80,
    0x44 => 0x4400,
    0x45 => 0x2b81,
    0x46 => 0x0,
    0x47 => 0x4301,
    0x48 => 0x4381,
    0x49 => 0x2b82,
    0x4a => 0xb,
    0x4b => 0x2c81,
    0x4c => 0x4401,
    0x4d => 0x2d80,
    0x4e => 0x0,
    0x4f => 0x2d81,
    0x50 => 0x4480,
    0x51 => 0x3480,
    0x52 => 0xc,
    0x53 => 0x3481,
    0x54 => 0x4500,
    0x55 => 0x3482,
    0x56 => 0x0,
    0x57 => 0x3483,
    0x58 => 0x4481,
    0x59 => 0x3500,
    0x5a => 0xd,
    0x5b => 0x3501,
    0x5c => 0x4501,
    0x5d => 0x3580,
    0x5e => 0xe,
    0x5f => 0x3581,
    0x60 => 0x4580,
    0x61 => 0x3680,
    0x62 => 0x0,
    0x63 => 0x2e80,
    0x64 => 0x4680,
    0x65 => 0x3780,
    0x66 => 0x0,
    0x67 => 0x3781,
    0x68 => 0x4581,
    0x69 => 0x3502,
    0x6a => 0x0,
    0x6b => 0x3503,
    0x6c => 0x4681,
    0x6d => 0x3880,
    0x6e => 0x0,
    0x6f => 0x3700,
    0x70 => 0x4582,
    0x71 => 0x0,
    0x72 => 0x0,
    0x73 => 0x0,
    0x74 => 0x4682,
    0x75 => 0x0,
    0x76 => 0x0,
    0x77 => 0x0,
    0x78 => 0x0,
    0x79 => 0x0,
    0x7a => 0x0,
    0x7b => 0x0,
    0x7c => 0x0,
    0x7d => 0x0,
    0x7e => 0x0,
    0x7f => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_20_1(inst), // REV_VEC-REV64_VEC#1
    0x2 => return classify_impl_20_2(inst), // ADDLP_VEC-SADDLP#1
    0x3 => return classify_impl_20_3(inst), // ARITH1_VEC-SUQADD_VEC#1
    0x4 => return classify_impl_20_4(inst), // CLZ_VEC-CLS_VEC#1
    0x5 => return classify_impl_20_5(inst), // ADDLP_VEC-SADALP#1
    0x6 => return classify_impl_20_6(inst), // ARITH1_VEC-SQABS_VEC#1
    0x7 => return classify_impl_20_7(inst), // CMZERO_VEC-CMGT_ZERO_VEC#1
    0x8 => return classify_impl_20_8(inst), // CMZERO_VEC-CMEQ_ZERO_VEC#1
    0x9 => return classify_impl_20_9(inst), // CMZERO_VEC-CMLT_ZERO_VEC#1
    0xa => return classify_impl_20_a(inst), // ARITH1_VEC-ABS_VEC#1
    0xb => return classify_impl_20_b(inst), // XTN_VEC-XTN_VEC#1
    0xc => return classify_impl_20_c(inst), // XTN_VEC-SQXTN_VEC#1
    0xd => return classify_impl_20_d(inst), // FCVTN_VEC-FCVTN#1
    0xe => return classify_impl_20_e(inst), // FCVTL_VEC-FCVTL_VEC#0
    _ => idx
  };
  return idx;
}


// INT_HORZ_VEC-SADDLV#1
pub const fn classify_impl_21_1_1(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x5380;
}


// INT_HORZ_VEC-SMAXV#1
pub const fn classify_impl_21_1_2(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x5381;
}


// INT_HORZ_VEC-SMINV#1
pub const fn classify_impl_21_1_3(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x5382;
}


// INT_HORZ_VEC-ADDV#1
pub const fn classify_impl_21_1_4(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x5383;
}

// HADDSUB_VEC-SHADD#1,HADDSUB_VEC-SRHADD#1,HADDSUB_VEC-SHSUB#1,QADDSUB_VEC-SQADD#1,QADDSUB_VEC-SQSUB#1,CMGT_VEC-CMGTV#1,CMGT_VEC-CMGEV#1,CMEQ_VEC-CMTSTV#1,SHL_REG_VEC-SSHL#1,SHL_REG_VEC-SQSHL#1,SHL_REG_VEC-SRSHL#1,SHL_REG_VEC-SQRSHL#1,MINMAX_VEC-SMAX#1,MINMAX_VEC-SMIN#1,MINMAX_VEC-SMAXP#1,MINMAX_VEC-SMINP#1,ABD_VEC-SABD#1,ABD_VEC-SABA#1,ADDSUB_VEC-ADD_VEC#1,ADDP_VEC-ADDP#1,MUL_VEC-MLA_VEC#1,MUL_VEC-MUL_VEC#1,SQDMULH_VEC-SQDMULH#0,ANDOREOR_VEC-BICV#0,ADDSUBL_VEC-SADDL#1,ADDSUBL_VEC-SSUBL#1,ADDSUBW_VEC-SADDW#1,ADDSUBW_VEC-SSUBW#1,ADDSUBHN_VEC-ADDHN#1,ADDSUBHN_VEC-SUBHN#1,ABDL_VEC-SABAL#1,ABDL_VEC-SABDL#1,MULL_VEC-SMLAL#1,MULL_VEC-SMLSL#1,MULL_VEC-SMULL#1,SQDMULL_VEC-SQDMLAL#0,SQDMULL_VEC-SQDMLSL#0,SQDMULL_VEC-SQDMULL#0,INT_HORZ_VEC-SADDLV#1,INT_HORZ_VEC-SMAXV#1,INT_HORZ_VEC-SMINV#1,INT_HORZ_VEC-ADDV#1
pub const fn classify_impl_21_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x4380,
    0x1 => 0x2b80,
    0x2 => 0x0,
    0x3 => 0x2c80,
    0x4 => 0x4400,
    0x5 => 0x2b81,
    0x6 => 0x0,
    0x7 => 0x4301,
    0x8 => 0x4381,
    0x9 => 0x2b82,
    0xa => 0x0,
    0xb => 0x2c81,
    0xc => 0x4401,
    0xd => 0x2d80,
    0xe => 0x1,
    0xf => 0x2d81,
    0x10 => 0x4480,
    0x11 => 0x3480,
    0x12 => 0x0,
    0x13 => 0x3481,
    0x14 => 0x4500,
    0x15 => 0x3482,
    0x16 => 0x0,
    0x17 => 0x3483,
    0x18 => 0x4481,
    0x19 => 0x3500,
    0x1a => 0x0,
    0x1b => 0x3501,
    0x1c => 0x4501,
    0x1d => 0x3580,
    0x1e => 0x0,
    0x1f => 0x3581,
    0x20 => 0x4580,
    0x21 => 0x3680,
    0x22 => 0x0,
    0x23 => 0x2e80,
    0x24 => 0x4680,
    0x25 => 0x3780,
    0x26 => 0x0,
    0x27 => 0x3781,
    0x28 => 0x4581,
    0x29 => 0x3502,
    0x2a => 0x2,
    0x2b => 0x3503,
    0x2c => 0x4681,
    0x2d => 0x3880,
    0x2e => 0x0,
    0x2f => 0x3700,
    0x30 => 0x4582,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x4682,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    0x40 => 0x4380,
    0x41 => 0x2b80,
    0x42 => 0x0,
    0x43 => 0x2c80,
    0x44 => 0x4400,
    0x45 => 0x2b81,
    0x46 => 0x0,
    0x47 => 0x4301,
    0x48 => 0x4381,
    0x49 => 0x2b82,
    0x4a => 0x0,
    0x4b => 0x2c81,
    0x4c => 0x4401,
    0x4d => 0x2d80,
    0x4e => 0x0,
    0x4f => 0x2d81,
    0x50 => 0x4480,
    0x51 => 0x3480,
    0x52 => 0x0,
    0x53 => 0x3481,
    0x54 => 0x4500,
    0x55 => 0x3482,
    0x56 => 0x0,
    0x57 => 0x3483,
    0x58 => 0x4481,
    0x59 => 0x3500,
    0x5a => 0x0,
    0x5b => 0x3501,
    0x5c => 0x4501,
    0x5d => 0x3580,
    0x5e => 0x0,
    0x5f => 0x3581,
    0x60 => 0x4580,
    0x61 => 0x3680,
    0x62 => 0x0,
    0x63 => 0x2e80,
    0x64 => 0x4680,
    0x65 => 0x3780,
    0x66 => 0x0,
    0x67 => 0x3781,
    0x68 => 0x4581,
    0x69 => 0x3502,
    0x6a => 0x3,
    0x6b => 0x3503,
    0x6c => 0x4681,
    0x6d => 0x3880,
    0x6e => 0x4,
    0x6f => 0x3700,
    0x70 => 0x4582,
    0x71 => 0x0,
    0x72 => 0x0,
    0x73 => 0x0,
    0x74 => 0x4682,
    0x75 => 0x0,
    0x76 => 0x0,
    0x77 => 0x0,
    0x78 => 0x0,
    0x79 => 0x0,
    0x7a => 0x0,
    0x7b => 0x0,
    0x7c => 0x0,
    0x7d => 0x0,
    0x7e => 0x0,
    0x7f => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_21_1_1(inst), // INT_HORZ_VEC-SADDLV#1
    0x2 => return classify_impl_21_1_2(inst), // INT_HORZ_VEC-SMAXV#1
    0x3 => return classify_impl_21_1_3(inst), // INT_HORZ_VEC-SMINV#1
    0x4 => return classify_impl_21_1_4(inst), // INT_HORZ_VEC-ADDV#1
    _ => idx
  };
  return idx;
}


// FP16_2REG_VEC-FRINTN_VEC_FP16#0
pub const fn classify_impl_21_2_1(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x4280;
}


// FP16_2REG_VEC-FRINTM_VEC_FP16#0
pub const fn classify_impl_21_2_2(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x4281;
}


// FP16_2REG_VEC-FCVTNS_VEC_FP16#0
pub const fn classify_impl_21_2_3(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x4282;
}


// FP16_2REG_VEC-FCVTMS_VEC_FP16#0
pub const fn classify_impl_21_2_4(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x4283;
}


// FP16_2REG_VEC-FCVTAS_VEC_FP16#0
pub const fn classify_impl_21_2_5(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x4284;
}


// FP16_2REG_VEC-SCVTF_VEC_FP16#0
pub const fn classify_impl_21_2_6(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x4285;
}

// HADDSUB_VEC-SHADD#1,HADDSUB_VEC-SRHADD#1,HADDSUB_VEC-SHSUB#1,QADDSUB_VEC-SQADD#1,QADDSUB_VEC-SQSUB#1,CMGT_VEC-CMGTV#1,CMGT_VEC-CMGEV#1,CMEQ_VEC-CMTSTV#1,SHL_REG_VEC-SSHL#1,SHL_REG_VEC-SQSHL#1,SHL_REG_VEC-SRSHL#1,SHL_REG_VEC-SQRSHL#1,MINMAX_VEC-SMAX#1,MINMAX_VEC-SMIN#1,MINMAX_VEC-SMAXP#1,MINMAX_VEC-SMINP#1,ABD_VEC-SABD#1,ABD_VEC-SABA#1,ADDSUB_VEC-ADD_VEC#1,ADDP_VEC-ADDP#1,MUL_VEC-MLA_VEC#1,MUL_VEC-MUL_VEC#1,SQDMULH_VEC-SQDMULH#0,FP16_2REG_VEC-FRINTN_VEC_FP16#0,FP16_2REG_VEC-FRINTM_VEC_FP16#0,FP16_2REG_VEC-FCVTNS_VEC_FP16#0,FP16_2REG_VEC-FCVTMS_VEC_FP16#0,FP16_2REG_VEC-FCVTAS_VEC_FP16#0,FP16_2REG_VEC-SCVTF_VEC_FP16#0,ANDOREOR_VEC-BICV#0,ADDSUBL_VEC-SADDL#1,ADDSUBL_VEC-SSUBL#1,ADDSUBW_VEC-SADDW#1,ADDSUBW_VEC-SSUBW#1,ADDSUBHN_VEC-ADDHN#1,ADDSUBHN_VEC-SUBHN#1,ABDL_VEC-SABAL#1,ABDL_VEC-SABDL#1,MULL_VEC-SMLAL#1,MULL_VEC-SMLSL#1,MULL_VEC-SMULL#1,SQDMULL_VEC-SQDMLAL#0,SQDMULL_VEC-SQDMLSL#0,SQDMULL_VEC-SQDMULL#0
pub const fn classify_impl_21_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x4380,
    0x1 => 0x2b80,
    0x2 => 0x0,
    0x3 => 0x2c80,
    0x4 => 0x4400,
    0x5 => 0x2b81,
    0x6 => 0x0,
    0x7 => 0x4301,
    0x8 => 0x4381,
    0x9 => 0x2b82,
    0xa => 0x0,
    0xb => 0x2c81,
    0xc => 0x4401,
    0xd => 0x2d80,
    0xe => 0x0,
    0xf => 0x2d81,
    0x10 => 0x4480,
    0x11 => 0x3480,
    0x12 => 0x0,
    0x13 => 0x3481,
    0x14 => 0x4500,
    0x15 => 0x3482,
    0x16 => 0x0,
    0x17 => 0x3483,
    0x18 => 0x4481,
    0x19 => 0x3500,
    0x1a => 0x0,
    0x1b => 0x3501,
    0x1c => 0x4501,
    0x1d => 0x3580,
    0x1e => 0x0,
    0x1f => 0x3581,
    0x20 => 0x4580,
    0x21 => 0x3680,
    0x22 => 0x1,
    0x23 => 0x2e80,
    0x24 => 0x4680,
    0x25 => 0x3780,
    0x26 => 0x2,
    0x27 => 0x3781,
    0x28 => 0x4581,
    0x29 => 0x3502,
    0x2a => 0x3,
    0x2b => 0x3503,
    0x2c => 0x4681,
    0x2d => 0x3880,
    0x2e => 0x4,
    0x2f => 0x3700,
    0x30 => 0x4582,
    0x31 => 0x0,
    0x32 => 0x5,
    0x33 => 0x0,
    0x34 => 0x4682,
    0x35 => 0x0,
    0x36 => 0x6,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_21_2_1(inst), // FP16_2REG_VEC-FRINTN_VEC_FP16#0
    0x2 => return classify_impl_21_2_2(inst), // FP16_2REG_VEC-FRINTM_VEC_FP16#0
    0x3 => return classify_impl_21_2_3(inst), // FP16_2REG_VEC-FCVTNS_VEC_FP16#0
    0x4 => return classify_impl_21_2_4(inst), // FP16_2REG_VEC-FCVTMS_VEC_FP16#0
    0x5 => return classify_impl_21_2_5(inst), // FP16_2REG_VEC-FCVTAS_VEC_FP16#0
    0x6 => return classify_impl_21_2_6(inst), // FP16_2REG_VEC-SCVTF_VEC_FP16#0
    _ => idx
  };
  return idx;
}

// HADDSUB_VEC-SHADD#1,HADDSUB_VEC-SRHADD#1,HADDSUB_VEC-SHSUB#1,QADDSUB_VEC-SQADD#1,QADDSUB_VEC-SQSUB#1,CMGT_VEC-CMGTV#1,CMGT_VEC-CMGEV#1,CMEQ_VEC-CMTSTV#1,SHL_REG_VEC-SSHL#1,SHL_REG_VEC-SQSHL#1,SHL_REG_VEC-SRSHL#1,SHL_REG_VEC-SQRSHL#1,MINMAX_VEC-SMAX#1,MINMAX_VEC-SMIN#1,MINMAX_VEC-SMAXP#1,MINMAX_VEC-SMINP#1,ABD_VEC-SABD#1,ABD_VEC-SABA#1,ADDSUB_VEC-ADD_VEC#1,ADDP_VEC-ADDP#1,MUL_VEC-MLA_VEC#1,MUL_VEC-MUL_VEC#1,SQDMULH_VEC-SQDMULH#0,FP16_2REG_VEC-FRINTN_VEC_FP16#0,FP16_2REG_VEC-FRINTM_VEC_FP16#0,FP16_2REG_VEC-FCVTNS_VEC_FP16#0,FP16_2REG_VEC-FCVTMS_VEC_FP16#0,FP16_2REG_VEC-FCVTAS_VEC_FP16#0,FP16_2REG_VEC-SCVTF_VEC_FP16#0,ANDOREOR_VEC-BICV#0,ADDSUBL_VEC-SADDL#1,ADDSUBL_VEC-SSUBL#1,ADDSUBW_VEC-SADDW#1,ADDSUBW_VEC-SSUBW#1,ADDSUBHN_VEC-ADDHN#1,ADDSUBHN_VEC-SUBHN#1,ABDL_VEC-SABAL#1,ABDL_VEC-SABDL#1,MULL_VEC-SMLAL#1,MULL_VEC-SMLSL#1,MULL_VEC-SMULL#1,SQDMULL_VEC-SQDMLAL#0,SQDMULL_VEC-SQDMLSL#0,SQDMULL_VEC-SQDMULL#0,INT_HORZ_VEC-SADDLV#1,INT_HORZ_VEC-SMAXV#1,INT_HORZ_VEC-SMINV#1,INT_HORZ_VEC-ADDV#1
pub const fn classify_impl_21(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_21_1(inst), // HADDSUB_VEC-SHADD#1,HADDSUB_VEC-SRHADD#1,HADDSUB_VEC-SHSUB#1,QADDSUB_VEC-SQADD#1,QADDSUB_VEC-SQSUB#1,CMGT_VEC-CMGTV#1,CMGT_VEC-CMGEV#1,CMEQ_VEC-CMTSTV#1,SHL_REG_VEC-SSHL#1,SHL_REG_VEC-SQSHL#1,SHL_REG_VEC-SRSHL#1,SHL_REG_VEC-SQRSHL#1,MINMAX_VEC-SMAX#1,MINMAX_VEC-SMIN#1,MINMAX_VEC-SMAXP#1,MINMAX_VEC-SMINP#1,ABD_VEC-SABD#1,ABD_VEC-SABA#1,ADDSUB_VEC-ADD_VEC#1,ADDP_VEC-ADDP#1,MUL_VEC-MLA_VEC#1,MUL_VEC-MUL_VEC#1,SQDMULH_VEC-SQDMULH#0,ANDOREOR_VEC-BICV#0,ADDSUBL_VEC-SADDL#1,ADDSUBL_VEC-SSUBL#1,ADDSUBW_VEC-SADDW#1,ADDSUBW_VEC-SSUBW#1,ADDSUBHN_VEC-ADDHN#1,ADDSUBHN_VEC-SUBHN#1,ABDL_VEC-SABAL#1,ABDL_VEC-SABDL#1,MULL_VEC-SMLAL#1,MULL_VEC-SMLSL#1,MULL_VEC-SMULL#1,SQDMULL_VEC-SQDMLAL#0,SQDMULL_VEC-SQDMLSL#0,SQDMULL_VEC-SQDMULL#0,INT_HORZ_VEC-SADDLV#1,INT_HORZ_VEC-SMAXV#1,INT_HORZ_VEC-SMINV#1,INT_HORZ_VEC-ADDV#1
    0x2 => return classify_impl_21_2(inst), // HADDSUB_VEC-SHADD#1,HADDSUB_VEC-SRHADD#1,HADDSUB_VEC-SHSUB#1,QADDSUB_VEC-SQADD#1,QADDSUB_VEC-SQSUB#1,CMGT_VEC-CMGTV#1,CMGT_VEC-CMGEV#1,CMEQ_VEC-CMTSTV#1,SHL_REG_VEC-SSHL#1,SHL_REG_VEC-SQSHL#1,SHL_REG_VEC-SRSHL#1,SHL_REG_VEC-SQRSHL#1,MINMAX_VEC-SMAX#1,MINMAX_VEC-SMIN#1,MINMAX_VEC-SMAXP#1,MINMAX_VEC-SMINP#1,ABD_VEC-SABD#1,ABD_VEC-SABA#1,ADDSUB_VEC-ADD_VEC#1,ADDP_VEC-ADDP#1,MUL_VEC-MLA_VEC#1,MUL_VEC-MUL_VEC#1,SQDMULH_VEC-SQDMULH#0,FP16_2REG_VEC-FRINTN_VEC_FP16#0,FP16_2REG_VEC-FRINTM_VEC_FP16#0,FP16_2REG_VEC-FCVTNS_VEC_FP16#0,FP16_2REG_VEC-FCVTMS_VEC_FP16#0,FP16_2REG_VEC-FCVTAS_VEC_FP16#0,FP16_2REG_VEC-SCVTF_VEC_FP16#0,ANDOREOR_VEC-BICV#0,ADDSUBL_VEC-SADDL#1,ADDSUBL_VEC-SSUBL#1,ADDSUBW_VEC-SADDW#1,ADDSUBW_VEC-SSUBW#1,ADDSUBHN_VEC-ADDHN#1,ADDSUBHN_VEC-SUBHN#1,ABDL_VEC-SABAL#1,ABDL_VEC-SABDL#1,MULL_VEC-SMLAL#1,MULL_VEC-SMLSL#1,MULL_VEC-SMULL#1,SQDMULL_VEC-SQDMLAL#0,SQDMULL_VEC-SQDMLSL#0,SQDMULL_VEC-SQDMULL#0
    _ => idx
  };
  return idx;
}


// ZIP-UZP1#2,ZIP-TRN1#2,ZIP-ZIP1#2,ZIP-UZP2#2,ZIP-TRN2#2,ZIP-ZIP2#2,DOT_VEC-SDOT_VEC#0,DOT_VEC-USDOT_VEC#0
pub const fn classify_impl_22(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x5900,
    0x26 => 0x0,
    0x27 => 0x5901,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// REV_VEC-REV64_VEC#2
pub const fn classify_impl_23_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3280;
}


// ADDLP_VEC-SADDLP#2
pub const fn classify_impl_23_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3100;
}


// ARITH1_VEC-SUQADD_VEC#2
pub const fn classify_impl_23_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3080;
}


// CLZ_VEC-CLS_VEC#2
pub const fn classify_impl_23_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3180;
}


// ADDLP_VEC-SADALP#2
pub const fn classify_impl_23_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3101;
}


// ARITH1_VEC-SQABS_VEC#2
pub const fn classify_impl_23_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3081;
}


// CMZERO_VEC-CMGT_ZERO_VEC#2
pub const fn classify_impl_23_7(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f80;
}


// CMZERO_VEC-CMEQ_ZERO_VEC#2
pub const fn classify_impl_23_8(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f81;
}


// CMZERO_VEC-CMLT_ZERO_VEC#2
pub const fn classify_impl_23_9(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f82;
}


// ARITH1_VEC-ABS_VEC#2
pub const fn classify_impl_23_a(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3082;
}


// FCMP_ZERO_VEC-FCMGT_ZERO_VEC#0
pub const fn classify_impl_23_b(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3b00;
}


// FCMP_ZERO_VEC-FCMEQ_ZERO_VEC#0
pub const fn classify_impl_23_c(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3b01;
}


// FCMP_ZERO_VEC-FCMLT_ZERO_VEC#0
pub const fn classify_impl_23_d(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3b02;
}


// FARITH1_VEC-FABS_VEC#0
pub const fn classify_impl_23_e(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3b80;
}


// XTN_VEC-XTN_VEC#2
pub const fn classify_impl_23_f(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3380;
}


// XTN_VEC-SQXTN_VEC#2
pub const fn classify_impl_23_10(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3381;
}


// FCVTN_VEC-BFCVTN#0
pub const fn classify_impl_23_11(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5181;
}


// FRINT_VEC-FRINTP_VEC#0
pub const fn classify_impl_23_12(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5202;
}


// FRINT_VEC-FRINTZ_VEC#0
pub const fn classify_impl_23_13(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5203;
}


// FCVT_VEC-FCVTPS_VEC#0
pub const fn classify_impl_23_14(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f03;
}


// FCVT_VEC-FCVTZS_VEC#0
pub const fn classify_impl_23_15(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f04;
}


// FRECP_VEC-URECPE_VEC#0
pub const fn classify_impl_23_16(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3d80;
}


// FRECP_VEC-FRECPE_VEC#0
pub const fn classify_impl_23_17(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3d81;
}

// HADDSUB_VEC-SHADD#2,HADDSUB_VEC-SRHADD#2,HADDSUB_VEC-SHSUB#2,QADDSUB_VEC-SQADD#2,QADDSUB_VEC-SQSUB#2,CMGT_VEC-CMGTV#2,CMGT_VEC-CMGEV#2,CMEQ_VEC-CMTSTV#2,CMZERO_VEC-CMGT_ZERO_VEC#2,CMZERO_VEC-CMEQ_ZERO_VEC#2,CMZERO_VEC-CMLT_ZERO_VEC#2,ARITH1_VEC-SUQADD_VEC#2,ARITH1_VEC-SQABS_VEC#2,ARITH1_VEC-ABS_VEC#2,ADDLP_VEC-SADDLP#2,ADDLP_VEC-SADALP#2,CLZ_VEC-CLS_VEC#2,REV_VEC-REV64_VEC#2,XTN_VEC-XTN_VEC#2,XTN_VEC-SQXTN_VEC#2,SHL_REG_VEC-SSHL#2,SHL_REG_VEC-SQSHL#2,SHL_REG_VEC-SRSHL#2,SHL_REG_VEC-SQRSHL#2,MINMAX_VEC-SMAX#2,MINMAX_VEC-SMIN#2,MINMAX_VEC-SMAXP#2,MINMAX_VEC-SMINP#2,ABD_VEC-SABD#2,ABD_VEC-SABA#2,ADDSUB_VEC-ADD_VEC#2,ADDP_VEC-ADDP#2,MUL_VEC-MLA_VEC#2,MUL_VEC-MUL_VEC#2,SQDMULH_VEC-SQDMULH#1,FMINMAX_VEC-FMINNM_VEC#0,FMINMAX_VEC-FMIN_VEC#0,FCMP_ZERO_VEC-FCMGT_ZERO_VEC#0,FCMP_ZERO_VEC-FCMEQ_ZERO_VEC#0,FCMP_ZERO_VEC-FCMLT_ZERO_VEC#0,FARITH1_VEC-FABS_VEC#0,FADDSUB_VEC-FSUB_VEC#0,FRECP_VEC-URECPE_VEC#0,FRECP_VEC-FRECPE_VEC#0,FRECP_STEP_VEC-FRSQRTSV#0,FMLA_VEC-FMLSV#0,ANDOREOR_VEC-ORRV#0,ADDSUBL_VEC-SADDL#2,ADDSUBL_VEC-SSUBL#2,ADDSUBW_VEC-SADDW#2,ADDSUBW_VEC-SSUBW#2,ADDSUBHN_VEC-ADDHN#2,ADDSUBHN_VEC-SUBHN#2,ABDL_VEC-SABAL#2,ABDL_VEC-SABDL#2,MULL_VEC-SMLAL#2,MULL_VEC-SMLSL#2,MULL_VEC-SMULL#2,SQDMULL_VEC-SQDMLAL#1,SQDMULL_VEC-SQDMLSL#1,SQDMULL_VEC-SQDMULL#1,FCVT_VEC-FCVTPS_VEC#0,FCVT_VEC-FCVTZS_VEC#0,FCVTN_VEC-BFCVTN#0,FRINT_VEC-FRINTP_VEC#0,FRINT_VEC-FRINTZ_VEC#0,FHM_VEC-FMLSL_VEC#0
pub const fn classify_impl_23(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x4380,
    0x1 => 0x2b80,
    0x2 => 0x1,
    0x3 => 0x2c80,
    0x4 => 0x4400,
    0x5 => 0x2b81,
    0x6 => 0x0,
    0x7 => 0x4302,
    0x8 => 0x4381,
    0x9 => 0x2b82,
    0xa => 0x2,
    0xb => 0x2c81,
    0xc => 0x4401,
    0xd => 0x2d80,
    0xe => 0x3,
    0xf => 0x2d81,
    0x10 => 0x4480,
    0x11 => 0x3480,
    0x12 => 0x4,
    0x13 => 0x3481,
    0x14 => 0x4500,
    0x15 => 0x3482,
    0x16 => 0x0,
    0x17 => 0x3483,
    0x18 => 0x4481,
    0x19 => 0x3500,
    0x1a => 0x5,
    0x1b => 0x3501,
    0x1c => 0x4501,
    0x1d => 0x3580,
    0x1e => 0x6,
    0x1f => 0x3581,
    0x20 => 0x4580,
    0x21 => 0x3680,
    0x22 => 0x7,
    0x23 => 0x2e80,
    0x24 => 0x4680,
    0x25 => 0x3780,
    0x26 => 0x8,
    0x27 => 0x3781,
    0x28 => 0x4581,
    0x29 => 0x3502,
    0x2a => 0x9,
    0x2b => 0x3503,
    0x2c => 0x4681,
    0x2d => 0x3880,
    0x2e => 0xa,
    0x2f => 0x3700,
    0x30 => 0x4582,
    0x31 => 0x3902,
    0x32 => 0xb,
    0x33 => 0x4001,
    0x34 => 0x4682,
    0x35 => 0x3c81,
    0x36 => 0xc,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0xd,
    0x3b => 0x5b01,
    0x3c => 0x0,
    0x3d => 0x3903,
    0x3e => 0xe,
    0x3f => 0x3e81,
    0x40 => 0x4380,
    0x41 => 0x2b80,
    0x42 => 0x0,
    0x43 => 0x2c80,
    0x44 => 0x4400,
    0x45 => 0x2b81,
    0x46 => 0x0,
    0x47 => 0x4302,
    0x48 => 0x4381,
    0x49 => 0x2b82,
    0x4a => 0xf,
    0x4b => 0x2c81,
    0x4c => 0x4401,
    0x4d => 0x2d80,
    0x4e => 0x0,
    0x4f => 0x2d81,
    0x50 => 0x4480,
    0x51 => 0x3480,
    0x52 => 0x10,
    0x53 => 0x3481,
    0x54 => 0x4500,
    0x55 => 0x3482,
    0x56 => 0x0,
    0x57 => 0x3483,
    0x58 => 0x4481,
    0x59 => 0x3500,
    0x5a => 0x11,
    0x5b => 0x3501,
    0x5c => 0x4501,
    0x5d => 0x3580,
    0x5e => 0x0,
    0x5f => 0x3581,
    0x60 => 0x4580,
    0x61 => 0x3680,
    0x62 => 0x12,
    0x63 => 0x2e80,
    0x64 => 0x4680,
    0x65 => 0x3780,
    0x66 => 0x13,
    0x67 => 0x3781,
    0x68 => 0x4581,
    0x69 => 0x3502,
    0x6a => 0x14,
    0x6b => 0x3503,
    0x6c => 0x4681,
    0x6d => 0x3880,
    0x6e => 0x15,
    0x6f => 0x3700,
    0x70 => 0x4582,
    0x71 => 0x3902,
    0x72 => 0x16,
    0x73 => 0x4001,
    0x74 => 0x4682,
    0x75 => 0x3c81,
    0x76 => 0x17,
    0x77 => 0x0,
    0x78 => 0x0,
    0x79 => 0x0,
    0x7a => 0x0,
    0x7b => 0x5b01,
    0x7c => 0x0,
    0x7d => 0x3903,
    0x7e => 0x0,
    0x7f => 0x3e81,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_23_1(inst), // REV_VEC-REV64_VEC#2
    0x2 => return classify_impl_23_2(inst), // ADDLP_VEC-SADDLP#2
    0x3 => return classify_impl_23_3(inst), // ARITH1_VEC-SUQADD_VEC#2
    0x4 => return classify_impl_23_4(inst), // CLZ_VEC-CLS_VEC#2
    0x5 => return classify_impl_23_5(inst), // ADDLP_VEC-SADALP#2
    0x6 => return classify_impl_23_6(inst), // ARITH1_VEC-SQABS_VEC#2
    0x7 => return classify_impl_23_7(inst), // CMZERO_VEC-CMGT_ZERO_VEC#2
    0x8 => return classify_impl_23_8(inst), // CMZERO_VEC-CMEQ_ZERO_VEC#2
    0x9 => return classify_impl_23_9(inst), // CMZERO_VEC-CMLT_ZERO_VEC#2
    0xa => return classify_impl_23_a(inst), // ARITH1_VEC-ABS_VEC#2
    0xb => return classify_impl_23_b(inst), // FCMP_ZERO_VEC-FCMGT_ZERO_VEC#0
    0xc => return classify_impl_23_c(inst), // FCMP_ZERO_VEC-FCMEQ_ZERO_VEC#0
    0xd => return classify_impl_23_d(inst), // FCMP_ZERO_VEC-FCMLT_ZERO_VEC#0
    0xe => return classify_impl_23_e(inst), // FARITH1_VEC-FABS_VEC#0
    0xf => return classify_impl_23_f(inst), // XTN_VEC-XTN_VEC#2
    0x10 => return classify_impl_23_10(inst), // XTN_VEC-SQXTN_VEC#2
    0x11 => return classify_impl_23_11(inst), // FCVTN_VEC-BFCVTN#0
    0x12 => return classify_impl_23_12(inst), // FRINT_VEC-FRINTP_VEC#0
    0x13 => return classify_impl_23_13(inst), // FRINT_VEC-FRINTZ_VEC#0
    0x14 => return classify_impl_23_14(inst), // FCVT_VEC-FCVTPS_VEC#0
    0x15 => return classify_impl_23_15(inst), // FCVT_VEC-FCVTZS_VEC#0
    0x16 => return classify_impl_23_16(inst), // FRECP_VEC-URECPE_VEC#0
    0x17 => return classify_impl_23_17(inst), // FRECP_VEC-FRECPE_VEC#0
    _ => idx
  };
  return idx;
}


// FP_HORZ_VEC-FMINNMV_FP16#0
pub const fn classify_impl_24_1(inst: u32) -> u32 {
  if (inst&0xf0000) != 0x0 { return 0; }
  return 0x5482;
}


// FP_HORZ_VEC-FMINV_FP16#0
pub const fn classify_impl_24_2(inst: u32) -> u32 {
  if (inst&0xf0000) != 0x0 { return 0; }
  return 0x5483;
}

// HADDSUB_VEC-SHADD#2,HADDSUB_VEC-SRHADD#2,HADDSUB_VEC-SHSUB#2,QADDSUB_VEC-SQADD#2,QADDSUB_VEC-SQSUB#2,CMGT_VEC-CMGTV#2,CMGT_VEC-CMGEV#2,CMEQ_VEC-CMTSTV#2,SHL_REG_VEC-SSHL#2,SHL_REG_VEC-SQSHL#2,SHL_REG_VEC-SRSHL#2,SHL_REG_VEC-SQRSHL#2,MINMAX_VEC-SMAX#2,MINMAX_VEC-SMIN#2,MINMAX_VEC-SMAXP#2,MINMAX_VEC-SMINP#2,ABD_VEC-SABD#2,ABD_VEC-SABA#2,ADDSUB_VEC-ADD_VEC#2,ADDP_VEC-ADDP#2,MUL_VEC-MLA_VEC#2,MUL_VEC-MUL_VEC#2,SQDMULH_VEC-SQDMULH#1,FMINMAX_VEC-FMINNM_VEC#0,FMINMAX_VEC-FMIN_VEC#0,FADDSUB_VEC-FSUB_VEC#0,FRECP_STEP_VEC-FRSQRTSV#0,FMLA_VEC-FMLSV#0,ANDOREOR_VEC-ORRV#0,ADDSUBL_VEC-SADDL#2,ADDSUBL_VEC-SSUBL#2,ADDSUBW_VEC-SADDW#2,ADDSUBW_VEC-SSUBW#2,ADDSUBHN_VEC-ADDHN#2,ADDSUBHN_VEC-SUBHN#2,ABDL_VEC-SABAL#2,ABDL_VEC-SABDL#2,MULL_VEC-SMLAL#2,MULL_VEC-SMLSL#2,MULL_VEC-SMULL#2,SQDMULL_VEC-SQDMLAL#1,SQDMULL_VEC-SQDMLSL#1,SQDMULL_VEC-SQDMULL#1,FP_HORZ_VEC-FMINNMV_FP16#0,FP_HORZ_VEC-FMINV_FP16#0,FHM_VEC-FMLSL_VEC#0
pub const fn classify_impl_24(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x4380,
    0x1 => 0x2b80,
    0x2 => 0x0,
    0x3 => 0x2c80,
    0x4 => 0x4400,
    0x5 => 0x2b81,
    0x6 => 0x0,
    0x7 => 0x4302,
    0x8 => 0x4381,
    0x9 => 0x2b82,
    0xa => 0x0,
    0xb => 0x2c81,
    0xc => 0x4401,
    0xd => 0x2d80,
    0xe => 0x0,
    0xf => 0x2d81,
    0x10 => 0x4480,
    0x11 => 0x3480,
    0x12 => 0x0,
    0x13 => 0x3481,
    0x14 => 0x4500,
    0x15 => 0x3482,
    0x16 => 0x0,
    0x17 => 0x3483,
    0x18 => 0x4481,
    0x19 => 0x3500,
    0x1a => 0x0,
    0x1b => 0x3501,
    0x1c => 0x4501,
    0x1d => 0x3580,
    0x1e => 0x0,
    0x1f => 0x3581,
    0x20 => 0x4580,
    0x21 => 0x3680,
    0x22 => 0x0,
    0x23 => 0x2e80,
    0x24 => 0x4680,
    0x25 => 0x3780,
    0x26 => 0x0,
    0x27 => 0x3781,
    0x28 => 0x4581,
    0x29 => 0x3502,
    0x2a => 0x0,
    0x2b => 0x3503,
    0x2c => 0x4681,
    0x2d => 0x3880,
    0x2e => 0x0,
    0x2f => 0x3700,
    0x30 => 0x4582,
    0x31 => 0x3902,
    0x32 => 0x1,
    0x33 => 0x4001,
    0x34 => 0x4682,
    0x35 => 0x3c81,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x5b01,
    0x3c => 0x0,
    0x3d => 0x3903,
    0x3e => 0x2,
    0x3f => 0x3e81,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_24_1(inst), // FP_HORZ_VEC-FMINNMV_FP16#0
    0x2 => return classify_impl_24_2(inst), // FP_HORZ_VEC-FMINV_FP16#0
    _ => idx
  };
  return idx;
}


// FP16_3REG_VEC-FMINNM_VEC_FP16#0,FP16_3REG_VEC-FMLS_VEC_FP16#0,FP16_3REG_VEC-FSUB_VEC_FP16#0,FP16_3REG_VEC-FMIN_VEC_FP16#0,FP16_3REG_VEC-FRSQRTS_VEC_FP16#0
pub const fn classify_impl_25(inst: u32) -> u32 {
  if (inst&0xc400) != 0x400 { return 0; }
  let idx = match (inst >> 11) & 0x7 {
    0x0 => 0x4187,
    0x1 => 0x4188,
    0x2 => 0x4189,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x418b,
    0x7 => 0x418c,
    _ => 0,
  };
  return idx;
}


// ANDOREOR_VEC-ORNV#0,PMULL_VEC-PMULL64#0
pub const fn classify_impl_26(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x4303,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x4701,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// FP16_2REG_VEC-FCMGT_ZERO_VEC_FP16#0
pub const fn classify_impl_27_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x4286;
}


// FP16_2REG_VEC-FCMEQ_ZERO_VEC_FP16#0
pub const fn classify_impl_27_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x4287;
}


// FP16_2REG_VEC-FCMLT_ZERO_VEC_FP16#0
pub const fn classify_impl_27_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x4288;
}


// FP16_2REG_VEC-FABS_VEC_FP16#0
pub const fn classify_impl_27_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x4289;
}


// FP16_2REG_VEC-FRINTP_VEC_FP16#0
pub const fn classify_impl_27_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x428a;
}


// FP16_2REG_VEC-FRINTZ_VEC_FP16#0
pub const fn classify_impl_27_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x428b;
}


// FP16_2REG_VEC-FCVTPS_VEC_FP16#0
pub const fn classify_impl_27_7(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x428c;
}


// FP16_2REG_VEC-FCVTZS_VEC_FP16#0
pub const fn classify_impl_27_8(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x428d;
}


// FP16_2REG_VEC-FRECPE_VEC_FP16#0
pub const fn classify_impl_27_9(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x428e;
}

// FP16_2REG_VEC-FCMGT_ZERO_VEC_FP16#0,FP16_2REG_VEC-FCMEQ_ZERO_VEC_FP16#0,FP16_2REG_VEC-FCMLT_ZERO_VEC_FP16#0,FP16_2REG_VEC-FABS_VEC_FP16#0,FP16_2REG_VEC-FRINTP_VEC_FP16#0,FP16_2REG_VEC-FRINTZ_VEC_FP16#0,FP16_2REG_VEC-FCVTPS_VEC_FP16#0,FP16_2REG_VEC-FCVTZS_VEC_FP16#0,FP16_2REG_VEC-FRECPE_VEC_FP16#0,ANDOREOR_VEC-ORNV#0,PMULL_VEC-PMULL64#0
pub const fn classify_impl_27(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x4303,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x1,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x2,
    0x37 => 0x0,
    0x38 => 0x4701,
    0x39 => 0x0,
    0x3a => 0x3,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x4,
    0x3f => 0x0,
    0x40 => 0x0,
    0x41 => 0x0,
    0x42 => 0x0,
    0x43 => 0x0,
    0x44 => 0x0,
    0x45 => 0x0,
    0x46 => 0x0,
    0x47 => 0x4303,
    0x48 => 0x0,
    0x49 => 0x0,
    0x4a => 0x0,
    0x4b => 0x0,
    0x4c => 0x0,
    0x4d => 0x0,
    0x4e => 0x0,
    0x4f => 0x0,
    0x50 => 0x0,
    0x51 => 0x0,
    0x52 => 0x0,
    0x53 => 0x0,
    0x54 => 0x0,
    0x55 => 0x0,
    0x56 => 0x0,
    0x57 => 0x0,
    0x58 => 0x0,
    0x59 => 0x0,
    0x5a => 0x0,
    0x5b => 0x0,
    0x5c => 0x0,
    0x5d => 0x0,
    0x5e => 0x0,
    0x5f => 0x0,
    0x60 => 0x0,
    0x61 => 0x0,
    0x62 => 0x5,
    0x63 => 0x0,
    0x64 => 0x0,
    0x65 => 0x0,
    0x66 => 0x6,
    0x67 => 0x0,
    0x68 => 0x0,
    0x69 => 0x0,
    0x6a => 0x7,
    0x6b => 0x0,
    0x6c => 0x0,
    0x6d => 0x0,
    0x6e => 0x8,
    0x6f => 0x0,
    0x70 => 0x0,
    0x71 => 0x0,
    0x72 => 0x0,
    0x73 => 0x0,
    0x74 => 0x0,
    0x75 => 0x0,
    0x76 => 0x9,
    0x77 => 0x0,
    0x78 => 0x4701,
    0x79 => 0x0,
    0x7a => 0x0,
    0x7b => 0x0,
    0x7c => 0x0,
    0x7d => 0x0,
    0x7e => 0x0,
    0x7f => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_27_1(inst), // FP16_2REG_VEC-FCMGT_ZERO_VEC_FP16#0
    0x2 => return classify_impl_27_2(inst), // FP16_2REG_VEC-FCMEQ_ZERO_VEC_FP16#0
    0x3 => return classify_impl_27_3(inst), // FP16_2REG_VEC-FCMLT_ZERO_VEC_FP16#0
    0x4 => return classify_impl_27_4(inst), // FP16_2REG_VEC-FABS_VEC_FP16#0
    0x5 => return classify_impl_27_5(inst), // FP16_2REG_VEC-FRINTP_VEC_FP16#0
    0x6 => return classify_impl_27_6(inst), // FP16_2REG_VEC-FRINTZ_VEC_FP16#0
    0x7 => return classify_impl_27_7(inst), // FP16_2REG_VEC-FCVTPS_VEC_FP16#0
    0x8 => return classify_impl_27_8(inst), // FP16_2REG_VEC-FCVTZS_VEC_FP16#0
    0x9 => return classify_impl_27_9(inst), // FP16_2REG_VEC-FRECPE_VEC_FP16#0
    _ => idx
  };
  return idx;
}


// FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0,SIMD_IMM-MOVI32#0,SIMD_IMM-MOVI32#1,SIMD_IMM-MOVI32#2,SIMD_IMM-MOVI32#3,SIMD_IMM-ORRI32#0,SIMD_IMM-ORRI32#1,SIMD_IMM-ORRI32#2,SIMD_IMM-ORRI32#3,SIMD_IMM-MOVI16#0,SIMD_IMM-MOVI16#1,SIMD_IMM-ORRI16#0,SIMD_IMM-ORRI16#1,SIMD_IMM-MOVI32_MSL#0,SIMD_IMM-MOVI32_MSL#1,SIMD_IMM-MOVI8#0,SIMD_IMM-FMOV32#0,SIMD_IMM-FMOV16#0
pub const fn classify_impl_28_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x5d00,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x5880,
    0x5 => 0x5d01,
    0x6 => 0x5880,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x5d00,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x5d01,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x5d00,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x5881,
    0x15 => 0x5d01,
    0x16 => 0x5881,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x5d00,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x5d01,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x5d02,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x5882,
    0x25 => 0x5d03,
    0x26 => 0x5882,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x5d02,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x5d03,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x5d04,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x5d04,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x5d05,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5980,
    0x3d => 0x5d06,
    0x3e => 0x5980,
    0x3f => 0x5d07,
    _ => 0,
  };
  return idx;
}


// SHR_VEC_IMM-SSHR#0,SHR_VEC_IMM-SSRA#0,SHR_VEC_IMM-SRSHR#0,SHR_VEC_IMM-SRSRA#0,QSHL_VEC_IMM-SQSHL_IMM#0,SHRN_VEC_IMM-SHRN#0,SHRN_VEC_IMM-RSHRN#0,SHRN_VEC_IMM-SQSHRN#0,SHRN_VEC_IMM-SQRSHRN#0,SHLL_VEC_IMM-SSHLL#0,SHIFT_VEC_IMM-SHL#0,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
pub const fn classify_impl_28_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4900,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x5880,
    0x5 => 0x4901,
    0x6 => 0x5880,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4902,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4903,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x5881,
    0x15 => 0x4d00,
    0x16 => 0x5881,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a00,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b00,
    0x22 => 0x0,
    0x23 => 0x4b01,
    0x24 => 0x5882,
    0x25 => 0x4b02,
    0x26 => 0x5882,
    0x27 => 0x4b03,
    0x28 => 0x0,
    0x29 => 0x4b80,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5980,
    0x3d => 0x0,
    0x3e => 0x5980,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}

// SHR_VEC_IMM-SSHR#0,SHR_VEC_IMM-SSRA#0,SHR_VEC_IMM-SRSHR#0,SHR_VEC_IMM-SRSRA#0,QSHL_VEC_IMM-SQSHL_IMM#0,SHRN_VEC_IMM-SHRN#0,SHRN_VEC_IMM-RSHRN#0,SHRN_VEC_IMM-SQSHRN#0,SHRN_VEC_IMM-SQRSHRN#0,SHLL_VEC_IMM-SSHLL#0,SHIFT_VEC_IMM-SHL#0,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0,SIMD_IMM-MOVI32#0,SIMD_IMM-MOVI32#1,SIMD_IMM-MOVI32#2,SIMD_IMM-MOVI32#3,SIMD_IMM-ORRI32#0,SIMD_IMM-ORRI32#1,SIMD_IMM-ORRI32#2,SIMD_IMM-ORRI32#3,SIMD_IMM-MOVI16#0,SIMD_IMM-MOVI16#1,SIMD_IMM-ORRI16#0,SIMD_IMM-ORRI16#1,SIMD_IMM-MOVI32_MSL#0,SIMD_IMM-MOVI32_MSL#1,SIMD_IMM-MOVI8#0,SIMD_IMM-FMOV32#0,SIMD_IMM-FMOV16#0
pub const fn classify_impl_28(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_28_1(inst), // FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0,SIMD_IMM-MOVI32#0,SIMD_IMM-MOVI32#1,SIMD_IMM-MOVI32#2,SIMD_IMM-MOVI32#3,SIMD_IMM-ORRI32#0,SIMD_IMM-ORRI32#1,SIMD_IMM-ORRI32#2,SIMD_IMM-ORRI32#3,SIMD_IMM-MOVI16#0,SIMD_IMM-MOVI16#1,SIMD_IMM-ORRI16#0,SIMD_IMM-ORRI16#1,SIMD_IMM-MOVI32_MSL#0,SIMD_IMM-MOVI32_MSL#1,SIMD_IMM-MOVI8#0,SIMD_IMM-FMOV32#0,SIMD_IMM-FMOV16#0
    0x2 => return classify_impl_28_2(inst), // SHR_VEC_IMM-SSHR#0,SHR_VEC_IMM-SSRA#0,SHR_VEC_IMM-SRSHR#0,SHR_VEC_IMM-SRSRA#0,QSHL_VEC_IMM-SQSHL_IMM#0,SHRN_VEC_IMM-SHRN#0,SHRN_VEC_IMM-RSHRN#0,SHRN_VEC_IMM-SQSHRN#0,SHRN_VEC_IMM-SQRSHRN#0,SHLL_VEC_IMM-SSHLL#0,SHIFT_VEC_IMM-SHL#0,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
    _ => idx
  };
  return idx;
}


// SHR_VEC_IMM-SSHR#1,SHR_VEC_IMM-SSRA#1,SHR_VEC_IMM-SRSHR#1,SHR_VEC_IMM-SRSRA#1,QSHL_VEC_IMM-SQSHL_IMM#1,SHRN_VEC_IMM-SHRN#1,SHRN_VEC_IMM-RSHRN#1,SHRN_VEC_IMM-SQSHRN#1,SHRN_VEC_IMM-SQRSHRN#1,SHLL_VEC_IMM-SSHLL#1,SHIFT_VEC_IMM-SHL#1,FCVT_VEC_FIXED-SCVTF_VEC_FIX_FP16#0,FCVT_VEC_FIXED-FCVTZS_VEC_FIX_FP16#0,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
pub const fn classify_impl_29_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4900,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x5880,
    0x5 => 0x4901,
    0x6 => 0x5880,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4902,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4903,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x5881,
    0x15 => 0x4d00,
    0x16 => 0x5881,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a00,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b00,
    0x22 => 0x0,
    0x23 => 0x4b01,
    0x24 => 0x5882,
    0x25 => 0x4b02,
    0x26 => 0x5882,
    0x27 => 0x4b03,
    0x28 => 0x0,
    0x29 => 0x4b80,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e00,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5980,
    0x3d => 0x0,
    0x3e => 0x5980,
    0x3f => 0x4e01,
    _ => 0,
  };
  return idx;
}


// SHR_VEC_IMM-SSHR#2,SHR_VEC_IMM-SSRA#2,SHR_VEC_IMM-SRSHR#2,SHR_VEC_IMM-SRSRA#2,QSHL_VEC_IMM-SQSHL_IMM#2,SHRN_VEC_IMM-SHRN#2,SHRN_VEC_IMM-RSHRN#2,SHRN_VEC_IMM-SQSHRN#2,SHRN_VEC_IMM-SQRSHRN#2,SHLL_VEC_IMM-SSHLL#2,SHIFT_VEC_IMM-SHL#2,FCVT_VEC_FIXED-SCVTF_VEC_FIX_FP16#1,FCVT_VEC_FIXED-FCVTZS_VEC_FIX_FP16#1,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
pub const fn classify_impl_29_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4900,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x5880,
    0x5 => 0x4901,
    0x6 => 0x5880,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4902,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4903,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x5881,
    0x15 => 0x4d00,
    0x16 => 0x5881,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a00,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b00,
    0x22 => 0x0,
    0x23 => 0x4b01,
    0x24 => 0x5882,
    0x25 => 0x4b02,
    0x26 => 0x5882,
    0x27 => 0x4b03,
    0x28 => 0x0,
    0x29 => 0x4b80,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e00,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5980,
    0x3d => 0x0,
    0x3e => 0x5980,
    0x3f => 0x4e01,
    _ => 0,
  };
  return idx;
}

// SHR_VEC_IMM-SSHR#1,SHR_VEC_IMM-SSHR#2,SHR_VEC_IMM-SSRA#1,SHR_VEC_IMM-SSRA#2,SHR_VEC_IMM-SRSHR#1,SHR_VEC_IMM-SRSHR#2,SHR_VEC_IMM-SRSRA#1,SHR_VEC_IMM-SRSRA#2,QSHL_VEC_IMM-SQSHL_IMM#1,QSHL_VEC_IMM-SQSHL_IMM#2,SHRN_VEC_IMM-SHRN#1,SHRN_VEC_IMM-SHRN#2,SHRN_VEC_IMM-RSHRN#1,SHRN_VEC_IMM-RSHRN#2,SHRN_VEC_IMM-SQSHRN#1,SHRN_VEC_IMM-SQSHRN#2,SHRN_VEC_IMM-SQRSHRN#1,SHRN_VEC_IMM-SQRSHRN#2,SHLL_VEC_IMM-SSHLL#1,SHLL_VEC_IMM-SSHLL#2,SHIFT_VEC_IMM-SHL#1,SHIFT_VEC_IMM-SHL#2,FCVT_VEC_FIXED-SCVTF_VEC_FIX_FP16#0,FCVT_VEC_FIXED-SCVTF_VEC_FIX_FP16#1,FCVT_VEC_FIXED-FCVTZS_VEC_FIX_FP16#0,FCVT_VEC_FIXED-FCVTZS_VEC_FIX_FP16#1,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
pub const fn classify_impl_29(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_29_1(inst), // SHR_VEC_IMM-SSHR#1,SHR_VEC_IMM-SSRA#1,SHR_VEC_IMM-SRSHR#1,SHR_VEC_IMM-SRSRA#1,QSHL_VEC_IMM-SQSHL_IMM#1,SHRN_VEC_IMM-SHRN#1,SHRN_VEC_IMM-RSHRN#1,SHRN_VEC_IMM-SQSHRN#1,SHRN_VEC_IMM-SQRSHRN#1,SHLL_VEC_IMM-SSHLL#1,SHIFT_VEC_IMM-SHL#1,FCVT_VEC_FIXED-SCVTF_VEC_FIX_FP16#0,FCVT_VEC_FIXED-FCVTZS_VEC_FIX_FP16#0,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
    0x2 => return classify_impl_29_2(inst), // SHR_VEC_IMM-SSHR#2,SHR_VEC_IMM-SSRA#2,SHR_VEC_IMM-SRSHR#2,SHR_VEC_IMM-SRSRA#2,QSHL_VEC_IMM-SQSHL_IMM#2,SHRN_VEC_IMM-SHRN#2,SHRN_VEC_IMM-RSHRN#2,SHRN_VEC_IMM-SQSHRN#2,SHRN_VEC_IMM-SQRSHRN#2,SHLL_VEC_IMM-SSHLL#2,SHIFT_VEC_IMM-SHL#2,FCVT_VEC_FIXED-SCVTF_VEC_FIX_FP16#1,FCVT_VEC_FIXED-FCVTZS_VEC_FIX_FP16#1,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
    _ => idx
  };
  return idx;
}


// SHR_VEC_IMM-SSHR#3,SHR_VEC_IMM-SSRA#3,SHR_VEC_IMM-SRSHR#3,SHR_VEC_IMM-SRSRA#3,QSHL_VEC_IMM-SQSHL_IMM#3,SHRN_VEC_IMM-SHRN#3,SHRN_VEC_IMM-RSHRN#3,SHRN_VEC_IMM-SQSHRN#3,SHRN_VEC_IMM-SQRSHRN#3,SHLL_VEC_IMM-SSHLL#3,SHIFT_VEC_IMM-SHL#3,FCVT_VEC_FIXED-SCVTF_VEC_FIX#0,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#0,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
pub const fn classify_impl_2a_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4900,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x5880,
    0x5 => 0x4901,
    0x6 => 0x5880,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4902,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4903,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x5881,
    0x15 => 0x4d00,
    0x16 => 0x5881,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a00,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b00,
    0x22 => 0x0,
    0x23 => 0x4b01,
    0x24 => 0x5882,
    0x25 => 0x4b02,
    0x26 => 0x5882,
    0x27 => 0x4b03,
    0x28 => 0x0,
    0x29 => 0x4b80,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e02,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5980,
    0x3d => 0x0,
    0x3e => 0x5980,
    0x3f => 0x4e03,
    _ => 0,
  };
  return idx;
}


// SHR_VEC_IMM-SSHR#4,SHR_VEC_IMM-SSRA#4,SHR_VEC_IMM-SRSHR#4,SHR_VEC_IMM-SRSRA#4,QSHL_VEC_IMM-SQSHL_IMM#4,SHRN_VEC_IMM-SHRN#4,SHRN_VEC_IMM-RSHRN#4,SHRN_VEC_IMM-SQSHRN#4,SHRN_VEC_IMM-SQRSHRN#4,SHLL_VEC_IMM-SSHLL#4,SHIFT_VEC_IMM-SHL#4,FCVT_VEC_FIXED-SCVTF_VEC_FIX#1,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#1,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
pub const fn classify_impl_2a_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4900,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x5880,
    0x5 => 0x4901,
    0x6 => 0x5880,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4902,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4903,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x5881,
    0x15 => 0x4d00,
    0x16 => 0x5881,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a00,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b00,
    0x22 => 0x0,
    0x23 => 0x4b01,
    0x24 => 0x5882,
    0x25 => 0x4b02,
    0x26 => 0x5882,
    0x27 => 0x4b03,
    0x28 => 0x0,
    0x29 => 0x4b80,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e02,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5980,
    0x3d => 0x0,
    0x3e => 0x5980,
    0x3f => 0x4e03,
    _ => 0,
  };
  return idx;
}

// SHR_VEC_IMM-SSHR#3,SHR_VEC_IMM-SSHR#4,SHR_VEC_IMM-SSRA#3,SHR_VEC_IMM-SSRA#4,SHR_VEC_IMM-SRSHR#3,SHR_VEC_IMM-SRSHR#4,SHR_VEC_IMM-SRSRA#3,SHR_VEC_IMM-SRSRA#4,QSHL_VEC_IMM-SQSHL_IMM#3,QSHL_VEC_IMM-SQSHL_IMM#4,SHRN_VEC_IMM-SHRN#3,SHRN_VEC_IMM-SHRN#4,SHRN_VEC_IMM-RSHRN#3,SHRN_VEC_IMM-RSHRN#4,SHRN_VEC_IMM-SQSHRN#3,SHRN_VEC_IMM-SQSHRN#4,SHRN_VEC_IMM-SQRSHRN#3,SHRN_VEC_IMM-SQRSHRN#4,SHLL_VEC_IMM-SSHLL#3,SHLL_VEC_IMM-SSHLL#4,SHIFT_VEC_IMM-SHL#3,SHIFT_VEC_IMM-SHL#4,FCVT_VEC_FIXED-SCVTF_VEC_FIX#0,FCVT_VEC_FIXED-SCVTF_VEC_FIX#1,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#0,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#1,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
pub const fn classify_impl_2a(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_2a_1(inst), // SHR_VEC_IMM-SSHR#3,SHR_VEC_IMM-SSRA#3,SHR_VEC_IMM-SRSHR#3,SHR_VEC_IMM-SRSRA#3,QSHL_VEC_IMM-SQSHL_IMM#3,SHRN_VEC_IMM-SHRN#3,SHRN_VEC_IMM-RSHRN#3,SHRN_VEC_IMM-SQSHRN#3,SHRN_VEC_IMM-SQRSHRN#3,SHLL_VEC_IMM-SSHLL#3,SHIFT_VEC_IMM-SHL#3,FCVT_VEC_FIXED-SCVTF_VEC_FIX#0,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#0,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
    0x2 => return classify_impl_2a_2(inst), // SHR_VEC_IMM-SSHR#4,SHR_VEC_IMM-SSRA#4,SHR_VEC_IMM-SRSHR#4,SHR_VEC_IMM-SRSRA#4,QSHL_VEC_IMM-SQSHL_IMM#4,SHRN_VEC_IMM-SHRN#4,SHRN_VEC_IMM-RSHRN#4,SHRN_VEC_IMM-SQSHRN#4,SHRN_VEC_IMM-SQRSHRN#4,SHLL_VEC_IMM-SSHLL#4,SHIFT_VEC_IMM-SHL#4,FCVT_VEC_FIXED-SCVTF_VEC_FIX#1,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#1,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
    _ => idx
  };
  return idx;
}


// SHR_VEC_IMM-SSHR#5,SHR_VEC_IMM-SSRA#5,SHR_VEC_IMM-SRSHR#5,SHR_VEC_IMM-SRSRA#5,QSHL_VEC_IMM-SQSHL_IMM#5,SHRN_VEC_IMM-SHRN#5,SHRN_VEC_IMM-RSHRN#5,SHRN_VEC_IMM-SQSHRN#5,SHRN_VEC_IMM-SQRSHRN#5,SHLL_VEC_IMM-SSHLL#5,SHIFT_VEC_IMM-SHL#5,FCVT_VEC_FIXED-SCVTF_VEC_FIX#2,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#2,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
pub const fn classify_impl_2b_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4900,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x5880,
    0x5 => 0x4901,
    0x6 => 0x5880,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4902,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4903,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x5881,
    0x15 => 0x4d00,
    0x16 => 0x5881,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a00,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b00,
    0x22 => 0x0,
    0x23 => 0x4b01,
    0x24 => 0x5882,
    0x25 => 0x4b02,
    0x26 => 0x5882,
    0x27 => 0x4b03,
    0x28 => 0x0,
    0x29 => 0x4b80,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e02,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5980,
    0x3d => 0x0,
    0x3e => 0x5980,
    0x3f => 0x4e03,
    _ => 0,
  };
  return idx;
}


// SHR_VEC_IMM-SSHR#6,SHR_VEC_IMM-SSRA#6,SHR_VEC_IMM-SRSHR#6,SHR_VEC_IMM-SRSRA#6,QSHL_VEC_IMM-SQSHL_IMM#6,SHRN_VEC_IMM-SHRN#6,SHRN_VEC_IMM-RSHRN#6,SHRN_VEC_IMM-SQSHRN#6,SHRN_VEC_IMM-SQRSHRN#6,SHLL_VEC_IMM-SSHLL#6,SHIFT_VEC_IMM-SHL#6,FCVT_VEC_FIXED-SCVTF_VEC_FIX#3,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#3,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
pub const fn classify_impl_2b_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4900,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x5880,
    0x5 => 0x4901,
    0x6 => 0x5880,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4902,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4903,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x5881,
    0x15 => 0x4d00,
    0x16 => 0x5881,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a00,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b00,
    0x22 => 0x0,
    0x23 => 0x4b01,
    0x24 => 0x5882,
    0x25 => 0x4b02,
    0x26 => 0x5882,
    0x27 => 0x4b03,
    0x28 => 0x0,
    0x29 => 0x4b80,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e02,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5980,
    0x3d => 0x0,
    0x3e => 0x5980,
    0x3f => 0x4e03,
    _ => 0,
  };
  return idx;
}

// SHR_VEC_IMM-SSHR#5,SHR_VEC_IMM-SSHR#6,SHR_VEC_IMM-SSRA#5,SHR_VEC_IMM-SSRA#6,SHR_VEC_IMM-SRSHR#5,SHR_VEC_IMM-SRSHR#6,SHR_VEC_IMM-SRSRA#5,SHR_VEC_IMM-SRSRA#6,QSHL_VEC_IMM-SQSHL_IMM#5,QSHL_VEC_IMM-SQSHL_IMM#6,SHRN_VEC_IMM-SHRN#5,SHRN_VEC_IMM-SHRN#6,SHRN_VEC_IMM-RSHRN#5,SHRN_VEC_IMM-RSHRN#6,SHRN_VEC_IMM-SQSHRN#5,SHRN_VEC_IMM-SQSHRN#6,SHRN_VEC_IMM-SQRSHRN#5,SHRN_VEC_IMM-SQRSHRN#6,SHLL_VEC_IMM-SSHLL#5,SHLL_VEC_IMM-SSHLL#6,SHIFT_VEC_IMM-SHL#5,SHIFT_VEC_IMM-SHL#6,FCVT_VEC_FIXED-SCVTF_VEC_FIX#2,FCVT_VEC_FIXED-SCVTF_VEC_FIX#3,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#2,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#3,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
pub const fn classify_impl_2b(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_2b_1(inst), // SHR_VEC_IMM-SSHR#5,SHR_VEC_IMM-SSRA#5,SHR_VEC_IMM-SRSHR#5,SHR_VEC_IMM-SRSRA#5,QSHL_VEC_IMM-SQSHL_IMM#5,SHRN_VEC_IMM-SHRN#5,SHRN_VEC_IMM-RSHRN#5,SHRN_VEC_IMM-SQSHRN#5,SHRN_VEC_IMM-SQRSHRN#5,SHLL_VEC_IMM-SSHLL#5,SHIFT_VEC_IMM-SHL#5,FCVT_VEC_FIXED-SCVTF_VEC_FIX#2,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#2,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
    0x2 => return classify_impl_2b_2(inst), // SHR_VEC_IMM-SSHR#6,SHR_VEC_IMM-SSRA#6,SHR_VEC_IMM-SRSHR#6,SHR_VEC_IMM-SRSRA#6,QSHL_VEC_IMM-SQSHL_IMM#6,SHRN_VEC_IMM-SHRN#6,SHRN_VEC_IMM-RSHRN#6,SHRN_VEC_IMM-SQSHRN#6,SHRN_VEC_IMM-SQRSHRN#6,SHLL_VEC_IMM-SSHLL#6,SHIFT_VEC_IMM-SHL#6,FCVT_VEC_FIXED-SCVTF_VEC_FIX#3,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#3,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
    _ => idx
  };
  return idx;
}


// MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL_ELEM#0,MULL_ELEM-SQDMLAL_ELEM#0,MULL_ELEM-SMLSL_ELEM#0,MULL_ELEM-SQDMLSL_ELEM#0,MULL_ELEM-SMULL_ELEM#0,MULL_ELEM-SQDMULL_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
pub const fn classify_impl_2c(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 12) & 0xf {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x5680,
    0x3 => 0x5681,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x5682,
    0x7 => 0x5683,
    0x8 => 0x5580,
    0x9 => 0x0,
    0xa => 0x5684,
    0xb => 0x5685,
    0xc => 0x5581,
    0xd => 0x5582,
    0xe => 0x0,
    0xf => 0x5981,
    _ => 0,
  };
  return idx;
}


// MUL_ELEM-MUL_ELEM#1,MUL_ELEM-SQDMULH_ELEM#1,MUL_ELEM-SQRDMULH_ELEM#1,MULL_ELEM-SMLAL_ELEM#1,MULL_ELEM-SQDMLAL_ELEM#1,MULL_ELEM-SMLSL_ELEM#1,MULL_ELEM-SQDMLSL_ELEM#1,MULL_ELEM-SMULL_ELEM#1,MULL_ELEM-SQDMULL_ELEM#1,FMUL_ELEM-FMLA_ELEM#0,FMUL_ELEM-FMLS_ELEM#0,FMUL_ELEM-FMUL_ELEM#0,DOT_ELEM-SDOT_ELEM#0,DOT_ELEM-USDOT_ELEM#0,FHM_ELEM-FMLAL_ELEM#0,FHM_ELEM-FMLSL_ELEM#0
pub const fn classify_impl_2d(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 12) & 0xf {
    0x0 => 0x5b80,
    0x1 => 0x5800,
    0x2 => 0x5680,
    0x3 => 0x5681,
    0x4 => 0x5b81,
    0x5 => 0x5801,
    0x6 => 0x5682,
    0x7 => 0x5683,
    0x8 => 0x5580,
    0x9 => 0x5802,
    0xa => 0x5684,
    0xb => 0x5685,
    0xc => 0x5581,
    0xd => 0x5582,
    0xe => 0x5982,
    0xf => 0x5983,
    _ => 0,
  };
  return idx;
}


// MUL_ELEM-MUL_ELEM#1,MUL_ELEM-SQDMULH_ELEM#1,MUL_ELEM-SQRDMULH_ELEM#1,MULL_ELEM-SMLAL_ELEM#1,MULL_ELEM-SQDMLAL_ELEM#1,MULL_ELEM-SMLSL_ELEM#1,MULL_ELEM-SQDMLSL_ELEM#1,MULL_ELEM-SMULL_ELEM#1,MULL_ELEM-SQDMULL_ELEM#1,FMUL_ELEM-FMLA_ELEM#1,FMUL_ELEM-FMLS_ELEM#1,FMUL_ELEM-FMUL_ELEM#1,DOT_ELEM-SDOT_ELEM#0,DOT_ELEM-USDOT_ELEM#0,FHM_ELEM-FMLAL_ELEM#0,FHM_ELEM-FMLSL_ELEM#0
pub const fn classify_impl_2e(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 12) & 0xf {
    0x0 => 0x5b80,
    0x1 => 0x5800,
    0x2 => 0x5680,
    0x3 => 0x5681,
    0x4 => 0x5b81,
    0x5 => 0x5801,
    0x6 => 0x5682,
    0x7 => 0x5683,
    0x8 => 0x5580,
    0x9 => 0x5802,
    0xa => 0x5684,
    0xb => 0x5685,
    0xc => 0x5581,
    0xd => 0x5582,
    0xe => 0x5982,
    0xf => 0x5983,
    _ => 0,
  };
  return idx;
}


// FMLAL_ELEM-BFMLALB_ELEM#0
pub const fn classify_impl_2f(inst: u32) -> u32 {
  if (inst&0xf400) != 0xf000 { return 0; }
  return 0x5a81;
}


// MINMAX_IMM-SMAX_GP_IMM#0,MINMAX_IMM-UMAX_GP_IMM#0,MINMAX_IMM-SMIN_GP_IMM#0,MINMAX_IMM-UMIN_GP_IMM#0
pub const fn classify_impl_30(inst: u32) -> u32 {
  let idx = match (inst >> 18) & 0x3 {
    0x0 => 0x1100,
    0x1 => 0x1101,
    0x2 => 0x1102,
    0x3 => 0x1103,
    _ => 0,
  };
  return idx;
}


// ANDOREOR_IMM-AND_IMM#0,ANDOREOR_IMM-AND_IMM#1,ANDOREOR_IMM-AND_IMM#2,ANDOREOR_IMM-AND_IMM#3,ANDOREOR_IMM-AND_IMM#4,ANDOREOR_IMM-AND_IMM#5,ANDOREOR_IMM-AND_IMM#6,ANDOREOR_IMM-AND_IMM#7,ANDOREOR_IMM-AND_IMM#8,ANDOREOR_IMM-AND_IMM#9,ANDOREOR_IMM-AND_IMM#10,ANDOREOR_IMM-AND_IMM#11,ANDOREOR_IMM-AND_IMM#12,ANDOREOR_IMM-AND_IMM#13,ANDOREOR_IMM-AND_IMM#14,ANDOREOR_IMM-AND_IMM#15,ANDOREOR_IMM-AND_IMM#16,ANDOREOR_IMM-AND_IMM#17,ANDOREOR_IMM-AND_IMM#18,ANDOREOR_IMM-AND_IMM#19,ANDOREOR_IMM-AND_IMM#20,ANDOREOR_IMM-AND_IMM#21,ANDOREOR_IMM-AND_IMM#22,ANDOREOR_IMM-AND_IMM#23,ANDOREOR_IMM-AND_IMM#24,ANDOREOR_IMM-AND_IMM#25,ANDOREOR_IMM-AND_IMM#26,ANDOREOR_IMM-AND_IMM#27,ANDOREOR_IMM-AND_IMM#28,ANDOREOR_IMM-AND_IMM#29,ANDOREOR_IMM-AND_IMM#30,ANDOREOR_IMM-AND_IMM#31,ANDOREOR_IMM-AND_IMM#32,ANDOREOR_IMM-AND_IMM#33,ANDOREOR_IMM-AND_IMM#34,ANDOREOR_IMM-AND_IMM#35,ANDOREOR_IMM-AND_IMM#36,ANDOREOR_IMM-AND_IMM#37,ANDOREOR_IMM-AND_IMM#38,ANDOREOR_IMM-AND_IMM#39,ANDOREOR_IMM-AND_IMM#40,ANDOREOR_IMM-AND_IMM#41,ANDOREOR_IMM-AND_IMM#42,ANDOREOR_IMM-AND_IMM#43,ANDOREOR_IMM-AND_IMM#44,ANDOREOR_IMM-AND_IMM#45,ANDOREOR_IMM-AND_IMM#46,ANDOREOR_IMM-AND_IMM#47,ANDOREOR_IMM-AND_IMM#48,ANDOREOR_IMM-AND_IMM#49,ANDOREOR_IMM-AND_IMM#50,ANDOREOR_IMM-AND_IMM#51,ANDOREOR_IMM-AND_IMM#52,ANDOREOR_IMM-AND_IMM#53,ANDOREOR_IMM-AND_IMM#54,ANDOREOR_IMM-AND_IMM#55,ANDOREOR_IMM-AND_IMM#56
pub const fn classify_impl_31(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x500,
    0x1 => 0x500,
    0x2 => 0x500,
    0x3 => 0x500,
    0x4 => 0x500,
    0x5 => 0x500,
    0x6 => 0x500,
    0x7 => 0x500,
    0x8 => 0x500,
    0x9 => 0x500,
    0xa => 0x500,
    0xb => 0x500,
    0xc => 0x500,
    0xd => 0x500,
    0xe => 0x500,
    0xf => 0x500,
    0x10 => 0x500,
    0x11 => 0x500,
    0x12 => 0x500,
    0x13 => 0x500,
    0x14 => 0x500,
    0x15 => 0x500,
    0x16 => 0x500,
    0x17 => 0x500,
    0x18 => 0x500,
    0x19 => 0x500,
    0x1a => 0x500,
    0x1b => 0x500,
    0x1c => 0x500,
    0x1d => 0x500,
    0x1e => 0x500,
    0x1f => 0x0,
    0x20 => 0x500,
    0x21 => 0x500,
    0x22 => 0x500,
    0x23 => 0x500,
    0x24 => 0x500,
    0x25 => 0x500,
    0x26 => 0x500,
    0x27 => 0x500,
    0x28 => 0x500,
    0x29 => 0x500,
    0x2a => 0x500,
    0x2b => 0x500,
    0x2c => 0x500,
    0x2d => 0x500,
    0x2e => 0x500,
    0x2f => 0x0,
    0x30 => 0x500,
    0x31 => 0x500,
    0x32 => 0x500,
    0x33 => 0x500,
    0x34 => 0x500,
    0x35 => 0x500,
    0x36 => 0x500,
    0x37 => 0x0,
    0x38 => 0x500,
    0x39 => 0x500,
    0x3a => 0x500,
    0x3b => 0x0,
    0x3c => 0x500,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// BFM-SBFM#0
pub const fn classify_impl_32(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x900;
}


// EXTR-EXTR#0
pub const fn classify_impl_33(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x1280;
}


// RCPCU-STLURB#0,CPY-CPYFP#0
pub const fn classify_impl_34_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6180,
    0x1 => 0x6b80,
    _ => 0,
  };
  return idx;
}


// RCPCU-STLURB#0,CPY-CPYFPWT#0
pub const fn classify_impl_34_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6180,
    0x1 => 0x6b81,
    _ => 0,
  };
  return idx;
}


// RCPCU-STLURB#0,CPY-CPYFPRT#0
pub const fn classify_impl_34_3(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6180,
    0x1 => 0x6b82,
    _ => 0,
  };
  return idx;
}


// RCPCU-STLURB#0,CPY-CPYFPT#0
pub const fn classify_impl_34_4(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6180,
    0x1 => 0x6b83,
    _ => 0,
  };
  return idx;
}


// RCPCU-STLURB#0,CPY-CPYFPWN#0
pub const fn classify_impl_34_5(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6180,
    0x1 => 0x6b84,
    _ => 0,
  };
  return idx;
}


// RCPCU-STLURB#0,CPY-CPYFPWTWN#0
pub const fn classify_impl_34_6(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6180,
    0x1 => 0x6b85,
    _ => 0,
  };
  return idx;
}


// RCPCU-STLURB#0,CPY-CPYFPRTWN#0
pub const fn classify_impl_34_7(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6180,
    0x1 => 0x6b86,
    _ => 0,
  };
  return idx;
}


// RCPCU-STLURB#0,CPY-CPYFPTWN#0
pub const fn classify_impl_34_8(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6180,
    0x1 => 0x6b87,
    _ => 0,
  };
  return idx;
}


// RCPCU-STLURB#0,CPY-CPYFPRN#0
pub const fn classify_impl_34_9(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6180,
    0x1 => 0x6b88,
    _ => 0,
  };
  return idx;
}


// RCPCU-STLURB#0,CPY-CPYFPWTRN#0
pub const fn classify_impl_34_a(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6180,
    0x1 => 0x6b89,
    _ => 0,
  };
  return idx;
}


// RCPCU-STLURB#0,CPY-CPYFPRTRN#0
pub const fn classify_impl_34_b(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6180,
    0x1 => 0x6b8a,
    _ => 0,
  };
  return idx;
}


// RCPCU-STLURB#0,CPY-CPYFPTRN#0
pub const fn classify_impl_34_c(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6180,
    0x1 => 0x6b8b,
    _ => 0,
  };
  return idx;
}


// RCPCU-STLURB#0,CPY-CPYFPN#0
pub const fn classify_impl_34_d(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6180,
    0x1 => 0x6b8c,
    _ => 0,
  };
  return idx;
}


// RCPCU-STLURB#0,CPY-CPYFPWTN#0
pub const fn classify_impl_34_e(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6180,
    0x1 => 0x6b8d,
    _ => 0,
  };
  return idx;
}


// RCPCU-STLURB#0,CPY-CPYFPRTN#0
pub const fn classify_impl_34_f(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6180,
    0x1 => 0x6b8e,
    _ => 0,
  };
  return idx;
}


// RCPCU-STLURB#0,CPY-CPYFPTN#0
pub const fn classify_impl_34_10(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6180,
    0x1 => 0x6b8f,
    _ => 0,
  };
  return idx;
}

// RCPCU-STLURB#0,CPY-CPYFP#0,CPY-CPYFPWT#0,CPY-CPYFPRT#0,CPY-CPYFPT#0,CPY-CPYFPWN#0,CPY-CPYFPWTWN#0,CPY-CPYFPRTWN#0,CPY-CPYFPTWN#0,CPY-CPYFPRN#0,CPY-CPYFPWTRN#0,CPY-CPYFPRTRN#0,CPY-CPYFPTRN#0,CPY-CPYFPN#0,CPY-CPYFPWTN#0,CPY-CPYFPRTN#0,CPY-CPYFPTN#0
pub const fn classify_impl_34(inst: u32) -> u32 {
  if (inst&0x800) != 0x0 { return 0; }
  let idx = match (inst >> 12) & 0xf {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x8,
    0x8 => 0x9,
    0x9 => 0xa,
    0xa => 0xb,
    0xb => 0xc,
    0xc => 0xd,
    0xd => 0xe,
    0xe => 0xf,
    0xf => 0x10,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_34_1(inst), // RCPCU-STLURB#0,CPY-CPYFP#0
    0x2 => return classify_impl_34_2(inst), // RCPCU-STLURB#0,CPY-CPYFPWT#0
    0x3 => return classify_impl_34_3(inst), // RCPCU-STLURB#0,CPY-CPYFPRT#0
    0x4 => return classify_impl_34_4(inst), // RCPCU-STLURB#0,CPY-CPYFPT#0
    0x5 => return classify_impl_34_5(inst), // RCPCU-STLURB#0,CPY-CPYFPWN#0
    0x6 => return classify_impl_34_6(inst), // RCPCU-STLURB#0,CPY-CPYFPWTWN#0
    0x7 => return classify_impl_34_7(inst), // RCPCU-STLURB#0,CPY-CPYFPRTWN#0
    0x8 => return classify_impl_34_8(inst), // RCPCU-STLURB#0,CPY-CPYFPTWN#0
    0x9 => return classify_impl_34_9(inst), // RCPCU-STLURB#0,CPY-CPYFPRN#0
    0xa => return classify_impl_34_a(inst), // RCPCU-STLURB#0,CPY-CPYFPWTRN#0
    0xb => return classify_impl_34_b(inst), // RCPCU-STLURB#0,CPY-CPYFPRTRN#0
    0xc => return classify_impl_34_c(inst), // RCPCU-STLURB#0,CPY-CPYFPTRN#0
    0xd => return classify_impl_34_d(inst), // RCPCU-STLURB#0,CPY-CPYFPN#0
    0xe => return classify_impl_34_e(inst), // RCPCU-STLURB#0,CPY-CPYFPWTN#0
    0xf => return classify_impl_34_f(inst), // RCPCU-STLURB#0,CPY-CPYFPRTN#0
    0x10 => return classify_impl_34_10(inst), // RCPCU-STLURB#0,CPY-CPYFPTN#0
    _ => idx
  };
  return idx;
}


// RCPCU-LDAPURB#0,CPY-CPYFM#0
pub const fn classify_impl_35_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6181,
    0x1 => 0x6b90,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURB#0,CPY-CPYFMWT#0
pub const fn classify_impl_35_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6181,
    0x1 => 0x6b91,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURB#0,CPY-CPYFMRT#0
pub const fn classify_impl_35_3(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6181,
    0x1 => 0x6b92,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURB#0,CPY-CPYFMT#0
pub const fn classify_impl_35_4(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6181,
    0x1 => 0x6b93,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURB#0,CPY-CPYFMWN#0
pub const fn classify_impl_35_5(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6181,
    0x1 => 0x6b94,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURB#0,CPY-CPYFMWTWN#0
pub const fn classify_impl_35_6(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6181,
    0x1 => 0x6b95,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURB#0,CPY-CPYFMRTWN#0
pub const fn classify_impl_35_7(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6181,
    0x1 => 0x6b96,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURB#0,CPY-CPYFMTWN#0
pub const fn classify_impl_35_8(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6181,
    0x1 => 0x6b97,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURB#0,CPY-CPYFMRN#0
pub const fn classify_impl_35_9(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6181,
    0x1 => 0x6b98,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURB#0,CPY-CPYFMWTRN#0
pub const fn classify_impl_35_a(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6181,
    0x1 => 0x6b99,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURB#0,CPY-CPYFMRTRN#0
pub const fn classify_impl_35_b(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6181,
    0x1 => 0x6b9a,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURB#0,CPY-CPYFMTRN#0
pub const fn classify_impl_35_c(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6181,
    0x1 => 0x6b9b,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURB#0,CPY-CPYFMN#0
pub const fn classify_impl_35_d(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6181,
    0x1 => 0x6b9c,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURB#0,CPY-CPYFMWTN#0
pub const fn classify_impl_35_e(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6181,
    0x1 => 0x6b9d,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURB#0,CPY-CPYFMRTN#0
pub const fn classify_impl_35_f(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6181,
    0x1 => 0x6b9e,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURB#0,CPY-CPYFMTN#0
pub const fn classify_impl_35_10(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6181,
    0x1 => 0x6b9f,
    _ => 0,
  };
  return idx;
}

// RCPCU-LDAPURB#0,CPY-CPYFM#0,CPY-CPYFMWT#0,CPY-CPYFMRT#0,CPY-CPYFMT#0,CPY-CPYFMWN#0,CPY-CPYFMWTWN#0,CPY-CPYFMRTWN#0,CPY-CPYFMTWN#0,CPY-CPYFMRN#0,CPY-CPYFMWTRN#0,CPY-CPYFMRTRN#0,CPY-CPYFMTRN#0,CPY-CPYFMN#0,CPY-CPYFMWTN#0,CPY-CPYFMRTN#0,CPY-CPYFMTN#0
pub const fn classify_impl_35(inst: u32) -> u32 {
  if (inst&0x800) != 0x0 { return 0; }
  let idx = match (inst >> 12) & 0xf {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x8,
    0x8 => 0x9,
    0x9 => 0xa,
    0xa => 0xb,
    0xb => 0xc,
    0xc => 0xd,
    0xd => 0xe,
    0xe => 0xf,
    0xf => 0x10,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_35_1(inst), // RCPCU-LDAPURB#0,CPY-CPYFM#0
    0x2 => return classify_impl_35_2(inst), // RCPCU-LDAPURB#0,CPY-CPYFMWT#0
    0x3 => return classify_impl_35_3(inst), // RCPCU-LDAPURB#0,CPY-CPYFMRT#0
    0x4 => return classify_impl_35_4(inst), // RCPCU-LDAPURB#0,CPY-CPYFMT#0
    0x5 => return classify_impl_35_5(inst), // RCPCU-LDAPURB#0,CPY-CPYFMWN#0
    0x6 => return classify_impl_35_6(inst), // RCPCU-LDAPURB#0,CPY-CPYFMWTWN#0
    0x7 => return classify_impl_35_7(inst), // RCPCU-LDAPURB#0,CPY-CPYFMRTWN#0
    0x8 => return classify_impl_35_8(inst), // RCPCU-LDAPURB#0,CPY-CPYFMTWN#0
    0x9 => return classify_impl_35_9(inst), // RCPCU-LDAPURB#0,CPY-CPYFMRN#0
    0xa => return classify_impl_35_a(inst), // RCPCU-LDAPURB#0,CPY-CPYFMWTRN#0
    0xb => return classify_impl_35_b(inst), // RCPCU-LDAPURB#0,CPY-CPYFMRTRN#0
    0xc => return classify_impl_35_c(inst), // RCPCU-LDAPURB#0,CPY-CPYFMTRN#0
    0xd => return classify_impl_35_d(inst), // RCPCU-LDAPURB#0,CPY-CPYFMN#0
    0xe => return classify_impl_35_e(inst), // RCPCU-LDAPURB#0,CPY-CPYFMWTN#0
    0xf => return classify_impl_35_f(inst), // RCPCU-LDAPURB#0,CPY-CPYFMRTN#0
    0x10 => return classify_impl_35_10(inst), // RCPCU-LDAPURB#0,CPY-CPYFMTN#0
    _ => idx
  };
  return idx;
}


// RCPCU-LDAPURSB#0,CPY-CPYFE#0
pub const fn classify_impl_36_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6182,
    0x1 => 0x6ba0,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSB#0,CPY-CPYFEWT#0
pub const fn classify_impl_36_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6182,
    0x1 => 0x6ba1,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSB#0,CPY-CPYFERT#0
pub const fn classify_impl_36_3(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6182,
    0x1 => 0x6ba2,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSB#0,CPY-CPYFET#0
pub const fn classify_impl_36_4(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6182,
    0x1 => 0x6ba3,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSB#0,CPY-CPYFEWN#0
pub const fn classify_impl_36_5(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6182,
    0x1 => 0x6ba4,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSB#0,CPY-CPYFEWTWN#0
pub const fn classify_impl_36_6(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6182,
    0x1 => 0x6ba5,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSB#0,CPY-CPYFERTWN#0
pub const fn classify_impl_36_7(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6182,
    0x1 => 0x6ba6,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSB#0,CPY-CPYFETWN#0
pub const fn classify_impl_36_8(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6182,
    0x1 => 0x6ba7,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSB#0,CPY-CPYFERN#0
pub const fn classify_impl_36_9(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6182,
    0x1 => 0x6ba8,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSB#0,CPY-CPYFEWTRN#0
pub const fn classify_impl_36_a(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6182,
    0x1 => 0x6ba9,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSB#0,CPY-CPYFERTRN#0
pub const fn classify_impl_36_b(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6182,
    0x1 => 0x6baa,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSB#0,CPY-CPYFETRN#0
pub const fn classify_impl_36_c(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6182,
    0x1 => 0x6bab,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSB#0,CPY-CPYFEN#0
pub const fn classify_impl_36_d(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6182,
    0x1 => 0x6bac,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSB#0,CPY-CPYFEWTN#0
pub const fn classify_impl_36_e(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6182,
    0x1 => 0x6bad,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSB#0,CPY-CPYFERTN#0
pub const fn classify_impl_36_f(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6182,
    0x1 => 0x6bae,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSB#0,CPY-CPYFETN#0
pub const fn classify_impl_36_10(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6182,
    0x1 => 0x6baf,
    _ => 0,
  };
  return idx;
}

// RCPCU-LDAPURSB#0,CPY-CPYFE#0,CPY-CPYFEWT#0,CPY-CPYFERT#0,CPY-CPYFET#0,CPY-CPYFEWN#0,CPY-CPYFEWTWN#0,CPY-CPYFERTWN#0,CPY-CPYFETWN#0,CPY-CPYFERN#0,CPY-CPYFEWTRN#0,CPY-CPYFERTRN#0,CPY-CPYFETRN#0,CPY-CPYFEN#0,CPY-CPYFEWTN#0,CPY-CPYFERTN#0,CPY-CPYFETN#0
pub const fn classify_impl_36(inst: u32) -> u32 {
  if (inst&0x800) != 0x0 { return 0; }
  let idx = match (inst >> 12) & 0xf {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x8,
    0x8 => 0x9,
    0x9 => 0xa,
    0xa => 0xb,
    0xb => 0xc,
    0xc => 0xd,
    0xd => 0xe,
    0xe => 0xf,
    0xf => 0x10,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_36_1(inst), // RCPCU-LDAPURSB#0,CPY-CPYFE#0
    0x2 => return classify_impl_36_2(inst), // RCPCU-LDAPURSB#0,CPY-CPYFEWT#0
    0x3 => return classify_impl_36_3(inst), // RCPCU-LDAPURSB#0,CPY-CPYFERT#0
    0x4 => return classify_impl_36_4(inst), // RCPCU-LDAPURSB#0,CPY-CPYFET#0
    0x5 => return classify_impl_36_5(inst), // RCPCU-LDAPURSB#0,CPY-CPYFEWN#0
    0x6 => return classify_impl_36_6(inst), // RCPCU-LDAPURSB#0,CPY-CPYFEWTWN#0
    0x7 => return classify_impl_36_7(inst), // RCPCU-LDAPURSB#0,CPY-CPYFERTWN#0
    0x8 => return classify_impl_36_8(inst), // RCPCU-LDAPURSB#0,CPY-CPYFETWN#0
    0x9 => return classify_impl_36_9(inst), // RCPCU-LDAPURSB#0,CPY-CPYFERN#0
    0xa => return classify_impl_36_a(inst), // RCPCU-LDAPURSB#0,CPY-CPYFEWTRN#0
    0xb => return classify_impl_36_b(inst), // RCPCU-LDAPURSB#0,CPY-CPYFERTRN#0
    0xc => return classify_impl_36_c(inst), // RCPCU-LDAPURSB#0,CPY-CPYFETRN#0
    0xd => return classify_impl_36_d(inst), // RCPCU-LDAPURSB#0,CPY-CPYFEN#0
    0xe => return classify_impl_36_e(inst), // RCPCU-LDAPURSB#0,CPY-CPYFEWTN#0
    0xf => return classify_impl_36_f(inst), // RCPCU-LDAPURSB#0,CPY-CPYFERTN#0
    0x10 => return classify_impl_36_10(inst), // RCPCU-LDAPURSB#0,CPY-CPYFETN#0
    _ => idx
  };
  return idx;
}


// RCPCU-LDAPURSBW#0,SET-SETP#0
pub const fn classify_impl_37_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6183,
    0x1 => 0x6c00,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSBW#0,SET-SETPT#0
pub const fn classify_impl_37_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6183,
    0x1 => 0x6c01,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSBW#0,SET-SETPN#0
pub const fn classify_impl_37_3(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6183,
    0x1 => 0x6c02,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSBW#0,SET-SETPTN#0
pub const fn classify_impl_37_4(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6183,
    0x1 => 0x6c03,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSBW#0,SET-SETM#0
pub const fn classify_impl_37_5(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6183,
    0x1 => 0x6c04,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSBW#0,SET-SETMT#0
pub const fn classify_impl_37_6(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6183,
    0x1 => 0x6c05,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSBW#0,SET-SETMN#0
pub const fn classify_impl_37_7(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6183,
    0x1 => 0x6c06,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSBW#0,SET-SETMTN#0
pub const fn classify_impl_37_8(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6183,
    0x1 => 0x6c07,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSBW#0,SET-SETE#0
pub const fn classify_impl_37_9(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6183,
    0x1 => 0x6c08,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSBW#0,SET-SETET#0
pub const fn classify_impl_37_a(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6183,
    0x1 => 0x6c09,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSBW#0,SET-SETEN#0
pub const fn classify_impl_37_b(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6183,
    0x1 => 0x6c0a,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSBW#0,SET-SETETN#0
pub const fn classify_impl_37_c(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6183,
    0x1 => 0x6c0b,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPURSBW#0
pub const fn classify_impl_37_d(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6183;
}

// RCPCU-LDAPURSBW#0,SET-SETP#0,SET-SETPT#0,SET-SETPN#0,SET-SETPTN#0,SET-SETM#0,SET-SETMT#0,SET-SETMN#0,SET-SETMTN#0,SET-SETE#0,SET-SETET#0,SET-SETEN#0,SET-SETETN#0
pub const fn classify_impl_37(inst: u32) -> u32 {
  if (inst&0x800) != 0x0 { return 0; }
  let idx = match (inst >> 12) & 0xf {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x8,
    0x8 => 0x9,
    0x9 => 0xa,
    0xa => 0xb,
    0xb => 0xc,
    0xc => 0xd,
    0xd => 0xd,
    0xe => 0xd,
    0xf => 0xd,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_37_1(inst), // RCPCU-LDAPURSBW#0,SET-SETP#0
    0x2 => return classify_impl_37_2(inst), // RCPCU-LDAPURSBW#0,SET-SETPT#0
    0x3 => return classify_impl_37_3(inst), // RCPCU-LDAPURSBW#0,SET-SETPN#0
    0x4 => return classify_impl_37_4(inst), // RCPCU-LDAPURSBW#0,SET-SETPTN#0
    0x5 => return classify_impl_37_5(inst), // RCPCU-LDAPURSBW#0,SET-SETM#0
    0x6 => return classify_impl_37_6(inst), // RCPCU-LDAPURSBW#0,SET-SETMT#0
    0x7 => return classify_impl_37_7(inst), // RCPCU-LDAPURSBW#0,SET-SETMN#0
    0x8 => return classify_impl_37_8(inst), // RCPCU-LDAPURSBW#0,SET-SETMTN#0
    0x9 => return classify_impl_37_9(inst), // RCPCU-LDAPURSBW#0,SET-SETE#0
    0xa => return classify_impl_37_a(inst), // RCPCU-LDAPURSBW#0,SET-SETET#0
    0xb => return classify_impl_37_b(inst), // RCPCU-LDAPURSBW#0,SET-SETEN#0
    0xc => return classify_impl_37_c(inst), // RCPCU-LDAPURSBW#0,SET-SETETN#0
    0xd => return classify_impl_37_d(inst), // RCPCU-LDAPURSBW#0
    _ => idx
  };
  return idx;
}


// ADCSBC-ADC#0
pub const fn classify_impl_38(inst: u32) -> u32 {
  if (inst&0xfc00) != 0x0 { return 0; }
  return 0x280;
}


// CSEL-CSEL#0,CSEL-CSINC#0
pub const fn classify_impl_39(inst: u32) -> u32 {
  if (inst&0x800) != 0x0 { return 0; }
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x1200,
    0x1 => 0x1201,
    _ => 0,
  };
  return idx;
}


// SHIFTV-LSLV#0,SHIFTV-LSRV#0,SHIFTV-ASRV#0,SHIFTV-RORV#0,MINMAX_REG-SMAX_GP#0,MINMAX_REG-UMAX_GP#0,MINMAX_REG-SMIN_GP#0,MINMAX_REG-UMIN_GP#0,DIV-UDIV#0,DIV-SDIV#0,CRC32-CRC32B#0,CRC32-CRC32H#0,CRC32-CRC32W#0,CRC32-CRC32CB#0,CRC32-CRC32CH#0,CRC32-CRC32CW#0
pub const fn classify_impl_3a(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x1580,
    0x3 => 0x1581,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x600,
    0x9 => 0x601,
    0xa => 0x602,
    0xb => 0x603,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x6280,
    0x11 => 0x6281,
    0x12 => 0x6282,
    0x13 => 0x0,
    0x14 => 0x6283,
    0x15 => 0x6284,
    0x16 => 0x6285,
    0x17 => 0x0,
    0x18 => 0x1180,
    0x19 => 0x1181,
    0x1a => 0x1182,
    0x1b => 0x1183,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x0,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// MUL-MADD#0,MUL-MSUB#0
pub const fn classify_impl_3b(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x680,
    0x1 => 0x681,
    _ => 0,
  };
  return idx;
}


// CPY-CPYP#0,CPY-CPYPWT#0,CPY-CPYPRT#0,CPY-CPYPT#0,CPY-CPYPWN#0,CPY-CPYPWTWN#0,CPY-CPYPRTWN#0,CPY-CPYPTWN#0,CPY-CPYPRN#0,CPY-CPYPWTRN#0,CPY-CPYPRTRN#0,CPY-CPYPTRN#0,CPY-CPYPN#0,CPY-CPYPWTN#0,CPY-CPYPRTN#0,CPY-CPYPTN#0
pub const fn classify_impl_3c(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  let idx = match (inst >> 12) & 0xf {
    0x0 => 0x6bb0,
    0x1 => 0x6bb1,
    0x2 => 0x6bb2,
    0x3 => 0x6bb3,
    0x4 => 0x6bb4,
    0x5 => 0x6bb5,
    0x6 => 0x6bb6,
    0x7 => 0x6bb7,
    0x8 => 0x6bb8,
    0x9 => 0x6bb9,
    0xa => 0x6bba,
    0xb => 0x6bbb,
    0xc => 0x6bbc,
    0xd => 0x6bbd,
    0xe => 0x6bbe,
    0xf => 0x6bbf,
    _ => 0,
  };
  return idx;
}


// CPY-CPYM#0,CPY-CPYMWT#0,CPY-CPYMRT#0,CPY-CPYMT#0,CPY-CPYMWN#0,CPY-CPYMWTWN#0,CPY-CPYMRTWN#0,CPY-CPYMTWN#0,CPY-CPYMRN#0,CPY-CPYMWTRN#0,CPY-CPYMRTRN#0,CPY-CPYMTRN#0,CPY-CPYMN#0,CPY-CPYMWTN#0,CPY-CPYMRTN#0,CPY-CPYMTN#0
pub const fn classify_impl_3d(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  let idx = match (inst >> 12) & 0xf {
    0x0 => 0x6bc0,
    0x1 => 0x6bc1,
    0x2 => 0x6bc2,
    0x3 => 0x6bc3,
    0x4 => 0x6bc4,
    0x5 => 0x6bc5,
    0x6 => 0x6bc6,
    0x7 => 0x6bc7,
    0x8 => 0x6bc8,
    0x9 => 0x6bc9,
    0xa => 0x6bca,
    0xb => 0x6bcb,
    0xc => 0x6bcc,
    0xd => 0x6bcd,
    0xe => 0x6bce,
    0xf => 0x6bcf,
    _ => 0,
  };
  return idx;
}


// CPY-CPYE#0,CPY-CPYEWT#0,CPY-CPYERT#0,CPY-CPYET#0,CPY-CPYEWN#0,CPY-CPYEWTWN#0,CPY-CPYERTWN#0,CPY-CPYETWN#0,CPY-CPYERN#0,CPY-CPYEWTRN#0,CPY-CPYERTRN#0,CPY-CPYETRN#0,CPY-CPYEN#0,CPY-CPYEWTN#0,CPY-CPYERTN#0,CPY-CPYETN#0
pub const fn classify_impl_3e(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  let idx = match (inst >> 12) & 0xf {
    0x0 => 0x6bd0,
    0x1 => 0x6bd1,
    0x2 => 0x6bd2,
    0x3 => 0x6bd3,
    0x4 => 0x6bd4,
    0x5 => 0x6bd5,
    0x6 => 0x6bd6,
    0x7 => 0x6bd7,
    0x8 => 0x6bd8,
    0x9 => 0x6bd9,
    0xa => 0x6bda,
    0xb => 0x6bdb,
    0xc => 0x6bdc,
    0xd => 0x6bdd,
    0xe => 0x6bde,
    0xf => 0x6bdf,
    _ => 0,
  };
  return idx;
}


// SET-SETGP#0,SET-SETGPT#0,SET-SETGPN#0,SET-SETGPTN#0,SET-SETGM#0,SET-SETGMT#0,SET-SETGMN#0,SET-SETGMTN#0,SET-SETGE#0,SET-SETGET#0,SET-SETGEN#0,SET-SETGETN#0
pub const fn classify_impl_3f(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  let idx = match (inst >> 12) & 0xf {
    0x0 => 0x6c0c,
    0x1 => 0x6c0d,
    0x2 => 0x6c0e,
    0x3 => 0x6c0f,
    0x4 => 0x6c10,
    0x5 => 0x6c11,
    0x6 => 0x6c12,
    0x7 => 0x6c13,
    0x8 => 0x6c14,
    0x9 => 0x6c15,
    0xa => 0x6c16,
    0xb => 0x6c17,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    _ => 0,
  };
  return idx;
}


// FCVT_FROMFIXED-SCVTF_FIX#0,FCVT_FROMFIXED-UCVTF_FIX#0
pub const fn classify_impl_40(inst: u32) -> u32 {
  if (inst&0xe8000) != 0x28000 { return 0; }
  let idx = match (inst >> 16) & 0x1 {
    0x0 => 0x2000,
    0x1 => 0x2001,
    _ => 0,
  };
  return idx;
}


// FCVT_TOFIXED-FCVTZS_FIX#0,FCVT_TOFIXED-FCVTZU_FIX#0
pub const fn classify_impl_41(inst: u32) -> u32 {
  if (inst&0xe8000) != 0x88000 { return 0; }
  let idx = match (inst >> 16) & 0x1 {
    0x0 => 0x1f80,
    0x1 => 0x1f81,
    _ => 0,
  };
  return idx;
}


// FCCMP-FCCMP#0,FCCMP-FCCMPE#0
pub const fn classify_impl_42_1(inst: u32) -> u32 {
  let idx = match (inst >> 4) & 0x1 {
    0x0 => 0x2680,
    0x1 => 0x2681,
    _ => 0,
  };
  return idx;
}


// FMOV_IMM-FMOV_IMM#0
pub const fn classify_impl_42_2(inst: u32) -> u32 {
  if (inst&0x3e0) != 0x0 { return 0; }
  return 0x2500;
}


// FCMP-FCMP#0,FCMP-FCMP_ZERO#0,FCMP-FCMPE#0,FCMP-FCMPE_ZERO#0
pub const fn classify_impl_42_3(inst: u32) -> u32 {
  if (inst&0x7) != 0x0 { return 0; }
  let idx = match (inst >> 3) & 0x3 {
    0x0 => 0x2600,
    0x1 => 0x2601,
    0x2 => 0x2602,
    0x3 => 0x2603,
    _ => 0,
  };
  return idx;
}

// FCVT_TOINT-FCVTNS#0,FCVT_TOINT-FCVTNU#0,FCVT_TOINT-FCVTAS#0,FCVT_TOINT-FCVTAU#0,FCVT_TOINT-FCVTPS#0,FCVT_TOINT-FCVTPU#0,FCVT_FROMINT-SCVTF#0,FCVT_FROMINT-UCVTF#0,FMOV_TOGP-FMOV_TOGP#0,FMOV_FROMGP-FMOV_FROM#0,FCVT_FP-FCVT#0,FCVT_FP-FCVT#1,FRINT-FRINTN#0,FRINT-FRINTP#0,FRINT-FRINTM#0,FRINT-FRINTZ#0,FRINT-FRINTA#0,FRINT-FRINTX#0,FRINT-FRINTI#0,FRINTTS-FRINT32Z#0,FRINTTS-FRINT32X#0,FRINTTS-FRINT64Z#0,FRINTTS-FRINT64X#0,FARITH1-FMOV#0,FARITH1-FABS#0,FARITH1-FNEG#0,FARITH1-FSQRT#0,FMOV_IMM-FMOV_IMM#0,FARITH2-FMUL#0,FARITH2-FDIV#0,FARITH2-FADD#0,FARITH2-FSUB#0,FARITH2-FMAX#0,FARITH2-FMIN#0,FARITH2-FMAXNM#0,FARITH2-FMINNM#0,FARITH2-FNMUL#0,FCMP-FCMP#0,FCMP-FCMP_ZERO#0,FCMP-FCMPE#0,FCMP-FCMPE_ZERO#0,FCCMP-FCCMP#0,FCCMP-FCCMPE#0,FCSEL-FCSEL#0
pub const fn classify_impl_42(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3ff {
    0x0 => 0x2080,
    0x1 => 0x1,
    0x2 => 0x2580,
    0x3 => 0x2700,
    0x4 => 0x2,
    0x5 => 0x1,
    0x6 => 0x2581,
    0x7 => 0x2700,
    0x8 => 0x3,
    0x9 => 0x1,
    0xa => 0x2582,
    0xb => 0x2700,
    0xc => 0x2,
    0xd => 0x1,
    0xe => 0x2583,
    0xf => 0x2700,
    0x10 => 0x2480,
    0x11 => 0x1,
    0x12 => 0x2584,
    0x13 => 0x2700,
    0x14 => 0x2,
    0x15 => 0x1,
    0x16 => 0x2585,
    0x17 => 0x2700,
    0x18 => 0x0,
    0x19 => 0x1,
    0x1a => 0x2586,
    0x1b => 0x2700,
    0x1c => 0x2,
    0x1d => 0x1,
    0x1e => 0x2587,
    0x1f => 0x2700,
    0x20 => 0x0,
    0x21 => 0x1,
    0x22 => 0x2588,
    0x23 => 0x2700,
    0x24 => 0x2,
    0x25 => 0x1,
    0x26 => 0x0,
    0x27 => 0x2700,
    0x28 => 0x0,
    0x29 => 0x1,
    0x2a => 0x0,
    0x2b => 0x2700,
    0x2c => 0x2,
    0x2d => 0x1,
    0x2e => 0x0,
    0x2f => 0x2700,
    0x30 => 0x2481,
    0x31 => 0x1,
    0x32 => 0x0,
    0x33 => 0x2700,
    0x34 => 0x2,
    0x35 => 0x1,
    0x36 => 0x0,
    0x37 => 0x2700,
    0x38 => 0x0,
    0x39 => 0x1,
    0x3a => 0x0,
    0x3b => 0x2700,
    0x3c => 0x2,
    0x3d => 0x1,
    0x3e => 0x0,
    0x3f => 0x2700,
    0x40 => 0x2081,
    0x41 => 0x1,
    0x42 => 0x2580,
    0x43 => 0x2700,
    0x44 => 0x2,
    0x45 => 0x1,
    0x46 => 0x2581,
    0x47 => 0x2700,
    0x48 => 0x3,
    0x49 => 0x1,
    0x4a => 0x2582,
    0x4b => 0x2700,
    0x4c => 0x2,
    0x4d => 0x1,
    0x4e => 0x2583,
    0x4f => 0x2700,
    0x50 => 0x2482,
    0x51 => 0x1,
    0x52 => 0x2584,
    0x53 => 0x2700,
    0x54 => 0x2,
    0x55 => 0x1,
    0x56 => 0x2585,
    0x57 => 0x2700,
    0x58 => 0x0,
    0x59 => 0x1,
    0x5a => 0x2586,
    0x5b => 0x2700,
    0x5c => 0x2,
    0x5d => 0x1,
    0x5e => 0x2587,
    0x5f => 0x2700,
    0x60 => 0x0,
    0x61 => 0x1,
    0x62 => 0x2588,
    0x63 => 0x2700,
    0x64 => 0x2,
    0x65 => 0x1,
    0x66 => 0x0,
    0x67 => 0x2700,
    0x68 => 0x0,
    0x69 => 0x1,
    0x6a => 0x0,
    0x6b => 0x2700,
    0x6c => 0x2,
    0x6d => 0x1,
    0x6e => 0x0,
    0x6f => 0x2700,
    0x70 => 0x2483,
    0x71 => 0x1,
    0x72 => 0x0,
    0x73 => 0x2700,
    0x74 => 0x2,
    0x75 => 0x1,
    0x76 => 0x0,
    0x77 => 0x2700,
    0x78 => 0x0,
    0x79 => 0x1,
    0x7a => 0x0,
    0x7b => 0x2700,
    0x7c => 0x2,
    0x7d => 0x1,
    0x7e => 0x0,
    0x7f => 0x2700,
    0x80 => 0x2100,
    0x81 => 0x1,
    0x82 => 0x2580,
    0x83 => 0x2700,
    0x84 => 0x2,
    0x85 => 0x1,
    0x86 => 0x2581,
    0x87 => 0x2700,
    0x88 => 0x3,
    0x89 => 0x1,
    0x8a => 0x2582,
    0x8b => 0x2700,
    0x8c => 0x2,
    0x8d => 0x1,
    0x8e => 0x2583,
    0x8f => 0x2700,
    0x90 => 0x0,
    0x91 => 0x1,
    0x92 => 0x2584,
    0x93 => 0x2700,
    0x94 => 0x2,
    0x95 => 0x1,
    0x96 => 0x2585,
    0x97 => 0x2700,
    0x98 => 0x0,
    0x99 => 0x1,
    0x9a => 0x2586,
    0x9b => 0x2700,
    0x9c => 0x2,
    0x9d => 0x1,
    0x9e => 0x2587,
    0x9f => 0x2700,
    0xa0 => 0x0,
    0xa1 => 0x1,
    0xa2 => 0x2588,
    0xa3 => 0x2700,
    0xa4 => 0x2,
    0xa5 => 0x1,
    0xa6 => 0x0,
    0xa7 => 0x2700,
    0xa8 => 0x0,
    0xa9 => 0x1,
    0xaa => 0x0,
    0xab => 0x2700,
    0xac => 0x2,
    0xad => 0x1,
    0xae => 0x0,
    0xaf => 0x2700,
    0xb0 => 0x2300,
    0xb1 => 0x1,
    0xb2 => 0x0,
    0xb3 => 0x2700,
    0xb4 => 0x2,
    0xb5 => 0x1,
    0xb6 => 0x0,
    0xb7 => 0x2700,
    0xb8 => 0x0,
    0xb9 => 0x1,
    0xba => 0x0,
    0xbb => 0x2700,
    0xbc => 0x2,
    0xbd => 0x1,
    0xbe => 0x0,
    0xbf => 0x2700,
    0xc0 => 0x2101,
    0xc1 => 0x1,
    0xc2 => 0x2580,
    0xc3 => 0x2700,
    0xc4 => 0x2,
    0xc5 => 0x1,
    0xc6 => 0x2581,
    0xc7 => 0x2700,
    0xc8 => 0x3,
    0xc9 => 0x1,
    0xca => 0x2582,
    0xcb => 0x2700,
    0xcc => 0x2,
    0xcd => 0x1,
    0xce => 0x2583,
    0xcf => 0x2700,
    0xd0 => 0x0,
    0xd1 => 0x1,
    0xd2 => 0x2584,
    0xd3 => 0x2700,
    0xd4 => 0x2,
    0xd5 => 0x1,
    0xd6 => 0x2585,
    0xd7 => 0x2700,
    0xd8 => 0x0,
    0xd9 => 0x1,
    0xda => 0x2586,
    0xdb => 0x2700,
    0xdc => 0x2,
    0xdd => 0x1,
    0xde => 0x2587,
    0xdf => 0x2700,
    0xe0 => 0x0,
    0xe1 => 0x1,
    0xe2 => 0x2588,
    0xe3 => 0x2700,
    0xe4 => 0x2,
    0xe5 => 0x1,
    0xe6 => 0x0,
    0xe7 => 0x2700,
    0xe8 => 0x0,
    0xe9 => 0x1,
    0xea => 0x0,
    0xeb => 0x2700,
    0xec => 0x2,
    0xed => 0x1,
    0xee => 0x0,
    0xef => 0x2700,
    0xf0 => 0x2300,
    0xf1 => 0x1,
    0xf2 => 0x0,
    0xf3 => 0x2700,
    0xf4 => 0x2,
    0xf5 => 0x1,
    0xf6 => 0x0,
    0xf7 => 0x2700,
    0xf8 => 0x0,
    0xf9 => 0x1,
    0xfa => 0x0,
    0xfb => 0x2700,
    0xfc => 0x2,
    0xfd => 0x1,
    0xfe => 0x0,
    0xff => 0x2700,
    0x100 => 0x2082,
    0x101 => 0x1,
    0x102 => 0x2580,
    0x103 => 0x2700,
    0x104 => 0x2,
    0x105 => 0x1,
    0x106 => 0x2581,
    0x107 => 0x2700,
    0x108 => 0x3,
    0x109 => 0x1,
    0x10a => 0x2582,
    0x10b => 0x2700,
    0x10c => 0x2,
    0x10d => 0x1,
    0x10e => 0x2583,
    0x10f => 0x2700,
    0x110 => 0x2380,
    0x111 => 0x1,
    0x112 => 0x2584,
    0x113 => 0x2700,
    0x114 => 0x2,
    0x115 => 0x1,
    0x116 => 0x2585,
    0x117 => 0x2700,
    0x118 => 0x0,
    0x119 => 0x1,
    0x11a => 0x2586,
    0x11b => 0x2700,
    0x11c => 0x2,
    0x11d => 0x1,
    0x11e => 0x2587,
    0x11f => 0x2700,
    0x120 => 0x0,
    0x121 => 0x1,
    0x122 => 0x2588,
    0x123 => 0x2700,
    0x124 => 0x2,
    0x125 => 0x1,
    0x126 => 0x0,
    0x127 => 0x2700,
    0x128 => 0x0,
    0x129 => 0x1,
    0x12a => 0x0,
    0x12b => 0x2700,
    0x12c => 0x2,
    0x12d => 0x1,
    0x12e => 0x0,
    0x12f => 0x2700,
    0x130 => 0x2381,
    0x131 => 0x1,
    0x132 => 0x0,
    0x133 => 0x2700,
    0x134 => 0x2,
    0x135 => 0x1,
    0x136 => 0x0,
    0x137 => 0x2700,
    0x138 => 0x0,
    0x139 => 0x1,
    0x13a => 0x0,
    0x13b => 0x2700,
    0x13c => 0x2,
    0x13d => 0x1,
    0x13e => 0x0,
    0x13f => 0x2700,
    0x140 => 0x2083,
    0x141 => 0x1,
    0x142 => 0x2580,
    0x143 => 0x2700,
    0x144 => 0x2,
    0x145 => 0x1,
    0x146 => 0x2581,
    0x147 => 0x2700,
    0x148 => 0x3,
    0x149 => 0x1,
    0x14a => 0x2582,
    0x14b => 0x2700,
    0x14c => 0x2,
    0x14d => 0x1,
    0x14e => 0x2583,
    0x14f => 0x2700,
    0x150 => 0x2382,
    0x151 => 0x1,
    0x152 => 0x2584,
    0x153 => 0x2700,
    0x154 => 0x2,
    0x155 => 0x1,
    0x156 => 0x2585,
    0x157 => 0x2700,
    0x158 => 0x0,
    0x159 => 0x1,
    0x15a => 0x2586,
    0x15b => 0x2700,
    0x15c => 0x2,
    0x15d => 0x1,
    0x15e => 0x2587,
    0x15f => 0x2700,
    0x160 => 0x0,
    0x161 => 0x1,
    0x162 => 0x2588,
    0x163 => 0x2700,
    0x164 => 0x2,
    0x165 => 0x1,
    0x166 => 0x0,
    0x167 => 0x2700,
    0x168 => 0x0,
    0x169 => 0x1,
    0x16a => 0x0,
    0x16b => 0x2700,
    0x16c => 0x2,
    0x16d => 0x1,
    0x16e => 0x0,
    0x16f => 0x2700,
    0x170 => 0x2383,
    0x171 => 0x1,
    0x172 => 0x0,
    0x173 => 0x2700,
    0x174 => 0x2,
    0x175 => 0x1,
    0x176 => 0x0,
    0x177 => 0x2700,
    0x178 => 0x0,
    0x179 => 0x1,
    0x17a => 0x0,
    0x17b => 0x2700,
    0x17c => 0x2,
    0x17d => 0x1,
    0x17e => 0x0,
    0x17f => 0x2700,
    0x180 => 0x2180,
    0x181 => 0x1,
    0x182 => 0x2580,
    0x183 => 0x2700,
    0x184 => 0x2,
    0x185 => 0x1,
    0x186 => 0x2581,
    0x187 => 0x2700,
    0x188 => 0x3,
    0x189 => 0x1,
    0x18a => 0x2582,
    0x18b => 0x2700,
    0x18c => 0x2,
    0x18d => 0x1,
    0x18e => 0x2583,
    0x18f => 0x2700,
    0x190 => 0x2384,
    0x191 => 0x1,
    0x192 => 0x2584,
    0x193 => 0x2700,
    0x194 => 0x2,
    0x195 => 0x1,
    0x196 => 0x2585,
    0x197 => 0x2700,
    0x198 => 0x0,
    0x199 => 0x1,
    0x19a => 0x2586,
    0x19b => 0x2700,
    0x19c => 0x2,
    0x19d => 0x1,
    0x19e => 0x2587,
    0x19f => 0x2700,
    0x1a0 => 0x0,
    0x1a1 => 0x1,
    0x1a2 => 0x2588,
    0x1a3 => 0x2700,
    0x1a4 => 0x2,
    0x1a5 => 0x1,
    0x1a6 => 0x0,
    0x1a7 => 0x2700,
    0x1a8 => 0x0,
    0x1a9 => 0x1,
    0x1aa => 0x0,
    0x1ab => 0x2700,
    0x1ac => 0x2,
    0x1ad => 0x1,
    0x1ae => 0x0,
    0x1af => 0x2700,
    0x1b0 => 0x0,
    0x1b1 => 0x1,
    0x1b2 => 0x0,
    0x1b3 => 0x2700,
    0x1b4 => 0x2,
    0x1b5 => 0x1,
    0x1b6 => 0x0,
    0x1b7 => 0x2700,
    0x1b8 => 0x0,
    0x1b9 => 0x1,
    0x1ba => 0x0,
    0x1bb => 0x2700,
    0x1bc => 0x2,
    0x1bd => 0x1,
    0x1be => 0x0,
    0x1bf => 0x2700,
    0x1c0 => 0x2200,
    0x1c1 => 0x1,
    0x1c2 => 0x2580,
    0x1c3 => 0x2700,
    0x1c4 => 0x2,
    0x1c5 => 0x1,
    0x1c6 => 0x2581,
    0x1c7 => 0x2700,
    0x1c8 => 0x3,
    0x1c9 => 0x1,
    0x1ca => 0x2582,
    0x1cb => 0x2700,
    0x1cc => 0x2,
    0x1cd => 0x1,
    0x1ce => 0x2583,
    0x1cf => 0x2700,
    0x1d0 => 0x2385,
    0x1d1 => 0x1,
    0x1d2 => 0x2584,
    0x1d3 => 0x2700,
    0x1d4 => 0x2,
    0x1d5 => 0x1,
    0x1d6 => 0x2585,
    0x1d7 => 0x2700,
    0x1d8 => 0x0,
    0x1d9 => 0x1,
    0x1da => 0x2586,
    0x1db => 0x2700,
    0x1dc => 0x2,
    0x1dd => 0x1,
    0x1de => 0x2587,
    0x1df => 0x2700,
    0x1e0 => 0x0,
    0x1e1 => 0x1,
    0x1e2 => 0x2588,
    0x1e3 => 0x2700,
    0x1e4 => 0x2,
    0x1e5 => 0x1,
    0x1e6 => 0x0,
    0x1e7 => 0x2700,
    0x1e8 => 0x0,
    0x1e9 => 0x1,
    0x1ea => 0x0,
    0x1eb => 0x2700,
    0x1ec => 0x2,
    0x1ed => 0x1,
    0x1ee => 0x0,
    0x1ef => 0x2700,
    0x1f0 => 0x2386,
    0x1f1 => 0x1,
    0x1f2 => 0x0,
    0x1f3 => 0x2700,
    0x1f4 => 0x2,
    0x1f5 => 0x1,
    0x1f6 => 0x0,
    0x1f7 => 0x2700,
    0x1f8 => 0x0,
    0x1f9 => 0x1,
    0x1fa => 0x0,
    0x1fb => 0x2700,
    0x1fc => 0x2,
    0x1fd => 0x1,
    0x1fe => 0x0,
    0x1ff => 0x2700,
    0x200 => 0x2084,
    0x201 => 0x1,
    0x202 => 0x2580,
    0x203 => 0x2700,
    0x204 => 0x2,
    0x205 => 0x1,
    0x206 => 0x2581,
    0x207 => 0x2700,
    0x208 => 0x3,
    0x209 => 0x1,
    0x20a => 0x2582,
    0x20b => 0x2700,
    0x20c => 0x2,
    0x20d => 0x1,
    0x20e => 0x2583,
    0x20f => 0x2700,
    0x210 => 0x2400,
    0x211 => 0x1,
    0x212 => 0x2584,
    0x213 => 0x2700,
    0x214 => 0x2,
    0x215 => 0x1,
    0x216 => 0x2585,
    0x217 => 0x2700,
    0x218 => 0x0,
    0x219 => 0x1,
    0x21a => 0x2586,
    0x21b => 0x2700,
    0x21c => 0x2,
    0x21d => 0x1,
    0x21e => 0x2587,
    0x21f => 0x2700,
    0x220 => 0x0,
    0x221 => 0x1,
    0x222 => 0x2588,
    0x223 => 0x2700,
    0x224 => 0x2,
    0x225 => 0x1,
    0x226 => 0x0,
    0x227 => 0x2700,
    0x228 => 0x0,
    0x229 => 0x1,
    0x22a => 0x0,
    0x22b => 0x2700,
    0x22c => 0x2,
    0x22d => 0x1,
    0x22e => 0x0,
    0x22f => 0x2700,
    0x230 => 0x2401,
    0x231 => 0x1,
    0x232 => 0x0,
    0x233 => 0x2700,
    0x234 => 0x2,
    0x235 => 0x1,
    0x236 => 0x0,
    0x237 => 0x2700,
    0x238 => 0x0,
    0x239 => 0x1,
    0x23a => 0x0,
    0x23b => 0x2700,
    0x23c => 0x2,
    0x23d => 0x1,
    0x23e => 0x0,
    0x23f => 0x2700,
    0x240 => 0x2085,
    0x241 => 0x1,
    0x242 => 0x2580,
    0x243 => 0x2700,
    0x244 => 0x2,
    0x245 => 0x1,
    0x246 => 0x2581,
    0x247 => 0x2700,
    0x248 => 0x3,
    0x249 => 0x1,
    0x24a => 0x2582,
    0x24b => 0x2700,
    0x24c => 0x2,
    0x24d => 0x1,
    0x24e => 0x2583,
    0x24f => 0x2700,
    0x250 => 0x2402,
    0x251 => 0x1,
    0x252 => 0x2584,
    0x253 => 0x2700,
    0x254 => 0x2,
    0x255 => 0x1,
    0x256 => 0x2585,
    0x257 => 0x2700,
    0x258 => 0x0,
    0x259 => 0x1,
    0x25a => 0x2586,
    0x25b => 0x2700,
    0x25c => 0x2,
    0x25d => 0x1,
    0x25e => 0x2587,
    0x25f => 0x2700,
    0x260 => 0x0,
    0x261 => 0x1,
    0x262 => 0x2588,
    0x263 => 0x2700,
    0x264 => 0x2,
    0x265 => 0x1,
    0x266 => 0x0,
    0x267 => 0x2700,
    0x268 => 0x0,
    0x269 => 0x1,
    0x26a => 0x0,
    0x26b => 0x2700,
    0x26c => 0x2,
    0x26d => 0x1,
    0x26e => 0x0,
    0x26f => 0x2700,
    0x270 => 0x2403,
    0x271 => 0x1,
    0x272 => 0x0,
    0x273 => 0x2700,
    0x274 => 0x2,
    0x275 => 0x1,
    0x276 => 0x0,
    0x277 => 0x2700,
    0x278 => 0x0,
    0x279 => 0x1,
    0x27a => 0x0,
    0x27b => 0x2700,
    0x27c => 0x2,
    0x27d => 0x1,
    0x27e => 0x0,
    0x27f => 0x2700,
    0x280 => 0x0,
    0x281 => 0x1,
    0x282 => 0x2580,
    0x283 => 0x2700,
    0x284 => 0x2,
    0x285 => 0x1,
    0x286 => 0x2581,
    0x287 => 0x2700,
    0x288 => 0x3,
    0x289 => 0x1,
    0x28a => 0x2582,
    0x28b => 0x2700,
    0x28c => 0x2,
    0x28d => 0x1,
    0x28e => 0x2583,
    0x28f => 0x2700,
    0x290 => 0x0,
    0x291 => 0x1,
    0x292 => 0x2584,
    0x293 => 0x2700,
    0x294 => 0x2,
    0x295 => 0x1,
    0x296 => 0x2585,
    0x297 => 0x2700,
    0x298 => 0x0,
    0x299 => 0x1,
    0x29a => 0x2586,
    0x29b => 0x2700,
    0x29c => 0x2,
    0x29d => 0x1,
    0x29e => 0x2587,
    0x29f => 0x2700,
    0x2a0 => 0x0,
    0x2a1 => 0x1,
    0x2a2 => 0x2588,
    0x2a3 => 0x2700,
    0x2a4 => 0x2,
    0x2a5 => 0x1,
    0x2a6 => 0x0,
    0x2a7 => 0x2700,
    0x2a8 => 0x0,
    0x2a9 => 0x1,
    0x2aa => 0x0,
    0x2ab => 0x2700,
    0x2ac => 0x2,
    0x2ad => 0x1,
    0x2ae => 0x0,
    0x2af => 0x2700,
    0x2b0 => 0x0,
    0x2b1 => 0x1,
    0x2b2 => 0x0,
    0x2b3 => 0x2700,
    0x2b4 => 0x2,
    0x2b5 => 0x1,
    0x2b6 => 0x0,
    0x2b7 => 0x2700,
    0x2b8 => 0x0,
    0x2b9 => 0x1,
    0x2ba => 0x0,
    0x2bb => 0x2700,
    0x2bc => 0x2,
    0x2bd => 0x1,
    0x2be => 0x0,
    0x2bf => 0x2700,
    0x2c0 => 0x0,
    0x2c1 => 0x1,
    0x2c2 => 0x2580,
    0x2c3 => 0x2700,
    0x2c4 => 0x2,
    0x2c5 => 0x1,
    0x2c6 => 0x2581,
    0x2c7 => 0x2700,
    0x2c8 => 0x3,
    0x2c9 => 0x1,
    0x2ca => 0x2582,
    0x2cb => 0x2700,
    0x2cc => 0x2,
    0x2cd => 0x1,
    0x2ce => 0x2583,
    0x2cf => 0x2700,
    0x2d0 => 0x0,
    0x2d1 => 0x1,
    0x2d2 => 0x2584,
    0x2d3 => 0x2700,
    0x2d4 => 0x2,
    0x2d5 => 0x1,
    0x2d6 => 0x2585,
    0x2d7 => 0x2700,
    0x2d8 => 0x0,
    0x2d9 => 0x1,
    0x2da => 0x2586,
    0x2db => 0x2700,
    0x2dc => 0x2,
    0x2dd => 0x1,
    0x2de => 0x2587,
    0x2df => 0x2700,
    0x2e0 => 0x0,
    0x2e1 => 0x1,
    0x2e2 => 0x2588,
    0x2e3 => 0x2700,
    0x2e4 => 0x2,
    0x2e5 => 0x1,
    0x2e6 => 0x0,
    0x2e7 => 0x2700,
    0x2e8 => 0x0,
    0x2e9 => 0x1,
    0x2ea => 0x0,
    0x2eb => 0x2700,
    0x2ec => 0x2,
    0x2ed => 0x1,
    0x2ee => 0x0,
    0x2ef => 0x2700,
    0x2f0 => 0x0,
    0x2f1 => 0x1,
    0x2f2 => 0x0,
    0x2f3 => 0x2700,
    0x2f4 => 0x2,
    0x2f5 => 0x1,
    0x2f6 => 0x0,
    0x2f7 => 0x2700,
    0x2f8 => 0x0,
    0x2f9 => 0x1,
    0x2fa => 0x0,
    0x2fb => 0x2700,
    0x2fc => 0x2,
    0x2fd => 0x1,
    0x2fe => 0x0,
    0x2ff => 0x2700,
    0x300 => 0x0,
    0x301 => 0x1,
    0x302 => 0x2580,
    0x303 => 0x2700,
    0x304 => 0x2,
    0x305 => 0x1,
    0x306 => 0x2581,
    0x307 => 0x2700,
    0x308 => 0x3,
    0x309 => 0x1,
    0x30a => 0x2582,
    0x30b => 0x2700,
    0x30c => 0x2,
    0x30d => 0x1,
    0x30e => 0x2583,
    0x30f => 0x2700,
    0x310 => 0x0,
    0x311 => 0x1,
    0x312 => 0x2584,
    0x313 => 0x2700,
    0x314 => 0x2,
    0x315 => 0x1,
    0x316 => 0x2585,
    0x317 => 0x2700,
    0x318 => 0x0,
    0x319 => 0x1,
    0x31a => 0x2586,
    0x31b => 0x2700,
    0x31c => 0x2,
    0x31d => 0x1,
    0x31e => 0x2587,
    0x31f => 0x2700,
    0x320 => 0x0,
    0x321 => 0x1,
    0x322 => 0x2588,
    0x323 => 0x2700,
    0x324 => 0x2,
    0x325 => 0x1,
    0x326 => 0x0,
    0x327 => 0x2700,
    0x328 => 0x0,
    0x329 => 0x1,
    0x32a => 0x0,
    0x32b => 0x2700,
    0x32c => 0x2,
    0x32d => 0x1,
    0x32e => 0x0,
    0x32f => 0x2700,
    0x330 => 0x0,
    0x331 => 0x1,
    0x332 => 0x0,
    0x333 => 0x2700,
    0x334 => 0x2,
    0x335 => 0x1,
    0x336 => 0x0,
    0x337 => 0x2700,
    0x338 => 0x0,
    0x339 => 0x1,
    0x33a => 0x0,
    0x33b => 0x2700,
    0x33c => 0x2,
    0x33d => 0x1,
    0x33e => 0x0,
    0x33f => 0x2700,
    0x340 => 0x0,
    0x341 => 0x1,
    0x342 => 0x2580,
    0x343 => 0x2700,
    0x344 => 0x2,
    0x345 => 0x1,
    0x346 => 0x2581,
    0x347 => 0x2700,
    0x348 => 0x3,
    0x349 => 0x1,
    0x34a => 0x2582,
    0x34b => 0x2700,
    0x34c => 0x2,
    0x34d => 0x1,
    0x34e => 0x2583,
    0x34f => 0x2700,
    0x350 => 0x0,
    0x351 => 0x1,
    0x352 => 0x2584,
    0x353 => 0x2700,
    0x354 => 0x2,
    0x355 => 0x1,
    0x356 => 0x2585,
    0x357 => 0x2700,
    0x358 => 0x0,
    0x359 => 0x1,
    0x35a => 0x2586,
    0x35b => 0x2700,
    0x35c => 0x2,
    0x35d => 0x1,
    0x35e => 0x2587,
    0x35f => 0x2700,
    0x360 => 0x0,
    0x361 => 0x1,
    0x362 => 0x2588,
    0x363 => 0x2700,
    0x364 => 0x2,
    0x365 => 0x1,
    0x366 => 0x0,
    0x367 => 0x2700,
    0x368 => 0x0,
    0x369 => 0x1,
    0x36a => 0x0,
    0x36b => 0x2700,
    0x36c => 0x2,
    0x36d => 0x1,
    0x36e => 0x0,
    0x36f => 0x2700,
    0x370 => 0x0,
    0x371 => 0x1,
    0x372 => 0x0,
    0x373 => 0x2700,
    0x374 => 0x2,
    0x375 => 0x1,
    0x376 => 0x0,
    0x377 => 0x2700,
    0x378 => 0x0,
    0x379 => 0x1,
    0x37a => 0x0,
    0x37b => 0x2700,
    0x37c => 0x2,
    0x37d => 0x1,
    0x37e => 0x0,
    0x37f => 0x2700,
    0x380 => 0x0,
    0x381 => 0x1,
    0x382 => 0x2580,
    0x383 => 0x2700,
    0x384 => 0x2,
    0x385 => 0x1,
    0x386 => 0x2581,
    0x387 => 0x2700,
    0x388 => 0x3,
    0x389 => 0x1,
    0x38a => 0x2582,
    0x38b => 0x2700,
    0x38c => 0x2,
    0x38d => 0x1,
    0x38e => 0x2583,
    0x38f => 0x2700,
    0x390 => 0x0,
    0x391 => 0x1,
    0x392 => 0x2584,
    0x393 => 0x2700,
    0x394 => 0x2,
    0x395 => 0x1,
    0x396 => 0x2585,
    0x397 => 0x2700,
    0x398 => 0x0,
    0x399 => 0x1,
    0x39a => 0x2586,
    0x39b => 0x2700,
    0x39c => 0x2,
    0x39d => 0x1,
    0x39e => 0x2587,
    0x39f => 0x2700,
    0x3a0 => 0x0,
    0x3a1 => 0x1,
    0x3a2 => 0x2588,
    0x3a3 => 0x2700,
    0x3a4 => 0x2,
    0x3a5 => 0x1,
    0x3a6 => 0x0,
    0x3a7 => 0x2700,
    0x3a8 => 0x0,
    0x3a9 => 0x1,
    0x3aa => 0x0,
    0x3ab => 0x2700,
    0x3ac => 0x2,
    0x3ad => 0x1,
    0x3ae => 0x0,
    0x3af => 0x2700,
    0x3b0 => 0x0,
    0x3b1 => 0x1,
    0x3b2 => 0x0,
    0x3b3 => 0x2700,
    0x3b4 => 0x2,
    0x3b5 => 0x1,
    0x3b6 => 0x0,
    0x3b7 => 0x2700,
    0x3b8 => 0x0,
    0x3b9 => 0x1,
    0x3ba => 0x0,
    0x3bb => 0x2700,
    0x3bc => 0x2,
    0x3bd => 0x1,
    0x3be => 0x0,
    0x3bf => 0x2700,
    0x3c0 => 0x0,
    0x3c1 => 0x1,
    0x3c2 => 0x2580,
    0x3c3 => 0x2700,
    0x3c4 => 0x2,
    0x3c5 => 0x1,
    0x3c6 => 0x2581,
    0x3c7 => 0x2700,
    0x3c8 => 0x3,
    0x3c9 => 0x1,
    0x3ca => 0x2582,
    0x3cb => 0x2700,
    0x3cc => 0x2,
    0x3cd => 0x1,
    0x3ce => 0x2583,
    0x3cf => 0x2700,
    0x3d0 => 0x0,
    0x3d1 => 0x1,
    0x3d2 => 0x2584,
    0x3d3 => 0x2700,
    0x3d4 => 0x2,
    0x3d5 => 0x1,
    0x3d6 => 0x2585,
    0x3d7 => 0x2700,
    0x3d8 => 0x0,
    0x3d9 => 0x1,
    0x3da => 0x2586,
    0x3db => 0x2700,
    0x3dc => 0x2,
    0x3dd => 0x1,
    0x3de => 0x2587,
    0x3df => 0x2700,
    0x3e0 => 0x0,
    0x3e1 => 0x1,
    0x3e2 => 0x2588,
    0x3e3 => 0x2700,
    0x3e4 => 0x2,
    0x3e5 => 0x1,
    0x3e6 => 0x0,
    0x3e7 => 0x2700,
    0x3e8 => 0x0,
    0x3e9 => 0x1,
    0x3ea => 0x0,
    0x3eb => 0x2700,
    0x3ec => 0x2,
    0x3ed => 0x1,
    0x3ee => 0x0,
    0x3ef => 0x2700,
    0x3f0 => 0x0,
    0x3f1 => 0x1,
    0x3f2 => 0x0,
    0x3f3 => 0x2700,
    0x3f4 => 0x2,
    0x3f5 => 0x1,
    0x3f6 => 0x0,
    0x3f7 => 0x2700,
    0x3f8 => 0x0,
    0x3f9 => 0x1,
    0x3fa => 0x0,
    0x3fb => 0x2700,
    0x3fc => 0x2,
    0x3fd => 0x1,
    0x3fe => 0x0,
    0x3ff => 0x2700,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_42_1(inst), // FCCMP-FCCMP#0,FCCMP-FCCMPE#0
    0x2 => return classify_impl_42_2(inst), // FMOV_IMM-FMOV_IMM#0
    0x3 => return classify_impl_42_3(inst), // FCMP-FCMP#0,FCMP-FCMP_ZERO#0,FCMP-FCMPE#0,FCMP-FCMPE_ZERO#0
    _ => idx
  };
  return idx;
}


// FCVT_TOINT-FCVTMS#0
pub const fn classify_impl_43_1_1(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x2086;
}


// FCCMP-FCCMP#0,FCCMP-FCCMPE#0
pub const fn classify_impl_43_1_2(inst: u32) -> u32 {
  let idx = match (inst >> 4) & 0x1 {
    0x0 => 0x2680,
    0x1 => 0x2681,
    _ => 0,
  };
  return idx;
}


// FMOV_IMM-FMOV_IMM#0
pub const fn classify_impl_43_1_3(inst: u32) -> u32 {
  if (inst&0x3e0) != 0x0 { return 0; }
  return 0x2500;
}


// FCMP-FCMP#0,FCMP-FCMP_ZERO#0,FCMP-FCMPE#0,FCMP-FCMPE_ZERO#0
pub const fn classify_impl_43_1_4(inst: u32) -> u32 {
  if (inst&0x7) != 0x0 { return 0; }
  let idx = match (inst >> 3) & 0x3 {
    0x0 => 0x2600,
    0x1 => 0x2601,
    0x2 => 0x2602,
    0x3 => 0x2603,
    _ => 0,
  };
  return idx;
}


// FCVT_TOINT-FCVTMU#0
pub const fn classify_impl_43_1_5(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x2087;
}

// FCVT_TOINT-FCVTMS#0,FCVT_TOINT-FCVTMU#0,FMOV_IMM-FMOV_IMM#0,FARITH2-FMUL#0,FARITH2-FDIV#0,FARITH2-FADD#0,FARITH2-FSUB#0,FARITH2-FMAX#0,FARITH2-FMIN#0,FARITH2-FMAXNM#0,FARITH2-FMINNM#0,FARITH2-FNMUL#0,FCMP-FCMP#0,FCMP-FCMP_ZERO#0,FCMP-FCMPE#0,FCMP-FCMPE_ZERO#0,FCCMP-FCCMP#0,FCCMP-FCCMPE#0,FCSEL-FCSEL#0
pub const fn classify_impl_43_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x2580,
    0x3 => 0x2700,
    0x4 => 0x3,
    0x5 => 0x2,
    0x6 => 0x2581,
    0x7 => 0x2700,
    0x8 => 0x4,
    0x9 => 0x2,
    0xa => 0x2582,
    0xb => 0x2700,
    0xc => 0x3,
    0xd => 0x2,
    0xe => 0x2583,
    0xf => 0x2700,
    0x10 => 0x0,
    0x11 => 0x2,
    0x12 => 0x2584,
    0x13 => 0x2700,
    0x14 => 0x3,
    0x15 => 0x2,
    0x16 => 0x2585,
    0x17 => 0x2700,
    0x18 => 0x0,
    0x19 => 0x2,
    0x1a => 0x2586,
    0x1b => 0x2700,
    0x1c => 0x3,
    0x1d => 0x2,
    0x1e => 0x2587,
    0x1f => 0x2700,
    0x20 => 0x0,
    0x21 => 0x2,
    0x22 => 0x2588,
    0x23 => 0x2700,
    0x24 => 0x3,
    0x25 => 0x2,
    0x26 => 0x0,
    0x27 => 0x2700,
    0x28 => 0x0,
    0x29 => 0x2,
    0x2a => 0x0,
    0x2b => 0x2700,
    0x2c => 0x3,
    0x2d => 0x2,
    0x2e => 0x0,
    0x2f => 0x2700,
    0x30 => 0x0,
    0x31 => 0x2,
    0x32 => 0x0,
    0x33 => 0x2700,
    0x34 => 0x3,
    0x35 => 0x2,
    0x36 => 0x0,
    0x37 => 0x2700,
    0x38 => 0x0,
    0x39 => 0x2,
    0x3a => 0x0,
    0x3b => 0x2700,
    0x3c => 0x3,
    0x3d => 0x2,
    0x3e => 0x0,
    0x3f => 0x2700,
    0x40 => 0x5,
    0x41 => 0x2,
    0x42 => 0x2580,
    0x43 => 0x2700,
    0x44 => 0x3,
    0x45 => 0x2,
    0x46 => 0x2581,
    0x47 => 0x2700,
    0x48 => 0x4,
    0x49 => 0x2,
    0x4a => 0x2582,
    0x4b => 0x2700,
    0x4c => 0x3,
    0x4d => 0x2,
    0x4e => 0x2583,
    0x4f => 0x2700,
    0x50 => 0x0,
    0x51 => 0x2,
    0x52 => 0x2584,
    0x53 => 0x2700,
    0x54 => 0x3,
    0x55 => 0x2,
    0x56 => 0x2585,
    0x57 => 0x2700,
    0x58 => 0x0,
    0x59 => 0x2,
    0x5a => 0x2586,
    0x5b => 0x2700,
    0x5c => 0x3,
    0x5d => 0x2,
    0x5e => 0x2587,
    0x5f => 0x2700,
    0x60 => 0x0,
    0x61 => 0x2,
    0x62 => 0x2588,
    0x63 => 0x2700,
    0x64 => 0x3,
    0x65 => 0x2,
    0x66 => 0x0,
    0x67 => 0x2700,
    0x68 => 0x0,
    0x69 => 0x2,
    0x6a => 0x0,
    0x6b => 0x2700,
    0x6c => 0x3,
    0x6d => 0x2,
    0x6e => 0x0,
    0x6f => 0x2700,
    0x70 => 0x0,
    0x71 => 0x2,
    0x72 => 0x0,
    0x73 => 0x2700,
    0x74 => 0x3,
    0x75 => 0x2,
    0x76 => 0x0,
    0x77 => 0x2700,
    0x78 => 0x0,
    0x79 => 0x2,
    0x7a => 0x0,
    0x7b => 0x2700,
    0x7c => 0x3,
    0x7d => 0x2,
    0x7e => 0x0,
    0x7f => 0x2700,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_43_1_1(inst), // FCVT_TOINT-FCVTMS#0
    0x2 => return classify_impl_43_1_2(inst), // FCCMP-FCCMP#0,FCCMP-FCCMPE#0
    0x3 => return classify_impl_43_1_3(inst), // FMOV_IMM-FMOV_IMM#0
    0x4 => return classify_impl_43_1_4(inst), // FCMP-FCMP#0,FCMP-FCMP_ZERO#0,FCMP-FCMPE#0,FCMP-FCMPE_ZERO#0
    0x5 => return classify_impl_43_1_5(inst), // FCVT_TOINT-FCVTMU#0
    _ => idx
  };
  return idx;
}


// FCVT_TOINT-FCVTZS#0
pub const fn classify_impl_43_2_1(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x2088;
}


// FCCMP-FCCMP#0,FCCMP-FCCMPE#0
pub const fn classify_impl_43_2_2(inst: u32) -> u32 {
  let idx = match (inst >> 4) & 0x1 {
    0x0 => 0x2680,
    0x1 => 0x2681,
    _ => 0,
  };
  return idx;
}


// FMOV_IMM-FMOV_IMM#0
pub const fn classify_impl_43_2_3(inst: u32) -> u32 {
  if (inst&0x3e0) != 0x0 { return 0; }
  return 0x2500;
}


// FCMP-FCMP#0,FCMP-FCMP_ZERO#0,FCMP-FCMPE#0,FCMP-FCMPE_ZERO#0
pub const fn classify_impl_43_2_4(inst: u32) -> u32 {
  if (inst&0x7) != 0x0 { return 0; }
  let idx = match (inst >> 3) & 0x3 {
    0x0 => 0x2600,
    0x1 => 0x2601,
    0x2 => 0x2602,
    0x3 => 0x2603,
    _ => 0,
  };
  return idx;
}


// FCVT_TOINT-FCVTZU#0
pub const fn classify_impl_43_2_5(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x2089;
}

// FCVT_TOINT-FCVTZS#0,FCVT_TOINT-FCVTZU#0,FMOV_IMM-FMOV_IMM#0,FARITH2-FMUL#0,FARITH2-FDIV#0,FARITH2-FADD#0,FARITH2-FSUB#0,FARITH2-FMAX#0,FARITH2-FMIN#0,FARITH2-FMAXNM#0,FARITH2-FMINNM#0,FARITH2-FNMUL#0,FCMP-FCMP#0,FCMP-FCMP_ZERO#0,FCMP-FCMPE#0,FCMP-FCMPE_ZERO#0,FCCMP-FCCMP#0,FCCMP-FCCMPE#0,FCSEL-FCSEL#0
pub const fn classify_impl_43_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x2580,
    0x3 => 0x2700,
    0x4 => 0x3,
    0x5 => 0x2,
    0x6 => 0x2581,
    0x7 => 0x2700,
    0x8 => 0x4,
    0x9 => 0x2,
    0xa => 0x2582,
    0xb => 0x2700,
    0xc => 0x3,
    0xd => 0x2,
    0xe => 0x2583,
    0xf => 0x2700,
    0x10 => 0x0,
    0x11 => 0x2,
    0x12 => 0x2584,
    0x13 => 0x2700,
    0x14 => 0x3,
    0x15 => 0x2,
    0x16 => 0x2585,
    0x17 => 0x2700,
    0x18 => 0x0,
    0x19 => 0x2,
    0x1a => 0x2586,
    0x1b => 0x2700,
    0x1c => 0x3,
    0x1d => 0x2,
    0x1e => 0x2587,
    0x1f => 0x2700,
    0x20 => 0x0,
    0x21 => 0x2,
    0x22 => 0x2588,
    0x23 => 0x2700,
    0x24 => 0x3,
    0x25 => 0x2,
    0x26 => 0x0,
    0x27 => 0x2700,
    0x28 => 0x0,
    0x29 => 0x2,
    0x2a => 0x0,
    0x2b => 0x2700,
    0x2c => 0x3,
    0x2d => 0x2,
    0x2e => 0x0,
    0x2f => 0x2700,
    0x30 => 0x0,
    0x31 => 0x2,
    0x32 => 0x0,
    0x33 => 0x2700,
    0x34 => 0x3,
    0x35 => 0x2,
    0x36 => 0x0,
    0x37 => 0x2700,
    0x38 => 0x0,
    0x39 => 0x2,
    0x3a => 0x0,
    0x3b => 0x2700,
    0x3c => 0x3,
    0x3d => 0x2,
    0x3e => 0x0,
    0x3f => 0x2700,
    0x40 => 0x5,
    0x41 => 0x2,
    0x42 => 0x2580,
    0x43 => 0x2700,
    0x44 => 0x3,
    0x45 => 0x2,
    0x46 => 0x2581,
    0x47 => 0x2700,
    0x48 => 0x4,
    0x49 => 0x2,
    0x4a => 0x2582,
    0x4b => 0x2700,
    0x4c => 0x3,
    0x4d => 0x2,
    0x4e => 0x2583,
    0x4f => 0x2700,
    0x50 => 0x0,
    0x51 => 0x2,
    0x52 => 0x2584,
    0x53 => 0x2700,
    0x54 => 0x3,
    0x55 => 0x2,
    0x56 => 0x2585,
    0x57 => 0x2700,
    0x58 => 0x0,
    0x59 => 0x2,
    0x5a => 0x2586,
    0x5b => 0x2700,
    0x5c => 0x3,
    0x5d => 0x2,
    0x5e => 0x2587,
    0x5f => 0x2700,
    0x60 => 0x0,
    0x61 => 0x2,
    0x62 => 0x2588,
    0x63 => 0x2700,
    0x64 => 0x3,
    0x65 => 0x2,
    0x66 => 0x0,
    0x67 => 0x2700,
    0x68 => 0x0,
    0x69 => 0x2,
    0x6a => 0x0,
    0x6b => 0x2700,
    0x6c => 0x3,
    0x6d => 0x2,
    0x6e => 0x0,
    0x6f => 0x2700,
    0x70 => 0x0,
    0x71 => 0x2,
    0x72 => 0x0,
    0x73 => 0x2700,
    0x74 => 0x3,
    0x75 => 0x2,
    0x76 => 0x0,
    0x77 => 0x2700,
    0x78 => 0x0,
    0x79 => 0x2,
    0x7a => 0x0,
    0x7b => 0x2700,
    0x7c => 0x3,
    0x7d => 0x2,
    0x7e => 0x0,
    0x7f => 0x2700,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_43_2_1(inst), // FCVT_TOINT-FCVTZS#0
    0x2 => return classify_impl_43_2_2(inst), // FCCMP-FCCMP#0,FCCMP-FCCMPE#0
    0x3 => return classify_impl_43_2_3(inst), // FMOV_IMM-FMOV_IMM#0
    0x4 => return classify_impl_43_2_4(inst), // FCMP-FCMP#0,FCMP-FCMP_ZERO#0,FCMP-FCMPE#0,FCMP-FCMPE_ZERO#0
    0x5 => return classify_impl_43_2_5(inst), // FCVT_TOINT-FCVTZU#0
    _ => idx
  };
  return idx;
}

// FCVT_TOINT-FCVTMS#0,FCVT_TOINT-FCVTMU#0,FCVT_TOINT-FCVTZS#0,FCVT_TOINT-FCVTZU#0,FMOV_IMM-FMOV_IMM#0,FARITH2-FMUL#0,FARITH2-FDIV#0,FARITH2-FADD#0,FARITH2-FSUB#0,FARITH2-FMAX#0,FARITH2-FMIN#0,FARITH2-FMAXNM#0,FARITH2-FMINNM#0,FARITH2-FNMUL#0,FCMP-FCMP#0,FCMP-FCMP_ZERO#0,FCMP-FCMPE#0,FCMP-FCMPE_ZERO#0,FCCMP-FCCMP#0,FCCMP-FCCMPE#0,FCSEL-FCSEL#0
pub const fn classify_impl_43(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_43_1(inst), // FCVT_TOINT-FCVTMS#0,FCVT_TOINT-FCVTMU#0,FMOV_IMM-FMOV_IMM#0,FARITH2-FMUL#0,FARITH2-FDIV#0,FARITH2-FADD#0,FARITH2-FSUB#0,FARITH2-FMAX#0,FARITH2-FMIN#0,FARITH2-FMAXNM#0,FARITH2-FMINNM#0,FARITH2-FNMUL#0,FCMP-FCMP#0,FCMP-FCMP_ZERO#0,FCMP-FCMPE#0,FCMP-FCMPE_ZERO#0,FCCMP-FCCMP#0,FCCMP-FCCMPE#0,FCSEL-FCSEL#0
    0x2 => return classify_impl_43_2(inst), // FCVT_TOINT-FCVTZS#0,FCVT_TOINT-FCVTZU#0,FMOV_IMM-FMOV_IMM#0,FARITH2-FMUL#0,FARITH2-FDIV#0,FARITH2-FADD#0,FARITH2-FSUB#0,FARITH2-FMAX#0,FARITH2-FMIN#0,FARITH2-FMAXNM#0,FARITH2-FMINNM#0,FARITH2-FNMUL#0,FCMP-FCMP#0,FCMP-FCMP_ZERO#0,FCMP-FCMPE#0,FCMP-FCMPE_ZERO#0,FCCMP-FCCMP#0,FCCMP-FCCMPE#0,FCSEL-FCSEL#0
    _ => idx
  };
  return idx;
}


// FCVT_FROMFIXED-SCVTF_FIX#1,FCVT_FROMFIXED-UCVTF_FIX#1
pub const fn classify_impl_44(inst: u32) -> u32 {
  if (inst&0xe8000) != 0x28000 { return 0; }
  let idx = match (inst >> 16) & 0x1 {
    0x0 => 0x2000,
    0x1 => 0x2001,
    _ => 0,
  };
  return idx;
}


// FCVT_TOFIXED-FCVTZS_FIX#1,FCVT_TOFIXED-FCVTZU_FIX#1
pub const fn classify_impl_45(inst: u32) -> u32 {
  if (inst&0xe8000) != 0x88000 { return 0; }
  let idx = match (inst >> 16) & 0x1 {
    0x0 => 0x1f80,
    0x1 => 0x1f81,
    _ => 0,
  };
  return idx;
}


// FCCMP-FCCMP#1,FCCMP-FCCMPE#1
pub const fn classify_impl_46_1(inst: u32) -> u32 {
  let idx = match (inst >> 4) & 0x1 {
    0x0 => 0x2680,
    0x1 => 0x2681,
    _ => 0,
  };
  return idx;
}


// FMOV_IMM-FMOV_IMM#1
pub const fn classify_impl_46_2(inst: u32) -> u32 {
  if (inst&0x3e0) != 0x0 { return 0; }
  return 0x2500;
}


// FCMP-FCMP#1,FCMP-FCMP_ZERO#1,FCMP-FCMPE#1,FCMP-FCMPE_ZERO#1
pub const fn classify_impl_46_3(inst: u32) -> u32 {
  if (inst&0x7) != 0x0 { return 0; }
  let idx = match (inst >> 3) & 0x3 {
    0x0 => 0x2600,
    0x1 => 0x2601,
    0x2 => 0x2602,
    0x3 => 0x2603,
    _ => 0,
  };
  return idx;
}

// FCVT_TOINT-FCVTNS#1,FCVT_TOINT-FCVTNU#1,FCVT_TOINT-FCVTAS#1,FCVT_TOINT-FCVTAU#1,FCVT_TOINT-FCVTPS#1,FCVT_TOINT-FCVTPU#1,FCVT_FROMINT-SCVTF#1,FCVT_FROMINT-UCVTF#1,FCVT_FP-FCVT#2,FCVT_FP-FCVT#3,FCVT_FP-BFCVT#0,FRINT-FRINTN#1,FRINT-FRINTP#1,FRINT-FRINTM#1,FRINT-FRINTZ#1,FRINT-FRINTA#1,FRINT-FRINTX#1,FRINT-FRINTI#1,FRINTTS-FRINT32Z#1,FRINTTS-FRINT32X#1,FRINTTS-FRINT64Z#1,FRINTTS-FRINT64X#1,FARITH1-FMOV#1,FARITH1-FABS#1,FARITH1-FNEG#1,FARITH1-FSQRT#1,FMOV_IMM-FMOV_IMM#1,FARITH2-FMUL#1,FARITH2-FDIV#1,FARITH2-FADD#1,FARITH2-FSUB#1,FARITH2-FMAX#1,FARITH2-FMIN#1,FARITH2-FMAXNM#1,FARITH2-FMINNM#1,FARITH2-FNMUL#1,FCMP-FCMP#1,FCMP-FCMP_ZERO#1,FCMP-FCMPE#1,FCMP-FCMPE_ZERO#1,FCCMP-FCCMP#1,FCCMP-FCCMPE#1,FCSEL-FCSEL#1
pub const fn classify_impl_46(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3ff {
    0x0 => 0x2080,
    0x1 => 0x1,
    0x2 => 0x2580,
    0x3 => 0x2700,
    0x4 => 0x2,
    0x5 => 0x1,
    0x6 => 0x2581,
    0x7 => 0x2700,
    0x8 => 0x3,
    0x9 => 0x1,
    0xa => 0x2582,
    0xb => 0x2700,
    0xc => 0x2,
    0xd => 0x1,
    0xe => 0x2583,
    0xf => 0x2700,
    0x10 => 0x2480,
    0x11 => 0x1,
    0x12 => 0x2584,
    0x13 => 0x2700,
    0x14 => 0x2,
    0x15 => 0x1,
    0x16 => 0x2585,
    0x17 => 0x2700,
    0x18 => 0x0,
    0x19 => 0x1,
    0x1a => 0x2586,
    0x1b => 0x2700,
    0x1c => 0x2,
    0x1d => 0x1,
    0x1e => 0x2587,
    0x1f => 0x2700,
    0x20 => 0x0,
    0x21 => 0x1,
    0x22 => 0x2588,
    0x23 => 0x2700,
    0x24 => 0x2,
    0x25 => 0x1,
    0x26 => 0x0,
    0x27 => 0x2700,
    0x28 => 0x0,
    0x29 => 0x1,
    0x2a => 0x0,
    0x2b => 0x2700,
    0x2c => 0x2,
    0x2d => 0x1,
    0x2e => 0x0,
    0x2f => 0x2700,
    0x30 => 0x2481,
    0x31 => 0x1,
    0x32 => 0x0,
    0x33 => 0x2700,
    0x34 => 0x2,
    0x35 => 0x1,
    0x36 => 0x0,
    0x37 => 0x2700,
    0x38 => 0x0,
    0x39 => 0x1,
    0x3a => 0x0,
    0x3b => 0x2700,
    0x3c => 0x2,
    0x3d => 0x1,
    0x3e => 0x0,
    0x3f => 0x2700,
    0x40 => 0x2081,
    0x41 => 0x1,
    0x42 => 0x2580,
    0x43 => 0x2700,
    0x44 => 0x2,
    0x45 => 0x1,
    0x46 => 0x2581,
    0x47 => 0x2700,
    0x48 => 0x3,
    0x49 => 0x1,
    0x4a => 0x2582,
    0x4b => 0x2700,
    0x4c => 0x2,
    0x4d => 0x1,
    0x4e => 0x2583,
    0x4f => 0x2700,
    0x50 => 0x2482,
    0x51 => 0x1,
    0x52 => 0x2584,
    0x53 => 0x2700,
    0x54 => 0x2,
    0x55 => 0x1,
    0x56 => 0x2585,
    0x57 => 0x2700,
    0x58 => 0x0,
    0x59 => 0x1,
    0x5a => 0x2586,
    0x5b => 0x2700,
    0x5c => 0x2,
    0x5d => 0x1,
    0x5e => 0x2587,
    0x5f => 0x2700,
    0x60 => 0x0,
    0x61 => 0x1,
    0x62 => 0x2588,
    0x63 => 0x2700,
    0x64 => 0x2,
    0x65 => 0x1,
    0x66 => 0x0,
    0x67 => 0x2700,
    0x68 => 0x0,
    0x69 => 0x1,
    0x6a => 0x0,
    0x6b => 0x2700,
    0x6c => 0x2,
    0x6d => 0x1,
    0x6e => 0x0,
    0x6f => 0x2700,
    0x70 => 0x2483,
    0x71 => 0x1,
    0x72 => 0x0,
    0x73 => 0x2700,
    0x74 => 0x2,
    0x75 => 0x1,
    0x76 => 0x0,
    0x77 => 0x2700,
    0x78 => 0x0,
    0x79 => 0x1,
    0x7a => 0x0,
    0x7b => 0x2700,
    0x7c => 0x2,
    0x7d => 0x1,
    0x7e => 0x0,
    0x7f => 0x2700,
    0x80 => 0x2100,
    0x81 => 0x1,
    0x82 => 0x2580,
    0x83 => 0x2700,
    0x84 => 0x2,
    0x85 => 0x1,
    0x86 => 0x2581,
    0x87 => 0x2700,
    0x88 => 0x3,
    0x89 => 0x1,
    0x8a => 0x2582,
    0x8b => 0x2700,
    0x8c => 0x2,
    0x8d => 0x1,
    0x8e => 0x2583,
    0x8f => 0x2700,
    0x90 => 0x2300,
    0x91 => 0x1,
    0x92 => 0x2584,
    0x93 => 0x2700,
    0x94 => 0x2,
    0x95 => 0x1,
    0x96 => 0x2585,
    0x97 => 0x2700,
    0x98 => 0x0,
    0x99 => 0x1,
    0x9a => 0x2586,
    0x9b => 0x2700,
    0x9c => 0x2,
    0x9d => 0x1,
    0x9e => 0x2587,
    0x9f => 0x2700,
    0xa0 => 0x0,
    0xa1 => 0x1,
    0xa2 => 0x2588,
    0xa3 => 0x2700,
    0xa4 => 0x2,
    0xa5 => 0x1,
    0xa6 => 0x0,
    0xa7 => 0x2700,
    0xa8 => 0x0,
    0xa9 => 0x1,
    0xaa => 0x0,
    0xab => 0x2700,
    0xac => 0x2,
    0xad => 0x1,
    0xae => 0x0,
    0xaf => 0x2700,
    0xb0 => 0x0,
    0xb1 => 0x1,
    0xb2 => 0x0,
    0xb3 => 0x2700,
    0xb4 => 0x2,
    0xb5 => 0x1,
    0xb6 => 0x0,
    0xb7 => 0x2700,
    0xb8 => 0x0,
    0xb9 => 0x1,
    0xba => 0x0,
    0xbb => 0x2700,
    0xbc => 0x2,
    0xbd => 0x1,
    0xbe => 0x0,
    0xbf => 0x2700,
    0xc0 => 0x2101,
    0xc1 => 0x1,
    0xc2 => 0x2580,
    0xc3 => 0x2700,
    0xc4 => 0x2,
    0xc5 => 0x1,
    0xc6 => 0x2581,
    0xc7 => 0x2700,
    0xc8 => 0x3,
    0xc9 => 0x1,
    0xca => 0x2582,
    0xcb => 0x2700,
    0xcc => 0x2,
    0xcd => 0x1,
    0xce => 0x2583,
    0xcf => 0x2700,
    0xd0 => 0x2301,
    0xd1 => 0x1,
    0xd2 => 0x2584,
    0xd3 => 0x2700,
    0xd4 => 0x2,
    0xd5 => 0x1,
    0xd6 => 0x2585,
    0xd7 => 0x2700,
    0xd8 => 0x0,
    0xd9 => 0x1,
    0xda => 0x2586,
    0xdb => 0x2700,
    0xdc => 0x2,
    0xdd => 0x1,
    0xde => 0x2587,
    0xdf => 0x2700,
    0xe0 => 0x0,
    0xe1 => 0x1,
    0xe2 => 0x2588,
    0xe3 => 0x2700,
    0xe4 => 0x2,
    0xe5 => 0x1,
    0xe6 => 0x0,
    0xe7 => 0x2700,
    0xe8 => 0x0,
    0xe9 => 0x1,
    0xea => 0x0,
    0xeb => 0x2700,
    0xec => 0x2,
    0xed => 0x1,
    0xee => 0x0,
    0xef => 0x2700,
    0xf0 => 0x2300,
    0xf1 => 0x1,
    0xf2 => 0x0,
    0xf3 => 0x2700,
    0xf4 => 0x2,
    0xf5 => 0x1,
    0xf6 => 0x0,
    0xf7 => 0x2700,
    0xf8 => 0x0,
    0xf9 => 0x1,
    0xfa => 0x0,
    0xfb => 0x2700,
    0xfc => 0x2,
    0xfd => 0x1,
    0xfe => 0x0,
    0xff => 0x2700,
    0x100 => 0x2082,
    0x101 => 0x1,
    0x102 => 0x2580,
    0x103 => 0x2700,
    0x104 => 0x2,
    0x105 => 0x1,
    0x106 => 0x2581,
    0x107 => 0x2700,
    0x108 => 0x3,
    0x109 => 0x1,
    0x10a => 0x2582,
    0x10b => 0x2700,
    0x10c => 0x2,
    0x10d => 0x1,
    0x10e => 0x2583,
    0x10f => 0x2700,
    0x110 => 0x2380,
    0x111 => 0x1,
    0x112 => 0x2584,
    0x113 => 0x2700,
    0x114 => 0x2,
    0x115 => 0x1,
    0x116 => 0x2585,
    0x117 => 0x2700,
    0x118 => 0x0,
    0x119 => 0x1,
    0x11a => 0x2586,
    0x11b => 0x2700,
    0x11c => 0x2,
    0x11d => 0x1,
    0x11e => 0x2587,
    0x11f => 0x2700,
    0x120 => 0x0,
    0x121 => 0x1,
    0x122 => 0x2588,
    0x123 => 0x2700,
    0x124 => 0x2,
    0x125 => 0x1,
    0x126 => 0x0,
    0x127 => 0x2700,
    0x128 => 0x0,
    0x129 => 0x1,
    0x12a => 0x0,
    0x12b => 0x2700,
    0x12c => 0x2,
    0x12d => 0x1,
    0x12e => 0x0,
    0x12f => 0x2700,
    0x130 => 0x2381,
    0x131 => 0x1,
    0x132 => 0x0,
    0x133 => 0x2700,
    0x134 => 0x2,
    0x135 => 0x1,
    0x136 => 0x0,
    0x137 => 0x2700,
    0x138 => 0x0,
    0x139 => 0x1,
    0x13a => 0x0,
    0x13b => 0x2700,
    0x13c => 0x2,
    0x13d => 0x1,
    0x13e => 0x0,
    0x13f => 0x2700,
    0x140 => 0x2083,
    0x141 => 0x1,
    0x142 => 0x2580,
    0x143 => 0x2700,
    0x144 => 0x2,
    0x145 => 0x1,
    0x146 => 0x2581,
    0x147 => 0x2700,
    0x148 => 0x3,
    0x149 => 0x1,
    0x14a => 0x2582,
    0x14b => 0x2700,
    0x14c => 0x2,
    0x14d => 0x1,
    0x14e => 0x2583,
    0x14f => 0x2700,
    0x150 => 0x2382,
    0x151 => 0x1,
    0x152 => 0x2584,
    0x153 => 0x2700,
    0x154 => 0x2,
    0x155 => 0x1,
    0x156 => 0x2585,
    0x157 => 0x2700,
    0x158 => 0x0,
    0x159 => 0x1,
    0x15a => 0x2586,
    0x15b => 0x2700,
    0x15c => 0x2,
    0x15d => 0x1,
    0x15e => 0x2587,
    0x15f => 0x2700,
    0x160 => 0x0,
    0x161 => 0x1,
    0x162 => 0x2588,
    0x163 => 0x2700,
    0x164 => 0x2,
    0x165 => 0x1,
    0x166 => 0x0,
    0x167 => 0x2700,
    0x168 => 0x0,
    0x169 => 0x1,
    0x16a => 0x0,
    0x16b => 0x2700,
    0x16c => 0x2,
    0x16d => 0x1,
    0x16e => 0x0,
    0x16f => 0x2700,
    0x170 => 0x2383,
    0x171 => 0x1,
    0x172 => 0x0,
    0x173 => 0x2700,
    0x174 => 0x2,
    0x175 => 0x1,
    0x176 => 0x0,
    0x177 => 0x2700,
    0x178 => 0x0,
    0x179 => 0x1,
    0x17a => 0x0,
    0x17b => 0x2700,
    0x17c => 0x2,
    0x17d => 0x1,
    0x17e => 0x0,
    0x17f => 0x2700,
    0x180 => 0x0,
    0x181 => 0x1,
    0x182 => 0x2580,
    0x183 => 0x2700,
    0x184 => 0x2,
    0x185 => 0x1,
    0x186 => 0x2581,
    0x187 => 0x2700,
    0x188 => 0x3,
    0x189 => 0x1,
    0x18a => 0x2582,
    0x18b => 0x2700,
    0x18c => 0x2,
    0x18d => 0x1,
    0x18e => 0x2583,
    0x18f => 0x2700,
    0x190 => 0x2384,
    0x191 => 0x1,
    0x192 => 0x2584,
    0x193 => 0x2700,
    0x194 => 0x2,
    0x195 => 0x1,
    0x196 => 0x2585,
    0x197 => 0x2700,
    0x198 => 0x0,
    0x199 => 0x1,
    0x19a => 0x2586,
    0x19b => 0x2700,
    0x19c => 0x2,
    0x19d => 0x1,
    0x19e => 0x2587,
    0x19f => 0x2700,
    0x1a0 => 0x0,
    0x1a1 => 0x1,
    0x1a2 => 0x2588,
    0x1a3 => 0x2700,
    0x1a4 => 0x2,
    0x1a5 => 0x1,
    0x1a6 => 0x0,
    0x1a7 => 0x2700,
    0x1a8 => 0x0,
    0x1a9 => 0x1,
    0x1aa => 0x0,
    0x1ab => 0x2700,
    0x1ac => 0x2,
    0x1ad => 0x1,
    0x1ae => 0x0,
    0x1af => 0x2700,
    0x1b0 => 0x0,
    0x1b1 => 0x1,
    0x1b2 => 0x0,
    0x1b3 => 0x2700,
    0x1b4 => 0x2,
    0x1b5 => 0x1,
    0x1b6 => 0x0,
    0x1b7 => 0x2700,
    0x1b8 => 0x0,
    0x1b9 => 0x1,
    0x1ba => 0x0,
    0x1bb => 0x2700,
    0x1bc => 0x2,
    0x1bd => 0x1,
    0x1be => 0x0,
    0x1bf => 0x2700,
    0x1c0 => 0x0,
    0x1c1 => 0x1,
    0x1c2 => 0x2580,
    0x1c3 => 0x2700,
    0x1c4 => 0x2,
    0x1c5 => 0x1,
    0x1c6 => 0x2581,
    0x1c7 => 0x2700,
    0x1c8 => 0x3,
    0x1c9 => 0x1,
    0x1ca => 0x2582,
    0x1cb => 0x2700,
    0x1cc => 0x2,
    0x1cd => 0x1,
    0x1ce => 0x2583,
    0x1cf => 0x2700,
    0x1d0 => 0x2385,
    0x1d1 => 0x1,
    0x1d2 => 0x2584,
    0x1d3 => 0x2700,
    0x1d4 => 0x2,
    0x1d5 => 0x1,
    0x1d6 => 0x2585,
    0x1d7 => 0x2700,
    0x1d8 => 0x0,
    0x1d9 => 0x1,
    0x1da => 0x2586,
    0x1db => 0x2700,
    0x1dc => 0x2,
    0x1dd => 0x1,
    0x1de => 0x2587,
    0x1df => 0x2700,
    0x1e0 => 0x0,
    0x1e1 => 0x1,
    0x1e2 => 0x2588,
    0x1e3 => 0x2700,
    0x1e4 => 0x2,
    0x1e5 => 0x1,
    0x1e6 => 0x0,
    0x1e7 => 0x2700,
    0x1e8 => 0x0,
    0x1e9 => 0x1,
    0x1ea => 0x0,
    0x1eb => 0x2700,
    0x1ec => 0x2,
    0x1ed => 0x1,
    0x1ee => 0x0,
    0x1ef => 0x2700,
    0x1f0 => 0x2386,
    0x1f1 => 0x1,
    0x1f2 => 0x0,
    0x1f3 => 0x2700,
    0x1f4 => 0x2,
    0x1f5 => 0x1,
    0x1f6 => 0x0,
    0x1f7 => 0x2700,
    0x1f8 => 0x0,
    0x1f9 => 0x1,
    0x1fa => 0x0,
    0x1fb => 0x2700,
    0x1fc => 0x2,
    0x1fd => 0x1,
    0x1fe => 0x0,
    0x1ff => 0x2700,
    0x200 => 0x2084,
    0x201 => 0x1,
    0x202 => 0x2580,
    0x203 => 0x2700,
    0x204 => 0x2,
    0x205 => 0x1,
    0x206 => 0x2581,
    0x207 => 0x2700,
    0x208 => 0x3,
    0x209 => 0x1,
    0x20a => 0x2582,
    0x20b => 0x2700,
    0x20c => 0x2,
    0x20d => 0x1,
    0x20e => 0x2583,
    0x20f => 0x2700,
    0x210 => 0x2400,
    0x211 => 0x1,
    0x212 => 0x2584,
    0x213 => 0x2700,
    0x214 => 0x2,
    0x215 => 0x1,
    0x216 => 0x2585,
    0x217 => 0x2700,
    0x218 => 0x0,
    0x219 => 0x1,
    0x21a => 0x2586,
    0x21b => 0x2700,
    0x21c => 0x2,
    0x21d => 0x1,
    0x21e => 0x2587,
    0x21f => 0x2700,
    0x220 => 0x0,
    0x221 => 0x1,
    0x222 => 0x2588,
    0x223 => 0x2700,
    0x224 => 0x2,
    0x225 => 0x1,
    0x226 => 0x0,
    0x227 => 0x2700,
    0x228 => 0x0,
    0x229 => 0x1,
    0x22a => 0x0,
    0x22b => 0x2700,
    0x22c => 0x2,
    0x22d => 0x1,
    0x22e => 0x0,
    0x22f => 0x2700,
    0x230 => 0x2401,
    0x231 => 0x1,
    0x232 => 0x0,
    0x233 => 0x2700,
    0x234 => 0x2,
    0x235 => 0x1,
    0x236 => 0x0,
    0x237 => 0x2700,
    0x238 => 0x0,
    0x239 => 0x1,
    0x23a => 0x0,
    0x23b => 0x2700,
    0x23c => 0x2,
    0x23d => 0x1,
    0x23e => 0x0,
    0x23f => 0x2700,
    0x240 => 0x2085,
    0x241 => 0x1,
    0x242 => 0x2580,
    0x243 => 0x2700,
    0x244 => 0x2,
    0x245 => 0x1,
    0x246 => 0x2581,
    0x247 => 0x2700,
    0x248 => 0x3,
    0x249 => 0x1,
    0x24a => 0x2582,
    0x24b => 0x2700,
    0x24c => 0x2,
    0x24d => 0x1,
    0x24e => 0x2583,
    0x24f => 0x2700,
    0x250 => 0x2402,
    0x251 => 0x1,
    0x252 => 0x2584,
    0x253 => 0x2700,
    0x254 => 0x2,
    0x255 => 0x1,
    0x256 => 0x2585,
    0x257 => 0x2700,
    0x258 => 0x0,
    0x259 => 0x1,
    0x25a => 0x2586,
    0x25b => 0x2700,
    0x25c => 0x2,
    0x25d => 0x1,
    0x25e => 0x2587,
    0x25f => 0x2700,
    0x260 => 0x0,
    0x261 => 0x1,
    0x262 => 0x2588,
    0x263 => 0x2700,
    0x264 => 0x2,
    0x265 => 0x1,
    0x266 => 0x0,
    0x267 => 0x2700,
    0x268 => 0x0,
    0x269 => 0x1,
    0x26a => 0x0,
    0x26b => 0x2700,
    0x26c => 0x2,
    0x26d => 0x1,
    0x26e => 0x0,
    0x26f => 0x2700,
    0x270 => 0x2403,
    0x271 => 0x1,
    0x272 => 0x0,
    0x273 => 0x2700,
    0x274 => 0x2,
    0x275 => 0x1,
    0x276 => 0x0,
    0x277 => 0x2700,
    0x278 => 0x0,
    0x279 => 0x1,
    0x27a => 0x0,
    0x27b => 0x2700,
    0x27c => 0x2,
    0x27d => 0x1,
    0x27e => 0x0,
    0x27f => 0x2700,
    0x280 => 0x0,
    0x281 => 0x1,
    0x282 => 0x2580,
    0x283 => 0x2700,
    0x284 => 0x2,
    0x285 => 0x1,
    0x286 => 0x2581,
    0x287 => 0x2700,
    0x288 => 0x3,
    0x289 => 0x1,
    0x28a => 0x2582,
    0x28b => 0x2700,
    0x28c => 0x2,
    0x28d => 0x1,
    0x28e => 0x2583,
    0x28f => 0x2700,
    0x290 => 0x0,
    0x291 => 0x1,
    0x292 => 0x2584,
    0x293 => 0x2700,
    0x294 => 0x2,
    0x295 => 0x1,
    0x296 => 0x2585,
    0x297 => 0x2700,
    0x298 => 0x0,
    0x299 => 0x1,
    0x29a => 0x2586,
    0x29b => 0x2700,
    0x29c => 0x2,
    0x29d => 0x1,
    0x29e => 0x2587,
    0x29f => 0x2700,
    0x2a0 => 0x0,
    0x2a1 => 0x1,
    0x2a2 => 0x2588,
    0x2a3 => 0x2700,
    0x2a4 => 0x2,
    0x2a5 => 0x1,
    0x2a6 => 0x0,
    0x2a7 => 0x2700,
    0x2a8 => 0x0,
    0x2a9 => 0x1,
    0x2aa => 0x0,
    0x2ab => 0x2700,
    0x2ac => 0x2,
    0x2ad => 0x1,
    0x2ae => 0x0,
    0x2af => 0x2700,
    0x2b0 => 0x0,
    0x2b1 => 0x1,
    0x2b2 => 0x0,
    0x2b3 => 0x2700,
    0x2b4 => 0x2,
    0x2b5 => 0x1,
    0x2b6 => 0x0,
    0x2b7 => 0x2700,
    0x2b8 => 0x0,
    0x2b9 => 0x1,
    0x2ba => 0x0,
    0x2bb => 0x2700,
    0x2bc => 0x2,
    0x2bd => 0x1,
    0x2be => 0x0,
    0x2bf => 0x2700,
    0x2c0 => 0x0,
    0x2c1 => 0x1,
    0x2c2 => 0x2580,
    0x2c3 => 0x2700,
    0x2c4 => 0x2,
    0x2c5 => 0x1,
    0x2c6 => 0x2581,
    0x2c7 => 0x2700,
    0x2c8 => 0x3,
    0x2c9 => 0x1,
    0x2ca => 0x2582,
    0x2cb => 0x2700,
    0x2cc => 0x2,
    0x2cd => 0x1,
    0x2ce => 0x2583,
    0x2cf => 0x2700,
    0x2d0 => 0x0,
    0x2d1 => 0x1,
    0x2d2 => 0x2584,
    0x2d3 => 0x2700,
    0x2d4 => 0x2,
    0x2d5 => 0x1,
    0x2d6 => 0x2585,
    0x2d7 => 0x2700,
    0x2d8 => 0x0,
    0x2d9 => 0x1,
    0x2da => 0x2586,
    0x2db => 0x2700,
    0x2dc => 0x2,
    0x2dd => 0x1,
    0x2de => 0x2587,
    0x2df => 0x2700,
    0x2e0 => 0x0,
    0x2e1 => 0x1,
    0x2e2 => 0x2588,
    0x2e3 => 0x2700,
    0x2e4 => 0x2,
    0x2e5 => 0x1,
    0x2e6 => 0x0,
    0x2e7 => 0x2700,
    0x2e8 => 0x0,
    0x2e9 => 0x1,
    0x2ea => 0x0,
    0x2eb => 0x2700,
    0x2ec => 0x2,
    0x2ed => 0x1,
    0x2ee => 0x0,
    0x2ef => 0x2700,
    0x2f0 => 0x0,
    0x2f1 => 0x1,
    0x2f2 => 0x0,
    0x2f3 => 0x2700,
    0x2f4 => 0x2,
    0x2f5 => 0x1,
    0x2f6 => 0x0,
    0x2f7 => 0x2700,
    0x2f8 => 0x0,
    0x2f9 => 0x1,
    0x2fa => 0x0,
    0x2fb => 0x2700,
    0x2fc => 0x2,
    0x2fd => 0x1,
    0x2fe => 0x0,
    0x2ff => 0x2700,
    0x300 => 0x0,
    0x301 => 0x1,
    0x302 => 0x2580,
    0x303 => 0x2700,
    0x304 => 0x2,
    0x305 => 0x1,
    0x306 => 0x2581,
    0x307 => 0x2700,
    0x308 => 0x3,
    0x309 => 0x1,
    0x30a => 0x2582,
    0x30b => 0x2700,
    0x30c => 0x2,
    0x30d => 0x1,
    0x30e => 0x2583,
    0x30f => 0x2700,
    0x310 => 0x0,
    0x311 => 0x1,
    0x312 => 0x2584,
    0x313 => 0x2700,
    0x314 => 0x2,
    0x315 => 0x1,
    0x316 => 0x2585,
    0x317 => 0x2700,
    0x318 => 0x0,
    0x319 => 0x1,
    0x31a => 0x2586,
    0x31b => 0x2700,
    0x31c => 0x2,
    0x31d => 0x1,
    0x31e => 0x2587,
    0x31f => 0x2700,
    0x320 => 0x0,
    0x321 => 0x1,
    0x322 => 0x2588,
    0x323 => 0x2700,
    0x324 => 0x2,
    0x325 => 0x1,
    0x326 => 0x0,
    0x327 => 0x2700,
    0x328 => 0x0,
    0x329 => 0x1,
    0x32a => 0x0,
    0x32b => 0x2700,
    0x32c => 0x2,
    0x32d => 0x1,
    0x32e => 0x0,
    0x32f => 0x2700,
    0x330 => 0x0,
    0x331 => 0x1,
    0x332 => 0x0,
    0x333 => 0x2700,
    0x334 => 0x2,
    0x335 => 0x1,
    0x336 => 0x0,
    0x337 => 0x2700,
    0x338 => 0x0,
    0x339 => 0x1,
    0x33a => 0x0,
    0x33b => 0x2700,
    0x33c => 0x2,
    0x33d => 0x1,
    0x33e => 0x0,
    0x33f => 0x2700,
    0x340 => 0x0,
    0x341 => 0x1,
    0x342 => 0x2580,
    0x343 => 0x2700,
    0x344 => 0x2,
    0x345 => 0x1,
    0x346 => 0x2581,
    0x347 => 0x2700,
    0x348 => 0x3,
    0x349 => 0x1,
    0x34a => 0x2582,
    0x34b => 0x2700,
    0x34c => 0x2,
    0x34d => 0x1,
    0x34e => 0x2583,
    0x34f => 0x2700,
    0x350 => 0x0,
    0x351 => 0x1,
    0x352 => 0x2584,
    0x353 => 0x2700,
    0x354 => 0x2,
    0x355 => 0x1,
    0x356 => 0x2585,
    0x357 => 0x2700,
    0x358 => 0x0,
    0x359 => 0x1,
    0x35a => 0x2586,
    0x35b => 0x2700,
    0x35c => 0x2,
    0x35d => 0x1,
    0x35e => 0x2587,
    0x35f => 0x2700,
    0x360 => 0x0,
    0x361 => 0x1,
    0x362 => 0x2588,
    0x363 => 0x2700,
    0x364 => 0x2,
    0x365 => 0x1,
    0x366 => 0x0,
    0x367 => 0x2700,
    0x368 => 0x0,
    0x369 => 0x1,
    0x36a => 0x0,
    0x36b => 0x2700,
    0x36c => 0x2,
    0x36d => 0x1,
    0x36e => 0x0,
    0x36f => 0x2700,
    0x370 => 0x0,
    0x371 => 0x1,
    0x372 => 0x0,
    0x373 => 0x2700,
    0x374 => 0x2,
    0x375 => 0x1,
    0x376 => 0x0,
    0x377 => 0x2700,
    0x378 => 0x0,
    0x379 => 0x1,
    0x37a => 0x0,
    0x37b => 0x2700,
    0x37c => 0x2,
    0x37d => 0x1,
    0x37e => 0x0,
    0x37f => 0x2700,
    0x380 => 0x0,
    0x381 => 0x1,
    0x382 => 0x2580,
    0x383 => 0x2700,
    0x384 => 0x2,
    0x385 => 0x1,
    0x386 => 0x2581,
    0x387 => 0x2700,
    0x388 => 0x3,
    0x389 => 0x1,
    0x38a => 0x2582,
    0x38b => 0x2700,
    0x38c => 0x2,
    0x38d => 0x1,
    0x38e => 0x2583,
    0x38f => 0x2700,
    0x390 => 0x0,
    0x391 => 0x1,
    0x392 => 0x2584,
    0x393 => 0x2700,
    0x394 => 0x2,
    0x395 => 0x1,
    0x396 => 0x2585,
    0x397 => 0x2700,
    0x398 => 0x0,
    0x399 => 0x1,
    0x39a => 0x2586,
    0x39b => 0x2700,
    0x39c => 0x2,
    0x39d => 0x1,
    0x39e => 0x2587,
    0x39f => 0x2700,
    0x3a0 => 0x0,
    0x3a1 => 0x1,
    0x3a2 => 0x2588,
    0x3a3 => 0x2700,
    0x3a4 => 0x2,
    0x3a5 => 0x1,
    0x3a6 => 0x0,
    0x3a7 => 0x2700,
    0x3a8 => 0x0,
    0x3a9 => 0x1,
    0x3aa => 0x0,
    0x3ab => 0x2700,
    0x3ac => 0x2,
    0x3ad => 0x1,
    0x3ae => 0x0,
    0x3af => 0x2700,
    0x3b0 => 0x0,
    0x3b1 => 0x1,
    0x3b2 => 0x0,
    0x3b3 => 0x2700,
    0x3b4 => 0x2,
    0x3b5 => 0x1,
    0x3b6 => 0x0,
    0x3b7 => 0x2700,
    0x3b8 => 0x0,
    0x3b9 => 0x1,
    0x3ba => 0x0,
    0x3bb => 0x2700,
    0x3bc => 0x2,
    0x3bd => 0x1,
    0x3be => 0x0,
    0x3bf => 0x2700,
    0x3c0 => 0x0,
    0x3c1 => 0x1,
    0x3c2 => 0x2580,
    0x3c3 => 0x2700,
    0x3c4 => 0x2,
    0x3c5 => 0x1,
    0x3c6 => 0x2581,
    0x3c7 => 0x2700,
    0x3c8 => 0x3,
    0x3c9 => 0x1,
    0x3ca => 0x2582,
    0x3cb => 0x2700,
    0x3cc => 0x2,
    0x3cd => 0x1,
    0x3ce => 0x2583,
    0x3cf => 0x2700,
    0x3d0 => 0x0,
    0x3d1 => 0x1,
    0x3d2 => 0x2584,
    0x3d3 => 0x2700,
    0x3d4 => 0x2,
    0x3d5 => 0x1,
    0x3d6 => 0x2585,
    0x3d7 => 0x2700,
    0x3d8 => 0x0,
    0x3d9 => 0x1,
    0x3da => 0x2586,
    0x3db => 0x2700,
    0x3dc => 0x2,
    0x3dd => 0x1,
    0x3de => 0x2587,
    0x3df => 0x2700,
    0x3e0 => 0x0,
    0x3e1 => 0x1,
    0x3e2 => 0x2588,
    0x3e3 => 0x2700,
    0x3e4 => 0x2,
    0x3e5 => 0x1,
    0x3e6 => 0x0,
    0x3e7 => 0x2700,
    0x3e8 => 0x0,
    0x3e9 => 0x1,
    0x3ea => 0x0,
    0x3eb => 0x2700,
    0x3ec => 0x2,
    0x3ed => 0x1,
    0x3ee => 0x0,
    0x3ef => 0x2700,
    0x3f0 => 0x0,
    0x3f1 => 0x1,
    0x3f2 => 0x0,
    0x3f3 => 0x2700,
    0x3f4 => 0x2,
    0x3f5 => 0x1,
    0x3f6 => 0x0,
    0x3f7 => 0x2700,
    0x3f8 => 0x0,
    0x3f9 => 0x1,
    0x3fa => 0x0,
    0x3fb => 0x2700,
    0x3fc => 0x2,
    0x3fd => 0x1,
    0x3fe => 0x0,
    0x3ff => 0x2700,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_46_1(inst), // FCCMP-FCCMP#1,FCCMP-FCCMPE#1
    0x2 => return classify_impl_46_2(inst), // FMOV_IMM-FMOV_IMM#1
    0x3 => return classify_impl_46_3(inst), // FCMP-FCMP#1,FCMP-FCMP_ZERO#1,FCMP-FCMPE#1,FCMP-FCMPE_ZERO#1
    _ => idx
  };
  return idx;
}


// FCCMP-FCCMP#1,FCCMP-FCCMPE#1
pub const fn classify_impl_47_1(inst: u32) -> u32 {
  let idx = match (inst >> 4) & 0x1 {
    0x0 => 0x2680,
    0x1 => 0x2681,
    _ => 0,
  };
  return idx;
}


// FMOV_IMM-FMOV_IMM#1
pub const fn classify_impl_47_2(inst: u32) -> u32 {
  if (inst&0x3e0) != 0x0 { return 0; }
  return 0x2500;
}


// FCMP-FCMP#1,FCMP-FCMP_ZERO#1,FCMP-FCMPE#1,FCMP-FCMPE_ZERO#1
pub const fn classify_impl_47_3(inst: u32) -> u32 {
  if (inst&0x7) != 0x0 { return 0; }
  let idx = match (inst >> 3) & 0x3 {
    0x0 => 0x2600,
    0x1 => 0x2601,
    0x2 => 0x2602,
    0x3 => 0x2603,
    _ => 0,
  };
  return idx;
}

// FCVT_TOINT-FCVTMS#1,FCVT_TOINT-FCVTMU#1,FCVT_TOINT-FCVTZS#1,FCVT_TOINT-FCVTZU#1,FJCVTZS-FJCVTZS#0,FMOV_IMM-FMOV_IMM#1,FARITH2-FMUL#1,FARITH2-FDIV#1,FARITH2-FADD#1,FARITH2-FSUB#1,FARITH2-FMAX#1,FARITH2-FMIN#1,FARITH2-FMAXNM#1,FARITH2-FMINNM#1,FARITH2-FNMUL#1,FCMP-FCMP#1,FCMP-FCMP_ZERO#1,FCMP-FCMPE#1,FCMP-FCMPE_ZERO#1,FCCMP-FCCMP#1,FCCMP-FCCMPE#1,FCSEL-FCSEL#1
pub const fn classify_impl_47(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3ff {
    0x0 => 0x2086,
    0x1 => 0x1,
    0x2 => 0x2580,
    0x3 => 0x2700,
    0x4 => 0x2,
    0x5 => 0x1,
    0x6 => 0x2581,
    0x7 => 0x2700,
    0x8 => 0x3,
    0x9 => 0x1,
    0xa => 0x2582,
    0xb => 0x2700,
    0xc => 0x2,
    0xd => 0x1,
    0xe => 0x2583,
    0xf => 0x2700,
    0x10 => 0x0,
    0x11 => 0x1,
    0x12 => 0x2584,
    0x13 => 0x2700,
    0x14 => 0x2,
    0x15 => 0x1,
    0x16 => 0x2585,
    0x17 => 0x2700,
    0x18 => 0x0,
    0x19 => 0x1,
    0x1a => 0x2586,
    0x1b => 0x2700,
    0x1c => 0x2,
    0x1d => 0x1,
    0x1e => 0x2587,
    0x1f => 0x2700,
    0x20 => 0x0,
    0x21 => 0x1,
    0x22 => 0x2588,
    0x23 => 0x2700,
    0x24 => 0x2,
    0x25 => 0x1,
    0x26 => 0x0,
    0x27 => 0x2700,
    0x28 => 0x0,
    0x29 => 0x1,
    0x2a => 0x0,
    0x2b => 0x2700,
    0x2c => 0x2,
    0x2d => 0x1,
    0x2e => 0x0,
    0x2f => 0x2700,
    0x30 => 0x0,
    0x31 => 0x1,
    0x32 => 0x0,
    0x33 => 0x2700,
    0x34 => 0x2,
    0x35 => 0x1,
    0x36 => 0x0,
    0x37 => 0x2700,
    0x38 => 0x0,
    0x39 => 0x1,
    0x3a => 0x0,
    0x3b => 0x2700,
    0x3c => 0x2,
    0x3d => 0x1,
    0x3e => 0x0,
    0x3f => 0x2700,
    0x40 => 0x2087,
    0x41 => 0x1,
    0x42 => 0x2580,
    0x43 => 0x2700,
    0x44 => 0x2,
    0x45 => 0x1,
    0x46 => 0x2581,
    0x47 => 0x2700,
    0x48 => 0x3,
    0x49 => 0x1,
    0x4a => 0x2582,
    0x4b => 0x2700,
    0x4c => 0x2,
    0x4d => 0x1,
    0x4e => 0x2583,
    0x4f => 0x2700,
    0x50 => 0x0,
    0x51 => 0x1,
    0x52 => 0x2584,
    0x53 => 0x2700,
    0x54 => 0x2,
    0x55 => 0x1,
    0x56 => 0x2585,
    0x57 => 0x2700,
    0x58 => 0x0,
    0x59 => 0x1,
    0x5a => 0x2586,
    0x5b => 0x2700,
    0x5c => 0x2,
    0x5d => 0x1,
    0x5e => 0x2587,
    0x5f => 0x2700,
    0x60 => 0x0,
    0x61 => 0x1,
    0x62 => 0x2588,
    0x63 => 0x2700,
    0x64 => 0x2,
    0x65 => 0x1,
    0x66 => 0x0,
    0x67 => 0x2700,
    0x68 => 0x0,
    0x69 => 0x1,
    0x6a => 0x0,
    0x6b => 0x2700,
    0x6c => 0x2,
    0x6d => 0x1,
    0x6e => 0x0,
    0x6f => 0x2700,
    0x70 => 0x0,
    0x71 => 0x1,
    0x72 => 0x0,
    0x73 => 0x2700,
    0x74 => 0x2,
    0x75 => 0x1,
    0x76 => 0x0,
    0x77 => 0x2700,
    0x78 => 0x0,
    0x79 => 0x1,
    0x7a => 0x0,
    0x7b => 0x2700,
    0x7c => 0x2,
    0x7d => 0x1,
    0x7e => 0x0,
    0x7f => 0x2700,
    0x80 => 0x0,
    0x81 => 0x1,
    0x82 => 0x2580,
    0x83 => 0x2700,
    0x84 => 0x2,
    0x85 => 0x1,
    0x86 => 0x2581,
    0x87 => 0x2700,
    0x88 => 0x3,
    0x89 => 0x1,
    0x8a => 0x2582,
    0x8b => 0x2700,
    0x8c => 0x2,
    0x8d => 0x1,
    0x8e => 0x2583,
    0x8f => 0x2700,
    0x90 => 0x0,
    0x91 => 0x1,
    0x92 => 0x2584,
    0x93 => 0x2700,
    0x94 => 0x2,
    0x95 => 0x1,
    0x96 => 0x2585,
    0x97 => 0x2700,
    0x98 => 0x0,
    0x99 => 0x1,
    0x9a => 0x2586,
    0x9b => 0x2700,
    0x9c => 0x2,
    0x9d => 0x1,
    0x9e => 0x2587,
    0x9f => 0x2700,
    0xa0 => 0x0,
    0xa1 => 0x1,
    0xa2 => 0x2588,
    0xa3 => 0x2700,
    0xa4 => 0x2,
    0xa5 => 0x1,
    0xa6 => 0x0,
    0xa7 => 0x2700,
    0xa8 => 0x0,
    0xa9 => 0x1,
    0xaa => 0x0,
    0xab => 0x2700,
    0xac => 0x2,
    0xad => 0x1,
    0xae => 0x0,
    0xaf => 0x2700,
    0xb0 => 0x0,
    0xb1 => 0x1,
    0xb2 => 0x0,
    0xb3 => 0x2700,
    0xb4 => 0x2,
    0xb5 => 0x1,
    0xb6 => 0x0,
    0xb7 => 0x2700,
    0xb8 => 0x0,
    0xb9 => 0x1,
    0xba => 0x0,
    0xbb => 0x2700,
    0xbc => 0x2,
    0xbd => 0x1,
    0xbe => 0x0,
    0xbf => 0x2700,
    0xc0 => 0x0,
    0xc1 => 0x1,
    0xc2 => 0x2580,
    0xc3 => 0x2700,
    0xc4 => 0x2,
    0xc5 => 0x1,
    0xc6 => 0x2581,
    0xc7 => 0x2700,
    0xc8 => 0x3,
    0xc9 => 0x1,
    0xca => 0x2582,
    0xcb => 0x2700,
    0xcc => 0x2,
    0xcd => 0x1,
    0xce => 0x2583,
    0xcf => 0x2700,
    0xd0 => 0x0,
    0xd1 => 0x1,
    0xd2 => 0x2584,
    0xd3 => 0x2700,
    0xd4 => 0x2,
    0xd5 => 0x1,
    0xd6 => 0x2585,
    0xd7 => 0x2700,
    0xd8 => 0x0,
    0xd9 => 0x1,
    0xda => 0x2586,
    0xdb => 0x2700,
    0xdc => 0x2,
    0xdd => 0x1,
    0xde => 0x2587,
    0xdf => 0x2700,
    0xe0 => 0x0,
    0xe1 => 0x1,
    0xe2 => 0x2588,
    0xe3 => 0x2700,
    0xe4 => 0x2,
    0xe5 => 0x1,
    0xe6 => 0x0,
    0xe7 => 0x2700,
    0xe8 => 0x0,
    0xe9 => 0x1,
    0xea => 0x0,
    0xeb => 0x2700,
    0xec => 0x2,
    0xed => 0x1,
    0xee => 0x0,
    0xef => 0x2700,
    0xf0 => 0x0,
    0xf1 => 0x1,
    0xf2 => 0x0,
    0xf3 => 0x2700,
    0xf4 => 0x2,
    0xf5 => 0x1,
    0xf6 => 0x0,
    0xf7 => 0x2700,
    0xf8 => 0x0,
    0xf9 => 0x1,
    0xfa => 0x0,
    0xfb => 0x2700,
    0xfc => 0x2,
    0xfd => 0x1,
    0xfe => 0x0,
    0xff => 0x2700,
    0x100 => 0x0,
    0x101 => 0x1,
    0x102 => 0x2580,
    0x103 => 0x2700,
    0x104 => 0x2,
    0x105 => 0x1,
    0x106 => 0x2581,
    0x107 => 0x2700,
    0x108 => 0x3,
    0x109 => 0x1,
    0x10a => 0x2582,
    0x10b => 0x2700,
    0x10c => 0x2,
    0x10d => 0x1,
    0x10e => 0x2583,
    0x10f => 0x2700,
    0x110 => 0x0,
    0x111 => 0x1,
    0x112 => 0x2584,
    0x113 => 0x2700,
    0x114 => 0x2,
    0x115 => 0x1,
    0x116 => 0x2585,
    0x117 => 0x2700,
    0x118 => 0x0,
    0x119 => 0x1,
    0x11a => 0x2586,
    0x11b => 0x2700,
    0x11c => 0x2,
    0x11d => 0x1,
    0x11e => 0x2587,
    0x11f => 0x2700,
    0x120 => 0x0,
    0x121 => 0x1,
    0x122 => 0x2588,
    0x123 => 0x2700,
    0x124 => 0x2,
    0x125 => 0x1,
    0x126 => 0x0,
    0x127 => 0x2700,
    0x128 => 0x0,
    0x129 => 0x1,
    0x12a => 0x0,
    0x12b => 0x2700,
    0x12c => 0x2,
    0x12d => 0x1,
    0x12e => 0x0,
    0x12f => 0x2700,
    0x130 => 0x0,
    0x131 => 0x1,
    0x132 => 0x0,
    0x133 => 0x2700,
    0x134 => 0x2,
    0x135 => 0x1,
    0x136 => 0x0,
    0x137 => 0x2700,
    0x138 => 0x0,
    0x139 => 0x1,
    0x13a => 0x0,
    0x13b => 0x2700,
    0x13c => 0x2,
    0x13d => 0x1,
    0x13e => 0x0,
    0x13f => 0x2700,
    0x140 => 0x0,
    0x141 => 0x1,
    0x142 => 0x2580,
    0x143 => 0x2700,
    0x144 => 0x2,
    0x145 => 0x1,
    0x146 => 0x2581,
    0x147 => 0x2700,
    0x148 => 0x3,
    0x149 => 0x1,
    0x14a => 0x2582,
    0x14b => 0x2700,
    0x14c => 0x2,
    0x14d => 0x1,
    0x14e => 0x2583,
    0x14f => 0x2700,
    0x150 => 0x0,
    0x151 => 0x1,
    0x152 => 0x2584,
    0x153 => 0x2700,
    0x154 => 0x2,
    0x155 => 0x1,
    0x156 => 0x2585,
    0x157 => 0x2700,
    0x158 => 0x0,
    0x159 => 0x1,
    0x15a => 0x2586,
    0x15b => 0x2700,
    0x15c => 0x2,
    0x15d => 0x1,
    0x15e => 0x2587,
    0x15f => 0x2700,
    0x160 => 0x0,
    0x161 => 0x1,
    0x162 => 0x2588,
    0x163 => 0x2700,
    0x164 => 0x2,
    0x165 => 0x1,
    0x166 => 0x0,
    0x167 => 0x2700,
    0x168 => 0x0,
    0x169 => 0x1,
    0x16a => 0x0,
    0x16b => 0x2700,
    0x16c => 0x2,
    0x16d => 0x1,
    0x16e => 0x0,
    0x16f => 0x2700,
    0x170 => 0x0,
    0x171 => 0x1,
    0x172 => 0x0,
    0x173 => 0x2700,
    0x174 => 0x2,
    0x175 => 0x1,
    0x176 => 0x0,
    0x177 => 0x2700,
    0x178 => 0x0,
    0x179 => 0x1,
    0x17a => 0x0,
    0x17b => 0x2700,
    0x17c => 0x2,
    0x17d => 0x1,
    0x17e => 0x0,
    0x17f => 0x2700,
    0x180 => 0x0,
    0x181 => 0x1,
    0x182 => 0x2580,
    0x183 => 0x2700,
    0x184 => 0x2,
    0x185 => 0x1,
    0x186 => 0x2581,
    0x187 => 0x2700,
    0x188 => 0x3,
    0x189 => 0x1,
    0x18a => 0x2582,
    0x18b => 0x2700,
    0x18c => 0x2,
    0x18d => 0x1,
    0x18e => 0x2583,
    0x18f => 0x2700,
    0x190 => 0x0,
    0x191 => 0x1,
    0x192 => 0x2584,
    0x193 => 0x2700,
    0x194 => 0x2,
    0x195 => 0x1,
    0x196 => 0x2585,
    0x197 => 0x2700,
    0x198 => 0x0,
    0x199 => 0x1,
    0x19a => 0x2586,
    0x19b => 0x2700,
    0x19c => 0x2,
    0x19d => 0x1,
    0x19e => 0x2587,
    0x19f => 0x2700,
    0x1a0 => 0x0,
    0x1a1 => 0x1,
    0x1a2 => 0x2588,
    0x1a3 => 0x2700,
    0x1a4 => 0x2,
    0x1a5 => 0x1,
    0x1a6 => 0x0,
    0x1a7 => 0x2700,
    0x1a8 => 0x0,
    0x1a9 => 0x1,
    0x1aa => 0x0,
    0x1ab => 0x2700,
    0x1ac => 0x2,
    0x1ad => 0x1,
    0x1ae => 0x0,
    0x1af => 0x2700,
    0x1b0 => 0x0,
    0x1b1 => 0x1,
    0x1b2 => 0x0,
    0x1b3 => 0x2700,
    0x1b4 => 0x2,
    0x1b5 => 0x1,
    0x1b6 => 0x0,
    0x1b7 => 0x2700,
    0x1b8 => 0x0,
    0x1b9 => 0x1,
    0x1ba => 0x0,
    0x1bb => 0x2700,
    0x1bc => 0x2,
    0x1bd => 0x1,
    0x1be => 0x0,
    0x1bf => 0x2700,
    0x1c0 => 0x0,
    0x1c1 => 0x1,
    0x1c2 => 0x2580,
    0x1c3 => 0x2700,
    0x1c4 => 0x2,
    0x1c5 => 0x1,
    0x1c6 => 0x2581,
    0x1c7 => 0x2700,
    0x1c8 => 0x3,
    0x1c9 => 0x1,
    0x1ca => 0x2582,
    0x1cb => 0x2700,
    0x1cc => 0x2,
    0x1cd => 0x1,
    0x1ce => 0x2583,
    0x1cf => 0x2700,
    0x1d0 => 0x0,
    0x1d1 => 0x1,
    0x1d2 => 0x2584,
    0x1d3 => 0x2700,
    0x1d4 => 0x2,
    0x1d5 => 0x1,
    0x1d6 => 0x2585,
    0x1d7 => 0x2700,
    0x1d8 => 0x0,
    0x1d9 => 0x1,
    0x1da => 0x2586,
    0x1db => 0x2700,
    0x1dc => 0x2,
    0x1dd => 0x1,
    0x1de => 0x2587,
    0x1df => 0x2700,
    0x1e0 => 0x0,
    0x1e1 => 0x1,
    0x1e2 => 0x2588,
    0x1e3 => 0x2700,
    0x1e4 => 0x2,
    0x1e5 => 0x1,
    0x1e6 => 0x0,
    0x1e7 => 0x2700,
    0x1e8 => 0x0,
    0x1e9 => 0x1,
    0x1ea => 0x0,
    0x1eb => 0x2700,
    0x1ec => 0x2,
    0x1ed => 0x1,
    0x1ee => 0x0,
    0x1ef => 0x2700,
    0x1f0 => 0x0,
    0x1f1 => 0x1,
    0x1f2 => 0x0,
    0x1f3 => 0x2700,
    0x1f4 => 0x2,
    0x1f5 => 0x1,
    0x1f6 => 0x0,
    0x1f7 => 0x2700,
    0x1f8 => 0x0,
    0x1f9 => 0x1,
    0x1fa => 0x0,
    0x1fb => 0x2700,
    0x1fc => 0x2,
    0x1fd => 0x1,
    0x1fe => 0x0,
    0x1ff => 0x2700,
    0x200 => 0x2088,
    0x201 => 0x1,
    0x202 => 0x2580,
    0x203 => 0x2700,
    0x204 => 0x2,
    0x205 => 0x1,
    0x206 => 0x2581,
    0x207 => 0x2700,
    0x208 => 0x3,
    0x209 => 0x1,
    0x20a => 0x2582,
    0x20b => 0x2700,
    0x20c => 0x2,
    0x20d => 0x1,
    0x20e => 0x2583,
    0x20f => 0x2700,
    0x210 => 0x0,
    0x211 => 0x1,
    0x212 => 0x2584,
    0x213 => 0x2700,
    0x214 => 0x2,
    0x215 => 0x1,
    0x216 => 0x2585,
    0x217 => 0x2700,
    0x218 => 0x0,
    0x219 => 0x1,
    0x21a => 0x2586,
    0x21b => 0x2700,
    0x21c => 0x2,
    0x21d => 0x1,
    0x21e => 0x2587,
    0x21f => 0x2700,
    0x220 => 0x0,
    0x221 => 0x1,
    0x222 => 0x2588,
    0x223 => 0x2700,
    0x224 => 0x2,
    0x225 => 0x1,
    0x226 => 0x0,
    0x227 => 0x2700,
    0x228 => 0x0,
    0x229 => 0x1,
    0x22a => 0x0,
    0x22b => 0x2700,
    0x22c => 0x2,
    0x22d => 0x1,
    0x22e => 0x0,
    0x22f => 0x2700,
    0x230 => 0x0,
    0x231 => 0x1,
    0x232 => 0x0,
    0x233 => 0x2700,
    0x234 => 0x2,
    0x235 => 0x1,
    0x236 => 0x0,
    0x237 => 0x2700,
    0x238 => 0x0,
    0x239 => 0x1,
    0x23a => 0x0,
    0x23b => 0x2700,
    0x23c => 0x2,
    0x23d => 0x1,
    0x23e => 0x0,
    0x23f => 0x2700,
    0x240 => 0x2089,
    0x241 => 0x1,
    0x242 => 0x2580,
    0x243 => 0x2700,
    0x244 => 0x2,
    0x245 => 0x1,
    0x246 => 0x2581,
    0x247 => 0x2700,
    0x248 => 0x3,
    0x249 => 0x1,
    0x24a => 0x2582,
    0x24b => 0x2700,
    0x24c => 0x2,
    0x24d => 0x1,
    0x24e => 0x2583,
    0x24f => 0x2700,
    0x250 => 0x0,
    0x251 => 0x1,
    0x252 => 0x2584,
    0x253 => 0x2700,
    0x254 => 0x2,
    0x255 => 0x1,
    0x256 => 0x2585,
    0x257 => 0x2700,
    0x258 => 0x0,
    0x259 => 0x1,
    0x25a => 0x2586,
    0x25b => 0x2700,
    0x25c => 0x2,
    0x25d => 0x1,
    0x25e => 0x2587,
    0x25f => 0x2700,
    0x260 => 0x0,
    0x261 => 0x1,
    0x262 => 0x2588,
    0x263 => 0x2700,
    0x264 => 0x2,
    0x265 => 0x1,
    0x266 => 0x0,
    0x267 => 0x2700,
    0x268 => 0x0,
    0x269 => 0x1,
    0x26a => 0x0,
    0x26b => 0x2700,
    0x26c => 0x2,
    0x26d => 0x1,
    0x26e => 0x0,
    0x26f => 0x2700,
    0x270 => 0x0,
    0x271 => 0x1,
    0x272 => 0x0,
    0x273 => 0x2700,
    0x274 => 0x2,
    0x275 => 0x1,
    0x276 => 0x0,
    0x277 => 0x2700,
    0x278 => 0x0,
    0x279 => 0x1,
    0x27a => 0x0,
    0x27b => 0x2700,
    0x27c => 0x2,
    0x27d => 0x1,
    0x27e => 0x0,
    0x27f => 0x2700,
    0x280 => 0x0,
    0x281 => 0x1,
    0x282 => 0x2580,
    0x283 => 0x2700,
    0x284 => 0x2,
    0x285 => 0x1,
    0x286 => 0x2581,
    0x287 => 0x2700,
    0x288 => 0x3,
    0x289 => 0x1,
    0x28a => 0x2582,
    0x28b => 0x2700,
    0x28c => 0x2,
    0x28d => 0x1,
    0x28e => 0x2583,
    0x28f => 0x2700,
    0x290 => 0x0,
    0x291 => 0x1,
    0x292 => 0x2584,
    0x293 => 0x2700,
    0x294 => 0x2,
    0x295 => 0x1,
    0x296 => 0x2585,
    0x297 => 0x2700,
    0x298 => 0x0,
    0x299 => 0x1,
    0x29a => 0x2586,
    0x29b => 0x2700,
    0x29c => 0x2,
    0x29d => 0x1,
    0x29e => 0x2587,
    0x29f => 0x2700,
    0x2a0 => 0x0,
    0x2a1 => 0x1,
    0x2a2 => 0x2588,
    0x2a3 => 0x2700,
    0x2a4 => 0x2,
    0x2a5 => 0x1,
    0x2a6 => 0x0,
    0x2a7 => 0x2700,
    0x2a8 => 0x0,
    0x2a9 => 0x1,
    0x2aa => 0x0,
    0x2ab => 0x2700,
    0x2ac => 0x2,
    0x2ad => 0x1,
    0x2ae => 0x0,
    0x2af => 0x2700,
    0x2b0 => 0x0,
    0x2b1 => 0x1,
    0x2b2 => 0x0,
    0x2b3 => 0x2700,
    0x2b4 => 0x2,
    0x2b5 => 0x1,
    0x2b6 => 0x0,
    0x2b7 => 0x2700,
    0x2b8 => 0x0,
    0x2b9 => 0x1,
    0x2ba => 0x0,
    0x2bb => 0x2700,
    0x2bc => 0x2,
    0x2bd => 0x1,
    0x2be => 0x0,
    0x2bf => 0x2700,
    0x2c0 => 0x0,
    0x2c1 => 0x1,
    0x2c2 => 0x2580,
    0x2c3 => 0x2700,
    0x2c4 => 0x2,
    0x2c5 => 0x1,
    0x2c6 => 0x2581,
    0x2c7 => 0x2700,
    0x2c8 => 0x3,
    0x2c9 => 0x1,
    0x2ca => 0x2582,
    0x2cb => 0x2700,
    0x2cc => 0x2,
    0x2cd => 0x1,
    0x2ce => 0x2583,
    0x2cf => 0x2700,
    0x2d0 => 0x0,
    0x2d1 => 0x1,
    0x2d2 => 0x2584,
    0x2d3 => 0x2700,
    0x2d4 => 0x2,
    0x2d5 => 0x1,
    0x2d6 => 0x2585,
    0x2d7 => 0x2700,
    0x2d8 => 0x0,
    0x2d9 => 0x1,
    0x2da => 0x2586,
    0x2db => 0x2700,
    0x2dc => 0x2,
    0x2dd => 0x1,
    0x2de => 0x2587,
    0x2df => 0x2700,
    0x2e0 => 0x0,
    0x2e1 => 0x1,
    0x2e2 => 0x2588,
    0x2e3 => 0x2700,
    0x2e4 => 0x2,
    0x2e5 => 0x1,
    0x2e6 => 0x0,
    0x2e7 => 0x2700,
    0x2e8 => 0x0,
    0x2e9 => 0x1,
    0x2ea => 0x0,
    0x2eb => 0x2700,
    0x2ec => 0x2,
    0x2ed => 0x1,
    0x2ee => 0x0,
    0x2ef => 0x2700,
    0x2f0 => 0x0,
    0x2f1 => 0x1,
    0x2f2 => 0x0,
    0x2f3 => 0x2700,
    0x2f4 => 0x2,
    0x2f5 => 0x1,
    0x2f6 => 0x0,
    0x2f7 => 0x2700,
    0x2f8 => 0x0,
    0x2f9 => 0x1,
    0x2fa => 0x0,
    0x2fb => 0x2700,
    0x2fc => 0x2,
    0x2fd => 0x1,
    0x2fe => 0x0,
    0x2ff => 0x2700,
    0x300 => 0x0,
    0x301 => 0x1,
    0x302 => 0x2580,
    0x303 => 0x2700,
    0x304 => 0x2,
    0x305 => 0x1,
    0x306 => 0x2581,
    0x307 => 0x2700,
    0x308 => 0x3,
    0x309 => 0x1,
    0x30a => 0x2582,
    0x30b => 0x2700,
    0x30c => 0x2,
    0x30d => 0x1,
    0x30e => 0x2583,
    0x30f => 0x2700,
    0x310 => 0x0,
    0x311 => 0x1,
    0x312 => 0x2584,
    0x313 => 0x2700,
    0x314 => 0x2,
    0x315 => 0x1,
    0x316 => 0x2585,
    0x317 => 0x2700,
    0x318 => 0x0,
    0x319 => 0x1,
    0x31a => 0x2586,
    0x31b => 0x2700,
    0x31c => 0x2,
    0x31d => 0x1,
    0x31e => 0x2587,
    0x31f => 0x2700,
    0x320 => 0x0,
    0x321 => 0x1,
    0x322 => 0x2588,
    0x323 => 0x2700,
    0x324 => 0x2,
    0x325 => 0x1,
    0x326 => 0x0,
    0x327 => 0x2700,
    0x328 => 0x0,
    0x329 => 0x1,
    0x32a => 0x0,
    0x32b => 0x2700,
    0x32c => 0x2,
    0x32d => 0x1,
    0x32e => 0x0,
    0x32f => 0x2700,
    0x330 => 0x0,
    0x331 => 0x1,
    0x332 => 0x0,
    0x333 => 0x2700,
    0x334 => 0x2,
    0x335 => 0x1,
    0x336 => 0x0,
    0x337 => 0x2700,
    0x338 => 0x0,
    0x339 => 0x1,
    0x33a => 0x0,
    0x33b => 0x2700,
    0x33c => 0x2,
    0x33d => 0x1,
    0x33e => 0x0,
    0x33f => 0x2700,
    0x340 => 0x0,
    0x341 => 0x1,
    0x342 => 0x2580,
    0x343 => 0x2700,
    0x344 => 0x2,
    0x345 => 0x1,
    0x346 => 0x2581,
    0x347 => 0x2700,
    0x348 => 0x3,
    0x349 => 0x1,
    0x34a => 0x2582,
    0x34b => 0x2700,
    0x34c => 0x2,
    0x34d => 0x1,
    0x34e => 0x2583,
    0x34f => 0x2700,
    0x350 => 0x0,
    0x351 => 0x1,
    0x352 => 0x2584,
    0x353 => 0x2700,
    0x354 => 0x2,
    0x355 => 0x1,
    0x356 => 0x2585,
    0x357 => 0x2700,
    0x358 => 0x0,
    0x359 => 0x1,
    0x35a => 0x2586,
    0x35b => 0x2700,
    0x35c => 0x2,
    0x35d => 0x1,
    0x35e => 0x2587,
    0x35f => 0x2700,
    0x360 => 0x0,
    0x361 => 0x1,
    0x362 => 0x2588,
    0x363 => 0x2700,
    0x364 => 0x2,
    0x365 => 0x1,
    0x366 => 0x0,
    0x367 => 0x2700,
    0x368 => 0x0,
    0x369 => 0x1,
    0x36a => 0x0,
    0x36b => 0x2700,
    0x36c => 0x2,
    0x36d => 0x1,
    0x36e => 0x0,
    0x36f => 0x2700,
    0x370 => 0x0,
    0x371 => 0x1,
    0x372 => 0x0,
    0x373 => 0x2700,
    0x374 => 0x2,
    0x375 => 0x1,
    0x376 => 0x0,
    0x377 => 0x2700,
    0x378 => 0x0,
    0x379 => 0x1,
    0x37a => 0x0,
    0x37b => 0x2700,
    0x37c => 0x2,
    0x37d => 0x1,
    0x37e => 0x0,
    0x37f => 0x2700,
    0x380 => 0x2280,
    0x381 => 0x1,
    0x382 => 0x2580,
    0x383 => 0x2700,
    0x384 => 0x2,
    0x385 => 0x1,
    0x386 => 0x2581,
    0x387 => 0x2700,
    0x388 => 0x3,
    0x389 => 0x1,
    0x38a => 0x2582,
    0x38b => 0x2700,
    0x38c => 0x2,
    0x38d => 0x1,
    0x38e => 0x2583,
    0x38f => 0x2700,
    0x390 => 0x0,
    0x391 => 0x1,
    0x392 => 0x2584,
    0x393 => 0x2700,
    0x394 => 0x2,
    0x395 => 0x1,
    0x396 => 0x2585,
    0x397 => 0x2700,
    0x398 => 0x0,
    0x399 => 0x1,
    0x39a => 0x2586,
    0x39b => 0x2700,
    0x39c => 0x2,
    0x39d => 0x1,
    0x39e => 0x2587,
    0x39f => 0x2700,
    0x3a0 => 0x0,
    0x3a1 => 0x1,
    0x3a2 => 0x2588,
    0x3a3 => 0x2700,
    0x3a4 => 0x2,
    0x3a5 => 0x1,
    0x3a6 => 0x0,
    0x3a7 => 0x2700,
    0x3a8 => 0x0,
    0x3a9 => 0x1,
    0x3aa => 0x0,
    0x3ab => 0x2700,
    0x3ac => 0x2,
    0x3ad => 0x1,
    0x3ae => 0x0,
    0x3af => 0x2700,
    0x3b0 => 0x0,
    0x3b1 => 0x1,
    0x3b2 => 0x0,
    0x3b3 => 0x2700,
    0x3b4 => 0x2,
    0x3b5 => 0x1,
    0x3b6 => 0x0,
    0x3b7 => 0x2700,
    0x3b8 => 0x0,
    0x3b9 => 0x1,
    0x3ba => 0x0,
    0x3bb => 0x2700,
    0x3bc => 0x2,
    0x3bd => 0x1,
    0x3be => 0x0,
    0x3bf => 0x2700,
    0x3c0 => 0x0,
    0x3c1 => 0x1,
    0x3c2 => 0x2580,
    0x3c3 => 0x2700,
    0x3c4 => 0x2,
    0x3c5 => 0x1,
    0x3c6 => 0x2581,
    0x3c7 => 0x2700,
    0x3c8 => 0x3,
    0x3c9 => 0x1,
    0x3ca => 0x2582,
    0x3cb => 0x2700,
    0x3cc => 0x2,
    0x3cd => 0x1,
    0x3ce => 0x2583,
    0x3cf => 0x2700,
    0x3d0 => 0x0,
    0x3d1 => 0x1,
    0x3d2 => 0x2584,
    0x3d3 => 0x2700,
    0x3d4 => 0x2,
    0x3d5 => 0x1,
    0x3d6 => 0x2585,
    0x3d7 => 0x2700,
    0x3d8 => 0x0,
    0x3d9 => 0x1,
    0x3da => 0x2586,
    0x3db => 0x2700,
    0x3dc => 0x2,
    0x3dd => 0x1,
    0x3de => 0x2587,
    0x3df => 0x2700,
    0x3e0 => 0x0,
    0x3e1 => 0x1,
    0x3e2 => 0x2588,
    0x3e3 => 0x2700,
    0x3e4 => 0x2,
    0x3e5 => 0x1,
    0x3e6 => 0x0,
    0x3e7 => 0x2700,
    0x3e8 => 0x0,
    0x3e9 => 0x1,
    0x3ea => 0x0,
    0x3eb => 0x2700,
    0x3ec => 0x2,
    0x3ed => 0x1,
    0x3ee => 0x0,
    0x3ef => 0x2700,
    0x3f0 => 0x0,
    0x3f1 => 0x1,
    0x3f2 => 0x0,
    0x3f3 => 0x2700,
    0x3f4 => 0x2,
    0x3f5 => 0x1,
    0x3f6 => 0x0,
    0x3f7 => 0x2700,
    0x3f8 => 0x0,
    0x3f9 => 0x1,
    0x3fa => 0x0,
    0x3fb => 0x2700,
    0x3fc => 0x2,
    0x3fd => 0x1,
    0x3fe => 0x0,
    0x3ff => 0x2700,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_47_1(inst), // FCCMP-FCCMP#1,FCCMP-FCCMPE#1
    0x2 => return classify_impl_47_2(inst), // FMOV_IMM-FMOV_IMM#1
    0x3 => return classify_impl_47_3(inst), // FCMP-FCMP#1,FCMP-FCMP_ZERO#1,FCMP-FCMPE#1,FCMP-FCMPE_ZERO#1
    _ => idx
  };
  return idx;
}


// FCVT_FROMFIXED-SCVTF_FIX_FP16#0,FCVT_FROMFIXED-UCVTF_FIX_FP16#0
pub const fn classify_impl_48(inst: u32) -> u32 {
  if (inst&0xe8000) != 0x28000 { return 0; }
  let idx = match (inst >> 16) & 0x1 {
    0x0 => 0x2002,
    0x1 => 0x2003,
    _ => 0,
  };
  return idx;
}


// FCVT_TOFIXED-FCVTZS_FIX_FP16#0,FCVT_TOFIXED-FCVTZU_FIX_FP16#0
pub const fn classify_impl_49(inst: u32) -> u32 {
  if (inst&0xe8000) != 0x88000 { return 0; }
  let idx = match (inst >> 16) & 0x1 {
    0x0 => 0x1f82,
    0x1 => 0x1f83,
    _ => 0,
  };
  return idx;
}


// FCCMP-FCCMP_FP16#0,FCCMP-FCCMPE_FP16#0
pub const fn classify_impl_4a_1(inst: u32) -> u32 {
  let idx = match (inst >> 4) & 0x1 {
    0x0 => 0x2682,
    0x1 => 0x2683,
    _ => 0,
  };
  return idx;
}


// FMOV_IMM-FMOV_IMM_FP16#0
pub const fn classify_impl_4a_2(inst: u32) -> u32 {
  if (inst&0x3e0) != 0x0 { return 0; }
  return 0x2501;
}


// FCMP-FCMP_FP16#0,FCMP-FCMP_FP16_ZERO#0,FCMP-FCMPE_FP16#0,FCMP-FCMPE_FP16_ZERO#0
pub const fn classify_impl_4a_3(inst: u32) -> u32 {
  if (inst&0x7) != 0x0 { return 0; }
  let idx = match (inst >> 3) & 0x3 {
    0x0 => 0x2604,
    0x1 => 0x2605,
    0x2 => 0x2606,
    0x3 => 0x2607,
    _ => 0,
  };
  return idx;
}

// FCVT_TOINT-FCVTNS_FP16#0,FCVT_TOINT-FCVTNU_FP16#0,FCVT_TOINT-FCVTAS_FP16#0,FCVT_TOINT-FCVTAU_FP16#0,FCVT_TOINT-FCVTPS_FP16#0,FCVT_TOINT-FCVTPU_FP16#0,FCVT_FROMINT-SCVTF_FP16#0,FCVT_FROMINT-UCVTF_FP16#0,FMOV_TOGP-FMOV_TOGP_FP16#0,FMOV_FROMGP-FMOV_FROM_FP16#0,FCVT_FP-FCVT#4,FCVT_FP-FCVT#5,FRINT-FRINTN_FP16#0,FRINT-FRINTP_FP16#0,FRINT-FRINTM_FP16#0,FRINT-FRINTZ_FP16#0,FRINT-FRINTA_FP16#0,FRINT-FRINTX_FP16#0,FRINT-FRINTI_FP16#0,FARITH1-FMOV_FP16#0,FARITH1-FABS_FP16#0,FARITH1-FNEG_FP16#0,FARITH1-FSQRT_FP16#0,FMOV_IMM-FMOV_IMM_FP16#0,FARITH2-FMUL_FP16#0,FARITH2-FDIV_FP16#0,FARITH2-FADD_FP16#0,FARITH2-FSUB_FP16#0,FARITH2-FMAX_FP16#0,FARITH2-FMIN_FP16#0,FARITH2-FMAXNM_FP16#0,FARITH2-FMINNM_FP16#0,FARITH2-FNMUL_FP16#0,FCMP-FCMP_FP16#0,FCMP-FCMP_FP16_ZERO#0,FCMP-FCMPE_FP16#0,FCMP-FCMPE_FP16_ZERO#0,FCCMP-FCCMP_FP16#0,FCCMP-FCCMPE_FP16#0,FCSEL-FCSEL_FP16#0
pub const fn classify_impl_4a(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3ff {
    0x0 => 0x208a,
    0x1 => 0x1,
    0x2 => 0x2589,
    0x3 => 0x2701,
    0x4 => 0x2,
    0x5 => 0x1,
    0x6 => 0x258a,
    0x7 => 0x2701,
    0x8 => 0x3,
    0x9 => 0x1,
    0xa => 0x258b,
    0xb => 0x2701,
    0xc => 0x2,
    0xd => 0x1,
    0xe => 0x258c,
    0xf => 0x2701,
    0x10 => 0x2484,
    0x11 => 0x1,
    0x12 => 0x258d,
    0x13 => 0x2701,
    0x14 => 0x2,
    0x15 => 0x1,
    0x16 => 0x258e,
    0x17 => 0x2701,
    0x18 => 0x0,
    0x19 => 0x1,
    0x1a => 0x258f,
    0x1b => 0x2701,
    0x1c => 0x2,
    0x1d => 0x1,
    0x1e => 0x2590,
    0x1f => 0x2701,
    0x20 => 0x0,
    0x21 => 0x1,
    0x22 => 0x2591,
    0x23 => 0x2701,
    0x24 => 0x2,
    0x25 => 0x1,
    0x26 => 0x0,
    0x27 => 0x2701,
    0x28 => 0x0,
    0x29 => 0x1,
    0x2a => 0x0,
    0x2b => 0x2701,
    0x2c => 0x2,
    0x2d => 0x1,
    0x2e => 0x0,
    0x2f => 0x2701,
    0x30 => 0x2485,
    0x31 => 0x1,
    0x32 => 0x0,
    0x33 => 0x2701,
    0x34 => 0x2,
    0x35 => 0x1,
    0x36 => 0x0,
    0x37 => 0x2701,
    0x38 => 0x0,
    0x39 => 0x1,
    0x3a => 0x0,
    0x3b => 0x2701,
    0x3c => 0x2,
    0x3d => 0x1,
    0x3e => 0x0,
    0x3f => 0x2701,
    0x40 => 0x208b,
    0x41 => 0x1,
    0x42 => 0x2589,
    0x43 => 0x2701,
    0x44 => 0x2,
    0x45 => 0x1,
    0x46 => 0x258a,
    0x47 => 0x2701,
    0x48 => 0x3,
    0x49 => 0x1,
    0x4a => 0x258b,
    0x4b => 0x2701,
    0x4c => 0x2,
    0x4d => 0x1,
    0x4e => 0x258c,
    0x4f => 0x2701,
    0x50 => 0x2486,
    0x51 => 0x1,
    0x52 => 0x258d,
    0x53 => 0x2701,
    0x54 => 0x2,
    0x55 => 0x1,
    0x56 => 0x258e,
    0x57 => 0x2701,
    0x58 => 0x0,
    0x59 => 0x1,
    0x5a => 0x258f,
    0x5b => 0x2701,
    0x5c => 0x2,
    0x5d => 0x1,
    0x5e => 0x2590,
    0x5f => 0x2701,
    0x60 => 0x0,
    0x61 => 0x1,
    0x62 => 0x2591,
    0x63 => 0x2701,
    0x64 => 0x2,
    0x65 => 0x1,
    0x66 => 0x0,
    0x67 => 0x2701,
    0x68 => 0x0,
    0x69 => 0x1,
    0x6a => 0x0,
    0x6b => 0x2701,
    0x6c => 0x2,
    0x6d => 0x1,
    0x6e => 0x0,
    0x6f => 0x2701,
    0x70 => 0x2487,
    0x71 => 0x1,
    0x72 => 0x0,
    0x73 => 0x2701,
    0x74 => 0x2,
    0x75 => 0x1,
    0x76 => 0x0,
    0x77 => 0x2701,
    0x78 => 0x0,
    0x79 => 0x1,
    0x7a => 0x0,
    0x7b => 0x2701,
    0x7c => 0x2,
    0x7d => 0x1,
    0x7e => 0x0,
    0x7f => 0x2701,
    0x80 => 0x2102,
    0x81 => 0x1,
    0x82 => 0x2589,
    0x83 => 0x2701,
    0x84 => 0x2,
    0x85 => 0x1,
    0x86 => 0x258a,
    0x87 => 0x2701,
    0x88 => 0x3,
    0x89 => 0x1,
    0x8a => 0x258b,
    0x8b => 0x2701,
    0x8c => 0x2,
    0x8d => 0x1,
    0x8e => 0x258c,
    0x8f => 0x2701,
    0x90 => 0x2300,
    0x91 => 0x1,
    0x92 => 0x258d,
    0x93 => 0x2701,
    0x94 => 0x2,
    0x95 => 0x1,
    0x96 => 0x258e,
    0x97 => 0x2701,
    0x98 => 0x0,
    0x99 => 0x1,
    0x9a => 0x258f,
    0x9b => 0x2701,
    0x9c => 0x2,
    0x9d => 0x1,
    0x9e => 0x2590,
    0x9f => 0x2701,
    0xa0 => 0x0,
    0xa1 => 0x1,
    0xa2 => 0x2591,
    0xa3 => 0x2701,
    0xa4 => 0x2,
    0xa5 => 0x1,
    0xa6 => 0x0,
    0xa7 => 0x2701,
    0xa8 => 0x0,
    0xa9 => 0x1,
    0xaa => 0x0,
    0xab => 0x2701,
    0xac => 0x2,
    0xad => 0x1,
    0xae => 0x0,
    0xaf => 0x2701,
    0xb0 => 0x2300,
    0xb1 => 0x1,
    0xb2 => 0x0,
    0xb3 => 0x2701,
    0xb4 => 0x2,
    0xb5 => 0x1,
    0xb6 => 0x0,
    0xb7 => 0x2701,
    0xb8 => 0x0,
    0xb9 => 0x1,
    0xba => 0x0,
    0xbb => 0x2701,
    0xbc => 0x2,
    0xbd => 0x1,
    0xbe => 0x0,
    0xbf => 0x2701,
    0xc0 => 0x2103,
    0xc1 => 0x1,
    0xc2 => 0x2589,
    0xc3 => 0x2701,
    0xc4 => 0x2,
    0xc5 => 0x1,
    0xc6 => 0x258a,
    0xc7 => 0x2701,
    0xc8 => 0x3,
    0xc9 => 0x1,
    0xca => 0x258b,
    0xcb => 0x2701,
    0xcc => 0x2,
    0xcd => 0x1,
    0xce => 0x258c,
    0xcf => 0x2701,
    0xd0 => 0x0,
    0xd1 => 0x1,
    0xd2 => 0x258d,
    0xd3 => 0x2701,
    0xd4 => 0x2,
    0xd5 => 0x1,
    0xd6 => 0x258e,
    0xd7 => 0x2701,
    0xd8 => 0x0,
    0xd9 => 0x1,
    0xda => 0x258f,
    0xdb => 0x2701,
    0xdc => 0x2,
    0xdd => 0x1,
    0xde => 0x2590,
    0xdf => 0x2701,
    0xe0 => 0x0,
    0xe1 => 0x1,
    0xe2 => 0x2591,
    0xe3 => 0x2701,
    0xe4 => 0x2,
    0xe5 => 0x1,
    0xe6 => 0x0,
    0xe7 => 0x2701,
    0xe8 => 0x0,
    0xe9 => 0x1,
    0xea => 0x0,
    0xeb => 0x2701,
    0xec => 0x2,
    0xed => 0x1,
    0xee => 0x0,
    0xef => 0x2701,
    0xf0 => 0x0,
    0xf1 => 0x1,
    0xf2 => 0x0,
    0xf3 => 0x2701,
    0xf4 => 0x2,
    0xf5 => 0x1,
    0xf6 => 0x0,
    0xf7 => 0x2701,
    0xf8 => 0x0,
    0xf9 => 0x1,
    0xfa => 0x0,
    0xfb => 0x2701,
    0xfc => 0x2,
    0xfd => 0x1,
    0xfe => 0x0,
    0xff => 0x2701,
    0x100 => 0x208c,
    0x101 => 0x1,
    0x102 => 0x2589,
    0x103 => 0x2701,
    0x104 => 0x2,
    0x105 => 0x1,
    0x106 => 0x258a,
    0x107 => 0x2701,
    0x108 => 0x3,
    0x109 => 0x1,
    0x10a => 0x258b,
    0x10b => 0x2701,
    0x10c => 0x2,
    0x10d => 0x1,
    0x10e => 0x258c,
    0x10f => 0x2701,
    0x110 => 0x2387,
    0x111 => 0x1,
    0x112 => 0x258d,
    0x113 => 0x2701,
    0x114 => 0x2,
    0x115 => 0x1,
    0x116 => 0x258e,
    0x117 => 0x2701,
    0x118 => 0x0,
    0x119 => 0x1,
    0x11a => 0x258f,
    0x11b => 0x2701,
    0x11c => 0x2,
    0x11d => 0x1,
    0x11e => 0x2590,
    0x11f => 0x2701,
    0x120 => 0x0,
    0x121 => 0x1,
    0x122 => 0x2591,
    0x123 => 0x2701,
    0x124 => 0x2,
    0x125 => 0x1,
    0x126 => 0x0,
    0x127 => 0x2701,
    0x128 => 0x0,
    0x129 => 0x1,
    0x12a => 0x0,
    0x12b => 0x2701,
    0x12c => 0x2,
    0x12d => 0x1,
    0x12e => 0x0,
    0x12f => 0x2701,
    0x130 => 0x2388,
    0x131 => 0x1,
    0x132 => 0x0,
    0x133 => 0x2701,
    0x134 => 0x2,
    0x135 => 0x1,
    0x136 => 0x0,
    0x137 => 0x2701,
    0x138 => 0x0,
    0x139 => 0x1,
    0x13a => 0x0,
    0x13b => 0x2701,
    0x13c => 0x2,
    0x13d => 0x1,
    0x13e => 0x0,
    0x13f => 0x2701,
    0x140 => 0x208d,
    0x141 => 0x1,
    0x142 => 0x2589,
    0x143 => 0x2701,
    0x144 => 0x2,
    0x145 => 0x1,
    0x146 => 0x258a,
    0x147 => 0x2701,
    0x148 => 0x3,
    0x149 => 0x1,
    0x14a => 0x258b,
    0x14b => 0x2701,
    0x14c => 0x2,
    0x14d => 0x1,
    0x14e => 0x258c,
    0x14f => 0x2701,
    0x150 => 0x2389,
    0x151 => 0x1,
    0x152 => 0x258d,
    0x153 => 0x2701,
    0x154 => 0x2,
    0x155 => 0x1,
    0x156 => 0x258e,
    0x157 => 0x2701,
    0x158 => 0x0,
    0x159 => 0x1,
    0x15a => 0x258f,
    0x15b => 0x2701,
    0x15c => 0x2,
    0x15d => 0x1,
    0x15e => 0x2590,
    0x15f => 0x2701,
    0x160 => 0x0,
    0x161 => 0x1,
    0x162 => 0x2591,
    0x163 => 0x2701,
    0x164 => 0x2,
    0x165 => 0x1,
    0x166 => 0x0,
    0x167 => 0x2701,
    0x168 => 0x0,
    0x169 => 0x1,
    0x16a => 0x0,
    0x16b => 0x2701,
    0x16c => 0x2,
    0x16d => 0x1,
    0x16e => 0x0,
    0x16f => 0x2701,
    0x170 => 0x238a,
    0x171 => 0x1,
    0x172 => 0x0,
    0x173 => 0x2701,
    0x174 => 0x2,
    0x175 => 0x1,
    0x176 => 0x0,
    0x177 => 0x2701,
    0x178 => 0x0,
    0x179 => 0x1,
    0x17a => 0x0,
    0x17b => 0x2701,
    0x17c => 0x2,
    0x17d => 0x1,
    0x17e => 0x0,
    0x17f => 0x2701,
    0x180 => 0x2181,
    0x181 => 0x1,
    0x182 => 0x2589,
    0x183 => 0x2701,
    0x184 => 0x2,
    0x185 => 0x1,
    0x186 => 0x258a,
    0x187 => 0x2701,
    0x188 => 0x3,
    0x189 => 0x1,
    0x18a => 0x258b,
    0x18b => 0x2701,
    0x18c => 0x2,
    0x18d => 0x1,
    0x18e => 0x258c,
    0x18f => 0x2701,
    0x190 => 0x238b,
    0x191 => 0x1,
    0x192 => 0x258d,
    0x193 => 0x2701,
    0x194 => 0x2,
    0x195 => 0x1,
    0x196 => 0x258e,
    0x197 => 0x2701,
    0x198 => 0x0,
    0x199 => 0x1,
    0x19a => 0x258f,
    0x19b => 0x2701,
    0x19c => 0x2,
    0x19d => 0x1,
    0x19e => 0x2590,
    0x19f => 0x2701,
    0x1a0 => 0x0,
    0x1a1 => 0x1,
    0x1a2 => 0x2591,
    0x1a3 => 0x2701,
    0x1a4 => 0x2,
    0x1a5 => 0x1,
    0x1a6 => 0x0,
    0x1a7 => 0x2701,
    0x1a8 => 0x0,
    0x1a9 => 0x1,
    0x1aa => 0x0,
    0x1ab => 0x2701,
    0x1ac => 0x2,
    0x1ad => 0x1,
    0x1ae => 0x0,
    0x1af => 0x2701,
    0x1b0 => 0x0,
    0x1b1 => 0x1,
    0x1b2 => 0x0,
    0x1b3 => 0x2701,
    0x1b4 => 0x2,
    0x1b5 => 0x1,
    0x1b6 => 0x0,
    0x1b7 => 0x2701,
    0x1b8 => 0x0,
    0x1b9 => 0x1,
    0x1ba => 0x0,
    0x1bb => 0x2701,
    0x1bc => 0x2,
    0x1bd => 0x1,
    0x1be => 0x0,
    0x1bf => 0x2701,
    0x1c0 => 0x2201,
    0x1c1 => 0x1,
    0x1c2 => 0x2589,
    0x1c3 => 0x2701,
    0x1c4 => 0x2,
    0x1c5 => 0x1,
    0x1c6 => 0x258a,
    0x1c7 => 0x2701,
    0x1c8 => 0x3,
    0x1c9 => 0x1,
    0x1ca => 0x258b,
    0x1cb => 0x2701,
    0x1cc => 0x2,
    0x1cd => 0x1,
    0x1ce => 0x258c,
    0x1cf => 0x2701,
    0x1d0 => 0x238c,
    0x1d1 => 0x1,
    0x1d2 => 0x258d,
    0x1d3 => 0x2701,
    0x1d4 => 0x2,
    0x1d5 => 0x1,
    0x1d6 => 0x258e,
    0x1d7 => 0x2701,
    0x1d8 => 0x0,
    0x1d9 => 0x1,
    0x1da => 0x258f,
    0x1db => 0x2701,
    0x1dc => 0x2,
    0x1dd => 0x1,
    0x1de => 0x2590,
    0x1df => 0x2701,
    0x1e0 => 0x0,
    0x1e1 => 0x1,
    0x1e2 => 0x2591,
    0x1e3 => 0x2701,
    0x1e4 => 0x2,
    0x1e5 => 0x1,
    0x1e6 => 0x0,
    0x1e7 => 0x2701,
    0x1e8 => 0x0,
    0x1e9 => 0x1,
    0x1ea => 0x0,
    0x1eb => 0x2701,
    0x1ec => 0x2,
    0x1ed => 0x1,
    0x1ee => 0x0,
    0x1ef => 0x2701,
    0x1f0 => 0x238d,
    0x1f1 => 0x1,
    0x1f2 => 0x0,
    0x1f3 => 0x2701,
    0x1f4 => 0x2,
    0x1f5 => 0x1,
    0x1f6 => 0x0,
    0x1f7 => 0x2701,
    0x1f8 => 0x0,
    0x1f9 => 0x1,
    0x1fa => 0x0,
    0x1fb => 0x2701,
    0x1fc => 0x2,
    0x1fd => 0x1,
    0x1fe => 0x0,
    0x1ff => 0x2701,
    0x200 => 0x208e,
    0x201 => 0x1,
    0x202 => 0x2589,
    0x203 => 0x2701,
    0x204 => 0x2,
    0x205 => 0x1,
    0x206 => 0x258a,
    0x207 => 0x2701,
    0x208 => 0x3,
    0x209 => 0x1,
    0x20a => 0x258b,
    0x20b => 0x2701,
    0x20c => 0x2,
    0x20d => 0x1,
    0x20e => 0x258c,
    0x20f => 0x2701,
    0x210 => 0x0,
    0x211 => 0x1,
    0x212 => 0x258d,
    0x213 => 0x2701,
    0x214 => 0x2,
    0x215 => 0x1,
    0x216 => 0x258e,
    0x217 => 0x2701,
    0x218 => 0x0,
    0x219 => 0x1,
    0x21a => 0x258f,
    0x21b => 0x2701,
    0x21c => 0x2,
    0x21d => 0x1,
    0x21e => 0x2590,
    0x21f => 0x2701,
    0x220 => 0x0,
    0x221 => 0x1,
    0x222 => 0x2591,
    0x223 => 0x2701,
    0x224 => 0x2,
    0x225 => 0x1,
    0x226 => 0x0,
    0x227 => 0x2701,
    0x228 => 0x0,
    0x229 => 0x1,
    0x22a => 0x0,
    0x22b => 0x2701,
    0x22c => 0x2,
    0x22d => 0x1,
    0x22e => 0x0,
    0x22f => 0x2701,
    0x230 => 0x0,
    0x231 => 0x1,
    0x232 => 0x0,
    0x233 => 0x2701,
    0x234 => 0x2,
    0x235 => 0x1,
    0x236 => 0x0,
    0x237 => 0x2701,
    0x238 => 0x0,
    0x239 => 0x1,
    0x23a => 0x0,
    0x23b => 0x2701,
    0x23c => 0x2,
    0x23d => 0x1,
    0x23e => 0x0,
    0x23f => 0x2701,
    0x240 => 0x208f,
    0x241 => 0x1,
    0x242 => 0x2589,
    0x243 => 0x2701,
    0x244 => 0x2,
    0x245 => 0x1,
    0x246 => 0x258a,
    0x247 => 0x2701,
    0x248 => 0x3,
    0x249 => 0x1,
    0x24a => 0x258b,
    0x24b => 0x2701,
    0x24c => 0x2,
    0x24d => 0x1,
    0x24e => 0x258c,
    0x24f => 0x2701,
    0x250 => 0x0,
    0x251 => 0x1,
    0x252 => 0x258d,
    0x253 => 0x2701,
    0x254 => 0x2,
    0x255 => 0x1,
    0x256 => 0x258e,
    0x257 => 0x2701,
    0x258 => 0x0,
    0x259 => 0x1,
    0x25a => 0x258f,
    0x25b => 0x2701,
    0x25c => 0x2,
    0x25d => 0x1,
    0x25e => 0x2590,
    0x25f => 0x2701,
    0x260 => 0x0,
    0x261 => 0x1,
    0x262 => 0x2591,
    0x263 => 0x2701,
    0x264 => 0x2,
    0x265 => 0x1,
    0x266 => 0x0,
    0x267 => 0x2701,
    0x268 => 0x0,
    0x269 => 0x1,
    0x26a => 0x0,
    0x26b => 0x2701,
    0x26c => 0x2,
    0x26d => 0x1,
    0x26e => 0x0,
    0x26f => 0x2701,
    0x270 => 0x0,
    0x271 => 0x1,
    0x272 => 0x0,
    0x273 => 0x2701,
    0x274 => 0x2,
    0x275 => 0x1,
    0x276 => 0x0,
    0x277 => 0x2701,
    0x278 => 0x0,
    0x279 => 0x1,
    0x27a => 0x0,
    0x27b => 0x2701,
    0x27c => 0x2,
    0x27d => 0x1,
    0x27e => 0x0,
    0x27f => 0x2701,
    0x280 => 0x0,
    0x281 => 0x1,
    0x282 => 0x2589,
    0x283 => 0x2701,
    0x284 => 0x2,
    0x285 => 0x1,
    0x286 => 0x258a,
    0x287 => 0x2701,
    0x288 => 0x3,
    0x289 => 0x1,
    0x28a => 0x258b,
    0x28b => 0x2701,
    0x28c => 0x2,
    0x28d => 0x1,
    0x28e => 0x258c,
    0x28f => 0x2701,
    0x290 => 0x0,
    0x291 => 0x1,
    0x292 => 0x258d,
    0x293 => 0x2701,
    0x294 => 0x2,
    0x295 => 0x1,
    0x296 => 0x258e,
    0x297 => 0x2701,
    0x298 => 0x0,
    0x299 => 0x1,
    0x29a => 0x258f,
    0x29b => 0x2701,
    0x29c => 0x2,
    0x29d => 0x1,
    0x29e => 0x2590,
    0x29f => 0x2701,
    0x2a0 => 0x0,
    0x2a1 => 0x1,
    0x2a2 => 0x2591,
    0x2a3 => 0x2701,
    0x2a4 => 0x2,
    0x2a5 => 0x1,
    0x2a6 => 0x0,
    0x2a7 => 0x2701,
    0x2a8 => 0x0,
    0x2a9 => 0x1,
    0x2aa => 0x0,
    0x2ab => 0x2701,
    0x2ac => 0x2,
    0x2ad => 0x1,
    0x2ae => 0x0,
    0x2af => 0x2701,
    0x2b0 => 0x0,
    0x2b1 => 0x1,
    0x2b2 => 0x0,
    0x2b3 => 0x2701,
    0x2b4 => 0x2,
    0x2b5 => 0x1,
    0x2b6 => 0x0,
    0x2b7 => 0x2701,
    0x2b8 => 0x0,
    0x2b9 => 0x1,
    0x2ba => 0x0,
    0x2bb => 0x2701,
    0x2bc => 0x2,
    0x2bd => 0x1,
    0x2be => 0x0,
    0x2bf => 0x2701,
    0x2c0 => 0x0,
    0x2c1 => 0x1,
    0x2c2 => 0x2589,
    0x2c3 => 0x2701,
    0x2c4 => 0x2,
    0x2c5 => 0x1,
    0x2c6 => 0x258a,
    0x2c7 => 0x2701,
    0x2c8 => 0x3,
    0x2c9 => 0x1,
    0x2ca => 0x258b,
    0x2cb => 0x2701,
    0x2cc => 0x2,
    0x2cd => 0x1,
    0x2ce => 0x258c,
    0x2cf => 0x2701,
    0x2d0 => 0x0,
    0x2d1 => 0x1,
    0x2d2 => 0x258d,
    0x2d3 => 0x2701,
    0x2d4 => 0x2,
    0x2d5 => 0x1,
    0x2d6 => 0x258e,
    0x2d7 => 0x2701,
    0x2d8 => 0x0,
    0x2d9 => 0x1,
    0x2da => 0x258f,
    0x2db => 0x2701,
    0x2dc => 0x2,
    0x2dd => 0x1,
    0x2de => 0x2590,
    0x2df => 0x2701,
    0x2e0 => 0x0,
    0x2e1 => 0x1,
    0x2e2 => 0x2591,
    0x2e3 => 0x2701,
    0x2e4 => 0x2,
    0x2e5 => 0x1,
    0x2e6 => 0x0,
    0x2e7 => 0x2701,
    0x2e8 => 0x0,
    0x2e9 => 0x1,
    0x2ea => 0x0,
    0x2eb => 0x2701,
    0x2ec => 0x2,
    0x2ed => 0x1,
    0x2ee => 0x0,
    0x2ef => 0x2701,
    0x2f0 => 0x0,
    0x2f1 => 0x1,
    0x2f2 => 0x0,
    0x2f3 => 0x2701,
    0x2f4 => 0x2,
    0x2f5 => 0x1,
    0x2f6 => 0x0,
    0x2f7 => 0x2701,
    0x2f8 => 0x0,
    0x2f9 => 0x1,
    0x2fa => 0x0,
    0x2fb => 0x2701,
    0x2fc => 0x2,
    0x2fd => 0x1,
    0x2fe => 0x0,
    0x2ff => 0x2701,
    0x300 => 0x0,
    0x301 => 0x1,
    0x302 => 0x2589,
    0x303 => 0x2701,
    0x304 => 0x2,
    0x305 => 0x1,
    0x306 => 0x258a,
    0x307 => 0x2701,
    0x308 => 0x3,
    0x309 => 0x1,
    0x30a => 0x258b,
    0x30b => 0x2701,
    0x30c => 0x2,
    0x30d => 0x1,
    0x30e => 0x258c,
    0x30f => 0x2701,
    0x310 => 0x0,
    0x311 => 0x1,
    0x312 => 0x258d,
    0x313 => 0x2701,
    0x314 => 0x2,
    0x315 => 0x1,
    0x316 => 0x258e,
    0x317 => 0x2701,
    0x318 => 0x0,
    0x319 => 0x1,
    0x31a => 0x258f,
    0x31b => 0x2701,
    0x31c => 0x2,
    0x31d => 0x1,
    0x31e => 0x2590,
    0x31f => 0x2701,
    0x320 => 0x0,
    0x321 => 0x1,
    0x322 => 0x2591,
    0x323 => 0x2701,
    0x324 => 0x2,
    0x325 => 0x1,
    0x326 => 0x0,
    0x327 => 0x2701,
    0x328 => 0x0,
    0x329 => 0x1,
    0x32a => 0x0,
    0x32b => 0x2701,
    0x32c => 0x2,
    0x32d => 0x1,
    0x32e => 0x0,
    0x32f => 0x2701,
    0x330 => 0x0,
    0x331 => 0x1,
    0x332 => 0x0,
    0x333 => 0x2701,
    0x334 => 0x2,
    0x335 => 0x1,
    0x336 => 0x0,
    0x337 => 0x2701,
    0x338 => 0x0,
    0x339 => 0x1,
    0x33a => 0x0,
    0x33b => 0x2701,
    0x33c => 0x2,
    0x33d => 0x1,
    0x33e => 0x0,
    0x33f => 0x2701,
    0x340 => 0x0,
    0x341 => 0x1,
    0x342 => 0x2589,
    0x343 => 0x2701,
    0x344 => 0x2,
    0x345 => 0x1,
    0x346 => 0x258a,
    0x347 => 0x2701,
    0x348 => 0x3,
    0x349 => 0x1,
    0x34a => 0x258b,
    0x34b => 0x2701,
    0x34c => 0x2,
    0x34d => 0x1,
    0x34e => 0x258c,
    0x34f => 0x2701,
    0x350 => 0x0,
    0x351 => 0x1,
    0x352 => 0x258d,
    0x353 => 0x2701,
    0x354 => 0x2,
    0x355 => 0x1,
    0x356 => 0x258e,
    0x357 => 0x2701,
    0x358 => 0x0,
    0x359 => 0x1,
    0x35a => 0x258f,
    0x35b => 0x2701,
    0x35c => 0x2,
    0x35d => 0x1,
    0x35e => 0x2590,
    0x35f => 0x2701,
    0x360 => 0x0,
    0x361 => 0x1,
    0x362 => 0x2591,
    0x363 => 0x2701,
    0x364 => 0x2,
    0x365 => 0x1,
    0x366 => 0x0,
    0x367 => 0x2701,
    0x368 => 0x0,
    0x369 => 0x1,
    0x36a => 0x0,
    0x36b => 0x2701,
    0x36c => 0x2,
    0x36d => 0x1,
    0x36e => 0x0,
    0x36f => 0x2701,
    0x370 => 0x0,
    0x371 => 0x1,
    0x372 => 0x0,
    0x373 => 0x2701,
    0x374 => 0x2,
    0x375 => 0x1,
    0x376 => 0x0,
    0x377 => 0x2701,
    0x378 => 0x0,
    0x379 => 0x1,
    0x37a => 0x0,
    0x37b => 0x2701,
    0x37c => 0x2,
    0x37d => 0x1,
    0x37e => 0x0,
    0x37f => 0x2701,
    0x380 => 0x0,
    0x381 => 0x1,
    0x382 => 0x2589,
    0x383 => 0x2701,
    0x384 => 0x2,
    0x385 => 0x1,
    0x386 => 0x258a,
    0x387 => 0x2701,
    0x388 => 0x3,
    0x389 => 0x1,
    0x38a => 0x258b,
    0x38b => 0x2701,
    0x38c => 0x2,
    0x38d => 0x1,
    0x38e => 0x258c,
    0x38f => 0x2701,
    0x390 => 0x0,
    0x391 => 0x1,
    0x392 => 0x258d,
    0x393 => 0x2701,
    0x394 => 0x2,
    0x395 => 0x1,
    0x396 => 0x258e,
    0x397 => 0x2701,
    0x398 => 0x0,
    0x399 => 0x1,
    0x39a => 0x258f,
    0x39b => 0x2701,
    0x39c => 0x2,
    0x39d => 0x1,
    0x39e => 0x2590,
    0x39f => 0x2701,
    0x3a0 => 0x0,
    0x3a1 => 0x1,
    0x3a2 => 0x2591,
    0x3a3 => 0x2701,
    0x3a4 => 0x2,
    0x3a5 => 0x1,
    0x3a6 => 0x0,
    0x3a7 => 0x2701,
    0x3a8 => 0x0,
    0x3a9 => 0x1,
    0x3aa => 0x0,
    0x3ab => 0x2701,
    0x3ac => 0x2,
    0x3ad => 0x1,
    0x3ae => 0x0,
    0x3af => 0x2701,
    0x3b0 => 0x0,
    0x3b1 => 0x1,
    0x3b2 => 0x0,
    0x3b3 => 0x2701,
    0x3b4 => 0x2,
    0x3b5 => 0x1,
    0x3b6 => 0x0,
    0x3b7 => 0x2701,
    0x3b8 => 0x0,
    0x3b9 => 0x1,
    0x3ba => 0x0,
    0x3bb => 0x2701,
    0x3bc => 0x2,
    0x3bd => 0x1,
    0x3be => 0x0,
    0x3bf => 0x2701,
    0x3c0 => 0x0,
    0x3c1 => 0x1,
    0x3c2 => 0x2589,
    0x3c3 => 0x2701,
    0x3c4 => 0x2,
    0x3c5 => 0x1,
    0x3c6 => 0x258a,
    0x3c7 => 0x2701,
    0x3c8 => 0x3,
    0x3c9 => 0x1,
    0x3ca => 0x258b,
    0x3cb => 0x2701,
    0x3cc => 0x2,
    0x3cd => 0x1,
    0x3ce => 0x258c,
    0x3cf => 0x2701,
    0x3d0 => 0x0,
    0x3d1 => 0x1,
    0x3d2 => 0x258d,
    0x3d3 => 0x2701,
    0x3d4 => 0x2,
    0x3d5 => 0x1,
    0x3d6 => 0x258e,
    0x3d7 => 0x2701,
    0x3d8 => 0x0,
    0x3d9 => 0x1,
    0x3da => 0x258f,
    0x3db => 0x2701,
    0x3dc => 0x2,
    0x3dd => 0x1,
    0x3de => 0x2590,
    0x3df => 0x2701,
    0x3e0 => 0x0,
    0x3e1 => 0x1,
    0x3e2 => 0x2591,
    0x3e3 => 0x2701,
    0x3e4 => 0x2,
    0x3e5 => 0x1,
    0x3e6 => 0x0,
    0x3e7 => 0x2701,
    0x3e8 => 0x0,
    0x3e9 => 0x1,
    0x3ea => 0x0,
    0x3eb => 0x2701,
    0x3ec => 0x2,
    0x3ed => 0x1,
    0x3ee => 0x0,
    0x3ef => 0x2701,
    0x3f0 => 0x0,
    0x3f1 => 0x1,
    0x3f2 => 0x0,
    0x3f3 => 0x2701,
    0x3f4 => 0x2,
    0x3f5 => 0x1,
    0x3f6 => 0x0,
    0x3f7 => 0x2701,
    0x3f8 => 0x0,
    0x3f9 => 0x1,
    0x3fa => 0x0,
    0x3fb => 0x2701,
    0x3fc => 0x2,
    0x3fd => 0x1,
    0x3fe => 0x0,
    0x3ff => 0x2701,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_4a_1(inst), // FCCMP-FCCMP_FP16#0,FCCMP-FCCMPE_FP16#0
    0x2 => return classify_impl_4a_2(inst), // FMOV_IMM-FMOV_IMM_FP16#0
    0x3 => return classify_impl_4a_3(inst), // FCMP-FCMP_FP16#0,FCMP-FCMP_FP16_ZERO#0,FCMP-FCMPE_FP16#0,FCMP-FCMPE_FP16_ZERO#0
    _ => idx
  };
  return idx;
}


// FCVT_TOINT-FCVTMS_FP16#0
pub const fn classify_impl_4b_1_1(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x2090;
}


// FCCMP-FCCMP_FP16#0,FCCMP-FCCMPE_FP16#0
pub const fn classify_impl_4b_1_2(inst: u32) -> u32 {
  let idx = match (inst >> 4) & 0x1 {
    0x0 => 0x2682,
    0x1 => 0x2683,
    _ => 0,
  };
  return idx;
}


// FMOV_IMM-FMOV_IMM_FP16#0
pub const fn classify_impl_4b_1_3(inst: u32) -> u32 {
  if (inst&0x3e0) != 0x0 { return 0; }
  return 0x2501;
}


// FCMP-FCMP_FP16#0,FCMP-FCMP_FP16_ZERO#0,FCMP-FCMPE_FP16#0,FCMP-FCMPE_FP16_ZERO#0
pub const fn classify_impl_4b_1_4(inst: u32) -> u32 {
  if (inst&0x7) != 0x0 { return 0; }
  let idx = match (inst >> 3) & 0x3 {
    0x0 => 0x2604,
    0x1 => 0x2605,
    0x2 => 0x2606,
    0x3 => 0x2607,
    _ => 0,
  };
  return idx;
}


// FCVT_TOINT-FCVTMU_FP16#0
pub const fn classify_impl_4b_1_5(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x2091;
}

// FCVT_TOINT-FCVTMS_FP16#0,FCVT_TOINT-FCVTMU_FP16#0,FMOV_IMM-FMOV_IMM_FP16#0,FARITH2-FMUL_FP16#0,FARITH2-FDIV_FP16#0,FARITH2-FADD_FP16#0,FARITH2-FSUB_FP16#0,FARITH2-FMAX_FP16#0,FARITH2-FMIN_FP16#0,FARITH2-FMAXNM_FP16#0,FARITH2-FMINNM_FP16#0,FARITH2-FNMUL_FP16#0,FCMP-FCMP_FP16#0,FCMP-FCMP_FP16_ZERO#0,FCMP-FCMPE_FP16#0,FCMP-FCMPE_FP16_ZERO#0,FCCMP-FCCMP_FP16#0,FCCMP-FCCMPE_FP16#0,FCSEL-FCSEL_FP16#0
pub const fn classify_impl_4b_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x2589,
    0x3 => 0x2701,
    0x4 => 0x3,
    0x5 => 0x2,
    0x6 => 0x258a,
    0x7 => 0x2701,
    0x8 => 0x4,
    0x9 => 0x2,
    0xa => 0x258b,
    0xb => 0x2701,
    0xc => 0x3,
    0xd => 0x2,
    0xe => 0x258c,
    0xf => 0x2701,
    0x10 => 0x0,
    0x11 => 0x2,
    0x12 => 0x258d,
    0x13 => 0x2701,
    0x14 => 0x3,
    0x15 => 0x2,
    0x16 => 0x258e,
    0x17 => 0x2701,
    0x18 => 0x0,
    0x19 => 0x2,
    0x1a => 0x258f,
    0x1b => 0x2701,
    0x1c => 0x3,
    0x1d => 0x2,
    0x1e => 0x2590,
    0x1f => 0x2701,
    0x20 => 0x0,
    0x21 => 0x2,
    0x22 => 0x2591,
    0x23 => 0x2701,
    0x24 => 0x3,
    0x25 => 0x2,
    0x26 => 0x0,
    0x27 => 0x2701,
    0x28 => 0x0,
    0x29 => 0x2,
    0x2a => 0x0,
    0x2b => 0x2701,
    0x2c => 0x3,
    0x2d => 0x2,
    0x2e => 0x0,
    0x2f => 0x2701,
    0x30 => 0x0,
    0x31 => 0x2,
    0x32 => 0x0,
    0x33 => 0x2701,
    0x34 => 0x3,
    0x35 => 0x2,
    0x36 => 0x0,
    0x37 => 0x2701,
    0x38 => 0x0,
    0x39 => 0x2,
    0x3a => 0x0,
    0x3b => 0x2701,
    0x3c => 0x3,
    0x3d => 0x2,
    0x3e => 0x0,
    0x3f => 0x2701,
    0x40 => 0x5,
    0x41 => 0x2,
    0x42 => 0x2589,
    0x43 => 0x2701,
    0x44 => 0x3,
    0x45 => 0x2,
    0x46 => 0x258a,
    0x47 => 0x2701,
    0x48 => 0x4,
    0x49 => 0x2,
    0x4a => 0x258b,
    0x4b => 0x2701,
    0x4c => 0x3,
    0x4d => 0x2,
    0x4e => 0x258c,
    0x4f => 0x2701,
    0x50 => 0x0,
    0x51 => 0x2,
    0x52 => 0x258d,
    0x53 => 0x2701,
    0x54 => 0x3,
    0x55 => 0x2,
    0x56 => 0x258e,
    0x57 => 0x2701,
    0x58 => 0x0,
    0x59 => 0x2,
    0x5a => 0x258f,
    0x5b => 0x2701,
    0x5c => 0x3,
    0x5d => 0x2,
    0x5e => 0x2590,
    0x5f => 0x2701,
    0x60 => 0x0,
    0x61 => 0x2,
    0x62 => 0x2591,
    0x63 => 0x2701,
    0x64 => 0x3,
    0x65 => 0x2,
    0x66 => 0x0,
    0x67 => 0x2701,
    0x68 => 0x0,
    0x69 => 0x2,
    0x6a => 0x0,
    0x6b => 0x2701,
    0x6c => 0x3,
    0x6d => 0x2,
    0x6e => 0x0,
    0x6f => 0x2701,
    0x70 => 0x0,
    0x71 => 0x2,
    0x72 => 0x0,
    0x73 => 0x2701,
    0x74 => 0x3,
    0x75 => 0x2,
    0x76 => 0x0,
    0x77 => 0x2701,
    0x78 => 0x0,
    0x79 => 0x2,
    0x7a => 0x0,
    0x7b => 0x2701,
    0x7c => 0x3,
    0x7d => 0x2,
    0x7e => 0x0,
    0x7f => 0x2701,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_4b_1_1(inst), // FCVT_TOINT-FCVTMS_FP16#0
    0x2 => return classify_impl_4b_1_2(inst), // FCCMP-FCCMP_FP16#0,FCCMP-FCCMPE_FP16#0
    0x3 => return classify_impl_4b_1_3(inst), // FMOV_IMM-FMOV_IMM_FP16#0
    0x4 => return classify_impl_4b_1_4(inst), // FCMP-FCMP_FP16#0,FCMP-FCMP_FP16_ZERO#0,FCMP-FCMPE_FP16#0,FCMP-FCMPE_FP16_ZERO#0
    0x5 => return classify_impl_4b_1_5(inst), // FCVT_TOINT-FCVTMU_FP16#0
    _ => idx
  };
  return idx;
}


// FCVT_TOINT-FCVTZS_FP16#0
pub const fn classify_impl_4b_2_1(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x2092;
}


// FCCMP-FCCMP_FP16#0,FCCMP-FCCMPE_FP16#0
pub const fn classify_impl_4b_2_2(inst: u32) -> u32 {
  let idx = match (inst >> 4) & 0x1 {
    0x0 => 0x2682,
    0x1 => 0x2683,
    _ => 0,
  };
  return idx;
}


// FMOV_IMM-FMOV_IMM_FP16#0
pub const fn classify_impl_4b_2_3(inst: u32) -> u32 {
  if (inst&0x3e0) != 0x0 { return 0; }
  return 0x2501;
}


// FCMP-FCMP_FP16#0,FCMP-FCMP_FP16_ZERO#0,FCMP-FCMPE_FP16#0,FCMP-FCMPE_FP16_ZERO#0
pub const fn classify_impl_4b_2_4(inst: u32) -> u32 {
  if (inst&0x7) != 0x0 { return 0; }
  let idx = match (inst >> 3) & 0x3 {
    0x0 => 0x2604,
    0x1 => 0x2605,
    0x2 => 0x2606,
    0x3 => 0x2607,
    _ => 0,
  };
  return idx;
}


// FCVT_TOINT-FCVTZU_FP16#0
pub const fn classify_impl_4b_2_5(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x2093;
}

// FCVT_TOINT-FCVTZS_FP16#0,FCVT_TOINT-FCVTZU_FP16#0,FMOV_IMM-FMOV_IMM_FP16#0,FARITH2-FMUL_FP16#0,FARITH2-FDIV_FP16#0,FARITH2-FADD_FP16#0,FARITH2-FSUB_FP16#0,FARITH2-FMAX_FP16#0,FARITH2-FMIN_FP16#0,FARITH2-FMAXNM_FP16#0,FARITH2-FMINNM_FP16#0,FARITH2-FNMUL_FP16#0,FCMP-FCMP_FP16#0,FCMP-FCMP_FP16_ZERO#0,FCMP-FCMPE_FP16#0,FCMP-FCMPE_FP16_ZERO#0,FCCMP-FCCMP_FP16#0,FCCMP-FCCMPE_FP16#0,FCSEL-FCSEL_FP16#0
pub const fn classify_impl_4b_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x2589,
    0x3 => 0x2701,
    0x4 => 0x3,
    0x5 => 0x2,
    0x6 => 0x258a,
    0x7 => 0x2701,
    0x8 => 0x4,
    0x9 => 0x2,
    0xa => 0x258b,
    0xb => 0x2701,
    0xc => 0x3,
    0xd => 0x2,
    0xe => 0x258c,
    0xf => 0x2701,
    0x10 => 0x0,
    0x11 => 0x2,
    0x12 => 0x258d,
    0x13 => 0x2701,
    0x14 => 0x3,
    0x15 => 0x2,
    0x16 => 0x258e,
    0x17 => 0x2701,
    0x18 => 0x0,
    0x19 => 0x2,
    0x1a => 0x258f,
    0x1b => 0x2701,
    0x1c => 0x3,
    0x1d => 0x2,
    0x1e => 0x2590,
    0x1f => 0x2701,
    0x20 => 0x0,
    0x21 => 0x2,
    0x22 => 0x2591,
    0x23 => 0x2701,
    0x24 => 0x3,
    0x25 => 0x2,
    0x26 => 0x0,
    0x27 => 0x2701,
    0x28 => 0x0,
    0x29 => 0x2,
    0x2a => 0x0,
    0x2b => 0x2701,
    0x2c => 0x3,
    0x2d => 0x2,
    0x2e => 0x0,
    0x2f => 0x2701,
    0x30 => 0x0,
    0x31 => 0x2,
    0x32 => 0x0,
    0x33 => 0x2701,
    0x34 => 0x3,
    0x35 => 0x2,
    0x36 => 0x0,
    0x37 => 0x2701,
    0x38 => 0x0,
    0x39 => 0x2,
    0x3a => 0x0,
    0x3b => 0x2701,
    0x3c => 0x3,
    0x3d => 0x2,
    0x3e => 0x0,
    0x3f => 0x2701,
    0x40 => 0x5,
    0x41 => 0x2,
    0x42 => 0x2589,
    0x43 => 0x2701,
    0x44 => 0x3,
    0x45 => 0x2,
    0x46 => 0x258a,
    0x47 => 0x2701,
    0x48 => 0x4,
    0x49 => 0x2,
    0x4a => 0x258b,
    0x4b => 0x2701,
    0x4c => 0x3,
    0x4d => 0x2,
    0x4e => 0x258c,
    0x4f => 0x2701,
    0x50 => 0x0,
    0x51 => 0x2,
    0x52 => 0x258d,
    0x53 => 0x2701,
    0x54 => 0x3,
    0x55 => 0x2,
    0x56 => 0x258e,
    0x57 => 0x2701,
    0x58 => 0x0,
    0x59 => 0x2,
    0x5a => 0x258f,
    0x5b => 0x2701,
    0x5c => 0x3,
    0x5d => 0x2,
    0x5e => 0x2590,
    0x5f => 0x2701,
    0x60 => 0x0,
    0x61 => 0x2,
    0x62 => 0x2591,
    0x63 => 0x2701,
    0x64 => 0x3,
    0x65 => 0x2,
    0x66 => 0x0,
    0x67 => 0x2701,
    0x68 => 0x0,
    0x69 => 0x2,
    0x6a => 0x0,
    0x6b => 0x2701,
    0x6c => 0x3,
    0x6d => 0x2,
    0x6e => 0x0,
    0x6f => 0x2701,
    0x70 => 0x0,
    0x71 => 0x2,
    0x72 => 0x0,
    0x73 => 0x2701,
    0x74 => 0x3,
    0x75 => 0x2,
    0x76 => 0x0,
    0x77 => 0x2701,
    0x78 => 0x0,
    0x79 => 0x2,
    0x7a => 0x0,
    0x7b => 0x2701,
    0x7c => 0x3,
    0x7d => 0x2,
    0x7e => 0x0,
    0x7f => 0x2701,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_4b_2_1(inst), // FCVT_TOINT-FCVTZS_FP16#0
    0x2 => return classify_impl_4b_2_2(inst), // FCCMP-FCCMP_FP16#0,FCCMP-FCCMPE_FP16#0
    0x3 => return classify_impl_4b_2_3(inst), // FMOV_IMM-FMOV_IMM_FP16#0
    0x4 => return classify_impl_4b_2_4(inst), // FCMP-FCMP_FP16#0,FCMP-FCMP_FP16_ZERO#0,FCMP-FCMPE_FP16#0,FCMP-FCMPE_FP16_ZERO#0
    0x5 => return classify_impl_4b_2_5(inst), // FCVT_TOINT-FCVTZU_FP16#0
    _ => idx
  };
  return idx;
}

// FCVT_TOINT-FCVTMS_FP16#0,FCVT_TOINT-FCVTMU_FP16#0,FCVT_TOINT-FCVTZS_FP16#0,FCVT_TOINT-FCVTZU_FP16#0,FMOV_IMM-FMOV_IMM_FP16#0,FARITH2-FMUL_FP16#0,FARITH2-FDIV_FP16#0,FARITH2-FADD_FP16#0,FARITH2-FSUB_FP16#0,FARITH2-FMAX_FP16#0,FARITH2-FMIN_FP16#0,FARITH2-FMAXNM_FP16#0,FARITH2-FMINNM_FP16#0,FARITH2-FNMUL_FP16#0,FCMP-FCMP_FP16#0,FCMP-FCMP_FP16_ZERO#0,FCMP-FCMPE_FP16#0,FCMP-FCMPE_FP16_ZERO#0,FCCMP-FCCMP_FP16#0,FCCMP-FCCMPE_FP16#0,FCSEL-FCSEL_FP16#0
pub const fn classify_impl_4b(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_4b_1(inst), // FCVT_TOINT-FCVTMS_FP16#0,FCVT_TOINT-FCVTMU_FP16#0,FMOV_IMM-FMOV_IMM_FP16#0,FARITH2-FMUL_FP16#0,FARITH2-FDIV_FP16#0,FARITH2-FADD_FP16#0,FARITH2-FSUB_FP16#0,FARITH2-FMAX_FP16#0,FARITH2-FMIN_FP16#0,FARITH2-FMAXNM_FP16#0,FARITH2-FMINNM_FP16#0,FARITH2-FNMUL_FP16#0,FCMP-FCMP_FP16#0,FCMP-FCMP_FP16_ZERO#0,FCMP-FCMPE_FP16#0,FCMP-FCMPE_FP16_ZERO#0,FCCMP-FCCMP_FP16#0,FCCMP-FCCMPE_FP16#0,FCSEL-FCSEL_FP16#0
    0x2 => return classify_impl_4b_2(inst), // FCVT_TOINT-FCVTZS_FP16#0,FCVT_TOINT-FCVTZU_FP16#0,FMOV_IMM-FMOV_IMM_FP16#0,FARITH2-FMUL_FP16#0,FARITH2-FDIV_FP16#0,FARITH2-FADD_FP16#0,FARITH2-FSUB_FP16#0,FARITH2-FMAX_FP16#0,FARITH2-FMIN_FP16#0,FARITH2-FMAXNM_FP16#0,FARITH2-FMINNM_FP16#0,FARITH2-FNMUL_FP16#0,FCMP-FCMP_FP16#0,FCMP-FCMP_FP16_ZERO#0,FCMP-FCMPE_FP16#0,FCMP-FCMPE_FP16_ZERO#0,FCCMP-FCCMP_FP16#0,FCCMP-FCCMPE_FP16#0,FCSEL-FCSEL_FP16#0
    _ => idx
  };
  return idx;
}


// FMADD-FMADD#0,FMADD-FMSUB#0
pub const fn classify_impl_4c(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x2780,
    0x1 => 0x2781,
    _ => 0,
  };
  return idx;
}


// FMADD-FNMADD#0,FMADD-FNMSUB#0
pub const fn classify_impl_4d(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x2782,
    0x1 => 0x2783,
    _ => 0,
  };
  return idx;
}


// FMADD-FMADD#1,FMADD-FMSUB#1
pub const fn classify_impl_4e(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x2780,
    0x1 => 0x2781,
    _ => 0,
  };
  return idx;
}


// FMADD-FNMADD#1,FMADD-FNMSUB#1
pub const fn classify_impl_4f(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x2782,
    0x1 => 0x2783,
    _ => 0,
  };
  return idx;
}


// FMADD-FMADD_FP16#0,FMADD-FMSUB_FP16#0
pub const fn classify_impl_50(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x2784,
    0x1 => 0x2785,
    _ => 0,
  };
  return idx;
}


// FMADD-FNMADD_FP16#0,FMADD-FNMSUB_FP16#0
pub const fn classify_impl_51(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x2786,
    0x1 => 0x2787,
    _ => 0,
  };
  return idx;
}


// ANDOREOR_SHIFT-ORR_SHIFT#0
pub const fn classify_impl_52(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x582;
}


// ANDOREOR_SHIFT-ORN_SHIFT#0
pub const fn classify_impl_53(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x583;
}


// ADDSUB_SHIFT-ADDS_SHIFT#0
pub const fn classify_impl_54(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x401;
}


// ADDSUB_EXT-ADDS_EXT#0,ADDSUB_EXT-ADDS_EXT#1,ADDSUB_EXT-ADDS_EXT#2,ADDSUB_EXT-ADDS_EXT#3,ADDSUB_EXT-ADDS_EXT#4
pub const fn classify_impl_55(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7 {
    0x0 => 0x301,
    0x1 => 0x301,
    0x2 => 0x301,
    0x3 => 0x301,
    0x4 => 0x301,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    _ => 0,
  };
  return idx;
}


// ADDSUB_SHIFT-ADDS_SHIFT#1
pub const fn classify_impl_56(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x401;
}


// ADDSUB_SHIFT-ADDS_SHIFT#2
pub const fn classify_impl_57(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x401;
}


// EXT-EXT#0
pub const fn classify_impl_58(inst: u32) -> u32 {
  if (inst&0xc400) != 0x0 { return 0; }
  return 0x2b00;
}


// REV_VEC-REV32_VEC#0
pub const fn classify_impl_59_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3282;
}


// ADDLP_VEC-UADDLP#0
pub const fn classify_impl_59_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3102;
}


// ARITH1_VEC-USQADD_VEC#0
pub const fn classify_impl_59_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3083;
}


// CLZ_VEC-CLZ_VEC#0
pub const fn classify_impl_59_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3181;
}


// BIT_VEC-NOT_VEC#0
pub const fn classify_impl_59_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3201;
}


// ADDLP_VEC-UADALP#0
pub const fn classify_impl_59_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3103;
}


// ARITH1_VEC-SQNEG_VEC#0
pub const fn classify_impl_59_7(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3084;
}


// CMZERO_VEC-CMGE_ZERO_VEC#0
pub const fn classify_impl_59_8(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f83;
}


// CMZERO_VEC-CMLE_ZERO_VEC#0
pub const fn classify_impl_59_9(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f84;
}


// ARITH1_VEC-NEG_VEC#0
pub const fn classify_impl_59_a(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3085;
}


// XTN_VEC-SQXTUN_VEC#0
pub const fn classify_impl_59_b(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3382;
}


// SHLL_VEC_ESZ-SHLL_VEC_ESZ#0
pub const fn classify_impl_59_c(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4c00;
}


// XTN_VEC-UQXTN_VEC#0
pub const fn classify_impl_59_d(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3383;
}


// FRINT_VEC-FRINTA_VEC#0
pub const fn classify_impl_59_e(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5204;
}


// FRINT_VEC-FRINTX_VEC#0
pub const fn classify_impl_59_f(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5205;
}


// FCVT_VEC-FCVTNU_VEC#0
pub const fn classify_impl_59_10(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f05;
}


// FCVT_VEC-FCVTMU_VEC#0
pub const fn classify_impl_59_11(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f06;
}


// FCVT_VEC-FCVTAU_VEC#0
pub const fn classify_impl_59_12(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f07;
}


// FCVT_FROMINT_VEC-UCVTF_VEC#0
pub const fn classify_impl_59_13(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5081;
}


// FRINTTS_VEC-FRINT32X_VEC#0
pub const fn classify_impl_59_14(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5282;
}


// FRINTTS_VEC-FRINT64X_VEC#0
pub const fn classify_impl_59_15(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5283;
}

// HADDSUB_VEC-UHADD#0,HADDSUB_VEC-URHADD#0,HADDSUB_VEC-UHSUB#0,QADDSUB_VEC-UQADD#0,QADDSUB_VEC-UQSUB#0,CMGT_VEC-CMHIV#0,CMGT_VEC-CMHSV#0,CMEQ_VEC-CMEQV#0,CMZERO_VEC-CMGE_ZERO_VEC#0,CMZERO_VEC-CMLE_ZERO_VEC#0,ARITH1_VEC-USQADD_VEC#0,ARITH1_VEC-SQNEG_VEC#0,ARITH1_VEC-NEG_VEC#0,ADDLP_VEC-UADDLP#0,ADDLP_VEC-UADALP#0,CLZ_VEC-CLZ_VEC#0,BIT_VEC-NOT_VEC#0,REV_VEC-REV32_VEC#0,XTN_VEC-SQXTUN_VEC#0,XTN_VEC-UQXTN_VEC#0,SHL_REG_VEC-USHL#0,SHL_REG_VEC-UQSHL#0,SHL_REG_VEC-URSHL#0,SHL_REG_VEC-UQRSHL#0,MINMAX_VEC-UMAX#0,MINMAX_VEC-UMIN#0,MINMAX_VEC-UMAXP#0,MINMAX_VEC-UMINP#0,ABD_VEC-UABD#0,ABD_VEC-UABA#0,ADDSUB_VEC-SUB_VEC#0,MUL_VEC-MLS_VEC#0,MUL_VEC-PMUL_VEC#0,FMINMAX_VEC-FMAXNMP_VEC#0,FMINMAX_VEC-FMAXP_VEC#0,FCMP_REG_VEC-FCMGE_VEC#0,FCMP_REG_VEC-FACGE_VEC#0,FADDSUB_VEC-FADDP_VEC#0,FMUL_VEC-FMULV#0,FDIV_VEC-FDIVV#0,ANDOREOR_VEC-EORV#0,ADDSUBL_VEC-UADDL#0,ADDSUBL_VEC-USUBL#0,ADDSUBW_VEC-UADDW#0,ADDSUBW_VEC-USUBW#0,ADDSUBHN_VEC-RADDHN#0,ADDSUBHN_VEC-RSUBHN#0,ABDL_VEC-UABAL#0,ABDL_VEC-UABDL#0,MULL_VEC-UMLAL#0,MULL_VEC-UMLSL#0,MULL_VEC-UMULL#0,SHLL_VEC_ESZ-SHLL_VEC_ESZ#0,FCVT_VEC-FCVTNU_VEC#0,FCVT_VEC-FCVTMU_VEC#0,FCVT_VEC-FCVTAU_VEC#0,FCVT_FROMINT_VEC-UCVTF_VEC#0,FRINT_VEC-FRINTA_VEC#0,FRINT_VEC-FRINTX_VEC#0,FRINTTS_VEC-FRINT32X_VEC#0,FRINTTS_VEC-FRINT64X_VEC#0,FHM_VEC-FMLAL2_VEC#0
pub const fn classify_impl_59(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x4382,
    0x1 => 0x2b83,
    0x2 => 0x1,
    0x3 => 0x2c82,
    0x4 => 0x4402,
    0x5 => 0x2b84,
    0x6 => 0x0,
    0x7 => 0x4304,
    0x8 => 0x4383,
    0x9 => 0x2b85,
    0xa => 0x2,
    0xb => 0x2c83,
    0xc => 0x4403,
    0xd => 0x2d82,
    0xe => 0x3,
    0xf => 0x2d83,
    0x10 => 0x4482,
    0x11 => 0x3484,
    0x12 => 0x4,
    0x13 => 0x3485,
    0x14 => 0x4502,
    0x15 => 0x3486,
    0x16 => 0x5,
    0x17 => 0x3487,
    0x18 => 0x4483,
    0x19 => 0x3504,
    0x1a => 0x6,
    0x1b => 0x3505,
    0x1c => 0x4503,
    0x1d => 0x3582,
    0x1e => 0x7,
    0x1f => 0x3583,
    0x20 => 0x4583,
    0x21 => 0x3681,
    0x22 => 0x8,
    0x23 => 0x2e81,
    0x24 => 0x0,
    0x25 => 0x3782,
    0x26 => 0x9,
    0x27 => 0x3783,
    0x28 => 0x4584,
    0x29 => 0x3506,
    0x2a => 0x0,
    0x2b => 0x3507,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0xa,
    0x2f => 0x0,
    0x30 => 0x4585,
    0x31 => 0x3904,
    0x32 => 0x0,
    0x33 => 0x5b02,
    0x34 => 0x0,
    0x35 => 0x3c82,
    0x36 => 0x0,
    0x37 => 0x3f81,
    0x38 => 0x0,
    0x39 => 0x3a81,
    0x3a => 0x0,
    0x3b => 0x3a82,
    0x3c => 0x0,
    0x3d => 0x3905,
    0x3e => 0x0,
    0x3f => 0x4080,
    0x40 => 0x4382,
    0x41 => 0x2b83,
    0x42 => 0x0,
    0x43 => 0x2c82,
    0x44 => 0x4402,
    0x45 => 0x2b84,
    0x46 => 0x0,
    0x47 => 0x4304,
    0x48 => 0x4383,
    0x49 => 0x2b85,
    0x4a => 0xb,
    0x4b => 0x2c83,
    0x4c => 0x4403,
    0x4d => 0x2d82,
    0x4e => 0xc,
    0x4f => 0x2d83,
    0x50 => 0x4482,
    0x51 => 0x3484,
    0x52 => 0xd,
    0x53 => 0x3485,
    0x54 => 0x4502,
    0x55 => 0x3486,
    0x56 => 0x0,
    0x57 => 0x3487,
    0x58 => 0x4483,
    0x59 => 0x3504,
    0x5a => 0x0,
    0x5b => 0x3505,
    0x5c => 0x4503,
    0x5d => 0x3582,
    0x5e => 0x0,
    0x5f => 0x3583,
    0x60 => 0x4583,
    0x61 => 0x3681,
    0x62 => 0xe,
    0x63 => 0x2e81,
    0x64 => 0x0,
    0x65 => 0x3782,
    0x66 => 0xf,
    0x67 => 0x3783,
    0x68 => 0x4584,
    0x69 => 0x3506,
    0x6a => 0x10,
    0x6b => 0x3507,
    0x6c => 0x0,
    0x6d => 0x0,
    0x6e => 0x11,
    0x6f => 0x0,
    0x70 => 0x4585,
    0x71 => 0x3904,
    0x72 => 0x12,
    0x73 => 0x5b02,
    0x74 => 0x0,
    0x75 => 0x3c82,
    0x76 => 0x13,
    0x77 => 0x3f81,
    0x78 => 0x0,
    0x79 => 0x3a81,
    0x7a => 0x14,
    0x7b => 0x3a82,
    0x7c => 0x0,
    0x7d => 0x3905,
    0x7e => 0x15,
    0x7f => 0x4080,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_59_1(inst), // REV_VEC-REV32_VEC#0
    0x2 => return classify_impl_59_2(inst), // ADDLP_VEC-UADDLP#0
    0x3 => return classify_impl_59_3(inst), // ARITH1_VEC-USQADD_VEC#0
    0x4 => return classify_impl_59_4(inst), // CLZ_VEC-CLZ_VEC#0
    0x5 => return classify_impl_59_5(inst), // BIT_VEC-NOT_VEC#0
    0x6 => return classify_impl_59_6(inst), // ADDLP_VEC-UADALP#0
    0x7 => return classify_impl_59_7(inst), // ARITH1_VEC-SQNEG_VEC#0
    0x8 => return classify_impl_59_8(inst), // CMZERO_VEC-CMGE_ZERO_VEC#0
    0x9 => return classify_impl_59_9(inst), // CMZERO_VEC-CMLE_ZERO_VEC#0
    0xa => return classify_impl_59_a(inst), // ARITH1_VEC-NEG_VEC#0
    0xb => return classify_impl_59_b(inst), // XTN_VEC-SQXTUN_VEC#0
    0xc => return classify_impl_59_c(inst), // SHLL_VEC_ESZ-SHLL_VEC_ESZ#0
    0xd => return classify_impl_59_d(inst), // XTN_VEC-UQXTN_VEC#0
    0xe => return classify_impl_59_e(inst), // FRINT_VEC-FRINTA_VEC#0
    0xf => return classify_impl_59_f(inst), // FRINT_VEC-FRINTX_VEC#0
    0x10 => return classify_impl_59_10(inst), // FCVT_VEC-FCVTNU_VEC#0
    0x11 => return classify_impl_59_11(inst), // FCVT_VEC-FCVTMU_VEC#0
    0x12 => return classify_impl_59_12(inst), // FCVT_VEC-FCVTAU_VEC#0
    0x13 => return classify_impl_59_13(inst), // FCVT_FROMINT_VEC-UCVTF_VEC#0
    0x14 => return classify_impl_59_14(inst), // FRINTTS_VEC-FRINT32X_VEC#0
    0x15 => return classify_impl_59_15(inst), // FRINTTS_VEC-FRINT64X_VEC#0
    _ => idx
  };
  return idx;
}


// INT_HORZ_VEC-UADDLV#0
pub const fn classify_impl_5a_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5384;
}


// INT_HORZ_VEC-UMAXV#0
pub const fn classify_impl_5a_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5385;
}


// INT_HORZ_VEC-UMINV#0
pub const fn classify_impl_5a_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5386;
}

// HADDSUB_VEC-UHADD#0,HADDSUB_VEC-URHADD#0,HADDSUB_VEC-UHSUB#0,QADDSUB_VEC-UQADD#0,QADDSUB_VEC-UQSUB#0,CMGT_VEC-CMHIV#0,CMGT_VEC-CMHSV#0,CMEQ_VEC-CMEQV#0,SHL_REG_VEC-USHL#0,SHL_REG_VEC-UQSHL#0,SHL_REG_VEC-URSHL#0,SHL_REG_VEC-UQRSHL#0,MINMAX_VEC-UMAX#0,MINMAX_VEC-UMIN#0,MINMAX_VEC-UMAXP#0,MINMAX_VEC-UMINP#0,ABD_VEC-UABD#0,ABD_VEC-UABA#0,ADDSUB_VEC-SUB_VEC#0,MUL_VEC-MLS_VEC#0,MUL_VEC-PMUL_VEC#0,FMINMAX_VEC-FMAXNMP_VEC#0,FMINMAX_VEC-FMAXP_VEC#0,FCMP_REG_VEC-FCMGE_VEC#0,FCMP_REG_VEC-FACGE_VEC#0,FADDSUB_VEC-FADDP_VEC#0,FMUL_VEC-FMULV#0,FDIV_VEC-FDIVV#0,ANDOREOR_VEC-EORV#0,ADDSUBL_VEC-UADDL#0,ADDSUBL_VEC-USUBL#0,ADDSUBW_VEC-UADDW#0,ADDSUBW_VEC-USUBW#0,ADDSUBHN_VEC-RADDHN#0,ADDSUBHN_VEC-RSUBHN#0,ABDL_VEC-UABAL#0,ABDL_VEC-UABDL#0,MULL_VEC-UMLAL#0,MULL_VEC-UMLSL#0,MULL_VEC-UMULL#0,INT_HORZ_VEC-UADDLV#0,INT_HORZ_VEC-UMAXV#0,INT_HORZ_VEC-UMINV#0,FHM_VEC-FMLAL2_VEC#0
pub const fn classify_impl_5a(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x4382,
    0x1 => 0x2b83,
    0x2 => 0x0,
    0x3 => 0x2c82,
    0x4 => 0x4402,
    0x5 => 0x2b84,
    0x6 => 0x0,
    0x7 => 0x4304,
    0x8 => 0x4383,
    0x9 => 0x2b85,
    0xa => 0x0,
    0xb => 0x2c83,
    0xc => 0x4403,
    0xd => 0x2d82,
    0xe => 0x1,
    0xf => 0x2d83,
    0x10 => 0x4482,
    0x11 => 0x3484,
    0x12 => 0x0,
    0x13 => 0x3485,
    0x14 => 0x4502,
    0x15 => 0x3486,
    0x16 => 0x0,
    0x17 => 0x3487,
    0x18 => 0x4483,
    0x19 => 0x3504,
    0x1a => 0x0,
    0x1b => 0x3505,
    0x1c => 0x4503,
    0x1d => 0x3582,
    0x1e => 0x0,
    0x1f => 0x3583,
    0x20 => 0x4583,
    0x21 => 0x3681,
    0x22 => 0x0,
    0x23 => 0x2e81,
    0x24 => 0x0,
    0x25 => 0x3782,
    0x26 => 0x0,
    0x27 => 0x3783,
    0x28 => 0x4584,
    0x29 => 0x3506,
    0x2a => 0x2,
    0x2b => 0x3507,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x4585,
    0x31 => 0x3904,
    0x32 => 0x0,
    0x33 => 0x5b02,
    0x34 => 0x0,
    0x35 => 0x3c82,
    0x36 => 0x0,
    0x37 => 0x3f81,
    0x38 => 0x0,
    0x39 => 0x3a81,
    0x3a => 0x0,
    0x3b => 0x3a82,
    0x3c => 0x0,
    0x3d => 0x3905,
    0x3e => 0x0,
    0x3f => 0x4080,
    0x40 => 0x4382,
    0x41 => 0x2b83,
    0x42 => 0x0,
    0x43 => 0x2c82,
    0x44 => 0x4402,
    0x45 => 0x2b84,
    0x46 => 0x0,
    0x47 => 0x4304,
    0x48 => 0x4383,
    0x49 => 0x2b85,
    0x4a => 0x0,
    0x4b => 0x2c83,
    0x4c => 0x4403,
    0x4d => 0x2d82,
    0x4e => 0x0,
    0x4f => 0x2d83,
    0x50 => 0x4482,
    0x51 => 0x3484,
    0x52 => 0x0,
    0x53 => 0x3485,
    0x54 => 0x4502,
    0x55 => 0x3486,
    0x56 => 0x0,
    0x57 => 0x3487,
    0x58 => 0x4483,
    0x59 => 0x3504,
    0x5a => 0x0,
    0x5b => 0x3505,
    0x5c => 0x4503,
    0x5d => 0x3582,
    0x5e => 0x0,
    0x5f => 0x3583,
    0x60 => 0x4583,
    0x61 => 0x3681,
    0x62 => 0x0,
    0x63 => 0x2e81,
    0x64 => 0x0,
    0x65 => 0x3782,
    0x66 => 0x0,
    0x67 => 0x3783,
    0x68 => 0x4584,
    0x69 => 0x3506,
    0x6a => 0x3,
    0x6b => 0x3507,
    0x6c => 0x0,
    0x6d => 0x0,
    0x6e => 0x0,
    0x6f => 0x0,
    0x70 => 0x4585,
    0x71 => 0x3904,
    0x72 => 0x0,
    0x73 => 0x5b02,
    0x74 => 0x0,
    0x75 => 0x3c82,
    0x76 => 0x0,
    0x77 => 0x3f81,
    0x78 => 0x0,
    0x79 => 0x3a81,
    0x7a => 0x0,
    0x7b => 0x3a82,
    0x7c => 0x0,
    0x7d => 0x3905,
    0x7e => 0x0,
    0x7f => 0x4080,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_5a_1(inst), // INT_HORZ_VEC-UADDLV#0
    0x2 => return classify_impl_5a_2(inst), // INT_HORZ_VEC-UMAXV#0
    0x3 => return classify_impl_5a_3(inst), // INT_HORZ_VEC-UMINV#0
    _ => idx
  };
  return idx;
}


// FP16_3REG_VEC-FMAXNMP_VEC_FP16#0,FP16_3REG_VEC-FADDP_VEC_FP16#0,FP16_3REG_VEC-FMUL_VEC_FP16#0,FP16_3REG_VEC-FCMGE_VEC_FP16#0,FP16_3REG_VEC-FACGE_VEC_FP16#0,FP16_3REG_VEC-FMAXP_VEC_FP16#0,FP16_3REG_VEC-FDIV_VEC_FP16#0,SQRDMLAH_VEC-SQRDMLAH#0,SQRDMLAH_VEC-SQRDMLSH#0,DOT_VEC-BFDOT_VEC#0,FCMLA_VEC-FCMLA_VEC#0,FCMLA_VEC-FCMLA_VEC#1,FCMLA_VEC-FCADD_VEC#0
pub const fn classify_impl_5b(inst: u32) -> u32 {
  if (inst&0x400) != 0x400 { return 0; }
  let idx = match (inst >> 11) & 0x1f {
    0x0 => 0x418d,
    0x1 => 0x0,
    0x2 => 0x418e,
    0x3 => 0x418f,
    0x4 => 0x4190,
    0x5 => 0x4191,
    0x6 => 0x4192,
    0x7 => 0x4193,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x4800,
    0x11 => 0x4801,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x5c00,
    0x19 => 0x5c00,
    0x1a => 0x5c00,
    0x1b => 0x5c00,
    0x1c => 0x5c01,
    0x1d => 0x0,
    0x1e => 0x5c01,
    0x1f => 0x5902,
    _ => 0,
  };
  return idx;
}


// REV_VEC-REV32_VEC#1
pub const fn classify_impl_5c_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3282;
}


// ADDLP_VEC-UADDLP#1
pub const fn classify_impl_5c_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3102;
}


// ARITH1_VEC-USQADD_VEC#1
pub const fn classify_impl_5c_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3083;
}


// CLZ_VEC-CLZ_VEC#1
pub const fn classify_impl_5c_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3181;
}


// BIT_VEC-RBIT_VEC#0
pub const fn classify_impl_5c_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3202;
}


// ADDLP_VEC-UADALP#1
pub const fn classify_impl_5c_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3103;
}


// ARITH1_VEC-SQNEG_VEC#1
pub const fn classify_impl_5c_7(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3084;
}


// CMZERO_VEC-CMGE_ZERO_VEC#1
pub const fn classify_impl_5c_8(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f83;
}


// CMZERO_VEC-CMLE_ZERO_VEC#1
pub const fn classify_impl_5c_9(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f84;
}


// ARITH1_VEC-NEG_VEC#1
pub const fn classify_impl_5c_a(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3085;
}


// XTN_VEC-SQXTUN_VEC#1
pub const fn classify_impl_5c_b(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3382;
}


// SHLL_VEC_ESZ-SHLL_VEC_ESZ#1
pub const fn classify_impl_5c_c(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4c00;
}


// XTN_VEC-UQXTN_VEC#1
pub const fn classify_impl_5c_d(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3383;
}


// FCVTN_VEC-FCVTXN#0
pub const fn classify_impl_5c_e(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5182;
}

// HADDSUB_VEC-UHADD#1,HADDSUB_VEC-URHADD#1,HADDSUB_VEC-UHSUB#1,QADDSUB_VEC-UQADD#1,QADDSUB_VEC-UQSUB#1,CMGT_VEC-CMHIV#1,CMGT_VEC-CMHSV#1,CMEQ_VEC-CMEQV#1,CMZERO_VEC-CMGE_ZERO_VEC#1,CMZERO_VEC-CMLE_ZERO_VEC#1,ARITH1_VEC-USQADD_VEC#1,ARITH1_VEC-SQNEG_VEC#1,ARITH1_VEC-NEG_VEC#1,ADDLP_VEC-UADDLP#1,ADDLP_VEC-UADALP#1,CLZ_VEC-CLZ_VEC#1,BIT_VEC-RBIT_VEC#0,REV_VEC-REV32_VEC#1,XTN_VEC-SQXTUN_VEC#1,XTN_VEC-UQXTN_VEC#1,SHL_REG_VEC-USHL#1,SHL_REG_VEC-UQSHL#1,SHL_REG_VEC-URSHL#1,SHL_REG_VEC-UQRSHL#1,MINMAX_VEC-UMAX#1,MINMAX_VEC-UMIN#1,MINMAX_VEC-UMAXP#1,MINMAX_VEC-UMINP#1,ABD_VEC-UABD#1,ABD_VEC-UABA#1,ADDSUB_VEC-SUB_VEC#1,MUL_VEC-MLS_VEC#1,SQDMULH_VEC-SQRDMULH#0,ANDOREOR_VEC-BSLV#0,ADDSUBL_VEC-UADDL#1,ADDSUBL_VEC-USUBL#1,ADDSUBW_VEC-UADDW#1,ADDSUBW_VEC-USUBW#1,ADDSUBHN_VEC-RADDHN#1,ADDSUBHN_VEC-RSUBHN#1,ABDL_VEC-UABAL#1,ABDL_VEC-UABDL#1,MULL_VEC-UMLAL#1,MULL_VEC-UMLSL#1,MULL_VEC-UMULL#1,SHLL_VEC_ESZ-SHLL_VEC_ESZ#1,FCVTN_VEC-FCVTXN#0
pub const fn classify_impl_5c(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x4382,
    0x1 => 0x2b83,
    0x2 => 0x1,
    0x3 => 0x2c82,
    0x4 => 0x4402,
    0x5 => 0x2b84,
    0x6 => 0x0,
    0x7 => 0x4305,
    0x8 => 0x4383,
    0x9 => 0x2b85,
    0xa => 0x2,
    0xb => 0x2c83,
    0xc => 0x4403,
    0xd => 0x2d82,
    0xe => 0x3,
    0xf => 0x2d83,
    0x10 => 0x4482,
    0x11 => 0x3484,
    0x12 => 0x4,
    0x13 => 0x3485,
    0x14 => 0x4502,
    0x15 => 0x3486,
    0x16 => 0x5,
    0x17 => 0x3487,
    0x18 => 0x4483,
    0x19 => 0x3504,
    0x1a => 0x6,
    0x1b => 0x3505,
    0x1c => 0x4503,
    0x1d => 0x3582,
    0x1e => 0x7,
    0x1f => 0x3583,
    0x20 => 0x4583,
    0x21 => 0x3681,
    0x22 => 0x8,
    0x23 => 0x2e81,
    0x24 => 0x0,
    0x25 => 0x3782,
    0x26 => 0x9,
    0x27 => 0x0,
    0x28 => 0x4584,
    0x29 => 0x3506,
    0x2a => 0x0,
    0x2b => 0x3507,
    0x2c => 0x0,
    0x2d => 0x3881,
    0x2e => 0xa,
    0x2f => 0x0,
    0x30 => 0x4585,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    0x40 => 0x4382,
    0x41 => 0x2b83,
    0x42 => 0x0,
    0x43 => 0x2c82,
    0x44 => 0x4402,
    0x45 => 0x2b84,
    0x46 => 0x0,
    0x47 => 0x4305,
    0x48 => 0x4383,
    0x49 => 0x2b85,
    0x4a => 0xb,
    0x4b => 0x2c83,
    0x4c => 0x4403,
    0x4d => 0x2d82,
    0x4e => 0xc,
    0x4f => 0x2d83,
    0x50 => 0x4482,
    0x51 => 0x3484,
    0x52 => 0xd,
    0x53 => 0x3485,
    0x54 => 0x4502,
    0x55 => 0x3486,
    0x56 => 0x0,
    0x57 => 0x3487,
    0x58 => 0x4483,
    0x59 => 0x3504,
    0x5a => 0xe,
    0x5b => 0x3505,
    0x5c => 0x4503,
    0x5d => 0x3582,
    0x5e => 0x0,
    0x5f => 0x3583,
    0x60 => 0x4583,
    0x61 => 0x3681,
    0x62 => 0x0,
    0x63 => 0x2e81,
    0x64 => 0x0,
    0x65 => 0x3782,
    0x66 => 0x0,
    0x67 => 0x0,
    0x68 => 0x4584,
    0x69 => 0x3506,
    0x6a => 0x0,
    0x6b => 0x3507,
    0x6c => 0x0,
    0x6d => 0x3881,
    0x6e => 0x0,
    0x6f => 0x0,
    0x70 => 0x4585,
    0x71 => 0x0,
    0x72 => 0x0,
    0x73 => 0x0,
    0x74 => 0x0,
    0x75 => 0x0,
    0x76 => 0x0,
    0x77 => 0x0,
    0x78 => 0x0,
    0x79 => 0x0,
    0x7a => 0x0,
    0x7b => 0x0,
    0x7c => 0x0,
    0x7d => 0x0,
    0x7e => 0x0,
    0x7f => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_5c_1(inst), // REV_VEC-REV32_VEC#1
    0x2 => return classify_impl_5c_2(inst), // ADDLP_VEC-UADDLP#1
    0x3 => return classify_impl_5c_3(inst), // ARITH1_VEC-USQADD_VEC#1
    0x4 => return classify_impl_5c_4(inst), // CLZ_VEC-CLZ_VEC#1
    0x5 => return classify_impl_5c_5(inst), // BIT_VEC-RBIT_VEC#0
    0x6 => return classify_impl_5c_6(inst), // ADDLP_VEC-UADALP#1
    0x7 => return classify_impl_5c_7(inst), // ARITH1_VEC-SQNEG_VEC#1
    0x8 => return classify_impl_5c_8(inst), // CMZERO_VEC-CMGE_ZERO_VEC#1
    0x9 => return classify_impl_5c_9(inst), // CMZERO_VEC-CMLE_ZERO_VEC#1
    0xa => return classify_impl_5c_a(inst), // ARITH1_VEC-NEG_VEC#1
    0xb => return classify_impl_5c_b(inst), // XTN_VEC-SQXTUN_VEC#1
    0xc => return classify_impl_5c_c(inst), // SHLL_VEC_ESZ-SHLL_VEC_ESZ#1
    0xd => return classify_impl_5c_d(inst), // XTN_VEC-UQXTN_VEC#1
    0xe => return classify_impl_5c_e(inst), // FCVTN_VEC-FCVTXN#0
    _ => idx
  };
  return idx;
}


// INT_HORZ_VEC-UADDLV#1
pub const fn classify_impl_5d_1_1(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x5384;
}


// INT_HORZ_VEC-UMAXV#1
pub const fn classify_impl_5d_1_2(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x5385;
}


// INT_HORZ_VEC-UMINV#1
pub const fn classify_impl_5d_1_3(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x5386;
}

// HADDSUB_VEC-UHADD#1,HADDSUB_VEC-URHADD#1,HADDSUB_VEC-UHSUB#1,QADDSUB_VEC-UQADD#1,QADDSUB_VEC-UQSUB#1,CMGT_VEC-CMHIV#1,CMGT_VEC-CMHSV#1,CMEQ_VEC-CMEQV#1,SHL_REG_VEC-USHL#1,SHL_REG_VEC-UQSHL#1,SHL_REG_VEC-URSHL#1,SHL_REG_VEC-UQRSHL#1,MINMAX_VEC-UMAX#1,MINMAX_VEC-UMIN#1,MINMAX_VEC-UMAXP#1,MINMAX_VEC-UMINP#1,ABD_VEC-UABD#1,ABD_VEC-UABA#1,ADDSUB_VEC-SUB_VEC#1,MUL_VEC-MLS_VEC#1,SQDMULH_VEC-SQRDMULH#0,ANDOREOR_VEC-BSLV#0,ADDSUBL_VEC-UADDL#1,ADDSUBL_VEC-USUBL#1,ADDSUBW_VEC-UADDW#1,ADDSUBW_VEC-USUBW#1,ADDSUBHN_VEC-RADDHN#1,ADDSUBHN_VEC-RSUBHN#1,ABDL_VEC-UABAL#1,ABDL_VEC-UABDL#1,MULL_VEC-UMLAL#1,MULL_VEC-UMLSL#1,MULL_VEC-UMULL#1,INT_HORZ_VEC-UADDLV#1,INT_HORZ_VEC-UMAXV#1,INT_HORZ_VEC-UMINV#1
pub const fn classify_impl_5d_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x4382,
    0x1 => 0x2b83,
    0x2 => 0x0,
    0x3 => 0x2c82,
    0x4 => 0x4402,
    0x5 => 0x2b84,
    0x6 => 0x0,
    0x7 => 0x4305,
    0x8 => 0x4383,
    0x9 => 0x2b85,
    0xa => 0x0,
    0xb => 0x2c83,
    0xc => 0x4403,
    0xd => 0x2d82,
    0xe => 0x1,
    0xf => 0x2d83,
    0x10 => 0x4482,
    0x11 => 0x3484,
    0x12 => 0x0,
    0x13 => 0x3485,
    0x14 => 0x4502,
    0x15 => 0x3486,
    0x16 => 0x0,
    0x17 => 0x3487,
    0x18 => 0x4483,
    0x19 => 0x3504,
    0x1a => 0x0,
    0x1b => 0x3505,
    0x1c => 0x4503,
    0x1d => 0x3582,
    0x1e => 0x0,
    0x1f => 0x3583,
    0x20 => 0x4583,
    0x21 => 0x3681,
    0x22 => 0x0,
    0x23 => 0x2e81,
    0x24 => 0x0,
    0x25 => 0x3782,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x4584,
    0x29 => 0x3506,
    0x2a => 0x2,
    0x2b => 0x3507,
    0x2c => 0x0,
    0x2d => 0x3881,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x4585,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    0x40 => 0x4382,
    0x41 => 0x2b83,
    0x42 => 0x0,
    0x43 => 0x2c82,
    0x44 => 0x4402,
    0x45 => 0x2b84,
    0x46 => 0x0,
    0x47 => 0x4305,
    0x48 => 0x4383,
    0x49 => 0x2b85,
    0x4a => 0x0,
    0x4b => 0x2c83,
    0x4c => 0x4403,
    0x4d => 0x2d82,
    0x4e => 0x0,
    0x4f => 0x2d83,
    0x50 => 0x4482,
    0x51 => 0x3484,
    0x52 => 0x0,
    0x53 => 0x3485,
    0x54 => 0x4502,
    0x55 => 0x3486,
    0x56 => 0x0,
    0x57 => 0x3487,
    0x58 => 0x4483,
    0x59 => 0x3504,
    0x5a => 0x0,
    0x5b => 0x3505,
    0x5c => 0x4503,
    0x5d => 0x3582,
    0x5e => 0x0,
    0x5f => 0x3583,
    0x60 => 0x4583,
    0x61 => 0x3681,
    0x62 => 0x0,
    0x63 => 0x2e81,
    0x64 => 0x0,
    0x65 => 0x3782,
    0x66 => 0x0,
    0x67 => 0x0,
    0x68 => 0x4584,
    0x69 => 0x3506,
    0x6a => 0x3,
    0x6b => 0x3507,
    0x6c => 0x0,
    0x6d => 0x3881,
    0x6e => 0x0,
    0x6f => 0x0,
    0x70 => 0x4585,
    0x71 => 0x0,
    0x72 => 0x0,
    0x73 => 0x0,
    0x74 => 0x0,
    0x75 => 0x0,
    0x76 => 0x0,
    0x77 => 0x0,
    0x78 => 0x0,
    0x79 => 0x0,
    0x7a => 0x0,
    0x7b => 0x0,
    0x7c => 0x0,
    0x7d => 0x0,
    0x7e => 0x0,
    0x7f => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_5d_1_1(inst), // INT_HORZ_VEC-UADDLV#1
    0x2 => return classify_impl_5d_1_2(inst), // INT_HORZ_VEC-UMAXV#1
    0x3 => return classify_impl_5d_1_3(inst), // INT_HORZ_VEC-UMINV#1
    _ => idx
  };
  return idx;
}


// FP16_2REG_VEC-FRINTA_VEC_FP16#0
pub const fn classify_impl_5d_2_1(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x428f;
}


// FP16_2REG_VEC-FRINTX_VEC_FP16#0
pub const fn classify_impl_5d_2_2(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x4290;
}


// FP16_2REG_VEC-FCVTNU_VEC_FP16#0
pub const fn classify_impl_5d_2_3(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x4291;
}


// FP16_2REG_VEC-FCVTMU_VEC_FP16#0
pub const fn classify_impl_5d_2_4(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x4292;
}


// FP16_2REG_VEC-FCVTAU_VEC_FP16#0
pub const fn classify_impl_5d_2_5(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x4293;
}


// FP16_2REG_VEC-UCVTF_VEC_FP16#0
pub const fn classify_impl_5d_2_6(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x4294;
}

// HADDSUB_VEC-UHADD#1,HADDSUB_VEC-URHADD#1,HADDSUB_VEC-UHSUB#1,QADDSUB_VEC-UQADD#1,QADDSUB_VEC-UQSUB#1,CMGT_VEC-CMHIV#1,CMGT_VEC-CMHSV#1,CMEQ_VEC-CMEQV#1,SHL_REG_VEC-USHL#1,SHL_REG_VEC-UQSHL#1,SHL_REG_VEC-URSHL#1,SHL_REG_VEC-UQRSHL#1,MINMAX_VEC-UMAX#1,MINMAX_VEC-UMIN#1,MINMAX_VEC-UMAXP#1,MINMAX_VEC-UMINP#1,ABD_VEC-UABD#1,ABD_VEC-UABA#1,ADDSUB_VEC-SUB_VEC#1,MUL_VEC-MLS_VEC#1,SQDMULH_VEC-SQRDMULH#0,FP16_2REG_VEC-FRINTA_VEC_FP16#0,FP16_2REG_VEC-FRINTX_VEC_FP16#0,FP16_2REG_VEC-FCVTNU_VEC_FP16#0,FP16_2REG_VEC-FCVTMU_VEC_FP16#0,FP16_2REG_VEC-FCVTAU_VEC_FP16#0,FP16_2REG_VEC-UCVTF_VEC_FP16#0,ANDOREOR_VEC-BSLV#0,ADDSUBL_VEC-UADDL#1,ADDSUBL_VEC-USUBL#1,ADDSUBW_VEC-UADDW#1,ADDSUBW_VEC-USUBW#1,ADDSUBHN_VEC-RADDHN#1,ADDSUBHN_VEC-RSUBHN#1,ABDL_VEC-UABAL#1,ABDL_VEC-UABDL#1,MULL_VEC-UMLAL#1,MULL_VEC-UMLSL#1,MULL_VEC-UMULL#1
pub const fn classify_impl_5d_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x4382,
    0x1 => 0x2b83,
    0x2 => 0x0,
    0x3 => 0x2c82,
    0x4 => 0x4402,
    0x5 => 0x2b84,
    0x6 => 0x0,
    0x7 => 0x4305,
    0x8 => 0x4383,
    0x9 => 0x2b85,
    0xa => 0x0,
    0xb => 0x2c83,
    0xc => 0x4403,
    0xd => 0x2d82,
    0xe => 0x0,
    0xf => 0x2d83,
    0x10 => 0x4482,
    0x11 => 0x3484,
    0x12 => 0x0,
    0x13 => 0x3485,
    0x14 => 0x4502,
    0x15 => 0x3486,
    0x16 => 0x0,
    0x17 => 0x3487,
    0x18 => 0x4483,
    0x19 => 0x3504,
    0x1a => 0x0,
    0x1b => 0x3505,
    0x1c => 0x4503,
    0x1d => 0x3582,
    0x1e => 0x0,
    0x1f => 0x3583,
    0x20 => 0x4583,
    0x21 => 0x3681,
    0x22 => 0x1,
    0x23 => 0x2e81,
    0x24 => 0x0,
    0x25 => 0x3782,
    0x26 => 0x2,
    0x27 => 0x0,
    0x28 => 0x4584,
    0x29 => 0x3506,
    0x2a => 0x3,
    0x2b => 0x3507,
    0x2c => 0x0,
    0x2d => 0x3881,
    0x2e => 0x4,
    0x2f => 0x0,
    0x30 => 0x4585,
    0x31 => 0x0,
    0x32 => 0x5,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x6,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_5d_2_1(inst), // FP16_2REG_VEC-FRINTA_VEC_FP16#0
    0x2 => return classify_impl_5d_2_2(inst), // FP16_2REG_VEC-FRINTX_VEC_FP16#0
    0x3 => return classify_impl_5d_2_3(inst), // FP16_2REG_VEC-FCVTNU_VEC_FP16#0
    0x4 => return classify_impl_5d_2_4(inst), // FP16_2REG_VEC-FCVTMU_VEC_FP16#0
    0x5 => return classify_impl_5d_2_5(inst), // FP16_2REG_VEC-FCVTAU_VEC_FP16#0
    0x6 => return classify_impl_5d_2_6(inst), // FP16_2REG_VEC-UCVTF_VEC_FP16#0
    _ => idx
  };
  return idx;
}

// HADDSUB_VEC-UHADD#1,HADDSUB_VEC-URHADD#1,HADDSUB_VEC-UHSUB#1,QADDSUB_VEC-UQADD#1,QADDSUB_VEC-UQSUB#1,CMGT_VEC-CMHIV#1,CMGT_VEC-CMHSV#1,CMEQ_VEC-CMEQV#1,SHL_REG_VEC-USHL#1,SHL_REG_VEC-UQSHL#1,SHL_REG_VEC-URSHL#1,SHL_REG_VEC-UQRSHL#1,MINMAX_VEC-UMAX#1,MINMAX_VEC-UMIN#1,MINMAX_VEC-UMAXP#1,MINMAX_VEC-UMINP#1,ABD_VEC-UABD#1,ABD_VEC-UABA#1,ADDSUB_VEC-SUB_VEC#1,MUL_VEC-MLS_VEC#1,SQDMULH_VEC-SQRDMULH#0,FP16_2REG_VEC-FRINTA_VEC_FP16#0,FP16_2REG_VEC-FRINTX_VEC_FP16#0,FP16_2REG_VEC-FCVTNU_VEC_FP16#0,FP16_2REG_VEC-FCVTMU_VEC_FP16#0,FP16_2REG_VEC-FCVTAU_VEC_FP16#0,FP16_2REG_VEC-UCVTF_VEC_FP16#0,ANDOREOR_VEC-BSLV#0,ADDSUBL_VEC-UADDL#1,ADDSUBL_VEC-USUBL#1,ADDSUBW_VEC-UADDW#1,ADDSUBW_VEC-USUBW#1,ADDSUBHN_VEC-RADDHN#1,ADDSUBHN_VEC-RSUBHN#1,ABDL_VEC-UABAL#1,ABDL_VEC-UABDL#1,MULL_VEC-UMLAL#1,MULL_VEC-UMLSL#1,MULL_VEC-UMULL#1,INT_HORZ_VEC-UADDLV#1,INT_HORZ_VEC-UMAXV#1,INT_HORZ_VEC-UMINV#1
pub const fn classify_impl_5d(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_5d_1(inst), // HADDSUB_VEC-UHADD#1,HADDSUB_VEC-URHADD#1,HADDSUB_VEC-UHSUB#1,QADDSUB_VEC-UQADD#1,QADDSUB_VEC-UQSUB#1,CMGT_VEC-CMHIV#1,CMGT_VEC-CMHSV#1,CMEQ_VEC-CMEQV#1,SHL_REG_VEC-USHL#1,SHL_REG_VEC-UQSHL#1,SHL_REG_VEC-URSHL#1,SHL_REG_VEC-UQRSHL#1,MINMAX_VEC-UMAX#1,MINMAX_VEC-UMIN#1,MINMAX_VEC-UMAXP#1,MINMAX_VEC-UMINP#1,ABD_VEC-UABD#1,ABD_VEC-UABA#1,ADDSUB_VEC-SUB_VEC#1,MUL_VEC-MLS_VEC#1,SQDMULH_VEC-SQRDMULH#0,ANDOREOR_VEC-BSLV#0,ADDSUBL_VEC-UADDL#1,ADDSUBL_VEC-USUBL#1,ADDSUBW_VEC-UADDW#1,ADDSUBW_VEC-USUBW#1,ADDSUBHN_VEC-RADDHN#1,ADDSUBHN_VEC-RSUBHN#1,ABDL_VEC-UABAL#1,ABDL_VEC-UABDL#1,MULL_VEC-UMLAL#1,MULL_VEC-UMLSL#1,MULL_VEC-UMULL#1,INT_HORZ_VEC-UADDLV#1,INT_HORZ_VEC-UMAXV#1,INT_HORZ_VEC-UMINV#1
    0x2 => return classify_impl_5d_2(inst), // HADDSUB_VEC-UHADD#1,HADDSUB_VEC-URHADD#1,HADDSUB_VEC-UHSUB#1,QADDSUB_VEC-UQADD#1,QADDSUB_VEC-UQSUB#1,CMGT_VEC-CMHIV#1,CMGT_VEC-CMHSV#1,CMEQ_VEC-CMEQV#1,SHL_REG_VEC-USHL#1,SHL_REG_VEC-UQSHL#1,SHL_REG_VEC-URSHL#1,SHL_REG_VEC-UQRSHL#1,MINMAX_VEC-UMAX#1,MINMAX_VEC-UMIN#1,MINMAX_VEC-UMAXP#1,MINMAX_VEC-UMINP#1,ABD_VEC-UABD#1,ABD_VEC-UABA#1,ADDSUB_VEC-SUB_VEC#1,MUL_VEC-MLS_VEC#1,SQDMULH_VEC-SQRDMULH#0,FP16_2REG_VEC-FRINTA_VEC_FP16#0,FP16_2REG_VEC-FRINTX_VEC_FP16#0,FP16_2REG_VEC-FCVTNU_VEC_FP16#0,FP16_2REG_VEC-FCVTMU_VEC_FP16#0,FP16_2REG_VEC-FCVTAU_VEC_FP16#0,FP16_2REG_VEC-UCVTF_VEC_FP16#0,ANDOREOR_VEC-BSLV#0,ADDSUBL_VEC-UADDL#1,ADDSUBL_VEC-USUBL#1,ADDSUBW_VEC-UADDW#1,ADDSUBW_VEC-USUBW#1,ADDSUBHN_VEC-RADDHN#1,ADDSUBHN_VEC-RSUBHN#1,ABDL_VEC-UABAL#1,ABDL_VEC-UABDL#1,MULL_VEC-UMLAL#1,MULL_VEC-UMLSL#1,MULL_VEC-UMULL#1
    _ => idx
  };
  return idx;
}


// SQRDMLAH_VEC-SQRDMLAH#1,SQRDMLAH_VEC-SQRDMLSH#1,DOT_VEC-UDOT_VEC#0,FCMLA_VEC-FCMLA_VEC#2,FCMLA_VEC-FCMLA_VEC#3,FCMLA_VEC-FCADD_VEC#1
pub const fn classify_impl_5e(inst: u32) -> u32 {
  if (inst&0x8400) != 0x8400 { return 0; }
  let idx = match (inst >> 11) & 0xf {
    0x0 => 0x4800,
    0x1 => 0x4801,
    0x2 => 0x5903,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x5c00,
    0x9 => 0x5c00,
    0xa => 0x5c00,
    0xb => 0x5c00,
    0xc => 0x5c01,
    0xd => 0x0,
    0xe => 0x5c01,
    0xf => 0x0,
    _ => 0,
  };
  return idx;
}


// ADDLP_VEC-UADDLP#2
pub const fn classify_impl_5f_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3102;
}


// ARITH1_VEC-USQADD_VEC#2
pub const fn classify_impl_5f_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3083;
}


// CLZ_VEC-CLZ_VEC#2
pub const fn classify_impl_5f_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3181;
}


// ADDLP_VEC-UADALP#2
pub const fn classify_impl_5f_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3103;
}


// ARITH1_VEC-SQNEG_VEC#2
pub const fn classify_impl_5f_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3084;
}


// CMZERO_VEC-CMGE_ZERO_VEC#2
pub const fn classify_impl_5f_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f83;
}


// CMZERO_VEC-CMLE_ZERO_VEC#2
pub const fn classify_impl_5f_7(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f84;
}


// ARITH1_VEC-NEG_VEC#2
pub const fn classify_impl_5f_8(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3085;
}


// FCMP_ZERO_VEC-FCMGE_ZERO_VEC#0
pub const fn classify_impl_5f_9(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3b03;
}


// FCMP_ZERO_VEC-FCMLE_ZERO_VEC#0
pub const fn classify_impl_5f_a(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3b04;
}


// FARITH1_VEC-FNEG_VEC#0
pub const fn classify_impl_5f_b(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3b81;
}


// XTN_VEC-SQXTUN_VEC#2
pub const fn classify_impl_5f_c(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3382;
}


// SHLL_VEC_ESZ-SHLL_VEC_ESZ#2
pub const fn classify_impl_5f_d(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4c00;
}


// XTN_VEC-UQXTN_VEC#2
pub const fn classify_impl_5f_e(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3383;
}


// FRINT_VEC-FRINTI_VEC#0
pub const fn classify_impl_5f_f(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5206;
}


// FCVT_VEC-FCVTPU_VEC#0
pub const fn classify_impl_5f_10(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f08;
}


// FCVT_VEC-FCVTZU_VEC#0
pub const fn classify_impl_5f_11(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f09;
}


// FRECP_VEC-URSQRTE_VEC#0
pub const fn classify_impl_5f_12(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3d82;
}


// FRECP_VEC-FRSQRTE_VEC#0
pub const fn classify_impl_5f_13(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3d83;
}


// FARITH1_VEC-FSQRT_VEC#0
pub const fn classify_impl_5f_14(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3b82;
}

// HADDSUB_VEC-UHADD#2,HADDSUB_VEC-URHADD#2,HADDSUB_VEC-UHSUB#2,QADDSUB_VEC-UQADD#2,QADDSUB_VEC-UQSUB#2,CMGT_VEC-CMHIV#2,CMGT_VEC-CMHSV#2,CMEQ_VEC-CMEQV#2,CMZERO_VEC-CMGE_ZERO_VEC#2,CMZERO_VEC-CMLE_ZERO_VEC#2,ARITH1_VEC-USQADD_VEC#2,ARITH1_VEC-SQNEG_VEC#2,ARITH1_VEC-NEG_VEC#2,ADDLP_VEC-UADDLP#2,ADDLP_VEC-UADALP#2,CLZ_VEC-CLZ_VEC#2,XTN_VEC-SQXTUN_VEC#2,XTN_VEC-UQXTN_VEC#2,SHL_REG_VEC-USHL#2,SHL_REG_VEC-UQSHL#2,SHL_REG_VEC-URSHL#2,SHL_REG_VEC-UQRSHL#2,MINMAX_VEC-UMAX#2,MINMAX_VEC-UMIN#2,MINMAX_VEC-UMAXP#2,MINMAX_VEC-UMINP#2,ABD_VEC-UABD#2,ABD_VEC-UABA#2,ADDSUB_VEC-SUB_VEC#2,MUL_VEC-MLS_VEC#2,SQDMULH_VEC-SQRDMULH#1,FMINMAX_VEC-FMINNMP_VEC#0,FMINMAX_VEC-FMINP_VEC#0,FCMP_REG_VEC-FCMGT_VEC#0,FCMP_REG_VEC-FACGT_VEC#0,FCMP_ZERO_VEC-FCMGE_ZERO_VEC#0,FCMP_ZERO_VEC-FCMLE_ZERO_VEC#0,FARITH1_VEC-FNEG_VEC#0,FARITH1_VEC-FSQRT_VEC#0,FADDSUB_VEC-FABD_VEC#0,FRECP_VEC-URSQRTE_VEC#0,FRECP_VEC-FRSQRTE_VEC#0,ANDOREOR_VEC-BITV#0,ADDSUBL_VEC-UADDL#2,ADDSUBL_VEC-USUBL#2,ADDSUBW_VEC-UADDW#2,ADDSUBW_VEC-USUBW#2,ADDSUBHN_VEC-RADDHN#2,ADDSUBHN_VEC-RSUBHN#2,ABDL_VEC-UABAL#2,ABDL_VEC-UABDL#2,MULL_VEC-UMLAL#2,MULL_VEC-UMLSL#2,MULL_VEC-UMULL#2,SHLL_VEC_ESZ-SHLL_VEC_ESZ#2,FCVT_VEC-FCVTPU_VEC#0,FCVT_VEC-FCVTZU_VEC#0,FRINT_VEC-FRINTI_VEC#0,FHM_VEC-FMLSL2_VEC#0
pub const fn classify_impl_5f(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x4382,
    0x1 => 0x2b83,
    0x2 => 0x0,
    0x3 => 0x2c82,
    0x4 => 0x4402,
    0x5 => 0x2b84,
    0x6 => 0x0,
    0x7 => 0x4306,
    0x8 => 0x4383,
    0x9 => 0x2b85,
    0xa => 0x1,
    0xb => 0x2c83,
    0xc => 0x4403,
    0xd => 0x2d82,
    0xe => 0x2,
    0xf => 0x2d83,
    0x10 => 0x4482,
    0x11 => 0x3484,
    0x12 => 0x3,
    0x13 => 0x3485,
    0x14 => 0x4502,
    0x15 => 0x3486,
    0x16 => 0x0,
    0x17 => 0x3487,
    0x18 => 0x4483,
    0x19 => 0x3504,
    0x1a => 0x4,
    0x1b => 0x3505,
    0x1c => 0x4503,
    0x1d => 0x3582,
    0x1e => 0x5,
    0x1f => 0x3583,
    0x20 => 0x4583,
    0x21 => 0x3681,
    0x22 => 0x6,
    0x23 => 0x2e81,
    0x24 => 0x0,
    0x25 => 0x3782,
    0x26 => 0x7,
    0x27 => 0x0,
    0x28 => 0x4584,
    0x29 => 0x3506,
    0x2a => 0x0,
    0x2b => 0x3507,
    0x2c => 0x0,
    0x2d => 0x3881,
    0x2e => 0x8,
    0x2f => 0x0,
    0x30 => 0x4585,
    0x31 => 0x3906,
    0x32 => 0x9,
    0x33 => 0x5b03,
    0x34 => 0x0,
    0x35 => 0x3c83,
    0x36 => 0xa,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x3a83,
    0x3a => 0x0,
    0x3b => 0x3a84,
    0x3c => 0x0,
    0x3d => 0x3907,
    0x3e => 0xb,
    0x3f => 0x0,
    0x40 => 0x4382,
    0x41 => 0x2b83,
    0x42 => 0x0,
    0x43 => 0x2c82,
    0x44 => 0x4402,
    0x45 => 0x2b84,
    0x46 => 0x0,
    0x47 => 0x4306,
    0x48 => 0x4383,
    0x49 => 0x2b85,
    0x4a => 0xc,
    0x4b => 0x2c83,
    0x4c => 0x4403,
    0x4d => 0x2d82,
    0x4e => 0xd,
    0x4f => 0x2d83,
    0x50 => 0x4482,
    0x51 => 0x3484,
    0x52 => 0xe,
    0x53 => 0x3485,
    0x54 => 0x4502,
    0x55 => 0x3486,
    0x56 => 0x0,
    0x57 => 0x3487,
    0x58 => 0x4483,
    0x59 => 0x3504,
    0x5a => 0x0,
    0x5b => 0x3505,
    0x5c => 0x4503,
    0x5d => 0x3582,
    0x5e => 0x0,
    0x5f => 0x3583,
    0x60 => 0x4583,
    0x61 => 0x3681,
    0x62 => 0x0,
    0x63 => 0x2e81,
    0x64 => 0x0,
    0x65 => 0x3782,
    0x66 => 0xf,
    0x67 => 0x0,
    0x68 => 0x4584,
    0x69 => 0x3506,
    0x6a => 0x10,
    0x6b => 0x3507,
    0x6c => 0x0,
    0x6d => 0x3881,
    0x6e => 0x11,
    0x6f => 0x0,
    0x70 => 0x4585,
    0x71 => 0x3906,
    0x72 => 0x12,
    0x73 => 0x5b03,
    0x74 => 0x0,
    0x75 => 0x3c83,
    0x76 => 0x13,
    0x77 => 0x0,
    0x78 => 0x0,
    0x79 => 0x3a83,
    0x7a => 0x0,
    0x7b => 0x3a84,
    0x7c => 0x0,
    0x7d => 0x3907,
    0x7e => 0x14,
    0x7f => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_5f_1(inst), // ADDLP_VEC-UADDLP#2
    0x2 => return classify_impl_5f_2(inst), // ARITH1_VEC-USQADD_VEC#2
    0x3 => return classify_impl_5f_3(inst), // CLZ_VEC-CLZ_VEC#2
    0x4 => return classify_impl_5f_4(inst), // ADDLP_VEC-UADALP#2
    0x5 => return classify_impl_5f_5(inst), // ARITH1_VEC-SQNEG_VEC#2
    0x6 => return classify_impl_5f_6(inst), // CMZERO_VEC-CMGE_ZERO_VEC#2
    0x7 => return classify_impl_5f_7(inst), // CMZERO_VEC-CMLE_ZERO_VEC#2
    0x8 => return classify_impl_5f_8(inst), // ARITH1_VEC-NEG_VEC#2
    0x9 => return classify_impl_5f_9(inst), // FCMP_ZERO_VEC-FCMGE_ZERO_VEC#0
    0xa => return classify_impl_5f_a(inst), // FCMP_ZERO_VEC-FCMLE_ZERO_VEC#0
    0xb => return classify_impl_5f_b(inst), // FARITH1_VEC-FNEG_VEC#0
    0xc => return classify_impl_5f_c(inst), // XTN_VEC-SQXTUN_VEC#2
    0xd => return classify_impl_5f_d(inst), // SHLL_VEC_ESZ-SHLL_VEC_ESZ#2
    0xe => return classify_impl_5f_e(inst), // XTN_VEC-UQXTN_VEC#2
    0xf => return classify_impl_5f_f(inst), // FRINT_VEC-FRINTI_VEC#0
    0x10 => return classify_impl_5f_10(inst), // FCVT_VEC-FCVTPU_VEC#0
    0x11 => return classify_impl_5f_11(inst), // FCVT_VEC-FCVTZU_VEC#0
    0x12 => return classify_impl_5f_12(inst), // FRECP_VEC-URSQRTE_VEC#0
    0x13 => return classify_impl_5f_13(inst), // FRECP_VEC-FRSQRTE_VEC#0
    0x14 => return classify_impl_5f_14(inst), // FARITH1_VEC-FSQRT_VEC#0
    _ => idx
  };
  return idx;
}


// HADDSUB_VEC-UHADD#2,HADDSUB_VEC-URHADD#2,HADDSUB_VEC-UHSUB#2,QADDSUB_VEC-UQADD#2,QADDSUB_VEC-UQSUB#2,CMGT_VEC-CMHIV#2,CMGT_VEC-CMHSV#2,CMEQ_VEC-CMEQV#2,SHL_REG_VEC-USHL#2,SHL_REG_VEC-UQSHL#2,SHL_REG_VEC-URSHL#2,SHL_REG_VEC-UQRSHL#2,MINMAX_VEC-UMAX#2,MINMAX_VEC-UMIN#2,MINMAX_VEC-UMAXP#2,MINMAX_VEC-UMINP#2,ABD_VEC-UABD#2,ABD_VEC-UABA#2,ADDSUB_VEC-SUB_VEC#2,MUL_VEC-MLS_VEC#2,SQDMULH_VEC-SQRDMULH#1,FMINMAX_VEC-FMINNMP_VEC#0,FMINMAX_VEC-FMINP_VEC#0,FCMP_REG_VEC-FCMGT_VEC#0,FCMP_REG_VEC-FACGT_VEC#0,FADDSUB_VEC-FABD_VEC#0,ANDOREOR_VEC-BITV#0,ADDSUBL_VEC-UADDL#2,ADDSUBL_VEC-USUBL#2,ADDSUBW_VEC-UADDW#2,ADDSUBW_VEC-USUBW#2,ADDSUBHN_VEC-RADDHN#2,ADDSUBHN_VEC-RSUBHN#2,ABDL_VEC-UABAL#2,ABDL_VEC-UABDL#2,MULL_VEC-UMLAL#2,MULL_VEC-UMLSL#2,MULL_VEC-UMULL#2,FHM_VEC-FMLSL2_VEC#0
pub const fn classify_impl_60(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x4382,
    0x1 => 0x2b83,
    0x2 => 0x0,
    0x3 => 0x2c82,
    0x4 => 0x4402,
    0x5 => 0x2b84,
    0x6 => 0x0,
    0x7 => 0x4306,
    0x8 => 0x4383,
    0x9 => 0x2b85,
    0xa => 0x0,
    0xb => 0x2c83,
    0xc => 0x4403,
    0xd => 0x2d82,
    0xe => 0x0,
    0xf => 0x2d83,
    0x10 => 0x4482,
    0x11 => 0x3484,
    0x12 => 0x0,
    0x13 => 0x3485,
    0x14 => 0x4502,
    0x15 => 0x3486,
    0x16 => 0x0,
    0x17 => 0x3487,
    0x18 => 0x4483,
    0x19 => 0x3504,
    0x1a => 0x0,
    0x1b => 0x3505,
    0x1c => 0x4503,
    0x1d => 0x3582,
    0x1e => 0x0,
    0x1f => 0x3583,
    0x20 => 0x4583,
    0x21 => 0x3681,
    0x22 => 0x0,
    0x23 => 0x2e81,
    0x24 => 0x0,
    0x25 => 0x3782,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x4584,
    0x29 => 0x3506,
    0x2a => 0x0,
    0x2b => 0x3507,
    0x2c => 0x0,
    0x2d => 0x3881,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x4585,
    0x31 => 0x3906,
    0x32 => 0x0,
    0x33 => 0x5b03,
    0x34 => 0x0,
    0x35 => 0x3c83,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x3a83,
    0x3a => 0x0,
    0x3b => 0x3a84,
    0x3c => 0x0,
    0x3d => 0x3907,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// FP16_3REG_VEC-FMINNMP_VEC_FP16#0,FP16_3REG_VEC-FABD_VEC_FP16#0,FP16_3REG_VEC-FCMGT_VEC_FP16#0,FP16_3REG_VEC-FACGT_VEC_FP16#0,FP16_3REG_VEC-FMINP_VEC_FP16#0,FMLAL_VEC-BFMLALB_VEC#0
pub const fn classify_impl_61(inst: u32) -> u32 {
  if (inst&0x400) != 0x400 { return 0; }
  let idx = match (inst >> 11) & 0x1f {
    0x0 => 0x4194,
    0x1 => 0x0,
    0x2 => 0x4195,
    0x3 => 0x0,
    0x4 => 0x4197,
    0x5 => 0x4198,
    0x6 => 0x4199,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x0,
    0x1f => 0x5a01,
    _ => 0,
  };
  return idx;
}


// ANDOREOR_VEC-BIFV#0
pub const fn classify_impl_62(inst: u32) -> u32 {
  if (inst&0xfc00) != 0x1c00 { return 0; }
  return 0x4307;
}


// ANDOREOR_VEC-BIFV#0
pub const fn classify_impl_63_1(inst: u32) -> u32 {
  if (inst&0x400) != 0x400 { return 0; }
  return 0x4307;
}


// FP16_2REG_VEC-FCMGE_ZERO_VEC_FP16#0
pub const fn classify_impl_63_2(inst: u32) -> u32 {
  if (inst&0xe0400) != 0x80000 { return 0; }
  return 0x4295;
}


// FP16_2REG_VEC-FCMLE_ZERO_VEC_FP16#0
pub const fn classify_impl_63_3(inst: u32) -> u32 {
  if (inst&0xe0400) != 0x80000 { return 0; }
  return 0x4296;
}


// FP16_2REG_VEC-FNEG_VEC_FP16#0
pub const fn classify_impl_63_4(inst: u32) -> u32 {
  if (inst&0xe0400) != 0x80000 { return 0; }
  return 0x4297;
}


// FP16_2REG_VEC-FRINTI_VEC_FP16#0
pub const fn classify_impl_63_5(inst: u32) -> u32 {
  if (inst&0xe0400) != 0x80000 { return 0; }
  return 0x4298;
}


// FP16_2REG_VEC-FCVTPU_VEC_FP16#0
pub const fn classify_impl_63_6(inst: u32) -> u32 {
  if (inst&0xe0400) != 0x80000 { return 0; }
  return 0x4299;
}


// FP16_2REG_VEC-FCVTZU_VEC_FP16#0
pub const fn classify_impl_63_7(inst: u32) -> u32 {
  if (inst&0xe0400) != 0x80000 { return 0; }
  return 0x429a;
}


// FP16_2REG_VEC-FRSQRTE_VEC_FP16#0
pub const fn classify_impl_63_8(inst: u32) -> u32 {
  if (inst&0xe0400) != 0x80000 { return 0; }
  return 0x429b;
}


// FP16_2REG_VEC-FSQRT_VEC_FP16#0
pub const fn classify_impl_63_9(inst: u32) -> u32 {
  if (inst&0xe0400) != 0x80000 { return 0; }
  return 0x429c;
}

// FP16_2REG_VEC-FCMGE_ZERO_VEC_FP16#0,FP16_2REG_VEC-FCMLE_ZERO_VEC_FP16#0,FP16_2REG_VEC-FNEG_VEC_FP16#0,FP16_2REG_VEC-FRINTI_VEC_FP16#0,FP16_2REG_VEC-FCVTPU_VEC_FP16#0,FP16_2REG_VEC-FCVTZU_VEC_FP16#0,FP16_2REG_VEC-FRSQRTE_VEC_FP16#0,FP16_2REG_VEC-FSQRT_VEC_FP16#0,ANDOREOR_VEC-BIFV#0
pub const fn classify_impl_63(inst: u32) -> u32 {
  if (inst&0x800) != 0x800 { return 0; }
  let idx = match (inst >> 12) & 0x1f {
    0x0 => 0x0,
    0x1 => 0x1,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x2,
    0xd => 0x3,
    0xe => 0x0,
    0xf => 0x4,
    0x10 => 0x0,
    0x11 => 0x1,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x5,
    0x1a => 0x6,
    0x1b => 0x7,
    0x1c => 0x0,
    0x1d => 0x8,
    0x1e => 0x0,
    0x1f => 0x9,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_63_1(inst), // ANDOREOR_VEC-BIFV#0
    0x2 => return classify_impl_63_2(inst), // FP16_2REG_VEC-FCMGE_ZERO_VEC_FP16#0
    0x3 => return classify_impl_63_3(inst), // FP16_2REG_VEC-FCMLE_ZERO_VEC_FP16#0
    0x4 => return classify_impl_63_4(inst), // FP16_2REG_VEC-FNEG_VEC_FP16#0
    0x5 => return classify_impl_63_5(inst), // FP16_2REG_VEC-FRINTI_VEC_FP16#0
    0x6 => return classify_impl_63_6(inst), // FP16_2REG_VEC-FCVTPU_VEC_FP16#0
    0x7 => return classify_impl_63_7(inst), // FP16_2REG_VEC-FCVTZU_VEC_FP16#0
    0x8 => return classify_impl_63_8(inst), // FP16_2REG_VEC-FRSQRTE_VEC_FP16#0
    0x9 => return classify_impl_63_9(inst), // FP16_2REG_VEC-FSQRT_VEC_FP16#0
    _ => idx
  };
  return idx;
}


// SIMD_IMM-MVNI32#0
pub const fn classify_impl_64_1_1(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d08;
}


// SIMD_IMM-BICI32#0
pub const fn classify_impl_64_1_2(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d09;
}


// SIMD_IMM-MVNI32#1
pub const fn classify_impl_64_1_3(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d08;
}


// SIMD_IMM-BICI32#1
pub const fn classify_impl_64_1_4(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d09;
}


// SIMD_IMM-MVNI32#2
pub const fn classify_impl_64_1_5(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d08;
}


// SIMD_IMM-BICI32#2
pub const fn classify_impl_64_1_6(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d09;
}


// SIMD_IMM-MVNI32#3
pub const fn classify_impl_64_1_7(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d08;
}


// SIMD_IMM-BICI32#3
pub const fn classify_impl_64_1_8(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d09;
}


// SIMD_IMM-MVNI16#0
pub const fn classify_impl_64_1_9(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d0a;
}


// SIMD_IMM-BICI16#0
pub const fn classify_impl_64_1_a_1(inst: u32) -> u32 {
  if (inst&0x800) != 0x0 { return 0; }
  return 0x5d0b;
}

// FMUL_ELEM_FP16-FMULX_ELEM_FP16#0,SIMD_IMM-BICI16#0
pub const fn classify_impl_64_1_a(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x5883,
    0x1 => 0x1,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_64_1_a_1(inst), // SIMD_IMM-BICI16#0
    _ => idx
  };
  return idx;
}


// SIMD_IMM-MVNI16#1
pub const fn classify_impl_64_1_b(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d0a;
}


// SIMD_IMM-BICI16#1
pub const fn classify_impl_64_1_c(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d0b;
}


// SIMD_IMM-MVNI32_MSL#0
pub const fn classify_impl_64_1_d(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d0c;
}


// SIMD_IMM-MVNI32_MSL#1
pub const fn classify_impl_64_1_e(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d0c;
}


// SIMD_IMM-MOVI64#0
pub const fn classify_impl_64_1_f(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d0d;
}

// FMUL_ELEM_FP16-FMULX_ELEM_FP16#0,SIMD_IMM-MVNI32#0,SIMD_IMM-MVNI32#1,SIMD_IMM-MVNI32#2,SIMD_IMM-MVNI32#3,SIMD_IMM-BICI32#0,SIMD_IMM-BICI32#1,SIMD_IMM-BICI32#2,SIMD_IMM-BICI32#3,SIMD_IMM-MVNI16#0,SIMD_IMM-MVNI16#1,SIMD_IMM-BICI16#0,SIMD_IMM-BICI16#1,SIMD_IMM-MVNI32_MSL#0,SIMD_IMM-MVNI32_MSL#1,SIMD_IMM-MOVI64#0
pub const fn classify_impl_64_1(inst: u32) -> u32 {
  let idx = match (inst >> 12) & 0xf {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x8,
    0x8 => 0x9,
    0x9 => 0xa,
    0xa => 0xb,
    0xb => 0xc,
    0xc => 0xd,
    0xd => 0xe,
    0xe => 0xf,
    0xf => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_64_1_1(inst), // SIMD_IMM-MVNI32#0
    0x2 => return classify_impl_64_1_2(inst), // SIMD_IMM-BICI32#0
    0x3 => return classify_impl_64_1_3(inst), // SIMD_IMM-MVNI32#1
    0x4 => return classify_impl_64_1_4(inst), // SIMD_IMM-BICI32#1
    0x5 => return classify_impl_64_1_5(inst), // SIMD_IMM-MVNI32#2
    0x6 => return classify_impl_64_1_6(inst), // SIMD_IMM-BICI32#2
    0x7 => return classify_impl_64_1_7(inst), // SIMD_IMM-MVNI32#3
    0x8 => return classify_impl_64_1_8(inst), // SIMD_IMM-BICI32#3
    0x9 => return classify_impl_64_1_9(inst), // SIMD_IMM-MVNI16#0
    0xa => return classify_impl_64_1_a(inst), // FMUL_ELEM_FP16-FMULX_ELEM_FP16#0,SIMD_IMM-BICI16#0
    0xb => return classify_impl_64_1_b(inst), // SIMD_IMM-MVNI16#1
    0xc => return classify_impl_64_1_c(inst), // SIMD_IMM-BICI16#1
    0xd => return classify_impl_64_1_d(inst), // SIMD_IMM-MVNI32_MSL#0
    0xe => return classify_impl_64_1_e(inst), // SIMD_IMM-MVNI32_MSL#1
    0xf => return classify_impl_64_1_f(inst), // SIMD_IMM-MOVI64#0
    _ => idx
  };
  return idx;
}


// SHR_VEC_IMM-USHR#0,SHR_VEC_IMM-USRA#0,SHR_VEC_IMM-URSHR#0,SHR_VEC_IMM-URSRA#0,QSHL_VEC_IMM-SQSHLU_IMM#0,QSHL_VEC_IMM-UQSHL_IMM#0,SHRN_VEC_IMM-SQSHRUN#0,SHRN_VEC_IMM-SQRSHRUN#0,SHRN_VEC_IMM-UQSHRN#0,SHRN_VEC_IMM-UQRSHRN#0,SHLL_VEC_IMM-USHLL#0,SHIFT_VEC_IMM-SRI#0,SHIFT_VEC_IMM-SLI#0,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
pub const fn classify_impl_64_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4904,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4905,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4906,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4907,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x4d01,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4d02,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4a01,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a02,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b04,
    0x22 => 0x0,
    0x23 => 0x4b05,
    0x24 => 0x5883,
    0x25 => 0x4b06,
    0x26 => 0x5883,
    0x27 => 0x4b07,
    0x28 => 0x0,
    0x29 => 0x4b81,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}

// SHR_VEC_IMM-USHR#0,SHR_VEC_IMM-USRA#0,SHR_VEC_IMM-URSHR#0,SHR_VEC_IMM-URSRA#0,QSHL_VEC_IMM-SQSHLU_IMM#0,QSHL_VEC_IMM-UQSHL_IMM#0,SHRN_VEC_IMM-SQSHRUN#0,SHRN_VEC_IMM-SQRSHRUN#0,SHRN_VEC_IMM-UQSHRN#0,SHRN_VEC_IMM-UQRSHRN#0,SHLL_VEC_IMM-USHLL#0,SHIFT_VEC_IMM-SRI#0,SHIFT_VEC_IMM-SLI#0,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0,SIMD_IMM-MVNI32#0,SIMD_IMM-MVNI32#1,SIMD_IMM-MVNI32#2,SIMD_IMM-MVNI32#3,SIMD_IMM-BICI32#0,SIMD_IMM-BICI32#1,SIMD_IMM-BICI32#2,SIMD_IMM-BICI32#3,SIMD_IMM-MVNI16#0,SIMD_IMM-MVNI16#1,SIMD_IMM-BICI16#0,SIMD_IMM-BICI16#1,SIMD_IMM-MVNI32_MSL#0,SIMD_IMM-MVNI32_MSL#1,SIMD_IMM-MOVI64#0
pub const fn classify_impl_64(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_64_1(inst), // FMUL_ELEM_FP16-FMULX_ELEM_FP16#0,SIMD_IMM-MVNI32#0,SIMD_IMM-MVNI32#1,SIMD_IMM-MVNI32#2,SIMD_IMM-MVNI32#3,SIMD_IMM-BICI32#0,SIMD_IMM-BICI32#1,SIMD_IMM-BICI32#2,SIMD_IMM-BICI32#3,SIMD_IMM-MVNI16#0,SIMD_IMM-MVNI16#1,SIMD_IMM-BICI16#0,SIMD_IMM-BICI16#1,SIMD_IMM-MVNI32_MSL#0,SIMD_IMM-MVNI32_MSL#1,SIMD_IMM-MOVI64#0
    0x2 => return classify_impl_64_2(inst), // SHR_VEC_IMM-USHR#0,SHR_VEC_IMM-USRA#0,SHR_VEC_IMM-URSHR#0,SHR_VEC_IMM-URSRA#0,QSHL_VEC_IMM-SQSHLU_IMM#0,QSHL_VEC_IMM-UQSHL_IMM#0,SHRN_VEC_IMM-SQSHRUN#0,SHRN_VEC_IMM-SQRSHRUN#0,SHRN_VEC_IMM-UQSHRN#0,SHRN_VEC_IMM-UQRSHRN#0,SHLL_VEC_IMM-USHLL#0,SHIFT_VEC_IMM-SRI#0,SHIFT_VEC_IMM-SLI#0,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
    _ => idx
  };
  return idx;
}


// SHR_VEC_IMM-USHR#1,SHR_VEC_IMM-USRA#1,SHR_VEC_IMM-URSHR#1,SHR_VEC_IMM-URSRA#1,QSHL_VEC_IMM-SQSHLU_IMM#1,QSHL_VEC_IMM-UQSHL_IMM#1,SHRN_VEC_IMM-SQSHRUN#1,SHRN_VEC_IMM-SQRSHRUN#1,SHRN_VEC_IMM-UQSHRN#1,SHRN_VEC_IMM-UQRSHRN#1,SHLL_VEC_IMM-USHLL#1,SHIFT_VEC_IMM-SRI#1,SHIFT_VEC_IMM-SLI#1,FCVT_VEC_FIXED-UCVTF_VEC_FIX_FP16#0,FCVT_VEC_FIXED-FCVTZU_VEC_FIX_FP16#0,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
pub const fn classify_impl_65_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4904,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4905,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4906,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4907,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x4d01,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4d02,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4a01,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a02,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b04,
    0x22 => 0x0,
    0x23 => 0x4b05,
    0x24 => 0x5883,
    0x25 => 0x4b06,
    0x26 => 0x5883,
    0x27 => 0x4b07,
    0x28 => 0x0,
    0x29 => 0x4b81,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e04,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4e05,
    _ => 0,
  };
  return idx;
}


// SHR_VEC_IMM-USHR#2,SHR_VEC_IMM-USRA#2,SHR_VEC_IMM-URSHR#2,SHR_VEC_IMM-URSRA#2,QSHL_VEC_IMM-SQSHLU_IMM#2,QSHL_VEC_IMM-UQSHL_IMM#2,SHRN_VEC_IMM-SQSHRUN#2,SHRN_VEC_IMM-SQRSHRUN#2,SHRN_VEC_IMM-UQSHRN#2,SHRN_VEC_IMM-UQRSHRN#2,SHLL_VEC_IMM-USHLL#2,SHIFT_VEC_IMM-SRI#2,SHIFT_VEC_IMM-SLI#2,FCVT_VEC_FIXED-UCVTF_VEC_FIX_FP16#1,FCVT_VEC_FIXED-FCVTZU_VEC_FIX_FP16#1,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
pub const fn classify_impl_65_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4904,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4905,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4906,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4907,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x4d01,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4d02,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4a01,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a02,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b04,
    0x22 => 0x0,
    0x23 => 0x4b05,
    0x24 => 0x5883,
    0x25 => 0x4b06,
    0x26 => 0x5883,
    0x27 => 0x4b07,
    0x28 => 0x0,
    0x29 => 0x4b81,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e04,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4e05,
    _ => 0,
  };
  return idx;
}

// SHR_VEC_IMM-USHR#1,SHR_VEC_IMM-USHR#2,SHR_VEC_IMM-USRA#1,SHR_VEC_IMM-USRA#2,SHR_VEC_IMM-URSHR#1,SHR_VEC_IMM-URSHR#2,SHR_VEC_IMM-URSRA#1,SHR_VEC_IMM-URSRA#2,QSHL_VEC_IMM-SQSHLU_IMM#1,QSHL_VEC_IMM-SQSHLU_IMM#2,QSHL_VEC_IMM-UQSHL_IMM#1,QSHL_VEC_IMM-UQSHL_IMM#2,SHRN_VEC_IMM-SQSHRUN#1,SHRN_VEC_IMM-SQSHRUN#2,SHRN_VEC_IMM-SQRSHRUN#1,SHRN_VEC_IMM-SQRSHRUN#2,SHRN_VEC_IMM-UQSHRN#1,SHRN_VEC_IMM-UQSHRN#2,SHRN_VEC_IMM-UQRSHRN#1,SHRN_VEC_IMM-UQRSHRN#2,SHLL_VEC_IMM-USHLL#1,SHLL_VEC_IMM-USHLL#2,SHIFT_VEC_IMM-SRI#1,SHIFT_VEC_IMM-SRI#2,SHIFT_VEC_IMM-SLI#1,SHIFT_VEC_IMM-SLI#2,FCVT_VEC_FIXED-UCVTF_VEC_FIX_FP16#0,FCVT_VEC_FIXED-UCVTF_VEC_FIX_FP16#1,FCVT_VEC_FIXED-FCVTZU_VEC_FIX_FP16#0,FCVT_VEC_FIXED-FCVTZU_VEC_FIX_FP16#1,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
pub const fn classify_impl_65(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_65_1(inst), // SHR_VEC_IMM-USHR#1,SHR_VEC_IMM-USRA#1,SHR_VEC_IMM-URSHR#1,SHR_VEC_IMM-URSRA#1,QSHL_VEC_IMM-SQSHLU_IMM#1,QSHL_VEC_IMM-UQSHL_IMM#1,SHRN_VEC_IMM-SQSHRUN#1,SHRN_VEC_IMM-SQRSHRUN#1,SHRN_VEC_IMM-UQSHRN#1,SHRN_VEC_IMM-UQRSHRN#1,SHLL_VEC_IMM-USHLL#1,SHIFT_VEC_IMM-SRI#1,SHIFT_VEC_IMM-SLI#1,FCVT_VEC_FIXED-UCVTF_VEC_FIX_FP16#0,FCVT_VEC_FIXED-FCVTZU_VEC_FIX_FP16#0,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
    0x2 => return classify_impl_65_2(inst), // SHR_VEC_IMM-USHR#2,SHR_VEC_IMM-USRA#2,SHR_VEC_IMM-URSHR#2,SHR_VEC_IMM-URSRA#2,QSHL_VEC_IMM-SQSHLU_IMM#2,QSHL_VEC_IMM-UQSHL_IMM#2,SHRN_VEC_IMM-SQSHRUN#2,SHRN_VEC_IMM-SQRSHRUN#2,SHRN_VEC_IMM-UQSHRN#2,SHRN_VEC_IMM-UQRSHRN#2,SHLL_VEC_IMM-USHLL#2,SHIFT_VEC_IMM-SRI#2,SHIFT_VEC_IMM-SLI#2,FCVT_VEC_FIXED-UCVTF_VEC_FIX_FP16#1,FCVT_VEC_FIXED-FCVTZU_VEC_FIX_FP16#1,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
    _ => idx
  };
  return idx;
}


// SHR_VEC_IMM-USHR#3,SHR_VEC_IMM-USRA#3,SHR_VEC_IMM-URSHR#3,SHR_VEC_IMM-URSRA#3,QSHL_VEC_IMM-SQSHLU_IMM#3,QSHL_VEC_IMM-UQSHL_IMM#3,SHRN_VEC_IMM-SQSHRUN#3,SHRN_VEC_IMM-SQRSHRUN#3,SHRN_VEC_IMM-UQSHRN#3,SHRN_VEC_IMM-UQRSHRN#3,SHLL_VEC_IMM-USHLL#3,SHIFT_VEC_IMM-SRI#3,SHIFT_VEC_IMM-SLI#3,FCVT_VEC_FIXED-UCVTF_VEC_FIX#0,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#0,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
pub const fn classify_impl_66_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4904,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4905,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4906,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4907,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x4d01,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4d02,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4a01,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a02,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b04,
    0x22 => 0x0,
    0x23 => 0x4b05,
    0x24 => 0x5883,
    0x25 => 0x4b06,
    0x26 => 0x5883,
    0x27 => 0x4b07,
    0x28 => 0x0,
    0x29 => 0x4b81,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e06,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4e07,
    _ => 0,
  };
  return idx;
}


// SHR_VEC_IMM-USHR#4,SHR_VEC_IMM-USRA#4,SHR_VEC_IMM-URSHR#4,SHR_VEC_IMM-URSRA#4,QSHL_VEC_IMM-SQSHLU_IMM#4,QSHL_VEC_IMM-UQSHL_IMM#4,SHRN_VEC_IMM-SQSHRUN#4,SHRN_VEC_IMM-SQRSHRUN#4,SHRN_VEC_IMM-UQSHRN#4,SHRN_VEC_IMM-UQRSHRN#4,SHLL_VEC_IMM-USHLL#4,SHIFT_VEC_IMM-SRI#4,SHIFT_VEC_IMM-SLI#4,FCVT_VEC_FIXED-UCVTF_VEC_FIX#1,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#1,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
pub const fn classify_impl_66_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4904,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4905,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4906,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4907,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x4d01,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4d02,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4a01,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a02,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b04,
    0x22 => 0x0,
    0x23 => 0x4b05,
    0x24 => 0x5883,
    0x25 => 0x4b06,
    0x26 => 0x5883,
    0x27 => 0x4b07,
    0x28 => 0x0,
    0x29 => 0x4b81,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e06,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4e07,
    _ => 0,
  };
  return idx;
}

// SHR_VEC_IMM-USHR#3,SHR_VEC_IMM-USHR#4,SHR_VEC_IMM-USRA#3,SHR_VEC_IMM-USRA#4,SHR_VEC_IMM-URSHR#3,SHR_VEC_IMM-URSHR#4,SHR_VEC_IMM-URSRA#3,SHR_VEC_IMM-URSRA#4,QSHL_VEC_IMM-SQSHLU_IMM#3,QSHL_VEC_IMM-SQSHLU_IMM#4,QSHL_VEC_IMM-UQSHL_IMM#3,QSHL_VEC_IMM-UQSHL_IMM#4,SHRN_VEC_IMM-SQSHRUN#3,SHRN_VEC_IMM-SQSHRUN#4,SHRN_VEC_IMM-SQRSHRUN#3,SHRN_VEC_IMM-SQRSHRUN#4,SHRN_VEC_IMM-UQSHRN#3,SHRN_VEC_IMM-UQSHRN#4,SHRN_VEC_IMM-UQRSHRN#3,SHRN_VEC_IMM-UQRSHRN#4,SHLL_VEC_IMM-USHLL#3,SHLL_VEC_IMM-USHLL#4,SHIFT_VEC_IMM-SRI#3,SHIFT_VEC_IMM-SRI#4,SHIFT_VEC_IMM-SLI#3,SHIFT_VEC_IMM-SLI#4,FCVT_VEC_FIXED-UCVTF_VEC_FIX#0,FCVT_VEC_FIXED-UCVTF_VEC_FIX#1,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#0,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#1,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
pub const fn classify_impl_66(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_66_1(inst), // SHR_VEC_IMM-USHR#3,SHR_VEC_IMM-USRA#3,SHR_VEC_IMM-URSHR#3,SHR_VEC_IMM-URSRA#3,QSHL_VEC_IMM-SQSHLU_IMM#3,QSHL_VEC_IMM-UQSHL_IMM#3,SHRN_VEC_IMM-SQSHRUN#3,SHRN_VEC_IMM-SQRSHRUN#3,SHRN_VEC_IMM-UQSHRN#3,SHRN_VEC_IMM-UQRSHRN#3,SHLL_VEC_IMM-USHLL#3,SHIFT_VEC_IMM-SRI#3,SHIFT_VEC_IMM-SLI#3,FCVT_VEC_FIXED-UCVTF_VEC_FIX#0,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#0,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
    0x2 => return classify_impl_66_2(inst), // SHR_VEC_IMM-USHR#4,SHR_VEC_IMM-USRA#4,SHR_VEC_IMM-URSHR#4,SHR_VEC_IMM-URSRA#4,QSHL_VEC_IMM-SQSHLU_IMM#4,QSHL_VEC_IMM-UQSHL_IMM#4,SHRN_VEC_IMM-SQSHRUN#4,SHRN_VEC_IMM-SQRSHRUN#4,SHRN_VEC_IMM-UQSHRN#4,SHRN_VEC_IMM-UQRSHRN#4,SHLL_VEC_IMM-USHLL#4,SHIFT_VEC_IMM-SRI#4,SHIFT_VEC_IMM-SLI#4,FCVT_VEC_FIXED-UCVTF_VEC_FIX#1,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#1,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
    _ => idx
  };
  return idx;
}


// SHR_VEC_IMM-USHR#5,SHR_VEC_IMM-USRA#5,SHR_VEC_IMM-URSHR#5,SHR_VEC_IMM-URSRA#5,QSHL_VEC_IMM-SQSHLU_IMM#5,QSHL_VEC_IMM-UQSHL_IMM#5,SHRN_VEC_IMM-SQSHRUN#5,SHRN_VEC_IMM-SQRSHRUN#5,SHRN_VEC_IMM-UQSHRN#5,SHRN_VEC_IMM-UQRSHRN#5,SHLL_VEC_IMM-USHLL#5,SHIFT_VEC_IMM-SRI#5,SHIFT_VEC_IMM-SLI#5,FCVT_VEC_FIXED-UCVTF_VEC_FIX#2,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#2,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
pub const fn classify_impl_67_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4904,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4905,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4906,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4907,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x4d01,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4d02,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4a01,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a02,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b04,
    0x22 => 0x0,
    0x23 => 0x4b05,
    0x24 => 0x5883,
    0x25 => 0x4b06,
    0x26 => 0x5883,
    0x27 => 0x4b07,
    0x28 => 0x0,
    0x29 => 0x4b81,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e06,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4e07,
    _ => 0,
  };
  return idx;
}


// SHR_VEC_IMM-USHR#6,SHR_VEC_IMM-USRA#6,SHR_VEC_IMM-URSHR#6,SHR_VEC_IMM-URSRA#6,QSHL_VEC_IMM-SQSHLU_IMM#6,QSHL_VEC_IMM-UQSHL_IMM#6,SHRN_VEC_IMM-SQSHRUN#6,SHRN_VEC_IMM-SQRSHRUN#6,SHRN_VEC_IMM-UQSHRN#6,SHRN_VEC_IMM-UQRSHRN#6,SHLL_VEC_IMM-USHLL#6,SHIFT_VEC_IMM-SRI#6,SHIFT_VEC_IMM-SLI#6,FCVT_VEC_FIXED-UCVTF_VEC_FIX#3,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#3,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
pub const fn classify_impl_67_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4904,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4905,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4906,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4907,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x4d01,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4d02,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4a01,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a02,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b04,
    0x22 => 0x0,
    0x23 => 0x4b05,
    0x24 => 0x5883,
    0x25 => 0x4b06,
    0x26 => 0x5883,
    0x27 => 0x4b07,
    0x28 => 0x0,
    0x29 => 0x4b81,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e06,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4e07,
    _ => 0,
  };
  return idx;
}

// SHR_VEC_IMM-USHR#5,SHR_VEC_IMM-USHR#6,SHR_VEC_IMM-USRA#5,SHR_VEC_IMM-USRA#6,SHR_VEC_IMM-URSHR#5,SHR_VEC_IMM-URSHR#6,SHR_VEC_IMM-URSRA#5,SHR_VEC_IMM-URSRA#6,QSHL_VEC_IMM-SQSHLU_IMM#5,QSHL_VEC_IMM-SQSHLU_IMM#6,QSHL_VEC_IMM-UQSHL_IMM#5,QSHL_VEC_IMM-UQSHL_IMM#6,SHRN_VEC_IMM-SQSHRUN#5,SHRN_VEC_IMM-SQSHRUN#6,SHRN_VEC_IMM-SQRSHRUN#5,SHRN_VEC_IMM-SQRSHRUN#6,SHRN_VEC_IMM-UQSHRN#5,SHRN_VEC_IMM-UQSHRN#6,SHRN_VEC_IMM-UQRSHRN#5,SHRN_VEC_IMM-UQRSHRN#6,SHLL_VEC_IMM-USHLL#5,SHLL_VEC_IMM-USHLL#6,SHIFT_VEC_IMM-SRI#5,SHIFT_VEC_IMM-SRI#6,SHIFT_VEC_IMM-SLI#5,SHIFT_VEC_IMM-SLI#6,FCVT_VEC_FIXED-UCVTF_VEC_FIX#2,FCVT_VEC_FIXED-UCVTF_VEC_FIX#3,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#2,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#3,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
pub const fn classify_impl_67(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_67_1(inst), // SHR_VEC_IMM-USHR#5,SHR_VEC_IMM-USRA#5,SHR_VEC_IMM-URSHR#5,SHR_VEC_IMM-URSRA#5,QSHL_VEC_IMM-SQSHLU_IMM#5,QSHL_VEC_IMM-UQSHL_IMM#5,SHRN_VEC_IMM-SQSHRUN#5,SHRN_VEC_IMM-SQRSHRUN#5,SHRN_VEC_IMM-UQSHRN#5,SHRN_VEC_IMM-UQRSHRN#5,SHLL_VEC_IMM-USHLL#5,SHIFT_VEC_IMM-SRI#5,SHIFT_VEC_IMM-SLI#5,FCVT_VEC_FIXED-UCVTF_VEC_FIX#2,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#2,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
    0x2 => return classify_impl_67_2(inst), // SHR_VEC_IMM-USHR#6,SHR_VEC_IMM-USRA#6,SHR_VEC_IMM-URSHR#6,SHR_VEC_IMM-URSRA#6,QSHL_VEC_IMM-SQSHLU_IMM#6,QSHL_VEC_IMM-UQSHL_IMM#6,SHRN_VEC_IMM-SQSHRUN#6,SHRN_VEC_IMM-SQRSHRUN#6,SHRN_VEC_IMM-UQSHRN#6,SHRN_VEC_IMM-UQRSHRN#6,SHLL_VEC_IMM-USHLL#6,SHIFT_VEC_IMM-SRI#6,SHIFT_VEC_IMM-SLI#6,FCVT_VEC_FIXED-UCVTF_VEC_FIX#3,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#3,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
    _ => idx
  };
  return idx;
}


// FCMLA_ELEM-FCMLA_ELEM#0
pub const fn classify_impl_68_1(inst: u32) -> u32 {
  if (inst&0x800) != 0x0 { return 0; }
  return 0x5c80;
}

// MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL_ELEM#0,MULL_ELEM-UMLSL_ELEM#0,MULL_ELEM-UMULL_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#0
pub const fn classify_impl_68(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 12) & 0xf {
    0x0 => 0x5583,
    0x1 => 0x1,
    0x2 => 0x5686,
    0x3 => 0x1,
    0x4 => 0x5584,
    0x5 => 0x1,
    0x6 => 0x5687,
    0x7 => 0x1,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x5688,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x5585,
    0xe => 0x0,
    0xf => 0x5586,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_68_1(inst), // FCMLA_ELEM-FCMLA_ELEM#0
    _ => idx
  };
  return idx;
}


// FCMLA_ELEM-FCMLA_ELEM#1
pub const fn classify_impl_69_1(inst: u32) -> u32 {
  if (inst&0x800) != 0x0 { return 0; }
  return 0x5c80;
}

// MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL_ELEM#0,MULL_ELEM-UMLSL_ELEM#0,MULL_ELEM-UMULL_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#1
pub const fn classify_impl_69(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 12) & 0xf {
    0x0 => 0x5583,
    0x1 => 0x1,
    0x2 => 0x5686,
    0x3 => 0x1,
    0x4 => 0x5584,
    0x5 => 0x1,
    0x6 => 0x5687,
    0x7 => 0x1,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x5688,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x5585,
    0xe => 0x0,
    0xf => 0x5586,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_69_1(inst), // FCMLA_ELEM-FCMLA_ELEM#1
    _ => idx
  };
  return idx;
}


// MUL_ELEM-MLA_ELEM#1,MUL_ELEM-MLS_ELEM#1,MUL_ELEM-SQRDMLAH_ELEM#1,MUL_ELEM-SQRDMLSH_ELEM#1,MULL_ELEM-UMLAL_ELEM#1,MULL_ELEM-UMLSL_ELEM#1,MULL_ELEM-UMULL_ELEM#1,FMUL_ELEM-FMULX_ELEM#0,DOT_ELEM-UDOT_ELEM#0,FHM_ELEM-FMLAL2_ELEM#0,FHM_ELEM-FMLSL2_ELEM#0
pub const fn classify_impl_6a(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 12) & 0xf {
    0x0 => 0x5583,
    0x1 => 0x0,
    0x2 => 0x5686,
    0x3 => 0x0,
    0x4 => 0x5584,
    0x5 => 0x0,
    0x6 => 0x5687,
    0x7 => 0x0,
    0x8 => 0x5b82,
    0x9 => 0x5803,
    0xa => 0x5688,
    0xb => 0x0,
    0xc => 0x5b83,
    0xd => 0x5585,
    0xe => 0x5984,
    0xf => 0x5586,
    _ => 0,
  };
  return idx;
}


// MUL_ELEM-MLA_ELEM#1,MUL_ELEM-MLS_ELEM#1,MUL_ELEM-SQRDMLAH_ELEM#1,MUL_ELEM-SQRDMLSH_ELEM#1,MULL_ELEM-UMLAL_ELEM#1,MULL_ELEM-UMLSL_ELEM#1,MULL_ELEM-UMULL_ELEM#1,FMUL_ELEM-FMULX_ELEM#1,DOT_ELEM-UDOT_ELEM#0,FHM_ELEM-FMLAL2_ELEM#0,FHM_ELEM-FMLSL2_ELEM#0
pub const fn classify_impl_6b(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 12) & 0xf {
    0x0 => 0x5583,
    0x1 => 0x0,
    0x2 => 0x5686,
    0x3 => 0x0,
    0x4 => 0x5584,
    0x5 => 0x0,
    0x6 => 0x5687,
    0x7 => 0x0,
    0x8 => 0x5b82,
    0x9 => 0x5803,
    0xa => 0x5688,
    0xb => 0x0,
    0xc => 0x5b83,
    0xd => 0x5585,
    0xe => 0x5984,
    0xf => 0x5586,
    _ => 0,
  };
  return idx;
}


// ANDOREOR_IMM-ORR_IMM#0,ANDOREOR_IMM-ORR_IMM#1,ANDOREOR_IMM-ORR_IMM#2,ANDOREOR_IMM-ORR_IMM#3,ANDOREOR_IMM-ORR_IMM#4,ANDOREOR_IMM-ORR_IMM#5,ANDOREOR_IMM-ORR_IMM#6,ANDOREOR_IMM-ORR_IMM#7,ANDOREOR_IMM-ORR_IMM#8,ANDOREOR_IMM-ORR_IMM#9,ANDOREOR_IMM-ORR_IMM#10,ANDOREOR_IMM-ORR_IMM#11,ANDOREOR_IMM-ORR_IMM#12,ANDOREOR_IMM-ORR_IMM#13,ANDOREOR_IMM-ORR_IMM#14,ANDOREOR_IMM-ORR_IMM#15,ANDOREOR_IMM-ORR_IMM#16,ANDOREOR_IMM-ORR_IMM#17,ANDOREOR_IMM-ORR_IMM#18,ANDOREOR_IMM-ORR_IMM#19,ANDOREOR_IMM-ORR_IMM#20,ANDOREOR_IMM-ORR_IMM#21,ANDOREOR_IMM-ORR_IMM#22,ANDOREOR_IMM-ORR_IMM#23,ANDOREOR_IMM-ORR_IMM#24,ANDOREOR_IMM-ORR_IMM#25,ANDOREOR_IMM-ORR_IMM#26,ANDOREOR_IMM-ORR_IMM#27,ANDOREOR_IMM-ORR_IMM#28,ANDOREOR_IMM-ORR_IMM#29,ANDOREOR_IMM-ORR_IMM#30,ANDOREOR_IMM-ORR_IMM#31,ANDOREOR_IMM-ORR_IMM#32,ANDOREOR_IMM-ORR_IMM#33,ANDOREOR_IMM-ORR_IMM#34,ANDOREOR_IMM-ORR_IMM#35,ANDOREOR_IMM-ORR_IMM#36,ANDOREOR_IMM-ORR_IMM#37,ANDOREOR_IMM-ORR_IMM#38,ANDOREOR_IMM-ORR_IMM#39,ANDOREOR_IMM-ORR_IMM#40,ANDOREOR_IMM-ORR_IMM#41,ANDOREOR_IMM-ORR_IMM#42,ANDOREOR_IMM-ORR_IMM#43,ANDOREOR_IMM-ORR_IMM#44,ANDOREOR_IMM-ORR_IMM#45,ANDOREOR_IMM-ORR_IMM#46,ANDOREOR_IMM-ORR_IMM#47,ANDOREOR_IMM-ORR_IMM#48,ANDOREOR_IMM-ORR_IMM#49,ANDOREOR_IMM-ORR_IMM#50,ANDOREOR_IMM-ORR_IMM#51,ANDOREOR_IMM-ORR_IMM#52,ANDOREOR_IMM-ORR_IMM#53,ANDOREOR_IMM-ORR_IMM#54,ANDOREOR_IMM-ORR_IMM#55,ANDOREOR_IMM-ORR_IMM#56
pub const fn classify_impl_6c(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x501,
    0x1 => 0x501,
    0x2 => 0x501,
    0x3 => 0x501,
    0x4 => 0x501,
    0x5 => 0x501,
    0x6 => 0x501,
    0x7 => 0x501,
    0x8 => 0x501,
    0x9 => 0x501,
    0xa => 0x501,
    0xb => 0x501,
    0xc => 0x501,
    0xd => 0x501,
    0xe => 0x501,
    0xf => 0x501,
    0x10 => 0x501,
    0x11 => 0x501,
    0x12 => 0x501,
    0x13 => 0x501,
    0x14 => 0x501,
    0x15 => 0x501,
    0x16 => 0x501,
    0x17 => 0x501,
    0x18 => 0x501,
    0x19 => 0x501,
    0x1a => 0x501,
    0x1b => 0x501,
    0x1c => 0x501,
    0x1d => 0x501,
    0x1e => 0x501,
    0x1f => 0x0,
    0x20 => 0x501,
    0x21 => 0x501,
    0x22 => 0x501,
    0x23 => 0x501,
    0x24 => 0x501,
    0x25 => 0x501,
    0x26 => 0x501,
    0x27 => 0x501,
    0x28 => 0x501,
    0x29 => 0x501,
    0x2a => 0x501,
    0x2b => 0x501,
    0x2c => 0x501,
    0x2d => 0x501,
    0x2e => 0x501,
    0x2f => 0x0,
    0x30 => 0x501,
    0x31 => 0x501,
    0x32 => 0x501,
    0x33 => 0x501,
    0x34 => 0x501,
    0x35 => 0x501,
    0x36 => 0x501,
    0x37 => 0x0,
    0x38 => 0x501,
    0x39 => 0x501,
    0x3a => 0x501,
    0x3b => 0x0,
    0x3c => 0x501,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// BFM-BFM#0
pub const fn classify_impl_6d(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x901;
}


// MEMU-STURB#0,MEMU-STRB_POST#0,MEMU-STTRB#0,MEMU-STRB_PRE#0
pub const fn classify_impl_6e(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x1800,
    0x1 => 0x1801,
    0x2 => 0x1802,
    0x3 => 0x1803,
    _ => 0,
  };
  return idx;
}


// MEM_REG-STRB_REG#0,SWP-SWPB#0,LDATOMIC-LDADDB#0,LDATOMIC-LDCLRB#0,LDATOMIC-LDEORB#0,LDATOMIC-LDSETB#0,LDATOMIC-LDSMAXB#0,LDATOMIC-LDSMINB#0,LDATOMIC-LDUMAXB#0,LDATOMIC-LDUMINB#0
pub const fn classify_impl_6f(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 11) & 0x1f {
    0x0 => 0x6100,
    0x1 => 0x0,
    0x2 => 0x6101,
    0x3 => 0x0,
    0x4 => 0x6102,
    0x5 => 0x0,
    0x6 => 0x6103,
    0x7 => 0x0,
    0x8 => 0x6104,
    0x9 => 0x1900,
    0xa => 0x6105,
    0xb => 0x1900,
    0xc => 0x6106,
    0xd => 0x1900,
    0xe => 0x6107,
    0xf => 0x1900,
    0x10 => 0x6080,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x1900,
    0x1a => 0x0,
    0x1b => 0x1900,
    0x1c => 0x0,
    0x1d => 0x1900,
    0x1e => 0x0,
    0x1f => 0x1900,
    _ => 0,
  };
  return idx;
}


// MEMU-LDURB#0,MEMU-LDRB_POST#0,MEMU-LDTRB#0,MEMU-LDRB_PRE#0
pub const fn classify_impl_70(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x1804,
    0x1 => 0x1805,
    0x2 => 0x1806,
    0x3 => 0x1807,
    _ => 0,
  };
  return idx;
}


// MEM_REG-LDRB_REG#0,SWP-SWPLB#0,LDATOMIC-LDADDLB#0,LDATOMIC-LDCLRLB#0,LDATOMIC-LDEORLB#0,LDATOMIC-LDSETLB#0,LDATOMIC-LDSMAXLB#0,LDATOMIC-LDSMINLB#0,LDATOMIC-LDUMAXLB#0,LDATOMIC-LDUMINLB#0
pub const fn classify_impl_71(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 11) & 0x1f {
    0x0 => 0x6108,
    0x1 => 0x0,
    0x2 => 0x6109,
    0x3 => 0x0,
    0x4 => 0x610a,
    0x5 => 0x0,
    0x6 => 0x610b,
    0x7 => 0x0,
    0x8 => 0x610c,
    0x9 => 0x1901,
    0xa => 0x610d,
    0xb => 0x1901,
    0xc => 0x610e,
    0xd => 0x1901,
    0xe => 0x610f,
    0xf => 0x1901,
    0x10 => 0x6081,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x1901,
    0x1a => 0x0,
    0x1b => 0x1901,
    0x1c => 0x0,
    0x1d => 0x1901,
    0x1e => 0x0,
    0x1f => 0x1901,
    _ => 0,
  };
  return idx;
}


// MEMU-LDURSB#0,MEMU-LDRSB_POST#0,MEMU-LDTRSB#0,MEMU-LDRSB_PRE#0
pub const fn classify_impl_72(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x1808,
    0x1 => 0x1809,
    0x2 => 0x180a,
    0x3 => 0x180b,
    _ => 0,
  };
  return idx;
}


// MEM_REG-LDRSB_REG#0,SWP-SWPAB#0,LDATOMIC-LDADDAB#0,LDATOMIC-LDCLRAB#0,LDATOMIC-LDEORAB#0,LDATOMIC-LDSETAB#0,LDATOMIC-LDSMAXAB#0,LDATOMIC-LDSMINAB#0,LDATOMIC-LDUMAXAB#0,LDATOMIC-LDUMINAB#0
pub const fn classify_impl_73(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 11) & 0x1f {
    0x0 => 0x6110,
    0x1 => 0x0,
    0x2 => 0x6111,
    0x3 => 0x0,
    0x4 => 0x6112,
    0x5 => 0x0,
    0x6 => 0x6113,
    0x7 => 0x0,
    0x8 => 0x6114,
    0x9 => 0x1902,
    0xa => 0x6115,
    0xb => 0x1902,
    0xc => 0x6116,
    0xd => 0x1902,
    0xe => 0x6117,
    0xf => 0x1902,
    0x10 => 0x6082,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x1902,
    0x1a => 0x0,
    0x1b => 0x1902,
    0x1c => 0x0,
    0x1d => 0x1902,
    0x1e => 0x0,
    0x1f => 0x1902,
    _ => 0,
  };
  return idx;
}


// RCPC-LDAPRB#0
pub const fn classify_impl_74_1(inst: u32) -> u32 {
  if (inst&0xf0000) != 0xf0000 { return 0; }
  return 0x6200;
}

// MEM_REG-LDRSB_REG#0,SWP-SWPAB#0,LDATOMIC-LDADDAB#0,LDATOMIC-LDCLRAB#0,LDATOMIC-LDEORAB#0,LDATOMIC-LDSETAB#0,LDATOMIC-LDSMAXAB#0,LDATOMIC-LDSMINAB#0,LDATOMIC-LDUMAXAB#0,LDATOMIC-LDUMINAB#0,RCPC-LDAPRB#0
pub const fn classify_impl_74(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 11) & 0x1f {
    0x0 => 0x6110,
    0x1 => 0x0,
    0x2 => 0x6111,
    0x3 => 0x0,
    0x4 => 0x6112,
    0x5 => 0x0,
    0x6 => 0x6113,
    0x7 => 0x0,
    0x8 => 0x6114,
    0x9 => 0x1902,
    0xa => 0x6115,
    0xb => 0x1902,
    0xc => 0x6116,
    0xd => 0x1902,
    0xe => 0x6117,
    0xf => 0x1902,
    0x10 => 0x6082,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x1,
    0x19 => 0x1902,
    0x1a => 0x0,
    0x1b => 0x1902,
    0x1c => 0x0,
    0x1d => 0x1902,
    0x1e => 0x0,
    0x1f => 0x1902,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_74_1(inst), // RCPC-LDAPRB#0
    _ => idx
  };
  return idx;
}


// MEMU-LDURSBW#0,MEMU-LDRSBW_POST#0,MEMU-LDTRSBW#0,MEMU-LDRSBW_PRE#0
pub const fn classify_impl_75(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x180c,
    0x1 => 0x180d,
    0x2 => 0x180e,
    0x3 => 0x180f,
    _ => 0,
  };
  return idx;
}


// MEM_REG-LDRSBW_REG#0,SWP-SWPALB#0,LDATOMIC-LDADDALB#0,LDATOMIC-LDCLRALB#0,LDATOMIC-LDEORALB#0,LDATOMIC-LDSETALB#0,LDATOMIC-LDSMAXALB#0,LDATOMIC-LDSMINALB#0,LDATOMIC-LDUMAXALB#0,LDATOMIC-LDUMINALB#0
pub const fn classify_impl_76(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 11) & 0x1f {
    0x0 => 0x6118,
    0x1 => 0x0,
    0x2 => 0x6119,
    0x3 => 0x0,
    0x4 => 0x611a,
    0x5 => 0x0,
    0x6 => 0x611b,
    0x7 => 0x0,
    0x8 => 0x611c,
    0x9 => 0x1903,
    0xa => 0x611d,
    0xb => 0x1903,
    0xc => 0x611e,
    0xd => 0x1903,
    0xe => 0x611f,
    0xf => 0x1903,
    0x10 => 0x6083,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x1903,
    0x1a => 0x0,
    0x1b => 0x1903,
    0x1c => 0x0,
    0x1d => 0x1903,
    0x1e => 0x0,
    0x1f => 0x1903,
    _ => 0,
  };
  return idx;
}


// SETF-SETF8#0
pub const fn classify_impl_77_1_1(inst: u32) -> u32 {
  if (inst&0xf001f) != 0xd { return 0; }
  return 0x6700;
}

// ADCSBC-ADCS#0,SETF-SETF8#0
pub const fn classify_impl_77_1(inst: u32) -> u32 {
  let idx = match (inst >> 11) & 0x1 {
    0x0 => 0x281,
    0x1 => 0x1,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_77_1_1(inst), // SETF-SETF8#0
    _ => idx
  };
  return idx;
}


// SETF-SETF16#0
pub const fn classify_impl_77_2(inst: u32) -> u32 {
  if (inst&0xf081f) != 0x80d { return 0; }
  return 0x6701;
}

// ADCSBC-ADCS#0,SETF-SETF8#0,SETF-SETF16#0
pub const fn classify_impl_77(inst: u32) -> u32 {
  if (inst&0xb400) != 0x0 { return 0; }
  let idx = match (inst >> 14) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_77_1(inst), // ADCSBC-ADCS#0,SETF-SETF8#0
    0x2 => return classify_impl_77_2(inst), // SETF-SETF16#0
    _ => idx
  };
  return idx;
}


// ADCSBC-ADCS#0
pub const fn classify_impl_78(inst: u32) -> u32 {
  if (inst&0xfc00) != 0x0 { return 0; }
  return 0x281;
}


// CCMP_IMM-CCMN_IMM#0,CCMP_REG-CCMN_REG#0
pub const fn classify_impl_79(inst: u32) -> u32 {
  if (inst&0x410) != 0x0 { return 0; }
  let idx = match (inst >> 11) & 0x1 {
    0x0 => 0xc00,
    0x1 => 0xb80,
    _ => 0,
  };
  return idx;
}


// MEMU_FP-STUR_FP#0,MEMU_FP-STR_FP_POST#0,MEMU_FP-STR_FP_PRE#0
pub const fn classify_impl_7a(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x1a80,
    0x1 => 0x1a81,
    0x2 => 0x0,
    0x3 => 0x1a82,
    _ => 0,
  };
  return idx;
}


// MEM_REG_FP-STR_REG_FP#0
pub const fn classify_impl_7b(inst: u32) -> u32 {
  if (inst&0x4c00) != 0x4800 { return 0; }
  return 0x1b80;
}


// MEMU_FP-LDUR_FP#0,MEMU_FP-LDR_FP_POST#0,MEMU_FP-LDR_FP_PRE#0
pub const fn classify_impl_7c(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x1a83,
    0x1 => 0x1a84,
    0x2 => 0x0,
    0x3 => 0x1a85,
    _ => 0,
  };
  return idx;
}


// MEM_REG_FP-LDR_REG_FP#0
pub const fn classify_impl_7d(inst: u32) -> u32 {
  if (inst&0x4c00) != 0x4800 { return 0; }
  return 0x1b81;
}


// MEMU_FP-STUR_FP#1,MEMU_FP-STR_FP_POST#1,MEMU_FP-STR_FP_PRE#1
pub const fn classify_impl_7e(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x1a80,
    0x1 => 0x1a81,
    0x2 => 0x0,
    0x3 => 0x1a82,
    _ => 0,
  };
  return idx;
}


// MEM_REG_FP-STR_REG_FP#1
pub const fn classify_impl_7f(inst: u32) -> u32 {
  if (inst&0x4c00) != 0x4800 { return 0; }
  return 0x1b80;
}


// MEMU_FP-LDUR_FP#1,MEMU_FP-LDR_FP_POST#1,MEMU_FP-LDR_FP_PRE#1
pub const fn classify_impl_80(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x1a83,
    0x1 => 0x1a84,
    0x2 => 0x0,
    0x3 => 0x1a85,
    _ => 0,
  };
  return idx;
}


// MEM_REG_FP-LDR_REG_FP#1
pub const fn classify_impl_81(inst: u32) -> u32 {
  if (inst&0x4c00) != 0x4800 { return 0; }
  return 0x1b81;
}


// MEMX-STXRH#0,MEMX-STLXRH#0
pub const fn classify_impl_82(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x1684,
    0x1 => 0x1685,
    _ => 0,
  };
  return idx;
}


// MEMX-LDXRH#0,MEMX-LDAXRH#0
pub const fn classify_impl_83(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x1686,
    0x1 => 0x1687,
    _ => 0,
  };
  return idx;
}


// MEMOR-STLLRH#0,MEMOR-STLRH#0
pub const fn classify_impl_84(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x1604,
    0x1 => 0x1605,
    _ => 0,
  };
  return idx;
}


// CAS-CASH#0,CAS-CASLH#0
pub const fn classify_impl_85(inst: u32) -> u32 {
  if (inst&0x7c00) != 0x7c00 { return 0; }
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x5f84,
    0x1 => 0x5f85,
    _ => 0,
  };
  return idx;
}


// MEMOR-LDLARH#0,MEMOR-LDARH#0
pub const fn classify_impl_86(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x1606,
    0x1 => 0x1607,
    _ => 0,
  };
  return idx;
}


// CAS-CASAH#0,CAS-CASALH#0
pub const fn classify_impl_87(inst: u32) -> u32 {
  if (inst&0x7c00) != 0x7c00 { return 0; }
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x5f86,
    0x1 => 0x5f87,
    _ => 0,
  };
  return idx;
}


// ANDOREOR_SHIFT-EOR_SHIFT#0
pub const fn classify_impl_88(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x584;
}


// ANDOREOR_SHIFT-EON_SHIFT#0
pub const fn classify_impl_89(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x585;
}


// ADDSUB_SHIFT-SUB_SHIFT#0
pub const fn classify_impl_8a(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x402;
}


// ADDSUB_EXT-SUB_EXT#0,ADDSUB_EXT-SUB_EXT#1,ADDSUB_EXT-SUB_EXT#2,ADDSUB_EXT-SUB_EXT#3,ADDSUB_EXT-SUB_EXT#4
pub const fn classify_impl_8b(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7 {
    0x0 => 0x302,
    0x1 => 0x302,
    0x2 => 0x302,
    0x3 => 0x302,
    0x4 => 0x302,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    _ => 0,
  };
  return idx;
}


// ADDSUB_SHIFT-SUB_SHIFT#1
pub const fn classify_impl_8c(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x402;
}


// ADDSUB_SHIFT-SUB_SHIFT#2
pub const fn classify_impl_8d(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x402;
}


// MEMSIMD_MULT-ST4#3,MEMSIMD_MULT-ST4#4,MEMSIMD_MULT-ST4#5,MEMSIMD_MULT-ST4#6,MEMSIMD_MULT-ST1_4#4,MEMSIMD_MULT-ST1_4#5,MEMSIMD_MULT-ST1_4#6,MEMSIMD_MULT-ST1_4#7,MEMSIMD_MULT-ST3#3,MEMSIMD_MULT-ST3#4,MEMSIMD_MULT-ST3#5,MEMSIMD_MULT-ST3#6,MEMSIMD_MULT-ST1_3#4,MEMSIMD_MULT-ST1_3#5,MEMSIMD_MULT-ST1_3#6,MEMSIMD_MULT-ST1_3#7,MEMSIMD_MULT-ST1_1#4,MEMSIMD_MULT-ST1_1#5,MEMSIMD_MULT-ST1_1#6,MEMSIMD_MULT-ST1_1#7,MEMSIMD_MULT-ST2#3,MEMSIMD_MULT-ST2#4,MEMSIMD_MULT-ST2#5,MEMSIMD_MULT-ST2#6,MEMSIMD_MULT-ST1_2#4,MEMSIMD_MULT-ST1_2#5,MEMSIMD_MULT-ST1_2#6,MEMSIMD_MULT-ST1_2#7
pub const fn classify_impl_8e(inst: u32) -> u32 {
  if (inst&0xf0000) != 0x0 { return 0; }
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x1c80,
    0x1 => 0x1c80,
    0x2 => 0x1c80,
    0x3 => 0x1c80,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x1c81,
    0x9 => 0x1c81,
    0xa => 0x1c81,
    0xb => 0x1c81,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x1c82,
    0x11 => 0x1c82,
    0x12 => 0x1c82,
    0x13 => 0x1c82,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x1c83,
    0x19 => 0x1c83,
    0x1a => 0x1c83,
    0x1b => 0x1c83,
    0x1c => 0x1c84,
    0x1d => 0x1c84,
    0x1e => 0x1c84,
    0x1f => 0x1c84,
    0x20 => 0x1c85,
    0x21 => 0x1c85,
    0x22 => 0x1c85,
    0x23 => 0x1c85,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x1c86,
    0x29 => 0x1c86,
    0x2a => 0x1c86,
    0x2b => 0x1c86,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// MEMSIMD_MULT-LD4#3,MEMSIMD_MULT-LD4#4,MEMSIMD_MULT-LD4#5,MEMSIMD_MULT-LD4#6,MEMSIMD_MULT-LD1_4#4,MEMSIMD_MULT-LD1_4#5,MEMSIMD_MULT-LD1_4#6,MEMSIMD_MULT-LD1_4#7,MEMSIMD_MULT-LD3#3,MEMSIMD_MULT-LD3#4,MEMSIMD_MULT-LD3#5,MEMSIMD_MULT-LD3#6,MEMSIMD_MULT-LD1_3#4,MEMSIMD_MULT-LD1_3#5,MEMSIMD_MULT-LD1_3#6,MEMSIMD_MULT-LD1_3#7,MEMSIMD_MULT-LD1_1#4,MEMSIMD_MULT-LD1_1#5,MEMSIMD_MULT-LD1_1#6,MEMSIMD_MULT-LD1_1#7,MEMSIMD_MULT-LD2#3,MEMSIMD_MULT-LD2#4,MEMSIMD_MULT-LD2#5,MEMSIMD_MULT-LD2#6,MEMSIMD_MULT-LD1_2#4,MEMSIMD_MULT-LD1_2#5,MEMSIMD_MULT-LD1_2#6,MEMSIMD_MULT-LD1_2#7
pub const fn classify_impl_8f(inst: u32) -> u32 {
  if (inst&0xf0000) != 0x0 { return 0; }
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x1c87,
    0x1 => 0x1c87,
    0x2 => 0x1c87,
    0x3 => 0x1c87,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x1c88,
    0x9 => 0x1c88,
    0xa => 0x1c88,
    0xb => 0x1c88,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x1c89,
    0x11 => 0x1c89,
    0x12 => 0x1c89,
    0x13 => 0x1c89,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x1c8a,
    0x19 => 0x1c8a,
    0x1a => 0x1c8a,
    0x1b => 0x1c8a,
    0x1c => 0x1c8b,
    0x1d => 0x1c8b,
    0x1e => 0x1c8b,
    0x1f => 0x1c8b,
    0x20 => 0x1c8c,
    0x21 => 0x1c8c,
    0x22 => 0x1c8c,
    0x23 => 0x1c8c,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x1c8d,
    0x29 => 0x1c8d,
    0x2a => 0x1c8d,
    0x2b => 0x1c8d,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// MEMSIMD_MULT_POST-ST4_POST#3,MEMSIMD_MULT_POST-ST4_POST#4,MEMSIMD_MULT_POST-ST4_POST#5,MEMSIMD_MULT_POST-ST4_POST#6,MEMSIMD_MULT_POST-ST1_4_POST#4,MEMSIMD_MULT_POST-ST1_4_POST#5,MEMSIMD_MULT_POST-ST1_4_POST#6,MEMSIMD_MULT_POST-ST1_4_POST#7,MEMSIMD_MULT_POST-ST3_POST#3,MEMSIMD_MULT_POST-ST3_POST#4,MEMSIMD_MULT_POST-ST3_POST#5,MEMSIMD_MULT_POST-ST3_POST#6,MEMSIMD_MULT_POST-ST1_3_POST#4,MEMSIMD_MULT_POST-ST1_3_POST#5,MEMSIMD_MULT_POST-ST1_3_POST#6,MEMSIMD_MULT_POST-ST1_3_POST#7,MEMSIMD_MULT_POST-ST1_1_POST#4,MEMSIMD_MULT_POST-ST1_1_POST#5,MEMSIMD_MULT_POST-ST1_1_POST#6,MEMSIMD_MULT_POST-ST1_1_POST#7,MEMSIMD_MULT_POST-ST2_POST#3,MEMSIMD_MULT_POST-ST2_POST#4,MEMSIMD_MULT_POST-ST2_POST#5,MEMSIMD_MULT_POST-ST2_POST#6,MEMSIMD_MULT_POST-ST1_2_POST#4,MEMSIMD_MULT_POST-ST1_2_POST#5,MEMSIMD_MULT_POST-ST1_2_POST#6,MEMSIMD_MULT_POST-ST1_2_POST#7
pub const fn classify_impl_90(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x1d00,
    0x1 => 0x1d00,
    0x2 => 0x1d00,
    0x3 => 0x1d00,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x1d01,
    0x9 => 0x1d01,
    0xa => 0x1d01,
    0xb => 0x1d01,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x1d02,
    0x11 => 0x1d02,
    0x12 => 0x1d02,
    0x13 => 0x1d02,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x1d03,
    0x19 => 0x1d03,
    0x1a => 0x1d03,
    0x1b => 0x1d03,
    0x1c => 0x1d04,
    0x1d => 0x1d04,
    0x1e => 0x1d04,
    0x1f => 0x1d04,
    0x20 => 0x1d05,
    0x21 => 0x1d05,
    0x22 => 0x1d05,
    0x23 => 0x1d05,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x1d06,
    0x29 => 0x1d06,
    0x2a => 0x1d06,
    0x2b => 0x1d06,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// MEMSIMD_MULT_POST-LD4_POST#3,MEMSIMD_MULT_POST-LD4_POST#4,MEMSIMD_MULT_POST-LD4_POST#5,MEMSIMD_MULT_POST-LD4_POST#6,MEMSIMD_MULT_POST-LD1_4_POST#4,MEMSIMD_MULT_POST-LD1_4_POST#5,MEMSIMD_MULT_POST-LD1_4_POST#6,MEMSIMD_MULT_POST-LD1_4_POST#7,MEMSIMD_MULT_POST-LD3_POST#3,MEMSIMD_MULT_POST-LD3_POST#4,MEMSIMD_MULT_POST-LD3_POST#5,MEMSIMD_MULT_POST-LD3_POST#6,MEMSIMD_MULT_POST-LD1_3_POST#4,MEMSIMD_MULT_POST-LD1_3_POST#5,MEMSIMD_MULT_POST-LD1_3_POST#6,MEMSIMD_MULT_POST-LD1_3_POST#7,MEMSIMD_MULT_POST-LD1_1_POST#4,MEMSIMD_MULT_POST-LD1_1_POST#5,MEMSIMD_MULT_POST-LD1_1_POST#6,MEMSIMD_MULT_POST-LD1_1_POST#7,MEMSIMD_MULT_POST-LD2_POST#3,MEMSIMD_MULT_POST-LD2_POST#4,MEMSIMD_MULT_POST-LD2_POST#5,MEMSIMD_MULT_POST-LD2_POST#6,MEMSIMD_MULT_POST-LD1_2_POST#4,MEMSIMD_MULT_POST-LD1_2_POST#5,MEMSIMD_MULT_POST-LD1_2_POST#6,MEMSIMD_MULT_POST-LD1_2_POST#7
pub const fn classify_impl_91(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x1d07,
    0x1 => 0x1d07,
    0x2 => 0x1d07,
    0x3 => 0x1d07,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x1d08,
    0x9 => 0x1d08,
    0xa => 0x1d08,
    0xb => 0x1d08,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x1d09,
    0x11 => 0x1d09,
    0x12 => 0x1d09,
    0x13 => 0x1d09,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x1d0a,
    0x19 => 0x1d0a,
    0x1a => 0x1d0a,
    0x1b => 0x1d0a,
    0x1c => 0x1d0b,
    0x1d => 0x1d0b,
    0x1e => 0x1d0b,
    0x1f => 0x1d0b,
    0x20 => 0x1d0c,
    0x21 => 0x1d0c,
    0x22 => 0x1d0c,
    0x23 => 0x1d0c,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x1d0d,
    0x29 => 0x1d0d,
    0x2a => 0x1d0d,
    0x2b => 0x1d0d,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
pub const fn classify_impl_92_1(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 11) & 0xf {
    0x0 => 0x2a00,
    0x1 => 0x0,
    0x2 => 0x2a01,
    0x3 => 0x2a80,
    0x4 => 0x2a02,
    0x5 => 0x2a81,
    0x6 => 0x2a03,
    0x7 => 0x2a82,
    0x8 => 0x2a04,
    0x9 => 0x0,
    0xa => 0x2a05,
    0xb => 0x2a83,
    0xc => 0x2a06,
    0xd => 0x2a84,
    0xe => 0x2a07,
    0xf => 0x2a85,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#14,DUP_VEC-DUP_GP#14,INS-INS_GP#0,MOV_TOGP-SMOV#12,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
pub const fn classify_impl_92_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x2900,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x0,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#15,DUP_VEC-DUP_GP#15,INS-INS_GP#1,MOV_TOGP-SMOV#13,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
pub const fn classify_impl_92_3(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x2900,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x0,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#16,DUP_VEC-DUP_GP#16,INS-INS_GP#2,MOV_TOGP-SMOV#14,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
pub const fn classify_impl_92_4(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x2900,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x0,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#17,DUP_VEC-DUP_GP#17,INS-INS_GP#3,MOV_TOGP-SMOV#15,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
pub const fn classify_impl_92_5(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x2900,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x0,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#18,DUP_VEC-DUP_GP#18,INS-INS_GP#4,MOV_TOGP-SMOV#16,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
pub const fn classify_impl_92_6(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x2900,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x0,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#19,DUP_VEC-DUP_GP#19,INS-INS_GP#5,MOV_TOGP-SMOV#17,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
pub const fn classify_impl_92_7(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x2900,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x0,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#20,DUP_VEC-DUP_GP#20,INS-INS_GP#6,MOV_TOGP-SMOV#18,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
pub const fn classify_impl_92_8(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x2900,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x0,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#21,DUP_VEC-DUP_GP#21,INS-INS_GP#7,MOV_TOGP-UMOV#14,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
pub const fn classify_impl_92_9(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x2900,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x0,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x2981,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#22,DUP_VEC-DUP_GP#22,INS-INS_GP#8,MOV_TOGP-SMOV#19,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
pub const fn classify_impl_92_a(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x2900,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x0,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#23,DUP_VEC-DUP_GP#23,INS-INS_GP#9,MOV_TOGP-SMOV#20,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
pub const fn classify_impl_92_b(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x2900,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x0,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#24,DUP_VEC-DUP_GP#24,INS-INS_GP#10,MOV_TOGP-SMOV#21,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
pub const fn classify_impl_92_c(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x2900,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x0,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#25,DUP_VEC-DUP_GP#25,INS-INS_GP#11,MOV_TOGP-SMOV#22,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
pub const fn classify_impl_92_d(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x2900,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x0,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#26,DUP_VEC-DUP_GP#26,INS-INS_GP#12,MOV_TOGP-SMOV#23,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
pub const fn classify_impl_92_e(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x2900,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x0,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#27,DUP_VEC-DUP_GP#27,INS-INS_GP#13,MOV_TOGP-SMOV#24,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
pub const fn classify_impl_92_f(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x2900,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x0,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_VEC-DUP_ELEM#28,DUP_VEC-DUP_GP#28,INS-INS_GP#14,MOV_TOGP-SMOV#25,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
pub const fn classify_impl_92_10(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2a00,
    0x1 => 0x2880,
    0x2 => 0x0,
    0x3 => 0x2881,
    0x4 => 0x2a01,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x2900,
    0x8 => 0x2a02,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x2980,
    0xc => 0x2a03,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x0,
    0x10 => 0x2a04,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x2a05,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x2a06,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x2a07,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}

// DUP_VEC-DUP_ELEM#14,DUP_VEC-DUP_ELEM#15,DUP_VEC-DUP_ELEM#16,DUP_VEC-DUP_ELEM#17,DUP_VEC-DUP_ELEM#18,DUP_VEC-DUP_ELEM#19,DUP_VEC-DUP_ELEM#20,DUP_VEC-DUP_ELEM#21,DUP_VEC-DUP_ELEM#22,DUP_VEC-DUP_ELEM#23,DUP_VEC-DUP_ELEM#24,DUP_VEC-DUP_ELEM#25,DUP_VEC-DUP_ELEM#26,DUP_VEC-DUP_ELEM#27,DUP_VEC-DUP_ELEM#28,DUP_VEC-DUP_GP#14,DUP_VEC-DUP_GP#15,DUP_VEC-DUP_GP#16,DUP_VEC-DUP_GP#17,DUP_VEC-DUP_GP#18,DUP_VEC-DUP_GP#19,DUP_VEC-DUP_GP#20,DUP_VEC-DUP_GP#21,DUP_VEC-DUP_GP#22,DUP_VEC-DUP_GP#23,DUP_VEC-DUP_GP#24,DUP_VEC-DUP_GP#25,DUP_VEC-DUP_GP#26,DUP_VEC-DUP_GP#27,DUP_VEC-DUP_GP#28,INS-INS_GP#0,INS-INS_GP#1,INS-INS_GP#2,INS-INS_GP#3,INS-INS_GP#4,INS-INS_GP#5,INS-INS_GP#6,INS-INS_GP#7,INS-INS_GP#8,INS-INS_GP#9,INS-INS_GP#10,INS-INS_GP#11,INS-INS_GP#12,INS-INS_GP#13,INS-INS_GP#14,MOV_TOGP-SMOV#12,MOV_TOGP-SMOV#13,MOV_TOGP-SMOV#14,MOV_TOGP-SMOV#15,MOV_TOGP-SMOV#16,MOV_TOGP-SMOV#17,MOV_TOGP-SMOV#18,MOV_TOGP-SMOV#19,MOV_TOGP-SMOV#20,MOV_TOGP-SMOV#21,MOV_TOGP-SMOV#22,MOV_TOGP-SMOV#23,MOV_TOGP-SMOV#24,MOV_TOGP-SMOV#25,MOV_TOGP-UMOV#14,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
pub const fn classify_impl_92(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  let idx = match (inst >> 16) & 0xf {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x8,
    0x8 => 0x9,
    0x9 => 0xa,
    0xa => 0xb,
    0xb => 0xc,
    0xc => 0xd,
    0xd => 0xe,
    0xe => 0xf,
    0xf => 0x10,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_92_1(inst), // TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
    0x2 => return classify_impl_92_2(inst), // DUP_VEC-DUP_ELEM#14,DUP_VEC-DUP_GP#14,INS-INS_GP#0,MOV_TOGP-SMOV#12,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
    0x3 => return classify_impl_92_3(inst), // DUP_VEC-DUP_ELEM#15,DUP_VEC-DUP_GP#15,INS-INS_GP#1,MOV_TOGP-SMOV#13,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
    0x4 => return classify_impl_92_4(inst), // DUP_VEC-DUP_ELEM#16,DUP_VEC-DUP_GP#16,INS-INS_GP#2,MOV_TOGP-SMOV#14,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
    0x5 => return classify_impl_92_5(inst), // DUP_VEC-DUP_ELEM#17,DUP_VEC-DUP_GP#17,INS-INS_GP#3,MOV_TOGP-SMOV#15,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
    0x6 => return classify_impl_92_6(inst), // DUP_VEC-DUP_ELEM#18,DUP_VEC-DUP_GP#18,INS-INS_GP#4,MOV_TOGP-SMOV#16,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
    0x7 => return classify_impl_92_7(inst), // DUP_VEC-DUP_ELEM#19,DUP_VEC-DUP_GP#19,INS-INS_GP#5,MOV_TOGP-SMOV#17,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
    0x8 => return classify_impl_92_8(inst), // DUP_VEC-DUP_ELEM#20,DUP_VEC-DUP_GP#20,INS-INS_GP#6,MOV_TOGP-SMOV#18,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
    0x9 => return classify_impl_92_9(inst), // DUP_VEC-DUP_ELEM#21,DUP_VEC-DUP_GP#21,INS-INS_GP#7,MOV_TOGP-UMOV#14,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
    0xa => return classify_impl_92_a(inst), // DUP_VEC-DUP_ELEM#22,DUP_VEC-DUP_GP#22,INS-INS_GP#8,MOV_TOGP-SMOV#19,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
    0xb => return classify_impl_92_b(inst), // DUP_VEC-DUP_ELEM#23,DUP_VEC-DUP_GP#23,INS-INS_GP#9,MOV_TOGP-SMOV#20,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
    0xc => return classify_impl_92_c(inst), // DUP_VEC-DUP_ELEM#24,DUP_VEC-DUP_GP#24,INS-INS_GP#10,MOV_TOGP-SMOV#21,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
    0xd => return classify_impl_92_d(inst), // DUP_VEC-DUP_ELEM#25,DUP_VEC-DUP_GP#25,INS-INS_GP#11,MOV_TOGP-SMOV#22,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
    0xe => return classify_impl_92_e(inst), // DUP_VEC-DUP_ELEM#26,DUP_VEC-DUP_GP#26,INS-INS_GP#12,MOV_TOGP-SMOV#23,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
    0xf => return classify_impl_92_f(inst), // DUP_VEC-DUP_ELEM#27,DUP_VEC-DUP_GP#27,INS-INS_GP#13,MOV_TOGP-SMOV#24,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
    0x10 => return classify_impl_92_10(inst), // DUP_VEC-DUP_ELEM#28,DUP_VEC-DUP_GP#28,INS-INS_GP#14,MOV_TOGP-SMOV#25,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
    _ => idx
  };
  return idx;
}


// REV_VEC-REV64_VEC#0
pub const fn classify_impl_93_1_1(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x3280;
}


// REV_VEC-REV16_VEC#0
pub const fn classify_impl_93_1_2(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x3281;
}


// ADDLP_VEC-SADDLP#0
pub const fn classify_impl_93_1_3(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x3100;
}


// ARITH1_VEC-SUQADD_VEC#3
pub const fn classify_impl_93_1_4(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x3080;
}


// CLZ_VEC-CLS_VEC#0
pub const fn classify_impl_93_1_5(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x3180;
}


// BIT_VEC-CNT_VEC#0
pub const fn classify_impl_93_1_6(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x3200;
}


// ADDLP_VEC-SADALP#0
pub const fn classify_impl_93_1_7(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x3101;
}


// ARITH1_VEC-SQABS_VEC#3
pub const fn classify_impl_93_1_8(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x3081;
}


// CMZERO_VEC-CMGT_ZERO_VEC#3
pub const fn classify_impl_93_1_9(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x2f80;
}


// CMZERO_VEC-CMEQ_ZERO_VEC#3
pub const fn classify_impl_93_1_a(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x2f81;
}


// CMZERO_VEC-CMLT_ZERO_VEC#3
pub const fn classify_impl_93_1_b(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x2f82;
}


// ARITH1_VEC-ABS_VEC#3
pub const fn classify_impl_93_1_c(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x3082;
}


// XTN_VEC-XTN2_VEC#0
pub const fn classify_impl_93_1_d(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x3384;
}


// XTN_VEC-SQXTN2_VEC#0
pub const fn classify_impl_93_1_e(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x3385;
}


// FCVTN_VEC-FCVTN2#0
pub const fn classify_impl_93_1_f(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x5183;
}


// FCVTL_VEC-FCVTL2_VEC#0
pub const fn classify_impl_93_1_10(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x4f81;
}


// FRINT_VEC-FRINTN_VEC#1
pub const fn classify_impl_93_1_11(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x5200;
}


// FRINT_VEC-FRINTM_VEC#1
pub const fn classify_impl_93_1_12(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x5201;
}


// FCVT_VEC-FCVTNS_VEC#1
pub const fn classify_impl_93_1_13(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x4f00;
}


// FCVT_VEC-FCVTMS_VEC#1
pub const fn classify_impl_93_1_14(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x4f01;
}


// FCVT_VEC-FCVTAS_VEC#1
pub const fn classify_impl_93_1_15(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x4f02;
}


// FCVT_FROMINT_VEC-SCVTF_VEC#1
pub const fn classify_impl_93_1_16(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x5080;
}


// FRINTTS_VEC-FRINT32Z_VEC#1
pub const fn classify_impl_93_1_17(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x5280;
}


// FRINTTS_VEC-FRINT64Z_VEC#1
pub const fn classify_impl_93_1_18(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x5281;
}

// HADDSUB_VEC-SHADD#0,HADDSUB_VEC-SRHADD#0,HADDSUB_VEC-SHSUB#0,QADDSUB_VEC-SQADD#3,QADDSUB_VEC-SQSUB#3,CMGT_VEC-CMGTV#3,CMGT_VEC-CMGEV#3,CMEQ_VEC-CMTSTV#3,CMZERO_VEC-CMGT_ZERO_VEC#3,CMZERO_VEC-CMEQ_ZERO_VEC#3,CMZERO_VEC-CMLT_ZERO_VEC#3,ARITH1_VEC-SUQADD_VEC#3,ARITH1_VEC-SQABS_VEC#3,ARITH1_VEC-ABS_VEC#3,ADDLP_VEC-SADDLP#0,ADDLP_VEC-SADALP#0,CLZ_VEC-CLS_VEC#0,BIT_VEC-CNT_VEC#0,REV_VEC-REV64_VEC#0,REV_VEC-REV16_VEC#0,XTN_VEC-XTN2_VEC#0,XTN_VEC-SQXTN2_VEC#0,SHL_REG_VEC-SSHL#3,SHL_REG_VEC-SQSHL#3,SHL_REG_VEC-SRSHL#3,SHL_REG_VEC-SQRSHL#3,MINMAX_VEC-SMAX#0,MINMAX_VEC-SMIN#0,MINMAX_VEC-SMAXP#0,MINMAX_VEC-SMINP#0,ABD_VEC-SABD#0,ABD_VEC-SABA#0,ADDSUB_VEC-ADD_VEC#3,ADDP_VEC-ADDP#3,MUL_VEC-MLA_VEC#0,MUL_VEC-MUL_VEC#0,FMINMAX_VEC-FMAXNM_VEC#1,FMINMAX_VEC-FMAX_VEC#1,FCMP_REG_VEC-FCMEQ_VEC#1,FADDSUB_VEC-FADD_VEC#1,FRECP_STEP_VEC-FRECPSV#1,FMUL_VEC-FMULXV#1,FMLA_VEC-FMLAV#1,ANDOREOR_VEC-ANDV#0,ADDSUBL_VEC-SADDL2#0,ADDSUBL_VEC-SSUBL2#0,ADDSUBW_VEC-SADDW2#0,ADDSUBW_VEC-SSUBW2#0,ADDSUBHN_VEC-ADDHN2#0,ADDSUBHN_VEC-SUBHN2#0,ABDL_VEC-SABAL2#0,ABDL_VEC-SABDL2#0,MULL_VEC-SMLAL2#0,MULL_VEC-SMLSL2#0,MULL_VEC-SMULL2#0,PMULL_VEC-PMULL2#0,FCVT_VEC-FCVTNS_VEC#1,FCVT_VEC-FCVTMS_VEC#1,FCVT_VEC-FCVTAS_VEC#1,FCVTL_VEC-FCVTL2_VEC#0,FCVT_FROMINT_VEC-SCVTF_VEC#1,FCVTN_VEC-FCVTN2#0,FRINT_VEC-FRINTN_VEC#1,FRINT_VEC-FRINTM_VEC#1,FRINTTS_VEC-FRINT32Z_VEC#1,FRINTTS_VEC-FRINT64Z_VEC#1,FHM_VEC-FMLAL_VEC#0
pub const fn classify_impl_93_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x4384,
    0x1 => 0x2b80,
    0x2 => 0x1,
    0x3 => 0x2c80,
    0x4 => 0x4404,
    0x5 => 0x2b81,
    0x6 => 0x2,
    0x7 => 0x4300,
    0x8 => 0x4385,
    0x9 => 0x2b82,
    0xa => 0x3,
    0xb => 0x2c81,
    0xc => 0x4405,
    0xd => 0x2d80,
    0xe => 0x4,
    0xf => 0x2d81,
    0x10 => 0x4484,
    0x11 => 0x3480,
    0x12 => 0x5,
    0x13 => 0x3481,
    0x14 => 0x4504,
    0x15 => 0x3482,
    0x16 => 0x6,
    0x17 => 0x3483,
    0x18 => 0x4485,
    0x19 => 0x3500,
    0x1a => 0x7,
    0x1b => 0x3501,
    0x1c => 0x4505,
    0x1d => 0x3580,
    0x1e => 0x8,
    0x1f => 0x3581,
    0x20 => 0x4586,
    0x21 => 0x3680,
    0x22 => 0x9,
    0x23 => 0x2e80,
    0x24 => 0x0,
    0x25 => 0x3780,
    0x26 => 0xa,
    0x27 => 0x3781,
    0x28 => 0x4587,
    0x29 => 0x3502,
    0x2a => 0xb,
    0x2b => 0x3503,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0xc,
    0x2f => 0x3700,
    0x30 => 0x4588,
    0x31 => 0x3900,
    0x32 => 0x0,
    0x33 => 0x4000,
    0x34 => 0x0,
    0x35 => 0x3c80,
    0x36 => 0x0,
    0x37 => 0x3f80,
    0x38 => 0x4702,
    0x39 => 0x3a80,
    0x3a => 0x0,
    0x3b => 0x5b00,
    0x3c => 0x0,
    0x3d => 0x3901,
    0x3e => 0x0,
    0x3f => 0x3e80,
    0x40 => 0x4384,
    0x41 => 0x2b80,
    0x42 => 0x0,
    0x43 => 0x2c80,
    0x44 => 0x4404,
    0x45 => 0x2b81,
    0x46 => 0x0,
    0x47 => 0x4300,
    0x48 => 0x4385,
    0x49 => 0x2b82,
    0x4a => 0xd,
    0x4b => 0x2c81,
    0x4c => 0x4405,
    0x4d => 0x2d80,
    0x4e => 0x0,
    0x4f => 0x2d81,
    0x50 => 0x4484,
    0x51 => 0x3480,
    0x52 => 0xe,
    0x53 => 0x3481,
    0x54 => 0x4504,
    0x55 => 0x3482,
    0x56 => 0x0,
    0x57 => 0x3483,
    0x58 => 0x4485,
    0x59 => 0x3500,
    0x5a => 0xf,
    0x5b => 0x3501,
    0x5c => 0x4505,
    0x5d => 0x3580,
    0x5e => 0x10,
    0x5f => 0x3581,
    0x60 => 0x4586,
    0x61 => 0x3680,
    0x62 => 0x11,
    0x63 => 0x2e80,
    0x64 => 0x0,
    0x65 => 0x3780,
    0x66 => 0x12,
    0x67 => 0x3781,
    0x68 => 0x4587,
    0x69 => 0x3502,
    0x6a => 0x13,
    0x6b => 0x3503,
    0x6c => 0x0,
    0x6d => 0x0,
    0x6e => 0x14,
    0x6f => 0x3700,
    0x70 => 0x4588,
    0x71 => 0x3900,
    0x72 => 0x15,
    0x73 => 0x4000,
    0x74 => 0x0,
    0x75 => 0x3c80,
    0x76 => 0x16,
    0x77 => 0x3f80,
    0x78 => 0x4702,
    0x79 => 0x3a80,
    0x7a => 0x17,
    0x7b => 0x5b00,
    0x7c => 0x0,
    0x7d => 0x3901,
    0x7e => 0x18,
    0x7f => 0x3e80,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_93_1_1(inst), // REV_VEC-REV64_VEC#0
    0x2 => return classify_impl_93_1_2(inst), // REV_VEC-REV16_VEC#0
    0x3 => return classify_impl_93_1_3(inst), // ADDLP_VEC-SADDLP#0
    0x4 => return classify_impl_93_1_4(inst), // ARITH1_VEC-SUQADD_VEC#3
    0x5 => return classify_impl_93_1_5(inst), // CLZ_VEC-CLS_VEC#0
    0x6 => return classify_impl_93_1_6(inst), // BIT_VEC-CNT_VEC#0
    0x7 => return classify_impl_93_1_7(inst), // ADDLP_VEC-SADALP#0
    0x8 => return classify_impl_93_1_8(inst), // ARITH1_VEC-SQABS_VEC#3
    0x9 => return classify_impl_93_1_9(inst), // CMZERO_VEC-CMGT_ZERO_VEC#3
    0xa => return classify_impl_93_1_a(inst), // CMZERO_VEC-CMEQ_ZERO_VEC#3
    0xb => return classify_impl_93_1_b(inst), // CMZERO_VEC-CMLT_ZERO_VEC#3
    0xc => return classify_impl_93_1_c(inst), // ARITH1_VEC-ABS_VEC#3
    0xd => return classify_impl_93_1_d(inst), // XTN_VEC-XTN2_VEC#0
    0xe => return classify_impl_93_1_e(inst), // XTN_VEC-SQXTN2_VEC#0
    0xf => return classify_impl_93_1_f(inst), // FCVTN_VEC-FCVTN2#0
    0x10 => return classify_impl_93_1_10(inst), // FCVTL_VEC-FCVTL2_VEC#0
    0x11 => return classify_impl_93_1_11(inst), // FRINT_VEC-FRINTN_VEC#1
    0x12 => return classify_impl_93_1_12(inst), // FRINT_VEC-FRINTM_VEC#1
    0x13 => return classify_impl_93_1_13(inst), // FCVT_VEC-FCVTNS_VEC#1
    0x14 => return classify_impl_93_1_14(inst), // FCVT_VEC-FCVTMS_VEC#1
    0x15 => return classify_impl_93_1_15(inst), // FCVT_VEC-FCVTAS_VEC#1
    0x16 => return classify_impl_93_1_16(inst), // FCVT_FROMINT_VEC-SCVTF_VEC#1
    0x17 => return classify_impl_93_1_17(inst), // FRINTTS_VEC-FRINT32Z_VEC#1
    0x18 => return classify_impl_93_1_18(inst), // FRINTTS_VEC-FRINT64Z_VEC#1
    _ => idx
  };
  return idx;
}


// AES-AESE#0
pub const fn classify_impl_93_2_1(inst: u32) -> u32 {
  if (inst&0x70000) != 0x0 { return 0; }
  return 0x6c80;
}


// AES-AESD#0
pub const fn classify_impl_93_2_2(inst: u32) -> u32 {
  if (inst&0x70000) != 0x0 { return 0; }
  return 0x6c81;
}


// AES-AESMC#0
pub const fn classify_impl_93_2_3(inst: u32) -> u32 {
  if (inst&0x70000) != 0x0 { return 0; }
  return 0x6c82;
}


// AES-AESIMC#0
pub const fn classify_impl_93_2_4(inst: u32) -> u32 {
  if (inst&0x70000) != 0x0 { return 0; }
  return 0x6c83;
}

// HADDSUB_VEC-SHADD#0,HADDSUB_VEC-SRHADD#0,HADDSUB_VEC-SHSUB#0,QADDSUB_VEC-SQADD#3,QADDSUB_VEC-SQSUB#3,CMGT_VEC-CMGTV#3,CMGT_VEC-CMGEV#3,CMEQ_VEC-CMTSTV#3,SHL_REG_VEC-SSHL#3,SHL_REG_VEC-SQSHL#3,SHL_REG_VEC-SRSHL#3,SHL_REG_VEC-SQRSHL#3,MINMAX_VEC-SMAX#0,MINMAX_VEC-SMIN#0,MINMAX_VEC-SMAXP#0,MINMAX_VEC-SMINP#0,ABD_VEC-SABD#0,ABD_VEC-SABA#0,ADDSUB_VEC-ADD_VEC#3,ADDP_VEC-ADDP#3,MUL_VEC-MLA_VEC#0,MUL_VEC-MUL_VEC#0,FMINMAX_VEC-FMAXNM_VEC#1,FMINMAX_VEC-FMAX_VEC#1,FCMP_REG_VEC-FCMEQ_VEC#1,FADDSUB_VEC-FADD_VEC#1,FRECP_STEP_VEC-FRECPSV#1,FMUL_VEC-FMULXV#1,FMLA_VEC-FMLAV#1,ANDOREOR_VEC-ANDV#0,ADDSUBL_VEC-SADDL2#0,ADDSUBL_VEC-SSUBL2#0,ADDSUBW_VEC-SADDW2#0,ADDSUBW_VEC-SSUBW2#0,ADDSUBHN_VEC-ADDHN2#0,ADDSUBHN_VEC-SUBHN2#0,ABDL_VEC-SABAL2#0,ABDL_VEC-SABDL2#0,MULL_VEC-SMLAL2#0,MULL_VEC-SMLSL2#0,MULL_VEC-SMULL2#0,PMULL_VEC-PMULL2#0,FHM_VEC-FMLAL_VEC#0,AES-AESE#0,AES-AESD#0,AES-AESMC#0,AES-AESIMC#0
pub const fn classify_impl_93_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x4384,
    0x1 => 0x2b80,
    0x2 => 0x0,
    0x3 => 0x2c80,
    0x4 => 0x4404,
    0x5 => 0x2b81,
    0x6 => 0x0,
    0x7 => 0x4300,
    0x8 => 0x4385,
    0x9 => 0x2b82,
    0xa => 0x0,
    0xb => 0x2c81,
    0xc => 0x4405,
    0xd => 0x2d80,
    0xe => 0x0,
    0xf => 0x2d81,
    0x10 => 0x4484,
    0x11 => 0x3480,
    0x12 => 0x1,
    0x13 => 0x3481,
    0x14 => 0x4504,
    0x15 => 0x3482,
    0x16 => 0x2,
    0x17 => 0x3483,
    0x18 => 0x4485,
    0x19 => 0x3500,
    0x1a => 0x3,
    0x1b => 0x3501,
    0x1c => 0x4505,
    0x1d => 0x3580,
    0x1e => 0x4,
    0x1f => 0x3581,
    0x20 => 0x4586,
    0x21 => 0x3680,
    0x22 => 0x0,
    0x23 => 0x2e80,
    0x24 => 0x0,
    0x25 => 0x3780,
    0x26 => 0x0,
    0x27 => 0x3781,
    0x28 => 0x4587,
    0x29 => 0x3502,
    0x2a => 0x0,
    0x2b => 0x3503,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x3700,
    0x30 => 0x4588,
    0x31 => 0x3900,
    0x32 => 0x0,
    0x33 => 0x4000,
    0x34 => 0x0,
    0x35 => 0x3c80,
    0x36 => 0x0,
    0x37 => 0x3f80,
    0x38 => 0x4702,
    0x39 => 0x3a80,
    0x3a => 0x0,
    0x3b => 0x5b00,
    0x3c => 0x0,
    0x3d => 0x3901,
    0x3e => 0x0,
    0x3f => 0x3e80,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_93_2_1(inst), // AES-AESE#0
    0x2 => return classify_impl_93_2_2(inst), // AES-AESD#0
    0x3 => return classify_impl_93_2_3(inst), // AES-AESMC#0
    0x4 => return classify_impl_93_2_4(inst), // AES-AESIMC#0
    _ => idx
  };
  return idx;
}

// HADDSUB_VEC-SHADD#0,HADDSUB_VEC-SRHADD#0,HADDSUB_VEC-SHSUB#0,QADDSUB_VEC-SQADD#3,QADDSUB_VEC-SQSUB#3,CMGT_VEC-CMGTV#3,CMGT_VEC-CMGEV#3,CMEQ_VEC-CMTSTV#3,CMZERO_VEC-CMGT_ZERO_VEC#3,CMZERO_VEC-CMEQ_ZERO_VEC#3,CMZERO_VEC-CMLT_ZERO_VEC#3,ARITH1_VEC-SUQADD_VEC#3,ARITH1_VEC-SQABS_VEC#3,ARITH1_VEC-ABS_VEC#3,ADDLP_VEC-SADDLP#0,ADDLP_VEC-SADALP#0,CLZ_VEC-CLS_VEC#0,BIT_VEC-CNT_VEC#0,REV_VEC-REV64_VEC#0,REV_VEC-REV16_VEC#0,XTN_VEC-XTN2_VEC#0,XTN_VEC-SQXTN2_VEC#0,SHL_REG_VEC-SSHL#3,SHL_REG_VEC-SQSHL#3,SHL_REG_VEC-SRSHL#3,SHL_REG_VEC-SQRSHL#3,MINMAX_VEC-SMAX#0,MINMAX_VEC-SMIN#0,MINMAX_VEC-SMAXP#0,MINMAX_VEC-SMINP#0,ABD_VEC-SABD#0,ABD_VEC-SABA#0,ADDSUB_VEC-ADD_VEC#3,ADDP_VEC-ADDP#3,MUL_VEC-MLA_VEC#0,MUL_VEC-MUL_VEC#0,FMINMAX_VEC-FMAXNM_VEC#1,FMINMAX_VEC-FMAX_VEC#1,FCMP_REG_VEC-FCMEQ_VEC#1,FADDSUB_VEC-FADD_VEC#1,FRECP_STEP_VEC-FRECPSV#1,FMUL_VEC-FMULXV#1,FMLA_VEC-FMLAV#1,ANDOREOR_VEC-ANDV#0,ADDSUBL_VEC-SADDL2#0,ADDSUBL_VEC-SSUBL2#0,ADDSUBW_VEC-SADDW2#0,ADDSUBW_VEC-SSUBW2#0,ADDSUBHN_VEC-ADDHN2#0,ADDSUBHN_VEC-SUBHN2#0,ABDL_VEC-SABAL2#0,ABDL_VEC-SABDL2#0,MULL_VEC-SMLAL2#0,MULL_VEC-SMLSL2#0,MULL_VEC-SMULL2#0,PMULL_VEC-PMULL2#0,FCVT_VEC-FCVTNS_VEC#1,FCVT_VEC-FCVTMS_VEC#1,FCVT_VEC-FCVTAS_VEC#1,FCVTL_VEC-FCVTL2_VEC#0,FCVT_FROMINT_VEC-SCVTF_VEC#1,FCVTN_VEC-FCVTN2#0,FRINT_VEC-FRINTN_VEC#1,FRINT_VEC-FRINTM_VEC#1,FRINTTS_VEC-FRINT32Z_VEC#1,FRINTTS_VEC-FRINT64Z_VEC#1,FHM_VEC-FMLAL_VEC#0,AES-AESE#0,AES-AESD#0,AES-AESMC#0,AES-AESIMC#0
pub const fn classify_impl_93(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_93_1(inst), // HADDSUB_VEC-SHADD#0,HADDSUB_VEC-SRHADD#0,HADDSUB_VEC-SHSUB#0,QADDSUB_VEC-SQADD#3,QADDSUB_VEC-SQSUB#3,CMGT_VEC-CMGTV#3,CMGT_VEC-CMGEV#3,CMEQ_VEC-CMTSTV#3,CMZERO_VEC-CMGT_ZERO_VEC#3,CMZERO_VEC-CMEQ_ZERO_VEC#3,CMZERO_VEC-CMLT_ZERO_VEC#3,ARITH1_VEC-SUQADD_VEC#3,ARITH1_VEC-SQABS_VEC#3,ARITH1_VEC-ABS_VEC#3,ADDLP_VEC-SADDLP#0,ADDLP_VEC-SADALP#0,CLZ_VEC-CLS_VEC#0,BIT_VEC-CNT_VEC#0,REV_VEC-REV64_VEC#0,REV_VEC-REV16_VEC#0,XTN_VEC-XTN2_VEC#0,XTN_VEC-SQXTN2_VEC#0,SHL_REG_VEC-SSHL#3,SHL_REG_VEC-SQSHL#3,SHL_REG_VEC-SRSHL#3,SHL_REG_VEC-SQRSHL#3,MINMAX_VEC-SMAX#0,MINMAX_VEC-SMIN#0,MINMAX_VEC-SMAXP#0,MINMAX_VEC-SMINP#0,ABD_VEC-SABD#0,ABD_VEC-SABA#0,ADDSUB_VEC-ADD_VEC#3,ADDP_VEC-ADDP#3,MUL_VEC-MLA_VEC#0,MUL_VEC-MUL_VEC#0,FMINMAX_VEC-FMAXNM_VEC#1,FMINMAX_VEC-FMAX_VEC#1,FCMP_REG_VEC-FCMEQ_VEC#1,FADDSUB_VEC-FADD_VEC#1,FRECP_STEP_VEC-FRECPSV#1,FMUL_VEC-FMULXV#1,FMLA_VEC-FMLAV#1,ANDOREOR_VEC-ANDV#0,ADDSUBL_VEC-SADDL2#0,ADDSUBL_VEC-SSUBL2#0,ADDSUBW_VEC-SADDW2#0,ADDSUBW_VEC-SSUBW2#0,ADDSUBHN_VEC-ADDHN2#0,ADDSUBHN_VEC-SUBHN2#0,ABDL_VEC-SABAL2#0,ABDL_VEC-SABDL2#0,MULL_VEC-SMLAL2#0,MULL_VEC-SMLSL2#0,MULL_VEC-SMULL2#0,PMULL_VEC-PMULL2#0,FCVT_VEC-FCVTNS_VEC#1,FCVT_VEC-FCVTMS_VEC#1,FCVT_VEC-FCVTAS_VEC#1,FCVTL_VEC-FCVTL2_VEC#0,FCVT_FROMINT_VEC-SCVTF_VEC#1,FCVTN_VEC-FCVTN2#0,FRINT_VEC-FRINTN_VEC#1,FRINT_VEC-FRINTM_VEC#1,FRINTTS_VEC-FRINT32Z_VEC#1,FRINTTS_VEC-FRINT64Z_VEC#1,FHM_VEC-FMLAL_VEC#0
    0x2 => return classify_impl_93_2(inst), // HADDSUB_VEC-SHADD#0,HADDSUB_VEC-SRHADD#0,HADDSUB_VEC-SHSUB#0,QADDSUB_VEC-SQADD#3,QADDSUB_VEC-SQSUB#3,CMGT_VEC-CMGTV#3,CMGT_VEC-CMGEV#3,CMEQ_VEC-CMTSTV#3,SHL_REG_VEC-SSHL#3,SHL_REG_VEC-SQSHL#3,SHL_REG_VEC-SRSHL#3,SHL_REG_VEC-SQRSHL#3,MINMAX_VEC-SMAX#0,MINMAX_VEC-SMIN#0,MINMAX_VEC-SMAXP#0,MINMAX_VEC-SMINP#0,ABD_VEC-SABD#0,ABD_VEC-SABA#0,ADDSUB_VEC-ADD_VEC#3,ADDP_VEC-ADDP#3,MUL_VEC-MLA_VEC#0,MUL_VEC-MUL_VEC#0,FMINMAX_VEC-FMAXNM_VEC#1,FMINMAX_VEC-FMAX_VEC#1,FCMP_REG_VEC-FCMEQ_VEC#1,FADDSUB_VEC-FADD_VEC#1,FRECP_STEP_VEC-FRECPSV#1,FMUL_VEC-FMULXV#1,FMLA_VEC-FMLAV#1,ANDOREOR_VEC-ANDV#0,ADDSUBL_VEC-SADDL2#0,ADDSUBL_VEC-SSUBL2#0,ADDSUBW_VEC-SADDW2#0,ADDSUBW_VEC-SSUBW2#0,ADDSUBHN_VEC-ADDHN2#0,ADDSUBHN_VEC-SUBHN2#0,ABDL_VEC-SABAL2#0,ABDL_VEC-SABDL2#0,MULL_VEC-SMLAL2#0,MULL_VEC-SMLSL2#0,MULL_VEC-SMULL2#0,PMULL_VEC-PMULL2#0,FHM_VEC-FMLAL_VEC#0,AES-AESE#0,AES-AESD#0,AES-AESMC#0,AES-AESIMC#0
    _ => idx
  };
  return idx;
}


// INT_HORZ_VEC-SADDLV#2
pub const fn classify_impl_94_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5380;
}


// INT_HORZ_VEC-SMAXV#2
pub const fn classify_impl_94_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5381;
}


// FP_HORZ_VEC-FMAXNMV_FP16#1
pub const fn classify_impl_94_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5480;
}


// FP_HORZ_VEC-FMAXV_FP16#1
pub const fn classify_impl_94_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5481;
}


// INT_HORZ_VEC-SMINV#2
pub const fn classify_impl_94_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5382;
}


// INT_HORZ_VEC-ADDV#2
pub const fn classify_impl_94_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5383;
}

// HADDSUB_VEC-SHADD#0,HADDSUB_VEC-SRHADD#0,HADDSUB_VEC-SHSUB#0,QADDSUB_VEC-SQADD#3,QADDSUB_VEC-SQSUB#3,CMGT_VEC-CMGTV#3,CMGT_VEC-CMGEV#3,CMEQ_VEC-CMTSTV#3,SHL_REG_VEC-SSHL#3,SHL_REG_VEC-SQSHL#3,SHL_REG_VEC-SRSHL#3,SHL_REG_VEC-SQRSHL#3,MINMAX_VEC-SMAX#0,MINMAX_VEC-SMIN#0,MINMAX_VEC-SMAXP#0,MINMAX_VEC-SMINP#0,ABD_VEC-SABD#0,ABD_VEC-SABA#0,ADDSUB_VEC-ADD_VEC#3,ADDP_VEC-ADDP#3,MUL_VEC-MLA_VEC#0,MUL_VEC-MUL_VEC#0,FMINMAX_VEC-FMAXNM_VEC#1,FMINMAX_VEC-FMAX_VEC#1,FCMP_REG_VEC-FCMEQ_VEC#1,FADDSUB_VEC-FADD_VEC#1,FRECP_STEP_VEC-FRECPSV#1,FMUL_VEC-FMULXV#1,FMLA_VEC-FMLAV#1,ANDOREOR_VEC-ANDV#0,ADDSUBL_VEC-SADDL2#0,ADDSUBL_VEC-SSUBL2#0,ADDSUBW_VEC-SADDW2#0,ADDSUBW_VEC-SSUBW2#0,ADDSUBHN_VEC-ADDHN2#0,ADDSUBHN_VEC-SUBHN2#0,ABDL_VEC-SABAL2#0,ABDL_VEC-SABDL2#0,MULL_VEC-SMLAL2#0,MULL_VEC-SMLSL2#0,MULL_VEC-SMULL2#0,PMULL_VEC-PMULL2#0,INT_HORZ_VEC-SADDLV#2,INT_HORZ_VEC-SMAXV#2,INT_HORZ_VEC-SMINV#2,INT_HORZ_VEC-ADDV#2,FP_HORZ_VEC-FMAXNMV_FP16#1,FP_HORZ_VEC-FMAXV_FP16#1,FHM_VEC-FMLAL_VEC#0
pub const fn classify_impl_94(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x4384,
    0x1 => 0x2b80,
    0x2 => 0x0,
    0x3 => 0x2c80,
    0x4 => 0x4404,
    0x5 => 0x2b81,
    0x6 => 0x0,
    0x7 => 0x4300,
    0x8 => 0x4385,
    0x9 => 0x2b82,
    0xa => 0x0,
    0xb => 0x2c81,
    0xc => 0x4405,
    0xd => 0x2d80,
    0xe => 0x1,
    0xf => 0x2d81,
    0x10 => 0x4484,
    0x11 => 0x3480,
    0x12 => 0x0,
    0x13 => 0x3481,
    0x14 => 0x4504,
    0x15 => 0x3482,
    0x16 => 0x0,
    0x17 => 0x3483,
    0x18 => 0x4485,
    0x19 => 0x3500,
    0x1a => 0x0,
    0x1b => 0x3501,
    0x1c => 0x4505,
    0x1d => 0x3580,
    0x1e => 0x0,
    0x1f => 0x3581,
    0x20 => 0x4586,
    0x21 => 0x3680,
    0x22 => 0x0,
    0x23 => 0x2e80,
    0x24 => 0x0,
    0x25 => 0x3780,
    0x26 => 0x0,
    0x27 => 0x3781,
    0x28 => 0x4587,
    0x29 => 0x3502,
    0x2a => 0x2,
    0x2b => 0x3503,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x3700,
    0x30 => 0x4588,
    0x31 => 0x3900,
    0x32 => 0x3,
    0x33 => 0x4000,
    0x34 => 0x0,
    0x35 => 0x3c80,
    0x36 => 0x0,
    0x37 => 0x3f80,
    0x38 => 0x4702,
    0x39 => 0x3a80,
    0x3a => 0x0,
    0x3b => 0x5b00,
    0x3c => 0x0,
    0x3d => 0x3901,
    0x3e => 0x4,
    0x3f => 0x3e80,
    0x40 => 0x4384,
    0x41 => 0x2b80,
    0x42 => 0x0,
    0x43 => 0x2c80,
    0x44 => 0x4404,
    0x45 => 0x2b81,
    0x46 => 0x0,
    0x47 => 0x4300,
    0x48 => 0x4385,
    0x49 => 0x2b82,
    0x4a => 0x0,
    0x4b => 0x2c81,
    0x4c => 0x4405,
    0x4d => 0x2d80,
    0x4e => 0x0,
    0x4f => 0x2d81,
    0x50 => 0x4484,
    0x51 => 0x3480,
    0x52 => 0x0,
    0x53 => 0x3481,
    0x54 => 0x4504,
    0x55 => 0x3482,
    0x56 => 0x0,
    0x57 => 0x3483,
    0x58 => 0x4485,
    0x59 => 0x3500,
    0x5a => 0x0,
    0x5b => 0x3501,
    0x5c => 0x4505,
    0x5d => 0x3580,
    0x5e => 0x0,
    0x5f => 0x3581,
    0x60 => 0x4586,
    0x61 => 0x3680,
    0x62 => 0x0,
    0x63 => 0x2e80,
    0x64 => 0x0,
    0x65 => 0x3780,
    0x66 => 0x0,
    0x67 => 0x3781,
    0x68 => 0x4587,
    0x69 => 0x3502,
    0x6a => 0x5,
    0x6b => 0x3503,
    0x6c => 0x0,
    0x6d => 0x0,
    0x6e => 0x6,
    0x6f => 0x3700,
    0x70 => 0x4588,
    0x71 => 0x3900,
    0x72 => 0x0,
    0x73 => 0x4000,
    0x74 => 0x0,
    0x75 => 0x3c80,
    0x76 => 0x0,
    0x77 => 0x3f80,
    0x78 => 0x4702,
    0x79 => 0x3a80,
    0x7a => 0x0,
    0x7b => 0x5b00,
    0x7c => 0x0,
    0x7d => 0x3901,
    0x7e => 0x0,
    0x7f => 0x3e80,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_94_1(inst), // INT_HORZ_VEC-SADDLV#2
    0x2 => return classify_impl_94_2(inst), // INT_HORZ_VEC-SMAXV#2
    0x3 => return classify_impl_94_3(inst), // FP_HORZ_VEC-FMAXNMV_FP16#1
    0x4 => return classify_impl_94_4(inst), // FP_HORZ_VEC-FMAXV_FP16#1
    0x5 => return classify_impl_94_5(inst), // INT_HORZ_VEC-SMINV#2
    0x6 => return classify_impl_94_6(inst), // INT_HORZ_VEC-ADDV#2
    _ => idx
  };
  return idx;
}


// ZIP-UZP1#4,ZIP-TRN1#4,ZIP-ZIP1#4,ZIP-UZP2#4,ZIP-TRN2#4,ZIP-ZIP2#4,FP16_3REG_VEC-FMAXNM_VEC_FP16#0,FP16_3REG_VEC-FMLA_VEC_FP16#0,FP16_3REG_VEC-FADD_VEC_FP16#0,FP16_3REG_VEC-FMULX_VEC_FP16#0,FP16_3REG_VEC-FCMEQ_VEC_FP16#0,FP16_3REG_VEC-FMAX_VEC_FP16#0,FP16_3REG_VEC-FRECPS_VEC_FP16#0
pub const fn classify_impl_95(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x0,
    0x1 => 0x4180,
    0x2 => 0x0,
    0x3 => 0x4181,
    0x4 => 0x0,
    0x5 => 0x4182,
    0x6 => 0x2a80,
    0x7 => 0x4183,
    0x8 => 0x0,
    0x9 => 0x4184,
    0xa => 0x2a81,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4185,
    0xe => 0x2a82,
    0xf => 0x4186,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// REV_VEC-REV64_VEC#1
pub const fn classify_impl_96_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3280;
}


// ADDLP_VEC-SADDLP#1
pub const fn classify_impl_96_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3100;
}


// ARITH1_VEC-SUQADD_VEC#4
pub const fn classify_impl_96_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3080;
}


// CLZ_VEC-CLS_VEC#1
pub const fn classify_impl_96_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3180;
}


// ADDLP_VEC-SADALP#1
pub const fn classify_impl_96_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3101;
}


// ARITH1_VEC-SQABS_VEC#4
pub const fn classify_impl_96_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3081;
}


// CMZERO_VEC-CMGT_ZERO_VEC#4
pub const fn classify_impl_96_7(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f80;
}


// CMZERO_VEC-CMEQ_ZERO_VEC#4
pub const fn classify_impl_96_8(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f81;
}


// CMZERO_VEC-CMLT_ZERO_VEC#4
pub const fn classify_impl_96_9(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f82;
}


// ARITH1_VEC-ABS_VEC#4
pub const fn classify_impl_96_a(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3082;
}


// XTN_VEC-XTN2_VEC#1
pub const fn classify_impl_96_b(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3384;
}


// XTN_VEC-SQXTN2_VEC#1
pub const fn classify_impl_96_c(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3385;
}


// FCVTN_VEC-FCVTN2#1
pub const fn classify_impl_96_d(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5183;
}


// FCVTL_VEC-FCVTL2_VEC#0
pub const fn classify_impl_96_e(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f81;
}


// FRINT_VEC-FRINTN_VEC#2
pub const fn classify_impl_96_f(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5200;
}


// FRINT_VEC-FRINTM_VEC#2
pub const fn classify_impl_96_10(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5201;
}


// FCVT_VEC-FCVTNS_VEC#2
pub const fn classify_impl_96_11(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f00;
}


// FCVT_VEC-FCVTMS_VEC#2
pub const fn classify_impl_96_12(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f01;
}


// FCVT_VEC-FCVTAS_VEC#2
pub const fn classify_impl_96_13(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f02;
}


// FCVT_FROMINT_VEC-SCVTF_VEC#2
pub const fn classify_impl_96_14(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5080;
}


// FRINTTS_VEC-FRINT32Z_VEC#2
pub const fn classify_impl_96_15(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5280;
}


// FRINTTS_VEC-FRINT64Z_VEC#2
pub const fn classify_impl_96_16(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5281;
}

// HADDSUB_VEC-SHADD#1,HADDSUB_VEC-SRHADD#1,HADDSUB_VEC-SHSUB#1,QADDSUB_VEC-SQADD#4,QADDSUB_VEC-SQSUB#4,CMGT_VEC-CMGTV#4,CMGT_VEC-CMGEV#4,CMEQ_VEC-CMTSTV#4,CMZERO_VEC-CMGT_ZERO_VEC#4,CMZERO_VEC-CMEQ_ZERO_VEC#4,CMZERO_VEC-CMLT_ZERO_VEC#4,ARITH1_VEC-SUQADD_VEC#4,ARITH1_VEC-SQABS_VEC#4,ARITH1_VEC-ABS_VEC#4,ADDLP_VEC-SADDLP#1,ADDLP_VEC-SADALP#1,CLZ_VEC-CLS_VEC#1,REV_VEC-REV64_VEC#1,XTN_VEC-XTN2_VEC#1,XTN_VEC-SQXTN2_VEC#1,SHL_REG_VEC-SSHL#4,SHL_REG_VEC-SQSHL#4,SHL_REG_VEC-SRSHL#4,SHL_REG_VEC-SQRSHL#4,MINMAX_VEC-SMAX#1,MINMAX_VEC-SMIN#1,MINMAX_VEC-SMAXP#1,MINMAX_VEC-SMINP#1,ABD_VEC-SABD#1,ABD_VEC-SABA#1,ADDSUB_VEC-ADD_VEC#4,ADDP_VEC-ADDP#4,MUL_VEC-MLA_VEC#1,MUL_VEC-MUL_VEC#1,SQDMULH_VEC-SQDMULH#0,FMINMAX_VEC-FMAXNM_VEC#2,FMINMAX_VEC-FMAX_VEC#2,FCMP_REG_VEC-FCMEQ_VEC#2,FADDSUB_VEC-FADD_VEC#2,FRECP_STEP_VEC-FRECPSV#2,FMUL_VEC-FMULXV#2,FMLA_VEC-FMLAV#2,ANDOREOR_VEC-BICV#0,ADDSUBL_VEC-SADDL2#1,ADDSUBL_VEC-SSUBL2#1,ADDSUBW_VEC-SADDW2#1,ADDSUBW_VEC-SSUBW2#1,ADDSUBHN_VEC-ADDHN2#1,ADDSUBHN_VEC-SUBHN2#1,ABDL_VEC-SABAL2#1,ABDL_VEC-SABDL2#1,MULL_VEC-SMLAL2#1,MULL_VEC-SMLSL2#1,MULL_VEC-SMULL2#1,SQDMULL_VEC-SQDMLAL2#0,SQDMULL_VEC-SQDMLSL2#0,SQDMULL_VEC-SQDMULL2#0,FCVT_VEC-FCVTNS_VEC#2,FCVT_VEC-FCVTMS_VEC#2,FCVT_VEC-FCVTAS_VEC#2,FCVTL_VEC-FCVTL2_VEC#0,FCVT_FROMINT_VEC-SCVTF_VEC#2,FCVTN_VEC-FCVTN2#1,FRINT_VEC-FRINTN_VEC#2,FRINT_VEC-FRINTM_VEC#2,FRINTTS_VEC-FRINT32Z_VEC#2,FRINTTS_VEC-FRINT64Z_VEC#2
pub const fn classify_impl_96(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x4384,
    0x1 => 0x2b80,
    0x2 => 0x1,
    0x3 => 0x2c80,
    0x4 => 0x4404,
    0x5 => 0x2b81,
    0x6 => 0x0,
    0x7 => 0x4301,
    0x8 => 0x4385,
    0x9 => 0x2b82,
    0xa => 0x2,
    0xb => 0x2c81,
    0xc => 0x4405,
    0xd => 0x2d80,
    0xe => 0x3,
    0xf => 0x2d81,
    0x10 => 0x4484,
    0x11 => 0x3480,
    0x12 => 0x4,
    0x13 => 0x3481,
    0x14 => 0x4504,
    0x15 => 0x3482,
    0x16 => 0x0,
    0x17 => 0x3483,
    0x18 => 0x4485,
    0x19 => 0x3500,
    0x1a => 0x5,
    0x1b => 0x3501,
    0x1c => 0x4505,
    0x1d => 0x3580,
    0x1e => 0x6,
    0x1f => 0x3581,
    0x20 => 0x4586,
    0x21 => 0x3680,
    0x22 => 0x7,
    0x23 => 0x2e80,
    0x24 => 0x4683,
    0x25 => 0x3780,
    0x26 => 0x8,
    0x27 => 0x3781,
    0x28 => 0x4587,
    0x29 => 0x3502,
    0x2a => 0x9,
    0x2b => 0x3503,
    0x2c => 0x4684,
    0x2d => 0x3880,
    0x2e => 0xa,
    0x2f => 0x3700,
    0x30 => 0x4588,
    0x31 => 0x3900,
    0x32 => 0x0,
    0x33 => 0x4000,
    0x34 => 0x4685,
    0x35 => 0x3c80,
    0x36 => 0x0,
    0x37 => 0x3f80,
    0x38 => 0x0,
    0x39 => 0x3a80,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x3901,
    0x3e => 0x0,
    0x3f => 0x3e80,
    0x40 => 0x4384,
    0x41 => 0x2b80,
    0x42 => 0x0,
    0x43 => 0x2c80,
    0x44 => 0x4404,
    0x45 => 0x2b81,
    0x46 => 0x0,
    0x47 => 0x4301,
    0x48 => 0x4385,
    0x49 => 0x2b82,
    0x4a => 0xb,
    0x4b => 0x2c81,
    0x4c => 0x4405,
    0x4d => 0x2d80,
    0x4e => 0x0,
    0x4f => 0x2d81,
    0x50 => 0x4484,
    0x51 => 0x3480,
    0x52 => 0xc,
    0x53 => 0x3481,
    0x54 => 0x4504,
    0x55 => 0x3482,
    0x56 => 0x0,
    0x57 => 0x3483,
    0x58 => 0x4485,
    0x59 => 0x3500,
    0x5a => 0xd,
    0x5b => 0x3501,
    0x5c => 0x4505,
    0x5d => 0x3580,
    0x5e => 0xe,
    0x5f => 0x3581,
    0x60 => 0x4586,
    0x61 => 0x3680,
    0x62 => 0xf,
    0x63 => 0x2e80,
    0x64 => 0x4683,
    0x65 => 0x3780,
    0x66 => 0x10,
    0x67 => 0x3781,
    0x68 => 0x4587,
    0x69 => 0x3502,
    0x6a => 0x11,
    0x6b => 0x3503,
    0x6c => 0x4684,
    0x6d => 0x3880,
    0x6e => 0x12,
    0x6f => 0x3700,
    0x70 => 0x4588,
    0x71 => 0x3900,
    0x72 => 0x13,
    0x73 => 0x4000,
    0x74 => 0x4685,
    0x75 => 0x3c80,
    0x76 => 0x14,
    0x77 => 0x3f80,
    0x78 => 0x0,
    0x79 => 0x3a80,
    0x7a => 0x15,
    0x7b => 0x0,
    0x7c => 0x0,
    0x7d => 0x3901,
    0x7e => 0x16,
    0x7f => 0x3e80,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_96_1(inst), // REV_VEC-REV64_VEC#1
    0x2 => return classify_impl_96_2(inst), // ADDLP_VEC-SADDLP#1
    0x3 => return classify_impl_96_3(inst), // ARITH1_VEC-SUQADD_VEC#4
    0x4 => return classify_impl_96_4(inst), // CLZ_VEC-CLS_VEC#1
    0x5 => return classify_impl_96_5(inst), // ADDLP_VEC-SADALP#1
    0x6 => return classify_impl_96_6(inst), // ARITH1_VEC-SQABS_VEC#4
    0x7 => return classify_impl_96_7(inst), // CMZERO_VEC-CMGT_ZERO_VEC#4
    0x8 => return classify_impl_96_8(inst), // CMZERO_VEC-CMEQ_ZERO_VEC#4
    0x9 => return classify_impl_96_9(inst), // CMZERO_VEC-CMLT_ZERO_VEC#4
    0xa => return classify_impl_96_a(inst), // ARITH1_VEC-ABS_VEC#4
    0xb => return classify_impl_96_b(inst), // XTN_VEC-XTN2_VEC#1
    0xc => return classify_impl_96_c(inst), // XTN_VEC-SQXTN2_VEC#1
    0xd => return classify_impl_96_d(inst), // FCVTN_VEC-FCVTN2#1
    0xe => return classify_impl_96_e(inst), // FCVTL_VEC-FCVTL2_VEC#0
    0xf => return classify_impl_96_f(inst), // FRINT_VEC-FRINTN_VEC#2
    0x10 => return classify_impl_96_10(inst), // FRINT_VEC-FRINTM_VEC#2
    0x11 => return classify_impl_96_11(inst), // FCVT_VEC-FCVTNS_VEC#2
    0x12 => return classify_impl_96_12(inst), // FCVT_VEC-FCVTMS_VEC#2
    0x13 => return classify_impl_96_13(inst), // FCVT_VEC-FCVTAS_VEC#2
    0x14 => return classify_impl_96_14(inst), // FCVT_FROMINT_VEC-SCVTF_VEC#2
    0x15 => return classify_impl_96_15(inst), // FRINTTS_VEC-FRINT32Z_VEC#2
    0x16 => return classify_impl_96_16(inst), // FRINTTS_VEC-FRINT64Z_VEC#2
    _ => idx
  };
  return idx;
}


// INT_HORZ_VEC-SADDLV#3
pub const fn classify_impl_97_1_1(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x5380;
}


// INT_HORZ_VEC-SMAXV#3
pub const fn classify_impl_97_1_2(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x5381;
}


// INT_HORZ_VEC-SMINV#3
pub const fn classify_impl_97_1_3(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x5382;
}


// INT_HORZ_VEC-ADDV#3
pub const fn classify_impl_97_1_4(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x5383;
}

// HADDSUB_VEC-SHADD#1,HADDSUB_VEC-SRHADD#1,HADDSUB_VEC-SHSUB#1,QADDSUB_VEC-SQADD#4,QADDSUB_VEC-SQSUB#4,CMGT_VEC-CMGTV#4,CMGT_VEC-CMGEV#4,CMEQ_VEC-CMTSTV#4,SHL_REG_VEC-SSHL#4,SHL_REG_VEC-SQSHL#4,SHL_REG_VEC-SRSHL#4,SHL_REG_VEC-SQRSHL#4,MINMAX_VEC-SMAX#1,MINMAX_VEC-SMIN#1,MINMAX_VEC-SMAXP#1,MINMAX_VEC-SMINP#1,ABD_VEC-SABD#1,ABD_VEC-SABA#1,ADDSUB_VEC-ADD_VEC#4,ADDP_VEC-ADDP#4,MUL_VEC-MLA_VEC#1,MUL_VEC-MUL_VEC#1,SQDMULH_VEC-SQDMULH#0,FMINMAX_VEC-FMAXNM_VEC#2,FMINMAX_VEC-FMAX_VEC#2,FCMP_REG_VEC-FCMEQ_VEC#2,FADDSUB_VEC-FADD_VEC#2,FRECP_STEP_VEC-FRECPSV#2,FMUL_VEC-FMULXV#2,FMLA_VEC-FMLAV#2,ANDOREOR_VEC-BICV#0,ADDSUBL_VEC-SADDL2#1,ADDSUBL_VEC-SSUBL2#1,ADDSUBW_VEC-SADDW2#1,ADDSUBW_VEC-SSUBW2#1,ADDSUBHN_VEC-ADDHN2#1,ADDSUBHN_VEC-SUBHN2#1,ABDL_VEC-SABAL2#1,ABDL_VEC-SABDL2#1,MULL_VEC-SMLAL2#1,MULL_VEC-SMLSL2#1,MULL_VEC-SMULL2#1,SQDMULL_VEC-SQDMLAL2#0,SQDMULL_VEC-SQDMLSL2#0,SQDMULL_VEC-SQDMULL2#0,INT_HORZ_VEC-SADDLV#3,INT_HORZ_VEC-SMAXV#3,INT_HORZ_VEC-SMINV#3,INT_HORZ_VEC-ADDV#3
pub const fn classify_impl_97_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x4384,
    0x1 => 0x2b80,
    0x2 => 0x0,
    0x3 => 0x2c80,
    0x4 => 0x4404,
    0x5 => 0x2b81,
    0x6 => 0x0,
    0x7 => 0x4301,
    0x8 => 0x4385,
    0x9 => 0x2b82,
    0xa => 0x0,
    0xb => 0x2c81,
    0xc => 0x4405,
    0xd => 0x2d80,
    0xe => 0x1,
    0xf => 0x2d81,
    0x10 => 0x4484,
    0x11 => 0x3480,
    0x12 => 0x0,
    0x13 => 0x3481,
    0x14 => 0x4504,
    0x15 => 0x3482,
    0x16 => 0x0,
    0x17 => 0x3483,
    0x18 => 0x4485,
    0x19 => 0x3500,
    0x1a => 0x0,
    0x1b => 0x3501,
    0x1c => 0x4505,
    0x1d => 0x3580,
    0x1e => 0x0,
    0x1f => 0x3581,
    0x20 => 0x4586,
    0x21 => 0x3680,
    0x22 => 0x0,
    0x23 => 0x2e80,
    0x24 => 0x4683,
    0x25 => 0x3780,
    0x26 => 0x0,
    0x27 => 0x3781,
    0x28 => 0x4587,
    0x29 => 0x3502,
    0x2a => 0x2,
    0x2b => 0x3503,
    0x2c => 0x4684,
    0x2d => 0x3880,
    0x2e => 0x0,
    0x2f => 0x3700,
    0x30 => 0x4588,
    0x31 => 0x3900,
    0x32 => 0x0,
    0x33 => 0x4000,
    0x34 => 0x4685,
    0x35 => 0x3c80,
    0x36 => 0x0,
    0x37 => 0x3f80,
    0x38 => 0x0,
    0x39 => 0x3a80,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x3901,
    0x3e => 0x0,
    0x3f => 0x3e80,
    0x40 => 0x4384,
    0x41 => 0x2b80,
    0x42 => 0x0,
    0x43 => 0x2c80,
    0x44 => 0x4404,
    0x45 => 0x2b81,
    0x46 => 0x0,
    0x47 => 0x4301,
    0x48 => 0x4385,
    0x49 => 0x2b82,
    0x4a => 0x0,
    0x4b => 0x2c81,
    0x4c => 0x4405,
    0x4d => 0x2d80,
    0x4e => 0x0,
    0x4f => 0x2d81,
    0x50 => 0x4484,
    0x51 => 0x3480,
    0x52 => 0x0,
    0x53 => 0x3481,
    0x54 => 0x4504,
    0x55 => 0x3482,
    0x56 => 0x0,
    0x57 => 0x3483,
    0x58 => 0x4485,
    0x59 => 0x3500,
    0x5a => 0x0,
    0x5b => 0x3501,
    0x5c => 0x4505,
    0x5d => 0x3580,
    0x5e => 0x0,
    0x5f => 0x3581,
    0x60 => 0x4586,
    0x61 => 0x3680,
    0x62 => 0x0,
    0x63 => 0x2e80,
    0x64 => 0x4683,
    0x65 => 0x3780,
    0x66 => 0x0,
    0x67 => 0x3781,
    0x68 => 0x4587,
    0x69 => 0x3502,
    0x6a => 0x3,
    0x6b => 0x3503,
    0x6c => 0x4684,
    0x6d => 0x3880,
    0x6e => 0x4,
    0x6f => 0x3700,
    0x70 => 0x4588,
    0x71 => 0x3900,
    0x72 => 0x0,
    0x73 => 0x4000,
    0x74 => 0x4685,
    0x75 => 0x3c80,
    0x76 => 0x0,
    0x77 => 0x3f80,
    0x78 => 0x0,
    0x79 => 0x3a80,
    0x7a => 0x0,
    0x7b => 0x0,
    0x7c => 0x0,
    0x7d => 0x3901,
    0x7e => 0x0,
    0x7f => 0x3e80,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_97_1_1(inst), // INT_HORZ_VEC-SADDLV#3
    0x2 => return classify_impl_97_1_2(inst), // INT_HORZ_VEC-SMAXV#3
    0x3 => return classify_impl_97_1_3(inst), // INT_HORZ_VEC-SMINV#3
    0x4 => return classify_impl_97_1_4(inst), // INT_HORZ_VEC-ADDV#3
    _ => idx
  };
  return idx;
}


// FP16_2REG_VEC-FRINTN_VEC_FP16#0
pub const fn classify_impl_97_2_1(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x4280;
}


// FP16_2REG_VEC-FRINTM_VEC_FP16#0
pub const fn classify_impl_97_2_2(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x4281;
}


// FP16_2REG_VEC-FCVTNS_VEC_FP16#0
pub const fn classify_impl_97_2_3(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x4282;
}


// FP16_2REG_VEC-FCVTMS_VEC_FP16#0
pub const fn classify_impl_97_2_4(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x4283;
}


// FP16_2REG_VEC-FCVTAS_VEC_FP16#0
pub const fn classify_impl_97_2_5(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x4284;
}


// FP16_2REG_VEC-SCVTF_VEC_FP16#0
pub const fn classify_impl_97_2_6(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x4285;
}

// HADDSUB_VEC-SHADD#1,HADDSUB_VEC-SRHADD#1,HADDSUB_VEC-SHSUB#1,QADDSUB_VEC-SQADD#4,QADDSUB_VEC-SQSUB#4,CMGT_VEC-CMGTV#4,CMGT_VEC-CMGEV#4,CMEQ_VEC-CMTSTV#4,SHL_REG_VEC-SSHL#4,SHL_REG_VEC-SQSHL#4,SHL_REG_VEC-SRSHL#4,SHL_REG_VEC-SQRSHL#4,MINMAX_VEC-SMAX#1,MINMAX_VEC-SMIN#1,MINMAX_VEC-SMAXP#1,MINMAX_VEC-SMINP#1,ABD_VEC-SABD#1,ABD_VEC-SABA#1,ADDSUB_VEC-ADD_VEC#4,ADDP_VEC-ADDP#4,MUL_VEC-MLA_VEC#1,MUL_VEC-MUL_VEC#1,SQDMULH_VEC-SQDMULH#0,FMINMAX_VEC-FMAXNM_VEC#2,FMINMAX_VEC-FMAX_VEC#2,FCMP_REG_VEC-FCMEQ_VEC#2,FADDSUB_VEC-FADD_VEC#2,FRECP_STEP_VEC-FRECPSV#2,FMUL_VEC-FMULXV#2,FMLA_VEC-FMLAV#2,FP16_2REG_VEC-FRINTN_VEC_FP16#0,FP16_2REG_VEC-FRINTM_VEC_FP16#0,FP16_2REG_VEC-FCVTNS_VEC_FP16#0,FP16_2REG_VEC-FCVTMS_VEC_FP16#0,FP16_2REG_VEC-FCVTAS_VEC_FP16#0,FP16_2REG_VEC-SCVTF_VEC_FP16#0,ANDOREOR_VEC-BICV#0,ADDSUBL_VEC-SADDL2#1,ADDSUBL_VEC-SSUBL2#1,ADDSUBW_VEC-SADDW2#1,ADDSUBW_VEC-SSUBW2#1,ADDSUBHN_VEC-ADDHN2#1,ADDSUBHN_VEC-SUBHN2#1,ABDL_VEC-SABAL2#1,ABDL_VEC-SABDL2#1,MULL_VEC-SMLAL2#1,MULL_VEC-SMLSL2#1,MULL_VEC-SMULL2#1,SQDMULL_VEC-SQDMLAL2#0,SQDMULL_VEC-SQDMLSL2#0,SQDMULL_VEC-SQDMULL2#0
pub const fn classify_impl_97_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x4384,
    0x1 => 0x2b80,
    0x2 => 0x0,
    0x3 => 0x2c80,
    0x4 => 0x4404,
    0x5 => 0x2b81,
    0x6 => 0x0,
    0x7 => 0x4301,
    0x8 => 0x4385,
    0x9 => 0x2b82,
    0xa => 0x0,
    0xb => 0x2c81,
    0xc => 0x4405,
    0xd => 0x2d80,
    0xe => 0x0,
    0xf => 0x2d81,
    0x10 => 0x4484,
    0x11 => 0x3480,
    0x12 => 0x0,
    0x13 => 0x3481,
    0x14 => 0x4504,
    0x15 => 0x3482,
    0x16 => 0x0,
    0x17 => 0x3483,
    0x18 => 0x4485,
    0x19 => 0x3500,
    0x1a => 0x0,
    0x1b => 0x3501,
    0x1c => 0x4505,
    0x1d => 0x3580,
    0x1e => 0x0,
    0x1f => 0x3581,
    0x20 => 0x4586,
    0x21 => 0x3680,
    0x22 => 0x1,
    0x23 => 0x2e80,
    0x24 => 0x4683,
    0x25 => 0x3780,
    0x26 => 0x2,
    0x27 => 0x3781,
    0x28 => 0x4587,
    0x29 => 0x3502,
    0x2a => 0x3,
    0x2b => 0x3503,
    0x2c => 0x4684,
    0x2d => 0x3880,
    0x2e => 0x4,
    0x2f => 0x3700,
    0x30 => 0x4588,
    0x31 => 0x3900,
    0x32 => 0x5,
    0x33 => 0x4000,
    0x34 => 0x4685,
    0x35 => 0x3c80,
    0x36 => 0x6,
    0x37 => 0x3f80,
    0x38 => 0x0,
    0x39 => 0x3a80,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x3901,
    0x3e => 0x0,
    0x3f => 0x3e80,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_97_2_1(inst), // FP16_2REG_VEC-FRINTN_VEC_FP16#0
    0x2 => return classify_impl_97_2_2(inst), // FP16_2REG_VEC-FRINTM_VEC_FP16#0
    0x3 => return classify_impl_97_2_3(inst), // FP16_2REG_VEC-FCVTNS_VEC_FP16#0
    0x4 => return classify_impl_97_2_4(inst), // FP16_2REG_VEC-FCVTMS_VEC_FP16#0
    0x5 => return classify_impl_97_2_5(inst), // FP16_2REG_VEC-FCVTAS_VEC_FP16#0
    0x6 => return classify_impl_97_2_6(inst), // FP16_2REG_VEC-SCVTF_VEC_FP16#0
    _ => idx
  };
  return idx;
}

// HADDSUB_VEC-SHADD#1,HADDSUB_VEC-SRHADD#1,HADDSUB_VEC-SHSUB#1,QADDSUB_VEC-SQADD#4,QADDSUB_VEC-SQSUB#4,CMGT_VEC-CMGTV#4,CMGT_VEC-CMGEV#4,CMEQ_VEC-CMTSTV#4,SHL_REG_VEC-SSHL#4,SHL_REG_VEC-SQSHL#4,SHL_REG_VEC-SRSHL#4,SHL_REG_VEC-SQRSHL#4,MINMAX_VEC-SMAX#1,MINMAX_VEC-SMIN#1,MINMAX_VEC-SMAXP#1,MINMAX_VEC-SMINP#1,ABD_VEC-SABD#1,ABD_VEC-SABA#1,ADDSUB_VEC-ADD_VEC#4,ADDP_VEC-ADDP#4,MUL_VEC-MLA_VEC#1,MUL_VEC-MUL_VEC#1,SQDMULH_VEC-SQDMULH#0,FMINMAX_VEC-FMAXNM_VEC#2,FMINMAX_VEC-FMAX_VEC#2,FCMP_REG_VEC-FCMEQ_VEC#2,FADDSUB_VEC-FADD_VEC#2,FRECP_STEP_VEC-FRECPSV#2,FMUL_VEC-FMULXV#2,FMLA_VEC-FMLAV#2,FP16_2REG_VEC-FRINTN_VEC_FP16#0,FP16_2REG_VEC-FRINTM_VEC_FP16#0,FP16_2REG_VEC-FCVTNS_VEC_FP16#0,FP16_2REG_VEC-FCVTMS_VEC_FP16#0,FP16_2REG_VEC-FCVTAS_VEC_FP16#0,FP16_2REG_VEC-SCVTF_VEC_FP16#0,ANDOREOR_VEC-BICV#0,ADDSUBL_VEC-SADDL2#1,ADDSUBL_VEC-SSUBL2#1,ADDSUBW_VEC-SADDW2#1,ADDSUBW_VEC-SSUBW2#1,ADDSUBHN_VEC-ADDHN2#1,ADDSUBHN_VEC-SUBHN2#1,ABDL_VEC-SABAL2#1,ABDL_VEC-SABDL2#1,MULL_VEC-SMLAL2#1,MULL_VEC-SMLSL2#1,MULL_VEC-SMULL2#1,SQDMULL_VEC-SQDMLAL2#0,SQDMULL_VEC-SQDMLSL2#0,SQDMULL_VEC-SQDMULL2#0,INT_HORZ_VEC-SADDLV#3,INT_HORZ_VEC-SMAXV#3,INT_HORZ_VEC-SMINV#3,INT_HORZ_VEC-ADDV#3
pub const fn classify_impl_97(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_97_1(inst), // HADDSUB_VEC-SHADD#1,HADDSUB_VEC-SRHADD#1,HADDSUB_VEC-SHSUB#1,QADDSUB_VEC-SQADD#4,QADDSUB_VEC-SQSUB#4,CMGT_VEC-CMGTV#4,CMGT_VEC-CMGEV#4,CMEQ_VEC-CMTSTV#4,SHL_REG_VEC-SSHL#4,SHL_REG_VEC-SQSHL#4,SHL_REG_VEC-SRSHL#4,SHL_REG_VEC-SQRSHL#4,MINMAX_VEC-SMAX#1,MINMAX_VEC-SMIN#1,MINMAX_VEC-SMAXP#1,MINMAX_VEC-SMINP#1,ABD_VEC-SABD#1,ABD_VEC-SABA#1,ADDSUB_VEC-ADD_VEC#4,ADDP_VEC-ADDP#4,MUL_VEC-MLA_VEC#1,MUL_VEC-MUL_VEC#1,SQDMULH_VEC-SQDMULH#0,FMINMAX_VEC-FMAXNM_VEC#2,FMINMAX_VEC-FMAX_VEC#2,FCMP_REG_VEC-FCMEQ_VEC#2,FADDSUB_VEC-FADD_VEC#2,FRECP_STEP_VEC-FRECPSV#2,FMUL_VEC-FMULXV#2,FMLA_VEC-FMLAV#2,ANDOREOR_VEC-BICV#0,ADDSUBL_VEC-SADDL2#1,ADDSUBL_VEC-SSUBL2#1,ADDSUBW_VEC-SADDW2#1,ADDSUBW_VEC-SSUBW2#1,ADDSUBHN_VEC-ADDHN2#1,ADDSUBHN_VEC-SUBHN2#1,ABDL_VEC-SABAL2#1,ABDL_VEC-SABDL2#1,MULL_VEC-SMLAL2#1,MULL_VEC-SMLSL2#1,MULL_VEC-SMULL2#1,SQDMULL_VEC-SQDMLAL2#0,SQDMULL_VEC-SQDMLSL2#0,SQDMULL_VEC-SQDMULL2#0,INT_HORZ_VEC-SADDLV#3,INT_HORZ_VEC-SMAXV#3,INT_HORZ_VEC-SMINV#3,INT_HORZ_VEC-ADDV#3
    0x2 => return classify_impl_97_2(inst), // HADDSUB_VEC-SHADD#1,HADDSUB_VEC-SRHADD#1,HADDSUB_VEC-SHSUB#1,QADDSUB_VEC-SQADD#4,QADDSUB_VEC-SQSUB#4,CMGT_VEC-CMGTV#4,CMGT_VEC-CMGEV#4,CMEQ_VEC-CMTSTV#4,SHL_REG_VEC-SSHL#4,SHL_REG_VEC-SQSHL#4,SHL_REG_VEC-SRSHL#4,SHL_REG_VEC-SQRSHL#4,MINMAX_VEC-SMAX#1,MINMAX_VEC-SMIN#1,MINMAX_VEC-SMAXP#1,MINMAX_VEC-SMINP#1,ABD_VEC-SABD#1,ABD_VEC-SABA#1,ADDSUB_VEC-ADD_VEC#4,ADDP_VEC-ADDP#4,MUL_VEC-MLA_VEC#1,MUL_VEC-MUL_VEC#1,SQDMULH_VEC-SQDMULH#0,FMINMAX_VEC-FMAXNM_VEC#2,FMINMAX_VEC-FMAX_VEC#2,FCMP_REG_VEC-FCMEQ_VEC#2,FADDSUB_VEC-FADD_VEC#2,FRECP_STEP_VEC-FRECPSV#2,FMUL_VEC-FMULXV#2,FMLA_VEC-FMLAV#2,FP16_2REG_VEC-FRINTN_VEC_FP16#0,FP16_2REG_VEC-FRINTM_VEC_FP16#0,FP16_2REG_VEC-FCVTNS_VEC_FP16#0,FP16_2REG_VEC-FCVTMS_VEC_FP16#0,FP16_2REG_VEC-FCVTAS_VEC_FP16#0,FP16_2REG_VEC-SCVTF_VEC_FP16#0,ANDOREOR_VEC-BICV#0,ADDSUBL_VEC-SADDL2#1,ADDSUBL_VEC-SSUBL2#1,ADDSUBW_VEC-SADDW2#1,ADDSUBW_VEC-SSUBW2#1,ADDSUBHN_VEC-ADDHN2#1,ADDSUBHN_VEC-SUBHN2#1,ABDL_VEC-SABAL2#1,ABDL_VEC-SABDL2#1,MULL_VEC-SMLAL2#1,MULL_VEC-SMLSL2#1,MULL_VEC-SMULL2#1,SQDMULL_VEC-SQDMLAL2#0,SQDMULL_VEC-SQDMLSL2#0,SQDMULL_VEC-SQDMULL2#0
    _ => idx
  };
  return idx;
}


// ZIP-UZP1#5,ZIP-TRN1#5,ZIP-ZIP1#5,ZIP-UZP2#5,ZIP-TRN2#5,ZIP-ZIP2#5,DOT_VEC-SDOT_VEC#1,DOT_VEC-USDOT_VEC#1,DOT_VEC-SMMLA_VEC#0,DOT_VEC-USMMLA_VEC#0
pub const fn classify_impl_98(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x2a80,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x2a82,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x5900,
    0x26 => 0x0,
    0x27 => 0x5901,
    0x28 => 0x0,
    0x29 => 0x5904,
    0x2a => 0x0,
    0x2b => 0x5905,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// REV_VEC-REV64_VEC#2
pub const fn classify_impl_99_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3280;
}


// ADDLP_VEC-SADDLP#2
pub const fn classify_impl_99_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3100;
}


// ARITH1_VEC-SUQADD_VEC#5
pub const fn classify_impl_99_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3080;
}


// CLZ_VEC-CLS_VEC#2
pub const fn classify_impl_99_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3180;
}


// ADDLP_VEC-SADALP#2
pub const fn classify_impl_99_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3101;
}


// ARITH1_VEC-SQABS_VEC#5
pub const fn classify_impl_99_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3081;
}


// CMZERO_VEC-CMGT_ZERO_VEC#5
pub const fn classify_impl_99_7(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f80;
}


// CMZERO_VEC-CMEQ_ZERO_VEC#5
pub const fn classify_impl_99_8(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f81;
}


// CMZERO_VEC-CMLT_ZERO_VEC#5
pub const fn classify_impl_99_9(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f82;
}


// ARITH1_VEC-ABS_VEC#5
pub const fn classify_impl_99_a(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3082;
}


// FCMP_ZERO_VEC-FCMGT_ZERO_VEC#1
pub const fn classify_impl_99_b(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3b00;
}


// FCMP_ZERO_VEC-FCMEQ_ZERO_VEC#1
pub const fn classify_impl_99_c(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3b01;
}


// FCMP_ZERO_VEC-FCMLT_ZERO_VEC#1
pub const fn classify_impl_99_d(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3b02;
}


// FARITH1_VEC-FABS_VEC#1
pub const fn classify_impl_99_e(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3b80;
}


// XTN_VEC-XTN2_VEC#2
pub const fn classify_impl_99_f(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3384;
}


// XTN_VEC-SQXTN2_VEC#2
pub const fn classify_impl_99_10(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3385;
}


// FCVTN_VEC-BFCVTN2#0
pub const fn classify_impl_99_11(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5184;
}


// FRINT_VEC-FRINTP_VEC#1
pub const fn classify_impl_99_12(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5202;
}


// FRINT_VEC-FRINTZ_VEC#1
pub const fn classify_impl_99_13(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5203;
}


// FCVT_VEC-FCVTPS_VEC#1
pub const fn classify_impl_99_14(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f03;
}


// FCVT_VEC-FCVTZS_VEC#1
pub const fn classify_impl_99_15(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f04;
}


// FRECP_VEC-URECPE_VEC#1
pub const fn classify_impl_99_16(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3d80;
}


// FRECP_VEC-FRECPE_VEC#1
pub const fn classify_impl_99_17(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3d81;
}

// HADDSUB_VEC-SHADD#2,HADDSUB_VEC-SRHADD#2,HADDSUB_VEC-SHSUB#2,QADDSUB_VEC-SQADD#5,QADDSUB_VEC-SQSUB#5,CMGT_VEC-CMGTV#5,CMGT_VEC-CMGEV#5,CMEQ_VEC-CMTSTV#5,CMZERO_VEC-CMGT_ZERO_VEC#5,CMZERO_VEC-CMEQ_ZERO_VEC#5,CMZERO_VEC-CMLT_ZERO_VEC#5,ARITH1_VEC-SUQADD_VEC#5,ARITH1_VEC-SQABS_VEC#5,ARITH1_VEC-ABS_VEC#5,ADDLP_VEC-SADDLP#2,ADDLP_VEC-SADALP#2,CLZ_VEC-CLS_VEC#2,REV_VEC-REV64_VEC#2,XTN_VEC-XTN2_VEC#2,XTN_VEC-SQXTN2_VEC#2,SHL_REG_VEC-SSHL#5,SHL_REG_VEC-SQSHL#5,SHL_REG_VEC-SRSHL#5,SHL_REG_VEC-SQRSHL#5,MINMAX_VEC-SMAX#2,MINMAX_VEC-SMIN#2,MINMAX_VEC-SMAXP#2,MINMAX_VEC-SMINP#2,ABD_VEC-SABD#2,ABD_VEC-SABA#2,ADDSUB_VEC-ADD_VEC#5,ADDP_VEC-ADDP#5,MUL_VEC-MLA_VEC#2,MUL_VEC-MUL_VEC#2,SQDMULH_VEC-SQDMULH#1,FMINMAX_VEC-FMINNM_VEC#1,FMINMAX_VEC-FMIN_VEC#1,FCMP_ZERO_VEC-FCMGT_ZERO_VEC#1,FCMP_ZERO_VEC-FCMEQ_ZERO_VEC#1,FCMP_ZERO_VEC-FCMLT_ZERO_VEC#1,FARITH1_VEC-FABS_VEC#1,FADDSUB_VEC-FSUB_VEC#1,FRECP_VEC-URECPE_VEC#1,FRECP_VEC-FRECPE_VEC#1,FRECP_STEP_VEC-FRSQRTSV#1,FMLA_VEC-FMLSV#1,ANDOREOR_VEC-ORRV#0,ADDSUBL_VEC-SADDL2#2,ADDSUBL_VEC-SSUBL2#2,ADDSUBW_VEC-SADDW2#2,ADDSUBW_VEC-SSUBW2#2,ADDSUBHN_VEC-ADDHN2#2,ADDSUBHN_VEC-SUBHN2#2,ABDL_VEC-SABAL2#2,ABDL_VEC-SABDL2#2,MULL_VEC-SMLAL2#2,MULL_VEC-SMLSL2#2,MULL_VEC-SMULL2#2,SQDMULL_VEC-SQDMLAL2#1,SQDMULL_VEC-SQDMLSL2#1,SQDMULL_VEC-SQDMULL2#1,FCVT_VEC-FCVTPS_VEC#1,FCVT_VEC-FCVTZS_VEC#1,FCVTN_VEC-BFCVTN2#0,FRINT_VEC-FRINTP_VEC#1,FRINT_VEC-FRINTZ_VEC#1,FHM_VEC-FMLSL_VEC#0
pub const fn classify_impl_99(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x4384,
    0x1 => 0x2b80,
    0x2 => 0x1,
    0x3 => 0x2c80,
    0x4 => 0x4404,
    0x5 => 0x2b81,
    0x6 => 0x0,
    0x7 => 0x4302,
    0x8 => 0x4385,
    0x9 => 0x2b82,
    0xa => 0x2,
    0xb => 0x2c81,
    0xc => 0x4405,
    0xd => 0x2d80,
    0xe => 0x3,
    0xf => 0x2d81,
    0x10 => 0x4484,
    0x11 => 0x3480,
    0x12 => 0x4,
    0x13 => 0x3481,
    0x14 => 0x4504,
    0x15 => 0x3482,
    0x16 => 0x0,
    0x17 => 0x3483,
    0x18 => 0x4485,
    0x19 => 0x3500,
    0x1a => 0x5,
    0x1b => 0x3501,
    0x1c => 0x4505,
    0x1d => 0x3580,
    0x1e => 0x6,
    0x1f => 0x3581,
    0x20 => 0x4586,
    0x21 => 0x3680,
    0x22 => 0x7,
    0x23 => 0x2e80,
    0x24 => 0x4683,
    0x25 => 0x3780,
    0x26 => 0x8,
    0x27 => 0x3781,
    0x28 => 0x4587,
    0x29 => 0x3502,
    0x2a => 0x9,
    0x2b => 0x3503,
    0x2c => 0x4684,
    0x2d => 0x3880,
    0x2e => 0xa,
    0x2f => 0x3700,
    0x30 => 0x4588,
    0x31 => 0x3902,
    0x32 => 0xb,
    0x33 => 0x4001,
    0x34 => 0x4685,
    0x35 => 0x3c81,
    0x36 => 0xc,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0xd,
    0x3b => 0x5b01,
    0x3c => 0x0,
    0x3d => 0x3903,
    0x3e => 0xe,
    0x3f => 0x3e81,
    0x40 => 0x4384,
    0x41 => 0x2b80,
    0x42 => 0x0,
    0x43 => 0x2c80,
    0x44 => 0x4404,
    0x45 => 0x2b81,
    0x46 => 0x0,
    0x47 => 0x4302,
    0x48 => 0x4385,
    0x49 => 0x2b82,
    0x4a => 0xf,
    0x4b => 0x2c81,
    0x4c => 0x4405,
    0x4d => 0x2d80,
    0x4e => 0x0,
    0x4f => 0x2d81,
    0x50 => 0x4484,
    0x51 => 0x3480,
    0x52 => 0x10,
    0x53 => 0x3481,
    0x54 => 0x4504,
    0x55 => 0x3482,
    0x56 => 0x0,
    0x57 => 0x3483,
    0x58 => 0x4485,
    0x59 => 0x3500,
    0x5a => 0x11,
    0x5b => 0x3501,
    0x5c => 0x4505,
    0x5d => 0x3580,
    0x5e => 0x0,
    0x5f => 0x3581,
    0x60 => 0x4586,
    0x61 => 0x3680,
    0x62 => 0x12,
    0x63 => 0x2e80,
    0x64 => 0x4683,
    0x65 => 0x3780,
    0x66 => 0x13,
    0x67 => 0x3781,
    0x68 => 0x4587,
    0x69 => 0x3502,
    0x6a => 0x14,
    0x6b => 0x3503,
    0x6c => 0x4684,
    0x6d => 0x3880,
    0x6e => 0x15,
    0x6f => 0x3700,
    0x70 => 0x4588,
    0x71 => 0x3902,
    0x72 => 0x16,
    0x73 => 0x4001,
    0x74 => 0x4685,
    0x75 => 0x3c81,
    0x76 => 0x17,
    0x77 => 0x0,
    0x78 => 0x0,
    0x79 => 0x0,
    0x7a => 0x0,
    0x7b => 0x5b01,
    0x7c => 0x0,
    0x7d => 0x3903,
    0x7e => 0x0,
    0x7f => 0x3e81,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_99_1(inst), // REV_VEC-REV64_VEC#2
    0x2 => return classify_impl_99_2(inst), // ADDLP_VEC-SADDLP#2
    0x3 => return classify_impl_99_3(inst), // ARITH1_VEC-SUQADD_VEC#5
    0x4 => return classify_impl_99_4(inst), // CLZ_VEC-CLS_VEC#2
    0x5 => return classify_impl_99_5(inst), // ADDLP_VEC-SADALP#2
    0x6 => return classify_impl_99_6(inst), // ARITH1_VEC-SQABS_VEC#5
    0x7 => return classify_impl_99_7(inst), // CMZERO_VEC-CMGT_ZERO_VEC#5
    0x8 => return classify_impl_99_8(inst), // CMZERO_VEC-CMEQ_ZERO_VEC#5
    0x9 => return classify_impl_99_9(inst), // CMZERO_VEC-CMLT_ZERO_VEC#5
    0xa => return classify_impl_99_a(inst), // ARITH1_VEC-ABS_VEC#5
    0xb => return classify_impl_99_b(inst), // FCMP_ZERO_VEC-FCMGT_ZERO_VEC#1
    0xc => return classify_impl_99_c(inst), // FCMP_ZERO_VEC-FCMEQ_ZERO_VEC#1
    0xd => return classify_impl_99_d(inst), // FCMP_ZERO_VEC-FCMLT_ZERO_VEC#1
    0xe => return classify_impl_99_e(inst), // FARITH1_VEC-FABS_VEC#1
    0xf => return classify_impl_99_f(inst), // XTN_VEC-XTN2_VEC#2
    0x10 => return classify_impl_99_10(inst), // XTN_VEC-SQXTN2_VEC#2
    0x11 => return classify_impl_99_11(inst), // FCVTN_VEC-BFCVTN2#0
    0x12 => return classify_impl_99_12(inst), // FRINT_VEC-FRINTP_VEC#1
    0x13 => return classify_impl_99_13(inst), // FRINT_VEC-FRINTZ_VEC#1
    0x14 => return classify_impl_99_14(inst), // FCVT_VEC-FCVTPS_VEC#1
    0x15 => return classify_impl_99_15(inst), // FCVT_VEC-FCVTZS_VEC#1
    0x16 => return classify_impl_99_16(inst), // FRECP_VEC-URECPE_VEC#1
    0x17 => return classify_impl_99_17(inst), // FRECP_VEC-FRECPE_VEC#1
    _ => idx
  };
  return idx;
}


// INT_HORZ_VEC-SADDLV#4
pub const fn classify_impl_9a_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5380;
}


// INT_HORZ_VEC-SMAXV#4
pub const fn classify_impl_9a_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5381;
}


// FP_HORZ_VEC-FMINNMV_FP16#1
pub const fn classify_impl_9a_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5482;
}


// FP_HORZ_VEC-FMINV_FP16#1
pub const fn classify_impl_9a_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5483;
}


// INT_HORZ_VEC-SMINV#4
pub const fn classify_impl_9a_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5382;
}


// INT_HORZ_VEC-ADDV#4
pub const fn classify_impl_9a_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5383;
}

// HADDSUB_VEC-SHADD#2,HADDSUB_VEC-SRHADD#2,HADDSUB_VEC-SHSUB#2,QADDSUB_VEC-SQADD#5,QADDSUB_VEC-SQSUB#5,CMGT_VEC-CMGTV#5,CMGT_VEC-CMGEV#5,CMEQ_VEC-CMTSTV#5,SHL_REG_VEC-SSHL#5,SHL_REG_VEC-SQSHL#5,SHL_REG_VEC-SRSHL#5,SHL_REG_VEC-SQRSHL#5,MINMAX_VEC-SMAX#2,MINMAX_VEC-SMIN#2,MINMAX_VEC-SMAXP#2,MINMAX_VEC-SMINP#2,ABD_VEC-SABD#2,ABD_VEC-SABA#2,ADDSUB_VEC-ADD_VEC#5,ADDP_VEC-ADDP#5,MUL_VEC-MLA_VEC#2,MUL_VEC-MUL_VEC#2,SQDMULH_VEC-SQDMULH#1,FMINMAX_VEC-FMINNM_VEC#1,FMINMAX_VEC-FMIN_VEC#1,FADDSUB_VEC-FSUB_VEC#1,FRECP_STEP_VEC-FRSQRTSV#1,FMLA_VEC-FMLSV#1,ANDOREOR_VEC-ORRV#0,ADDSUBL_VEC-SADDL2#2,ADDSUBL_VEC-SSUBL2#2,ADDSUBW_VEC-SADDW2#2,ADDSUBW_VEC-SSUBW2#2,ADDSUBHN_VEC-ADDHN2#2,ADDSUBHN_VEC-SUBHN2#2,ABDL_VEC-SABAL2#2,ABDL_VEC-SABDL2#2,MULL_VEC-SMLAL2#2,MULL_VEC-SMLSL2#2,MULL_VEC-SMULL2#2,SQDMULL_VEC-SQDMLAL2#1,SQDMULL_VEC-SQDMLSL2#1,SQDMULL_VEC-SQDMULL2#1,INT_HORZ_VEC-SADDLV#4,INT_HORZ_VEC-SMAXV#4,INT_HORZ_VEC-SMINV#4,INT_HORZ_VEC-ADDV#4,FP_HORZ_VEC-FMINNMV_FP16#1,FP_HORZ_VEC-FMINV_FP16#1,FHM_VEC-FMLSL_VEC#0
pub const fn classify_impl_9a(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x4384,
    0x1 => 0x2b80,
    0x2 => 0x0,
    0x3 => 0x2c80,
    0x4 => 0x4404,
    0x5 => 0x2b81,
    0x6 => 0x0,
    0x7 => 0x4302,
    0x8 => 0x4385,
    0x9 => 0x2b82,
    0xa => 0x0,
    0xb => 0x2c81,
    0xc => 0x4405,
    0xd => 0x2d80,
    0xe => 0x1,
    0xf => 0x2d81,
    0x10 => 0x4484,
    0x11 => 0x3480,
    0x12 => 0x0,
    0x13 => 0x3481,
    0x14 => 0x4504,
    0x15 => 0x3482,
    0x16 => 0x0,
    0x17 => 0x3483,
    0x18 => 0x4485,
    0x19 => 0x3500,
    0x1a => 0x0,
    0x1b => 0x3501,
    0x1c => 0x4505,
    0x1d => 0x3580,
    0x1e => 0x0,
    0x1f => 0x3581,
    0x20 => 0x4586,
    0x21 => 0x3680,
    0x22 => 0x0,
    0x23 => 0x2e80,
    0x24 => 0x4683,
    0x25 => 0x3780,
    0x26 => 0x0,
    0x27 => 0x3781,
    0x28 => 0x4587,
    0x29 => 0x3502,
    0x2a => 0x2,
    0x2b => 0x3503,
    0x2c => 0x4684,
    0x2d => 0x3880,
    0x2e => 0x0,
    0x2f => 0x3700,
    0x30 => 0x4588,
    0x31 => 0x3902,
    0x32 => 0x3,
    0x33 => 0x4001,
    0x34 => 0x4685,
    0x35 => 0x3c81,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x5b01,
    0x3c => 0x0,
    0x3d => 0x3903,
    0x3e => 0x4,
    0x3f => 0x3e81,
    0x40 => 0x4384,
    0x41 => 0x2b80,
    0x42 => 0x0,
    0x43 => 0x2c80,
    0x44 => 0x4404,
    0x45 => 0x2b81,
    0x46 => 0x0,
    0x47 => 0x4302,
    0x48 => 0x4385,
    0x49 => 0x2b82,
    0x4a => 0x0,
    0x4b => 0x2c81,
    0x4c => 0x4405,
    0x4d => 0x2d80,
    0x4e => 0x0,
    0x4f => 0x2d81,
    0x50 => 0x4484,
    0x51 => 0x3480,
    0x52 => 0x0,
    0x53 => 0x3481,
    0x54 => 0x4504,
    0x55 => 0x3482,
    0x56 => 0x0,
    0x57 => 0x3483,
    0x58 => 0x4485,
    0x59 => 0x3500,
    0x5a => 0x0,
    0x5b => 0x3501,
    0x5c => 0x4505,
    0x5d => 0x3580,
    0x5e => 0x0,
    0x5f => 0x3581,
    0x60 => 0x4586,
    0x61 => 0x3680,
    0x62 => 0x0,
    0x63 => 0x2e80,
    0x64 => 0x4683,
    0x65 => 0x3780,
    0x66 => 0x0,
    0x67 => 0x3781,
    0x68 => 0x4587,
    0x69 => 0x3502,
    0x6a => 0x5,
    0x6b => 0x3503,
    0x6c => 0x4684,
    0x6d => 0x3880,
    0x6e => 0x6,
    0x6f => 0x3700,
    0x70 => 0x4588,
    0x71 => 0x3902,
    0x72 => 0x0,
    0x73 => 0x4001,
    0x74 => 0x4685,
    0x75 => 0x3c81,
    0x76 => 0x0,
    0x77 => 0x0,
    0x78 => 0x0,
    0x79 => 0x0,
    0x7a => 0x0,
    0x7b => 0x5b01,
    0x7c => 0x0,
    0x7d => 0x3903,
    0x7e => 0x0,
    0x7f => 0x3e81,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_9a_1(inst), // INT_HORZ_VEC-SADDLV#4
    0x2 => return classify_impl_9a_2(inst), // INT_HORZ_VEC-SMAXV#4
    0x3 => return classify_impl_9a_3(inst), // FP_HORZ_VEC-FMINNMV_FP16#1
    0x4 => return classify_impl_9a_4(inst), // FP_HORZ_VEC-FMINV_FP16#1
    0x5 => return classify_impl_9a_5(inst), // INT_HORZ_VEC-SMINV#4
    0x6 => return classify_impl_9a_6(inst), // INT_HORZ_VEC-ADDV#4
    _ => idx
  };
  return idx;
}


// ZIP-UZP1#6,ZIP-TRN1#6,ZIP-ZIP1#6,ZIP-UZP2#6,ZIP-TRN2#6,ZIP-ZIP2#6,FP16_3REG_VEC-FMINNM_VEC_FP16#0,FP16_3REG_VEC-FMLS_VEC_FP16#0,FP16_3REG_VEC-FSUB_VEC_FP16#0,FP16_3REG_VEC-FMIN_VEC_FP16#0,FP16_3REG_VEC-FRSQRTS_VEC_FP16#0
pub const fn classify_impl_9b(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x0,
    0x1 => 0x4187,
    0x2 => 0x0,
    0x3 => 0x4188,
    0x4 => 0x0,
    0x5 => 0x4189,
    0x6 => 0x2a80,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x2a81,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x418b,
    0xe => 0x2a82,
    0xf => 0x418c,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x2a83,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x2a84,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x2a85,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// ARITH1_VEC-SUQADD_VEC#6
pub const fn classify_impl_9c_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3080;
}


// ARITH1_VEC-SQABS_VEC#6
pub const fn classify_impl_9c_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3081;
}


// CMZERO_VEC-CMGT_ZERO_VEC#6
pub const fn classify_impl_9c_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f80;
}


// CMZERO_VEC-CMEQ_ZERO_VEC#6
pub const fn classify_impl_9c_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f81;
}


// CMZERO_VEC-CMLT_ZERO_VEC#6
pub const fn classify_impl_9c_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f82;
}


// ARITH1_VEC-ABS_VEC#6
pub const fn classify_impl_9c_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3082;
}


// FCMP_ZERO_VEC-FCMGT_ZERO_VEC#2
pub const fn classify_impl_9c_7(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3b00;
}


// FCMP_ZERO_VEC-FCMEQ_ZERO_VEC#2
pub const fn classify_impl_9c_8(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3b01;
}


// FCMP_ZERO_VEC-FCMLT_ZERO_VEC#2
pub const fn classify_impl_9c_9(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3b02;
}


// FARITH1_VEC-FABS_VEC#2
pub const fn classify_impl_9c_a(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3b80;
}


// FRINT_VEC-FRINTP_VEC#2
pub const fn classify_impl_9c_b(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5202;
}


// FRINT_VEC-FRINTZ_VEC#2
pub const fn classify_impl_9c_c(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5203;
}


// FCVT_VEC-FCVTPS_VEC#2
pub const fn classify_impl_9c_d(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f03;
}


// FCVT_VEC-FCVTZS_VEC#2
pub const fn classify_impl_9c_e(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f04;
}


// FRECP_VEC-FRECPE_VEC#2
pub const fn classify_impl_9c_f(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3d81;
}

// QADDSUB_VEC-SQADD#6,QADDSUB_VEC-SQSUB#6,CMGT_VEC-CMGTV#6,CMGT_VEC-CMGEV#6,CMEQ_VEC-CMTSTV#6,CMZERO_VEC-CMGT_ZERO_VEC#6,CMZERO_VEC-CMEQ_ZERO_VEC#6,CMZERO_VEC-CMLT_ZERO_VEC#6,ARITH1_VEC-SUQADD_VEC#6,ARITH1_VEC-SQABS_VEC#6,ARITH1_VEC-ABS_VEC#6,SHL_REG_VEC-SSHL#6,SHL_REG_VEC-SQSHL#6,SHL_REG_VEC-SRSHL#6,SHL_REG_VEC-SQRSHL#6,ADDSUB_VEC-ADD_VEC#6,ADDP_VEC-ADDP#6,FMINMAX_VEC-FMINNM_VEC#2,FMINMAX_VEC-FMIN_VEC#2,FCMP_ZERO_VEC-FCMGT_ZERO_VEC#2,FCMP_ZERO_VEC-FCMEQ_ZERO_VEC#2,FCMP_ZERO_VEC-FCMLT_ZERO_VEC#2,FARITH1_VEC-FABS_VEC#2,FADDSUB_VEC-FSUB_VEC#2,FRECP_VEC-FRECPE_VEC#2,FRECP_STEP_VEC-FRSQRTSV#2,FMLA_VEC-FMLSV#2,ANDOREOR_VEC-ORNV#0,PMULL_VEC-PMULL264#0,FCVT_VEC-FCVTPS_VEC#2,FCVT_VEC-FCVTZS_VEC#2,FRINT_VEC-FRINTP_VEC#2,FRINT_VEC-FRINTZ_VEC#2
pub const fn classify_impl_9c(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x2c80,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x4303,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x2c81,
    0xc => 0x0,
    0xd => 0x2d80,
    0xe => 0x1,
    0xf => 0x2d81,
    0x10 => 0x0,
    0x11 => 0x3480,
    0x12 => 0x0,
    0x13 => 0x3481,
    0x14 => 0x0,
    0x15 => 0x3482,
    0x16 => 0x0,
    0x17 => 0x3483,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x2,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x3680,
    0x22 => 0x3,
    0x23 => 0x2e80,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x4,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x5,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x6,
    0x2f => 0x3700,
    0x30 => 0x0,
    0x31 => 0x3902,
    0x32 => 0x7,
    0x33 => 0x4001,
    0x34 => 0x0,
    0x35 => 0x3c81,
    0x36 => 0x8,
    0x37 => 0x0,
    0x38 => 0x4703,
    0x39 => 0x0,
    0x3a => 0x9,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x3903,
    0x3e => 0xa,
    0x3f => 0x3e81,
    0x40 => 0x0,
    0x41 => 0x0,
    0x42 => 0x0,
    0x43 => 0x2c80,
    0x44 => 0x0,
    0x45 => 0x0,
    0x46 => 0x0,
    0x47 => 0x4303,
    0x48 => 0x0,
    0x49 => 0x0,
    0x4a => 0x0,
    0x4b => 0x2c81,
    0x4c => 0x0,
    0x4d => 0x2d80,
    0x4e => 0x0,
    0x4f => 0x2d81,
    0x50 => 0x0,
    0x51 => 0x3480,
    0x52 => 0x0,
    0x53 => 0x3481,
    0x54 => 0x0,
    0x55 => 0x3482,
    0x56 => 0x0,
    0x57 => 0x3483,
    0x58 => 0x0,
    0x59 => 0x0,
    0x5a => 0x0,
    0x5b => 0x0,
    0x5c => 0x0,
    0x5d => 0x0,
    0x5e => 0x0,
    0x5f => 0x0,
    0x60 => 0x0,
    0x61 => 0x3680,
    0x62 => 0xb,
    0x63 => 0x2e80,
    0x64 => 0x0,
    0x65 => 0x0,
    0x66 => 0xc,
    0x67 => 0x0,
    0x68 => 0x0,
    0x69 => 0x0,
    0x6a => 0xd,
    0x6b => 0x0,
    0x6c => 0x0,
    0x6d => 0x0,
    0x6e => 0xe,
    0x6f => 0x3700,
    0x70 => 0x0,
    0x71 => 0x3902,
    0x72 => 0x0,
    0x73 => 0x4001,
    0x74 => 0x0,
    0x75 => 0x3c81,
    0x76 => 0xf,
    0x77 => 0x0,
    0x78 => 0x4703,
    0x79 => 0x0,
    0x7a => 0x0,
    0x7b => 0x0,
    0x7c => 0x0,
    0x7d => 0x3903,
    0x7e => 0x0,
    0x7f => 0x3e81,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_9c_1(inst), // ARITH1_VEC-SUQADD_VEC#6
    0x2 => return classify_impl_9c_2(inst), // ARITH1_VEC-SQABS_VEC#6
    0x3 => return classify_impl_9c_3(inst), // CMZERO_VEC-CMGT_ZERO_VEC#6
    0x4 => return classify_impl_9c_4(inst), // CMZERO_VEC-CMEQ_ZERO_VEC#6
    0x5 => return classify_impl_9c_5(inst), // CMZERO_VEC-CMLT_ZERO_VEC#6
    0x6 => return classify_impl_9c_6(inst), // ARITH1_VEC-ABS_VEC#6
    0x7 => return classify_impl_9c_7(inst), // FCMP_ZERO_VEC-FCMGT_ZERO_VEC#2
    0x8 => return classify_impl_9c_8(inst), // FCMP_ZERO_VEC-FCMEQ_ZERO_VEC#2
    0x9 => return classify_impl_9c_9(inst), // FCMP_ZERO_VEC-FCMLT_ZERO_VEC#2
    0xa => return classify_impl_9c_a(inst), // FARITH1_VEC-FABS_VEC#2
    0xb => return classify_impl_9c_b(inst), // FRINT_VEC-FRINTP_VEC#2
    0xc => return classify_impl_9c_c(inst), // FRINT_VEC-FRINTZ_VEC#2
    0xd => return classify_impl_9c_d(inst), // FCVT_VEC-FCVTPS_VEC#2
    0xe => return classify_impl_9c_e(inst), // FCVT_VEC-FCVTZS_VEC#2
    0xf => return classify_impl_9c_f(inst), // FRECP_VEC-FRECPE_VEC#2
    _ => idx
  };
  return idx;
}


// FP16_2REG_VEC-FCMGT_ZERO_VEC_FP16#0
pub const fn classify_impl_9d_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x4286;
}


// FP16_2REG_VEC-FCMEQ_ZERO_VEC_FP16#0
pub const fn classify_impl_9d_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x4287;
}


// FP16_2REG_VEC-FCMLT_ZERO_VEC_FP16#0
pub const fn classify_impl_9d_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x4288;
}


// FP16_2REG_VEC-FABS_VEC_FP16#0
pub const fn classify_impl_9d_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x4289;
}


// FP16_2REG_VEC-FRINTP_VEC_FP16#0
pub const fn classify_impl_9d_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x428a;
}


// FP16_2REG_VEC-FRINTZ_VEC_FP16#0
pub const fn classify_impl_9d_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x428b;
}


// FP16_2REG_VEC-FCVTPS_VEC_FP16#0
pub const fn classify_impl_9d_7(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x428c;
}


// FP16_2REG_VEC-FCVTZS_VEC_FP16#0
pub const fn classify_impl_9d_8(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x428d;
}


// FP16_2REG_VEC-FRECPE_VEC_FP16#0
pub const fn classify_impl_9d_9(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x428e;
}

// QADDSUB_VEC-SQADD#6,QADDSUB_VEC-SQSUB#6,CMGT_VEC-CMGTV#6,CMGT_VEC-CMGEV#6,CMEQ_VEC-CMTSTV#6,SHL_REG_VEC-SSHL#6,SHL_REG_VEC-SQSHL#6,SHL_REG_VEC-SRSHL#6,SHL_REG_VEC-SQRSHL#6,ADDSUB_VEC-ADD_VEC#6,ADDP_VEC-ADDP#6,FMINMAX_VEC-FMINNM_VEC#2,FMINMAX_VEC-FMIN_VEC#2,FADDSUB_VEC-FSUB_VEC#2,FRECP_STEP_VEC-FRSQRTSV#2,FMLA_VEC-FMLSV#2,FP16_2REG_VEC-FCMGT_ZERO_VEC_FP16#0,FP16_2REG_VEC-FCMEQ_ZERO_VEC_FP16#0,FP16_2REG_VEC-FCMLT_ZERO_VEC_FP16#0,FP16_2REG_VEC-FABS_VEC_FP16#0,FP16_2REG_VEC-FRINTP_VEC_FP16#0,FP16_2REG_VEC-FRINTZ_VEC_FP16#0,FP16_2REG_VEC-FCVTPS_VEC_FP16#0,FP16_2REG_VEC-FCVTZS_VEC_FP16#0,FP16_2REG_VEC-FRECPE_VEC_FP16#0,ANDOREOR_VEC-ORNV#0,PMULL_VEC-PMULL264#0
pub const fn classify_impl_9d(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x2c80,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x4303,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x2c81,
    0xc => 0x0,
    0xd => 0x2d80,
    0xe => 0x0,
    0xf => 0x2d81,
    0x10 => 0x0,
    0x11 => 0x3480,
    0x12 => 0x0,
    0x13 => 0x3481,
    0x14 => 0x0,
    0x15 => 0x3482,
    0x16 => 0x0,
    0x17 => 0x3483,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x3680,
    0x22 => 0x0,
    0x23 => 0x2e80,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x3700,
    0x30 => 0x0,
    0x31 => 0x3902,
    0x32 => 0x1,
    0x33 => 0x4001,
    0x34 => 0x0,
    0x35 => 0x3c81,
    0x36 => 0x2,
    0x37 => 0x0,
    0x38 => 0x4703,
    0x39 => 0x0,
    0x3a => 0x3,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x3903,
    0x3e => 0x4,
    0x3f => 0x3e81,
    0x40 => 0x0,
    0x41 => 0x0,
    0x42 => 0x0,
    0x43 => 0x2c80,
    0x44 => 0x0,
    0x45 => 0x0,
    0x46 => 0x0,
    0x47 => 0x4303,
    0x48 => 0x0,
    0x49 => 0x0,
    0x4a => 0x0,
    0x4b => 0x2c81,
    0x4c => 0x0,
    0x4d => 0x2d80,
    0x4e => 0x0,
    0x4f => 0x2d81,
    0x50 => 0x0,
    0x51 => 0x3480,
    0x52 => 0x0,
    0x53 => 0x3481,
    0x54 => 0x0,
    0x55 => 0x3482,
    0x56 => 0x0,
    0x57 => 0x3483,
    0x58 => 0x0,
    0x59 => 0x0,
    0x5a => 0x0,
    0x5b => 0x0,
    0x5c => 0x0,
    0x5d => 0x0,
    0x5e => 0x0,
    0x5f => 0x0,
    0x60 => 0x0,
    0x61 => 0x3680,
    0x62 => 0x5,
    0x63 => 0x2e80,
    0x64 => 0x0,
    0x65 => 0x0,
    0x66 => 0x6,
    0x67 => 0x0,
    0x68 => 0x0,
    0x69 => 0x0,
    0x6a => 0x7,
    0x6b => 0x0,
    0x6c => 0x0,
    0x6d => 0x0,
    0x6e => 0x8,
    0x6f => 0x3700,
    0x70 => 0x0,
    0x71 => 0x3902,
    0x72 => 0x0,
    0x73 => 0x4001,
    0x74 => 0x0,
    0x75 => 0x3c81,
    0x76 => 0x9,
    0x77 => 0x0,
    0x78 => 0x4703,
    0x79 => 0x0,
    0x7a => 0x0,
    0x7b => 0x0,
    0x7c => 0x0,
    0x7d => 0x3903,
    0x7e => 0x0,
    0x7f => 0x3e81,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_9d_1(inst), // FP16_2REG_VEC-FCMGT_ZERO_VEC_FP16#0
    0x2 => return classify_impl_9d_2(inst), // FP16_2REG_VEC-FCMEQ_ZERO_VEC_FP16#0
    0x3 => return classify_impl_9d_3(inst), // FP16_2REG_VEC-FCMLT_ZERO_VEC_FP16#0
    0x4 => return classify_impl_9d_4(inst), // FP16_2REG_VEC-FABS_VEC_FP16#0
    0x5 => return classify_impl_9d_5(inst), // FP16_2REG_VEC-FRINTP_VEC_FP16#0
    0x6 => return classify_impl_9d_6(inst), // FP16_2REG_VEC-FRINTZ_VEC_FP16#0
    0x7 => return classify_impl_9d_7(inst), // FP16_2REG_VEC-FCVTPS_VEC_FP16#0
    0x8 => return classify_impl_9d_8(inst), // FP16_2REG_VEC-FCVTZS_VEC_FP16#0
    0x9 => return classify_impl_9d_9(inst), // FP16_2REG_VEC-FRECPE_VEC_FP16#0
    _ => idx
  };
  return idx;
}


// FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0,SIMD_IMM-MOVI32#4,SIMD_IMM-MOVI32#5,SIMD_IMM-MOVI32#6,SIMD_IMM-MOVI32#7,SIMD_IMM-ORRI32#4,SIMD_IMM-ORRI32#5,SIMD_IMM-ORRI32#6,SIMD_IMM-ORRI32#7,SIMD_IMM-MOVI16#2,SIMD_IMM-MOVI16#3,SIMD_IMM-ORRI16#2,SIMD_IMM-ORRI16#3,SIMD_IMM-MOVI32_MSL#2,SIMD_IMM-MOVI32_MSL#3,SIMD_IMM-MOVI8#1,SIMD_IMM-FMOV32#1,SIMD_IMM-FMOV16#1
pub const fn classify_impl_9e_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x5d00,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x5880,
    0x5 => 0x5d01,
    0x6 => 0x5880,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x5d00,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x5d01,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x5d00,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x5881,
    0x15 => 0x5d01,
    0x16 => 0x5881,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x5d00,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x5d01,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x5d02,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x5882,
    0x25 => 0x5d03,
    0x26 => 0x5882,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x5d02,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x5d03,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x5d04,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x5d04,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x5d05,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5980,
    0x3d => 0x5d06,
    0x3e => 0x5980,
    0x3f => 0x5d07,
    _ => 0,
  };
  return idx;
}


// SHR_VEC_IMM-SSHR#7,SHR_VEC_IMM-SSRA#7,SHR_VEC_IMM-SRSHR#7,SHR_VEC_IMM-SRSRA#7,QSHL_VEC_IMM-SQSHL_IMM#7,SHRN_VEC_IMM-SHRN2#0,SHRN_VEC_IMM-RSHRN2#0,SHRN_VEC_IMM-SQSHRN2#0,SHRN_VEC_IMM-SQRSHRN2#0,SHLL_VEC_IMM-SSHLL2#0,SHIFT_VEC_IMM-SHL#7,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
pub const fn classify_impl_9e_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4900,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x5880,
    0x5 => 0x4901,
    0x6 => 0x5880,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4902,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4903,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x5881,
    0x15 => 0x4d00,
    0x16 => 0x5881,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a00,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b08,
    0x22 => 0x0,
    0x23 => 0x4b09,
    0x24 => 0x5882,
    0x25 => 0x4b0a,
    0x26 => 0x5882,
    0x27 => 0x4b0b,
    0x28 => 0x0,
    0x29 => 0x4b82,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5980,
    0x3d => 0x0,
    0x3e => 0x5980,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}

// SHR_VEC_IMM-SSHR#7,SHR_VEC_IMM-SSRA#7,SHR_VEC_IMM-SRSHR#7,SHR_VEC_IMM-SRSRA#7,QSHL_VEC_IMM-SQSHL_IMM#7,SHRN_VEC_IMM-SHRN2#0,SHRN_VEC_IMM-RSHRN2#0,SHRN_VEC_IMM-SQSHRN2#0,SHRN_VEC_IMM-SQRSHRN2#0,SHLL_VEC_IMM-SSHLL2#0,SHIFT_VEC_IMM-SHL#7,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0,SIMD_IMM-MOVI32#4,SIMD_IMM-MOVI32#5,SIMD_IMM-MOVI32#6,SIMD_IMM-MOVI32#7,SIMD_IMM-ORRI32#4,SIMD_IMM-ORRI32#5,SIMD_IMM-ORRI32#6,SIMD_IMM-ORRI32#7,SIMD_IMM-MOVI16#2,SIMD_IMM-MOVI16#3,SIMD_IMM-ORRI16#2,SIMD_IMM-ORRI16#3,SIMD_IMM-MOVI32_MSL#2,SIMD_IMM-MOVI32_MSL#3,SIMD_IMM-MOVI8#1,SIMD_IMM-FMOV32#1,SIMD_IMM-FMOV16#1
pub const fn classify_impl_9e(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_9e_1(inst), // FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0,SIMD_IMM-MOVI32#4,SIMD_IMM-MOVI32#5,SIMD_IMM-MOVI32#6,SIMD_IMM-MOVI32#7,SIMD_IMM-ORRI32#4,SIMD_IMM-ORRI32#5,SIMD_IMM-ORRI32#6,SIMD_IMM-ORRI32#7,SIMD_IMM-MOVI16#2,SIMD_IMM-MOVI16#3,SIMD_IMM-ORRI16#2,SIMD_IMM-ORRI16#3,SIMD_IMM-MOVI32_MSL#2,SIMD_IMM-MOVI32_MSL#3,SIMD_IMM-MOVI8#1,SIMD_IMM-FMOV32#1,SIMD_IMM-FMOV16#1
    0x2 => return classify_impl_9e_2(inst), // SHR_VEC_IMM-SSHR#7,SHR_VEC_IMM-SSRA#7,SHR_VEC_IMM-SRSHR#7,SHR_VEC_IMM-SRSRA#7,QSHL_VEC_IMM-SQSHL_IMM#7,SHRN_VEC_IMM-SHRN2#0,SHRN_VEC_IMM-RSHRN2#0,SHRN_VEC_IMM-SQSHRN2#0,SHRN_VEC_IMM-SQRSHRN2#0,SHLL_VEC_IMM-SSHLL2#0,SHIFT_VEC_IMM-SHL#7,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
    _ => idx
  };
  return idx;
}


// SHR_VEC_IMM-SSHR#8,SHR_VEC_IMM-SSRA#8,SHR_VEC_IMM-SRSHR#8,SHR_VEC_IMM-SRSRA#8,QSHL_VEC_IMM-SQSHL_IMM#8,SHRN_VEC_IMM-SHRN2#1,SHRN_VEC_IMM-RSHRN2#1,SHRN_VEC_IMM-SQSHRN2#1,SHRN_VEC_IMM-SQRSHRN2#1,SHLL_VEC_IMM-SSHLL2#1,SHIFT_VEC_IMM-SHL#8,FCVT_VEC_FIXED-SCVTF_VEC_FIX_FP16#2,FCVT_VEC_FIXED-FCVTZS_VEC_FIX_FP16#2,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
pub const fn classify_impl_9f_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4900,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x5880,
    0x5 => 0x4901,
    0x6 => 0x5880,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4902,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4903,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x5881,
    0x15 => 0x4d00,
    0x16 => 0x5881,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a00,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b08,
    0x22 => 0x0,
    0x23 => 0x4b09,
    0x24 => 0x5882,
    0x25 => 0x4b0a,
    0x26 => 0x5882,
    0x27 => 0x4b0b,
    0x28 => 0x0,
    0x29 => 0x4b82,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e00,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5980,
    0x3d => 0x0,
    0x3e => 0x5980,
    0x3f => 0x4e01,
    _ => 0,
  };
  return idx;
}


// SHR_VEC_IMM-SSHR#9,SHR_VEC_IMM-SSRA#9,SHR_VEC_IMM-SRSHR#9,SHR_VEC_IMM-SRSRA#9,QSHL_VEC_IMM-SQSHL_IMM#9,SHRN_VEC_IMM-SHRN2#2,SHRN_VEC_IMM-RSHRN2#2,SHRN_VEC_IMM-SQSHRN2#2,SHRN_VEC_IMM-SQRSHRN2#2,SHLL_VEC_IMM-SSHLL2#2,SHIFT_VEC_IMM-SHL#9,FCVT_VEC_FIXED-SCVTF_VEC_FIX_FP16#3,FCVT_VEC_FIXED-FCVTZS_VEC_FIX_FP16#3,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
pub const fn classify_impl_9f_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4900,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x5880,
    0x5 => 0x4901,
    0x6 => 0x5880,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4902,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4903,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x5881,
    0x15 => 0x4d00,
    0x16 => 0x5881,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a00,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b08,
    0x22 => 0x0,
    0x23 => 0x4b09,
    0x24 => 0x5882,
    0x25 => 0x4b0a,
    0x26 => 0x5882,
    0x27 => 0x4b0b,
    0x28 => 0x0,
    0x29 => 0x4b82,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e00,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5980,
    0x3d => 0x0,
    0x3e => 0x5980,
    0x3f => 0x4e01,
    _ => 0,
  };
  return idx;
}

// SHR_VEC_IMM-SSHR#8,SHR_VEC_IMM-SSHR#9,SHR_VEC_IMM-SSRA#8,SHR_VEC_IMM-SSRA#9,SHR_VEC_IMM-SRSHR#8,SHR_VEC_IMM-SRSHR#9,SHR_VEC_IMM-SRSRA#8,SHR_VEC_IMM-SRSRA#9,QSHL_VEC_IMM-SQSHL_IMM#8,QSHL_VEC_IMM-SQSHL_IMM#9,SHRN_VEC_IMM-SHRN2#1,SHRN_VEC_IMM-SHRN2#2,SHRN_VEC_IMM-RSHRN2#1,SHRN_VEC_IMM-RSHRN2#2,SHRN_VEC_IMM-SQSHRN2#1,SHRN_VEC_IMM-SQSHRN2#2,SHRN_VEC_IMM-SQRSHRN2#1,SHRN_VEC_IMM-SQRSHRN2#2,SHLL_VEC_IMM-SSHLL2#1,SHLL_VEC_IMM-SSHLL2#2,SHIFT_VEC_IMM-SHL#8,SHIFT_VEC_IMM-SHL#9,FCVT_VEC_FIXED-SCVTF_VEC_FIX_FP16#2,FCVT_VEC_FIXED-SCVTF_VEC_FIX_FP16#3,FCVT_VEC_FIXED-FCVTZS_VEC_FIX_FP16#2,FCVT_VEC_FIXED-FCVTZS_VEC_FIX_FP16#3,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
pub const fn classify_impl_9f(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_9f_1(inst), // SHR_VEC_IMM-SSHR#8,SHR_VEC_IMM-SSRA#8,SHR_VEC_IMM-SRSHR#8,SHR_VEC_IMM-SRSRA#8,QSHL_VEC_IMM-SQSHL_IMM#8,SHRN_VEC_IMM-SHRN2#1,SHRN_VEC_IMM-RSHRN2#1,SHRN_VEC_IMM-SQSHRN2#1,SHRN_VEC_IMM-SQRSHRN2#1,SHLL_VEC_IMM-SSHLL2#1,SHIFT_VEC_IMM-SHL#8,FCVT_VEC_FIXED-SCVTF_VEC_FIX_FP16#2,FCVT_VEC_FIXED-FCVTZS_VEC_FIX_FP16#2,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
    0x2 => return classify_impl_9f_2(inst), // SHR_VEC_IMM-SSHR#9,SHR_VEC_IMM-SSRA#9,SHR_VEC_IMM-SRSHR#9,SHR_VEC_IMM-SRSRA#9,QSHL_VEC_IMM-SQSHL_IMM#9,SHRN_VEC_IMM-SHRN2#2,SHRN_VEC_IMM-RSHRN2#2,SHRN_VEC_IMM-SQSHRN2#2,SHRN_VEC_IMM-SQRSHRN2#2,SHLL_VEC_IMM-SSHLL2#2,SHIFT_VEC_IMM-SHL#9,FCVT_VEC_FIXED-SCVTF_VEC_FIX_FP16#3,FCVT_VEC_FIXED-FCVTZS_VEC_FIX_FP16#3,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
    _ => idx
  };
  return idx;
}


// SHR_VEC_IMM-SSHR#10,SHR_VEC_IMM-SSRA#10,SHR_VEC_IMM-SRSHR#10,SHR_VEC_IMM-SRSRA#10,QSHL_VEC_IMM-SQSHL_IMM#10,SHRN_VEC_IMM-SHRN2#3,SHRN_VEC_IMM-RSHRN2#3,SHRN_VEC_IMM-SQSHRN2#3,SHRN_VEC_IMM-SQRSHRN2#3,SHLL_VEC_IMM-SSHLL2#3,SHIFT_VEC_IMM-SHL#10,FCVT_VEC_FIXED-SCVTF_VEC_FIX#4,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#4,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
pub const fn classify_impl_a0_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4900,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x5880,
    0x5 => 0x4901,
    0x6 => 0x5880,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4902,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4903,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x5881,
    0x15 => 0x4d00,
    0x16 => 0x5881,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a00,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b08,
    0x22 => 0x0,
    0x23 => 0x4b09,
    0x24 => 0x5882,
    0x25 => 0x4b0a,
    0x26 => 0x5882,
    0x27 => 0x4b0b,
    0x28 => 0x0,
    0x29 => 0x4b82,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e02,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5980,
    0x3d => 0x0,
    0x3e => 0x5980,
    0x3f => 0x4e03,
    _ => 0,
  };
  return idx;
}


// SHR_VEC_IMM-SSHR#11,SHR_VEC_IMM-SSRA#11,SHR_VEC_IMM-SRSHR#11,SHR_VEC_IMM-SRSRA#11,QSHL_VEC_IMM-SQSHL_IMM#11,SHRN_VEC_IMM-SHRN2#4,SHRN_VEC_IMM-RSHRN2#4,SHRN_VEC_IMM-SQSHRN2#4,SHRN_VEC_IMM-SQRSHRN2#4,SHLL_VEC_IMM-SSHLL2#4,SHIFT_VEC_IMM-SHL#11,FCVT_VEC_FIXED-SCVTF_VEC_FIX#5,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#5,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
pub const fn classify_impl_a0_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4900,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x5880,
    0x5 => 0x4901,
    0x6 => 0x5880,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4902,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4903,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x5881,
    0x15 => 0x4d00,
    0x16 => 0x5881,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a00,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b08,
    0x22 => 0x0,
    0x23 => 0x4b09,
    0x24 => 0x5882,
    0x25 => 0x4b0a,
    0x26 => 0x5882,
    0x27 => 0x4b0b,
    0x28 => 0x0,
    0x29 => 0x4b82,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e02,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5980,
    0x3d => 0x0,
    0x3e => 0x5980,
    0x3f => 0x4e03,
    _ => 0,
  };
  return idx;
}

// SHR_VEC_IMM-SSHR#10,SHR_VEC_IMM-SSHR#11,SHR_VEC_IMM-SSRA#10,SHR_VEC_IMM-SSRA#11,SHR_VEC_IMM-SRSHR#10,SHR_VEC_IMM-SRSHR#11,SHR_VEC_IMM-SRSRA#10,SHR_VEC_IMM-SRSRA#11,QSHL_VEC_IMM-SQSHL_IMM#10,QSHL_VEC_IMM-SQSHL_IMM#11,SHRN_VEC_IMM-SHRN2#3,SHRN_VEC_IMM-SHRN2#4,SHRN_VEC_IMM-RSHRN2#3,SHRN_VEC_IMM-RSHRN2#4,SHRN_VEC_IMM-SQSHRN2#3,SHRN_VEC_IMM-SQSHRN2#4,SHRN_VEC_IMM-SQRSHRN2#3,SHRN_VEC_IMM-SQRSHRN2#4,SHLL_VEC_IMM-SSHLL2#3,SHLL_VEC_IMM-SSHLL2#4,SHIFT_VEC_IMM-SHL#10,SHIFT_VEC_IMM-SHL#11,FCVT_VEC_FIXED-SCVTF_VEC_FIX#4,FCVT_VEC_FIXED-SCVTF_VEC_FIX#5,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#4,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#5,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
pub const fn classify_impl_a0(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_a0_1(inst), // SHR_VEC_IMM-SSHR#10,SHR_VEC_IMM-SSRA#10,SHR_VEC_IMM-SRSHR#10,SHR_VEC_IMM-SRSRA#10,QSHL_VEC_IMM-SQSHL_IMM#10,SHRN_VEC_IMM-SHRN2#3,SHRN_VEC_IMM-RSHRN2#3,SHRN_VEC_IMM-SQSHRN2#3,SHRN_VEC_IMM-SQRSHRN2#3,SHLL_VEC_IMM-SSHLL2#3,SHIFT_VEC_IMM-SHL#10,FCVT_VEC_FIXED-SCVTF_VEC_FIX#4,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#4,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
    0x2 => return classify_impl_a0_2(inst), // SHR_VEC_IMM-SSHR#11,SHR_VEC_IMM-SSRA#11,SHR_VEC_IMM-SRSHR#11,SHR_VEC_IMM-SRSRA#11,QSHL_VEC_IMM-SQSHL_IMM#11,SHRN_VEC_IMM-SHRN2#4,SHRN_VEC_IMM-RSHRN2#4,SHRN_VEC_IMM-SQSHRN2#4,SHRN_VEC_IMM-SQRSHRN2#4,SHLL_VEC_IMM-SSHLL2#4,SHIFT_VEC_IMM-SHL#11,FCVT_VEC_FIXED-SCVTF_VEC_FIX#5,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#5,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
    _ => idx
  };
  return idx;
}


// SHR_VEC_IMM-SSHR#12,SHR_VEC_IMM-SSRA#12,SHR_VEC_IMM-SRSHR#12,SHR_VEC_IMM-SRSRA#12,QSHL_VEC_IMM-SQSHL_IMM#12,SHRN_VEC_IMM-SHRN2#5,SHRN_VEC_IMM-RSHRN2#5,SHRN_VEC_IMM-SQSHRN2#5,SHRN_VEC_IMM-SQRSHRN2#5,SHLL_VEC_IMM-SSHLL2#5,SHIFT_VEC_IMM-SHL#12,FCVT_VEC_FIXED-SCVTF_VEC_FIX#6,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#6,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
pub const fn classify_impl_a1_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4900,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x5880,
    0x5 => 0x4901,
    0x6 => 0x5880,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4902,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4903,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x5881,
    0x15 => 0x4d00,
    0x16 => 0x5881,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a00,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b08,
    0x22 => 0x0,
    0x23 => 0x4b09,
    0x24 => 0x5882,
    0x25 => 0x4b0a,
    0x26 => 0x5882,
    0x27 => 0x4b0b,
    0x28 => 0x0,
    0x29 => 0x4b82,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e02,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5980,
    0x3d => 0x0,
    0x3e => 0x5980,
    0x3f => 0x4e03,
    _ => 0,
  };
  return idx;
}


// SHR_VEC_IMM-SSHR#13,SHR_VEC_IMM-SSRA#13,SHR_VEC_IMM-SRSHR#13,SHR_VEC_IMM-SRSRA#13,QSHL_VEC_IMM-SQSHL_IMM#13,SHRN_VEC_IMM-SHRN2#6,SHRN_VEC_IMM-RSHRN2#6,SHRN_VEC_IMM-SQSHRN2#6,SHRN_VEC_IMM-SQRSHRN2#6,SHLL_VEC_IMM-SSHLL2#6,SHIFT_VEC_IMM-SHL#13,FCVT_VEC_FIXED-SCVTF_VEC_FIX#7,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#7,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
pub const fn classify_impl_a1_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4900,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x5880,
    0x5 => 0x4901,
    0x6 => 0x5880,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4902,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4903,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x5881,
    0x15 => 0x4d00,
    0x16 => 0x5881,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a00,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b08,
    0x22 => 0x0,
    0x23 => 0x4b09,
    0x24 => 0x5882,
    0x25 => 0x4b0a,
    0x26 => 0x5882,
    0x27 => 0x4b0b,
    0x28 => 0x0,
    0x29 => 0x4b82,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e02,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5980,
    0x3d => 0x0,
    0x3e => 0x5980,
    0x3f => 0x4e03,
    _ => 0,
  };
  return idx;
}

// SHR_VEC_IMM-SSHR#12,SHR_VEC_IMM-SSHR#13,SHR_VEC_IMM-SSRA#12,SHR_VEC_IMM-SSRA#13,SHR_VEC_IMM-SRSHR#12,SHR_VEC_IMM-SRSHR#13,SHR_VEC_IMM-SRSRA#12,SHR_VEC_IMM-SRSRA#13,QSHL_VEC_IMM-SQSHL_IMM#12,QSHL_VEC_IMM-SQSHL_IMM#13,SHRN_VEC_IMM-SHRN2#5,SHRN_VEC_IMM-SHRN2#6,SHRN_VEC_IMM-RSHRN2#5,SHRN_VEC_IMM-RSHRN2#6,SHRN_VEC_IMM-SQSHRN2#5,SHRN_VEC_IMM-SQSHRN2#6,SHRN_VEC_IMM-SQRSHRN2#5,SHRN_VEC_IMM-SQRSHRN2#6,SHLL_VEC_IMM-SSHLL2#5,SHLL_VEC_IMM-SSHLL2#6,SHIFT_VEC_IMM-SHL#12,SHIFT_VEC_IMM-SHL#13,FCVT_VEC_FIXED-SCVTF_VEC_FIX#6,FCVT_VEC_FIXED-SCVTF_VEC_FIX#7,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#6,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#7,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
pub const fn classify_impl_a1(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_a1_1(inst), // SHR_VEC_IMM-SSHR#12,SHR_VEC_IMM-SSRA#12,SHR_VEC_IMM-SRSHR#12,SHR_VEC_IMM-SRSRA#12,QSHL_VEC_IMM-SQSHL_IMM#12,SHRN_VEC_IMM-SHRN2#5,SHRN_VEC_IMM-RSHRN2#5,SHRN_VEC_IMM-SQSHRN2#5,SHRN_VEC_IMM-SQRSHRN2#5,SHLL_VEC_IMM-SSHLL2#5,SHIFT_VEC_IMM-SHL#12,FCVT_VEC_FIXED-SCVTF_VEC_FIX#6,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#6,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
    0x2 => return classify_impl_a1_2(inst), // SHR_VEC_IMM-SSHR#13,SHR_VEC_IMM-SSRA#13,SHR_VEC_IMM-SRSHR#13,SHR_VEC_IMM-SRSRA#13,QSHL_VEC_IMM-SQSHL_IMM#13,SHRN_VEC_IMM-SHRN2#6,SHRN_VEC_IMM-RSHRN2#6,SHRN_VEC_IMM-SQSHRN2#6,SHRN_VEC_IMM-SQRSHRN2#6,SHLL_VEC_IMM-SSHLL2#6,SHIFT_VEC_IMM-SHL#13,FCVT_VEC_FIXED-SCVTF_VEC_FIX#7,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#7,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
    _ => idx
  };
  return idx;
}


// SHR_VEC_IMM-SSHR#14,SHR_VEC_IMM-SSRA#14,SHR_VEC_IMM-SRSHR#14,SHR_VEC_IMM-SRSRA#14,QSHL_VEC_IMM-SQSHL_IMM#14,SHIFT_VEC_IMM-SHL#14,FCVT_VEC_FIXED-SCVTF_VEC_FIX#8,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#8,MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL2_ELEM#0,MULL_ELEM-SQDMLAL2_ELEM#0,MULL_ELEM-SMLSL2_ELEM#0,MULL_ELEM-SQDMLSL2_ELEM#0,MULL_ELEM-SMULL2_ELEM#0,MULL_ELEM-SQDMULL2_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
pub const fn classify_impl_a2_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4900,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4901,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x5689,
    0x9 => 0x4902,
    0xa => 0x5689,
    0xb => 0x0,
    0xc => 0x568a,
    0xd => 0x4903,
    0xe => 0x568a,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4d00,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x568b,
    0x19 => 0x0,
    0x1a => 0x568b,
    0x1b => 0x0,
    0x1c => 0x568c,
    0x1d => 0x4a00,
    0x1e => 0x568c,
    0x1f => 0x0,
    0x20 => 0x5580,
    0x21 => 0x0,
    0x22 => 0x5580,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x568d,
    0x29 => 0x0,
    0x2a => 0x568d,
    0x2b => 0x0,
    0x2c => 0x568e,
    0x2d => 0x0,
    0x2e => 0x568e,
    0x2f => 0x0,
    0x30 => 0x5581,
    0x31 => 0x0,
    0x32 => 0x5581,
    0x33 => 0x0,
    0x34 => 0x5582,
    0x35 => 0x0,
    0x36 => 0x5582,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e02,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5981,
    0x3d => 0x0,
    0x3e => 0x5981,
    0x3f => 0x4e03,
    _ => 0,
  };
  return idx;
}


// SHR_VEC_IMM-SSHR#15,SHR_VEC_IMM-SSRA#15,SHR_VEC_IMM-SRSHR#15,SHR_VEC_IMM-SRSRA#15,QSHL_VEC_IMM-SQSHL_IMM#15,SHIFT_VEC_IMM-SHL#15,FCVT_VEC_FIXED-SCVTF_VEC_FIX#9,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#9,MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL2_ELEM#0,MULL_ELEM-SQDMLAL2_ELEM#0,MULL_ELEM-SMLSL2_ELEM#0,MULL_ELEM-SQDMLSL2_ELEM#0,MULL_ELEM-SMULL2_ELEM#0,MULL_ELEM-SQDMULL2_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
pub const fn classify_impl_a2_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4900,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4901,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x5689,
    0x9 => 0x4902,
    0xa => 0x5689,
    0xb => 0x0,
    0xc => 0x568a,
    0xd => 0x4903,
    0xe => 0x568a,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4d00,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x568b,
    0x19 => 0x0,
    0x1a => 0x568b,
    0x1b => 0x0,
    0x1c => 0x568c,
    0x1d => 0x4a00,
    0x1e => 0x568c,
    0x1f => 0x0,
    0x20 => 0x5580,
    0x21 => 0x0,
    0x22 => 0x5580,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x568d,
    0x29 => 0x0,
    0x2a => 0x568d,
    0x2b => 0x0,
    0x2c => 0x568e,
    0x2d => 0x0,
    0x2e => 0x568e,
    0x2f => 0x0,
    0x30 => 0x5581,
    0x31 => 0x0,
    0x32 => 0x5581,
    0x33 => 0x0,
    0x34 => 0x5582,
    0x35 => 0x0,
    0x36 => 0x5582,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e02,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5981,
    0x3d => 0x0,
    0x3e => 0x5981,
    0x3f => 0x4e03,
    _ => 0,
  };
  return idx;
}

// SHR_VEC_IMM-SSHR#14,SHR_VEC_IMM-SSHR#15,SHR_VEC_IMM-SSRA#14,SHR_VEC_IMM-SSRA#15,SHR_VEC_IMM-SRSHR#14,SHR_VEC_IMM-SRSHR#15,SHR_VEC_IMM-SRSRA#14,SHR_VEC_IMM-SRSRA#15,QSHL_VEC_IMM-SQSHL_IMM#14,QSHL_VEC_IMM-SQSHL_IMM#15,SHIFT_VEC_IMM-SHL#14,SHIFT_VEC_IMM-SHL#15,FCVT_VEC_FIXED-SCVTF_VEC_FIX#8,FCVT_VEC_FIXED-SCVTF_VEC_FIX#9,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#8,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#9,MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL2_ELEM#0,MULL_ELEM-SQDMLAL2_ELEM#0,MULL_ELEM-SMLSL2_ELEM#0,MULL_ELEM-SQDMLSL2_ELEM#0,MULL_ELEM-SMULL2_ELEM#0,MULL_ELEM-SQDMULL2_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
pub const fn classify_impl_a2(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_a2_1(inst), // SHR_VEC_IMM-SSHR#14,SHR_VEC_IMM-SSRA#14,SHR_VEC_IMM-SRSHR#14,SHR_VEC_IMM-SRSRA#14,QSHL_VEC_IMM-SQSHL_IMM#14,SHIFT_VEC_IMM-SHL#14,FCVT_VEC_FIXED-SCVTF_VEC_FIX#8,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#8,MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL2_ELEM#0,MULL_ELEM-SQDMLAL2_ELEM#0,MULL_ELEM-SMLSL2_ELEM#0,MULL_ELEM-SQDMLSL2_ELEM#0,MULL_ELEM-SMULL2_ELEM#0,MULL_ELEM-SQDMULL2_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
    0x2 => return classify_impl_a2_2(inst), // SHR_VEC_IMM-SSHR#15,SHR_VEC_IMM-SSRA#15,SHR_VEC_IMM-SRSHR#15,SHR_VEC_IMM-SRSRA#15,QSHL_VEC_IMM-SQSHL_IMM#15,SHIFT_VEC_IMM-SHL#15,FCVT_VEC_FIXED-SCVTF_VEC_FIX#9,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#9,MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL2_ELEM#0,MULL_ELEM-SQDMLAL2_ELEM#0,MULL_ELEM-SMLSL2_ELEM#0,MULL_ELEM-SQDMLSL2_ELEM#0,MULL_ELEM-SMULL2_ELEM#0,MULL_ELEM-SQDMULL2_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
    _ => idx
  };
  return idx;
}


// SHR_VEC_IMM-SSHR#16,SHR_VEC_IMM-SSRA#16,SHR_VEC_IMM-SRSHR#16,SHR_VEC_IMM-SRSRA#16,QSHL_VEC_IMM-SQSHL_IMM#16,SHIFT_VEC_IMM-SHL#16,FCVT_VEC_FIXED-SCVTF_VEC_FIX#10,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#10,MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL2_ELEM#0,MULL_ELEM-SQDMLAL2_ELEM#0,MULL_ELEM-SMLSL2_ELEM#0,MULL_ELEM-SQDMLSL2_ELEM#0,MULL_ELEM-SMULL2_ELEM#0,MULL_ELEM-SQDMULL2_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
pub const fn classify_impl_a3_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4900,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4901,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x5689,
    0x9 => 0x4902,
    0xa => 0x5689,
    0xb => 0x0,
    0xc => 0x568a,
    0xd => 0x4903,
    0xe => 0x568a,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4d00,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x568b,
    0x19 => 0x0,
    0x1a => 0x568b,
    0x1b => 0x0,
    0x1c => 0x568c,
    0x1d => 0x4a00,
    0x1e => 0x568c,
    0x1f => 0x0,
    0x20 => 0x5580,
    0x21 => 0x0,
    0x22 => 0x5580,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x568d,
    0x29 => 0x0,
    0x2a => 0x568d,
    0x2b => 0x0,
    0x2c => 0x568e,
    0x2d => 0x0,
    0x2e => 0x568e,
    0x2f => 0x0,
    0x30 => 0x5581,
    0x31 => 0x0,
    0x32 => 0x5581,
    0x33 => 0x0,
    0x34 => 0x5582,
    0x35 => 0x0,
    0x36 => 0x5582,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e02,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5981,
    0x3d => 0x0,
    0x3e => 0x5981,
    0x3f => 0x4e03,
    _ => 0,
  };
  return idx;
}


// SHR_VEC_IMM-SSHR#17,SHR_VEC_IMM-SSRA#17,SHR_VEC_IMM-SRSHR#17,SHR_VEC_IMM-SRSRA#17,QSHL_VEC_IMM-SQSHL_IMM#17,SHIFT_VEC_IMM-SHL#17,FCVT_VEC_FIXED-SCVTF_VEC_FIX#11,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#11,MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL2_ELEM#0,MULL_ELEM-SQDMLAL2_ELEM#0,MULL_ELEM-SMLSL2_ELEM#0,MULL_ELEM-SQDMLSL2_ELEM#0,MULL_ELEM-SMULL2_ELEM#0,MULL_ELEM-SQDMULL2_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
pub const fn classify_impl_a3_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4900,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4901,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x5689,
    0x9 => 0x4902,
    0xa => 0x5689,
    0xb => 0x0,
    0xc => 0x568a,
    0xd => 0x4903,
    0xe => 0x568a,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4d00,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x568b,
    0x19 => 0x0,
    0x1a => 0x568b,
    0x1b => 0x0,
    0x1c => 0x568c,
    0x1d => 0x4a00,
    0x1e => 0x568c,
    0x1f => 0x0,
    0x20 => 0x5580,
    0x21 => 0x0,
    0x22 => 0x5580,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x568d,
    0x29 => 0x0,
    0x2a => 0x568d,
    0x2b => 0x0,
    0x2c => 0x568e,
    0x2d => 0x0,
    0x2e => 0x568e,
    0x2f => 0x0,
    0x30 => 0x5581,
    0x31 => 0x0,
    0x32 => 0x5581,
    0x33 => 0x0,
    0x34 => 0x5582,
    0x35 => 0x0,
    0x36 => 0x5582,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e02,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5981,
    0x3d => 0x0,
    0x3e => 0x5981,
    0x3f => 0x4e03,
    _ => 0,
  };
  return idx;
}

// SHR_VEC_IMM-SSHR#16,SHR_VEC_IMM-SSHR#17,SHR_VEC_IMM-SSRA#16,SHR_VEC_IMM-SSRA#17,SHR_VEC_IMM-SRSHR#16,SHR_VEC_IMM-SRSHR#17,SHR_VEC_IMM-SRSRA#16,SHR_VEC_IMM-SRSRA#17,QSHL_VEC_IMM-SQSHL_IMM#16,QSHL_VEC_IMM-SQSHL_IMM#17,SHIFT_VEC_IMM-SHL#16,SHIFT_VEC_IMM-SHL#17,FCVT_VEC_FIXED-SCVTF_VEC_FIX#10,FCVT_VEC_FIXED-SCVTF_VEC_FIX#11,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#10,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#11,MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL2_ELEM#0,MULL_ELEM-SQDMLAL2_ELEM#0,MULL_ELEM-SMLSL2_ELEM#0,MULL_ELEM-SQDMLSL2_ELEM#0,MULL_ELEM-SMULL2_ELEM#0,MULL_ELEM-SQDMULL2_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
pub const fn classify_impl_a3(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_a3_1(inst), // SHR_VEC_IMM-SSHR#16,SHR_VEC_IMM-SSRA#16,SHR_VEC_IMM-SRSHR#16,SHR_VEC_IMM-SRSRA#16,QSHL_VEC_IMM-SQSHL_IMM#16,SHIFT_VEC_IMM-SHL#16,FCVT_VEC_FIXED-SCVTF_VEC_FIX#10,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#10,MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL2_ELEM#0,MULL_ELEM-SQDMLAL2_ELEM#0,MULL_ELEM-SMLSL2_ELEM#0,MULL_ELEM-SQDMLSL2_ELEM#0,MULL_ELEM-SMULL2_ELEM#0,MULL_ELEM-SQDMULL2_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
    0x2 => return classify_impl_a3_2(inst), // SHR_VEC_IMM-SSHR#17,SHR_VEC_IMM-SSRA#17,SHR_VEC_IMM-SRSHR#17,SHR_VEC_IMM-SRSRA#17,QSHL_VEC_IMM-SQSHL_IMM#17,SHIFT_VEC_IMM-SHL#17,FCVT_VEC_FIXED-SCVTF_VEC_FIX#11,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#11,MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL2_ELEM#0,MULL_ELEM-SQDMLAL2_ELEM#0,MULL_ELEM-SMLSL2_ELEM#0,MULL_ELEM-SQDMLSL2_ELEM#0,MULL_ELEM-SMULL2_ELEM#0,MULL_ELEM-SQDMULL2_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
    _ => idx
  };
  return idx;
}


// SHR_VEC_IMM-SSHR#18,SHR_VEC_IMM-SSRA#18,SHR_VEC_IMM-SRSHR#18,SHR_VEC_IMM-SRSRA#18,QSHL_VEC_IMM-SQSHL_IMM#18,SHIFT_VEC_IMM-SHL#18,FCVT_VEC_FIXED-SCVTF_VEC_FIX#12,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#12,MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL2_ELEM#0,MULL_ELEM-SQDMLAL2_ELEM#0,MULL_ELEM-SMLSL2_ELEM#0,MULL_ELEM-SQDMLSL2_ELEM#0,MULL_ELEM-SMULL2_ELEM#0,MULL_ELEM-SQDMULL2_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
pub const fn classify_impl_a4_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4900,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4901,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x5689,
    0x9 => 0x4902,
    0xa => 0x5689,
    0xb => 0x0,
    0xc => 0x568a,
    0xd => 0x4903,
    0xe => 0x568a,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4d00,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x568b,
    0x19 => 0x0,
    0x1a => 0x568b,
    0x1b => 0x0,
    0x1c => 0x568c,
    0x1d => 0x4a00,
    0x1e => 0x568c,
    0x1f => 0x0,
    0x20 => 0x5580,
    0x21 => 0x0,
    0x22 => 0x5580,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x568d,
    0x29 => 0x0,
    0x2a => 0x568d,
    0x2b => 0x0,
    0x2c => 0x568e,
    0x2d => 0x0,
    0x2e => 0x568e,
    0x2f => 0x0,
    0x30 => 0x5581,
    0x31 => 0x0,
    0x32 => 0x5581,
    0x33 => 0x0,
    0x34 => 0x5582,
    0x35 => 0x0,
    0x36 => 0x5582,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e02,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5981,
    0x3d => 0x0,
    0x3e => 0x5981,
    0x3f => 0x4e03,
    _ => 0,
  };
  return idx;
}


// SHR_VEC_IMM-SSHR#19,SHR_VEC_IMM-SSRA#19,SHR_VEC_IMM-SRSHR#19,SHR_VEC_IMM-SRSRA#19,QSHL_VEC_IMM-SQSHL_IMM#19,SHIFT_VEC_IMM-SHL#19,FCVT_VEC_FIXED-SCVTF_VEC_FIX#13,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#13,MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL2_ELEM#0,MULL_ELEM-SQDMLAL2_ELEM#0,MULL_ELEM-SMLSL2_ELEM#0,MULL_ELEM-SQDMLSL2_ELEM#0,MULL_ELEM-SMULL2_ELEM#0,MULL_ELEM-SQDMULL2_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
pub const fn classify_impl_a4_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4900,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4901,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x5689,
    0x9 => 0x4902,
    0xa => 0x5689,
    0xb => 0x0,
    0xc => 0x568a,
    0xd => 0x4903,
    0xe => 0x568a,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4d00,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x568b,
    0x19 => 0x0,
    0x1a => 0x568b,
    0x1b => 0x0,
    0x1c => 0x568c,
    0x1d => 0x4a00,
    0x1e => 0x568c,
    0x1f => 0x0,
    0x20 => 0x5580,
    0x21 => 0x0,
    0x22 => 0x5580,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x568d,
    0x29 => 0x0,
    0x2a => 0x568d,
    0x2b => 0x0,
    0x2c => 0x568e,
    0x2d => 0x0,
    0x2e => 0x568e,
    0x2f => 0x0,
    0x30 => 0x5581,
    0x31 => 0x0,
    0x32 => 0x5581,
    0x33 => 0x0,
    0x34 => 0x5582,
    0x35 => 0x0,
    0x36 => 0x5582,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e02,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5981,
    0x3d => 0x0,
    0x3e => 0x5981,
    0x3f => 0x4e03,
    _ => 0,
  };
  return idx;
}

// SHR_VEC_IMM-SSHR#18,SHR_VEC_IMM-SSHR#19,SHR_VEC_IMM-SSRA#18,SHR_VEC_IMM-SSRA#19,SHR_VEC_IMM-SRSHR#18,SHR_VEC_IMM-SRSHR#19,SHR_VEC_IMM-SRSRA#18,SHR_VEC_IMM-SRSRA#19,QSHL_VEC_IMM-SQSHL_IMM#18,QSHL_VEC_IMM-SQSHL_IMM#19,SHIFT_VEC_IMM-SHL#18,SHIFT_VEC_IMM-SHL#19,FCVT_VEC_FIXED-SCVTF_VEC_FIX#12,FCVT_VEC_FIXED-SCVTF_VEC_FIX#13,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#12,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#13,MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL2_ELEM#0,MULL_ELEM-SQDMLAL2_ELEM#0,MULL_ELEM-SMLSL2_ELEM#0,MULL_ELEM-SQDMLSL2_ELEM#0,MULL_ELEM-SMULL2_ELEM#0,MULL_ELEM-SQDMULL2_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
pub const fn classify_impl_a4(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_a4_1(inst), // SHR_VEC_IMM-SSHR#18,SHR_VEC_IMM-SSRA#18,SHR_VEC_IMM-SRSHR#18,SHR_VEC_IMM-SRSRA#18,QSHL_VEC_IMM-SQSHL_IMM#18,SHIFT_VEC_IMM-SHL#18,FCVT_VEC_FIXED-SCVTF_VEC_FIX#12,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#12,MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL2_ELEM#0,MULL_ELEM-SQDMLAL2_ELEM#0,MULL_ELEM-SMLSL2_ELEM#0,MULL_ELEM-SQDMLSL2_ELEM#0,MULL_ELEM-SMULL2_ELEM#0,MULL_ELEM-SQDMULL2_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
    0x2 => return classify_impl_a4_2(inst), // SHR_VEC_IMM-SSHR#19,SHR_VEC_IMM-SSRA#19,SHR_VEC_IMM-SRSHR#19,SHR_VEC_IMM-SRSRA#19,QSHL_VEC_IMM-SQSHL_IMM#19,SHIFT_VEC_IMM-SHL#19,FCVT_VEC_FIXED-SCVTF_VEC_FIX#13,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#13,MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL2_ELEM#0,MULL_ELEM-SQDMLAL2_ELEM#0,MULL_ELEM-SMLSL2_ELEM#0,MULL_ELEM-SQDMLSL2_ELEM#0,MULL_ELEM-SMULL2_ELEM#0,MULL_ELEM-SQDMULL2_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
    _ => idx
  };
  return idx;
}


// SHR_VEC_IMM-SSHR#20,SHR_VEC_IMM-SSRA#20,SHR_VEC_IMM-SRSHR#20,SHR_VEC_IMM-SRSRA#20,QSHL_VEC_IMM-SQSHL_IMM#20,SHIFT_VEC_IMM-SHL#20,FCVT_VEC_FIXED-SCVTF_VEC_FIX#14,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#14,MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL2_ELEM#0,MULL_ELEM-SQDMLAL2_ELEM#0,MULL_ELEM-SMLSL2_ELEM#0,MULL_ELEM-SQDMLSL2_ELEM#0,MULL_ELEM-SMULL2_ELEM#0,MULL_ELEM-SQDMULL2_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
pub const fn classify_impl_a5_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4900,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4901,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x5689,
    0x9 => 0x4902,
    0xa => 0x5689,
    0xb => 0x0,
    0xc => 0x568a,
    0xd => 0x4903,
    0xe => 0x568a,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4d00,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x568b,
    0x19 => 0x0,
    0x1a => 0x568b,
    0x1b => 0x0,
    0x1c => 0x568c,
    0x1d => 0x4a00,
    0x1e => 0x568c,
    0x1f => 0x0,
    0x20 => 0x5580,
    0x21 => 0x0,
    0x22 => 0x5580,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x568d,
    0x29 => 0x0,
    0x2a => 0x568d,
    0x2b => 0x0,
    0x2c => 0x568e,
    0x2d => 0x0,
    0x2e => 0x568e,
    0x2f => 0x0,
    0x30 => 0x5581,
    0x31 => 0x0,
    0x32 => 0x5581,
    0x33 => 0x0,
    0x34 => 0x5582,
    0x35 => 0x0,
    0x36 => 0x5582,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e02,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5981,
    0x3d => 0x0,
    0x3e => 0x5981,
    0x3f => 0x4e03,
    _ => 0,
  };
  return idx;
}


// SHR_VEC_IMM-SSHR#21,SHR_VEC_IMM-SSRA#21,SHR_VEC_IMM-SRSHR#21,SHR_VEC_IMM-SRSRA#21,QSHL_VEC_IMM-SQSHL_IMM#21,SHIFT_VEC_IMM-SHL#21,FCVT_VEC_FIXED-SCVTF_VEC_FIX#15,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#15,MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL2_ELEM#0,MULL_ELEM-SQDMLAL2_ELEM#0,MULL_ELEM-SMLSL2_ELEM#0,MULL_ELEM-SQDMLSL2_ELEM#0,MULL_ELEM-SMULL2_ELEM#0,MULL_ELEM-SQDMULL2_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
pub const fn classify_impl_a5_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4900,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4901,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x5689,
    0x9 => 0x4902,
    0xa => 0x5689,
    0xb => 0x0,
    0xc => 0x568a,
    0xd => 0x4903,
    0xe => 0x568a,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4d00,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x568b,
    0x19 => 0x0,
    0x1a => 0x568b,
    0x1b => 0x0,
    0x1c => 0x568c,
    0x1d => 0x4a00,
    0x1e => 0x568c,
    0x1f => 0x0,
    0x20 => 0x5580,
    0x21 => 0x0,
    0x22 => 0x5580,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x568d,
    0x29 => 0x0,
    0x2a => 0x568d,
    0x2b => 0x0,
    0x2c => 0x568e,
    0x2d => 0x0,
    0x2e => 0x568e,
    0x2f => 0x0,
    0x30 => 0x5581,
    0x31 => 0x0,
    0x32 => 0x5581,
    0x33 => 0x0,
    0x34 => 0x5582,
    0x35 => 0x0,
    0x36 => 0x5582,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e02,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5981,
    0x3d => 0x0,
    0x3e => 0x5981,
    0x3f => 0x4e03,
    _ => 0,
  };
  return idx;
}

// SHR_VEC_IMM-SSHR#20,SHR_VEC_IMM-SSHR#21,SHR_VEC_IMM-SSRA#20,SHR_VEC_IMM-SSRA#21,SHR_VEC_IMM-SRSHR#20,SHR_VEC_IMM-SRSHR#21,SHR_VEC_IMM-SRSRA#20,SHR_VEC_IMM-SRSRA#21,QSHL_VEC_IMM-SQSHL_IMM#20,QSHL_VEC_IMM-SQSHL_IMM#21,SHIFT_VEC_IMM-SHL#20,SHIFT_VEC_IMM-SHL#21,FCVT_VEC_FIXED-SCVTF_VEC_FIX#14,FCVT_VEC_FIXED-SCVTF_VEC_FIX#15,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#14,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#15,MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL2_ELEM#0,MULL_ELEM-SQDMLAL2_ELEM#0,MULL_ELEM-SMLSL2_ELEM#0,MULL_ELEM-SQDMLSL2_ELEM#0,MULL_ELEM-SMULL2_ELEM#0,MULL_ELEM-SQDMULL2_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
pub const fn classify_impl_a5(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_a5_1(inst), // SHR_VEC_IMM-SSHR#20,SHR_VEC_IMM-SSRA#20,SHR_VEC_IMM-SRSHR#20,SHR_VEC_IMM-SRSRA#20,QSHL_VEC_IMM-SQSHL_IMM#20,SHIFT_VEC_IMM-SHL#20,FCVT_VEC_FIXED-SCVTF_VEC_FIX#14,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#14,MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL2_ELEM#0,MULL_ELEM-SQDMLAL2_ELEM#0,MULL_ELEM-SMLSL2_ELEM#0,MULL_ELEM-SQDMLSL2_ELEM#0,MULL_ELEM-SMULL2_ELEM#0,MULL_ELEM-SQDMULL2_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
    0x2 => return classify_impl_a5_2(inst), // SHR_VEC_IMM-SSHR#21,SHR_VEC_IMM-SSRA#21,SHR_VEC_IMM-SRSHR#21,SHR_VEC_IMM-SRSRA#21,QSHL_VEC_IMM-SQSHL_IMM#21,SHIFT_VEC_IMM-SHL#21,FCVT_VEC_FIXED-SCVTF_VEC_FIX#15,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#15,MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL2_ELEM#0,MULL_ELEM-SQDMLAL2_ELEM#0,MULL_ELEM-SMLSL2_ELEM#0,MULL_ELEM-SQDMLSL2_ELEM#0,MULL_ELEM-SMULL2_ELEM#0,MULL_ELEM-SQDMULL2_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
    _ => idx
  };
  return idx;
}


// MUL_ELEM-MUL_ELEM#1,MUL_ELEM-SQDMULH_ELEM#1,MUL_ELEM-SQRDMULH_ELEM#1,MULL_ELEM-SMLAL2_ELEM#1,MULL_ELEM-SQDMLAL2_ELEM#1,MULL_ELEM-SMLSL2_ELEM#1,MULL_ELEM-SQDMLSL2_ELEM#1,MULL_ELEM-SMULL2_ELEM#1,MULL_ELEM-SQDMULL2_ELEM#1,FMUL_ELEM-FMLA_ELEM#2,FMUL_ELEM-FMLS_ELEM#2,FMUL_ELEM-FMUL_ELEM#2,DOT_ELEM-SDOT_ELEM#0,DOT_ELEM-USDOT_ELEM#0,FHM_ELEM-FMLAL_ELEM#0,FHM_ELEM-FMLSL_ELEM#0
pub const fn classify_impl_a6(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 12) & 0xf {
    0x0 => 0x5b80,
    0x1 => 0x5800,
    0x2 => 0x5689,
    0x3 => 0x568a,
    0x4 => 0x5b81,
    0x5 => 0x5801,
    0x6 => 0x568b,
    0x7 => 0x568c,
    0x8 => 0x5580,
    0x9 => 0x5802,
    0xa => 0x568d,
    0xb => 0x568e,
    0xc => 0x5581,
    0xd => 0x5582,
    0xe => 0x5982,
    0xf => 0x5983,
    _ => 0,
  };
  return idx;
}


// MUL_ELEM-MUL_ELEM#1,MUL_ELEM-SQDMULH_ELEM#1,MUL_ELEM-SQRDMULH_ELEM#1,MULL_ELEM-SMLAL2_ELEM#1,MULL_ELEM-SQDMLAL2_ELEM#1,MULL_ELEM-SMLSL2_ELEM#1,MULL_ELEM-SQDMLSL2_ELEM#1,MULL_ELEM-SMULL2_ELEM#1,MULL_ELEM-SQDMULL2_ELEM#1,FMUL_ELEM-FMLA_ELEM#3,FMUL_ELEM-FMLS_ELEM#3,FMUL_ELEM-FMUL_ELEM#3,DOT_ELEM-SDOT_ELEM#0,DOT_ELEM-USDOT_ELEM#0,FHM_ELEM-FMLAL_ELEM#0,FHM_ELEM-FMLSL_ELEM#0
pub const fn classify_impl_a7(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 12) & 0xf {
    0x0 => 0x5b80,
    0x1 => 0x5800,
    0x2 => 0x5689,
    0x3 => 0x568a,
    0x4 => 0x5b81,
    0x5 => 0x5801,
    0x6 => 0x568b,
    0x7 => 0x568c,
    0x8 => 0x5580,
    0x9 => 0x5802,
    0xa => 0x568d,
    0xb => 0x568e,
    0xc => 0x5581,
    0xd => 0x5582,
    0xe => 0x5982,
    0xf => 0x5983,
    _ => 0,
  };
  return idx;
}


// FMUL_ELEM-FMLA_ELEM#4,FMUL_ELEM-FMLS_ELEM#4,FMUL_ELEM-FMUL_ELEM#4,FMLAL_ELEM-BFMLALT_ELEM#0
pub const fn classify_impl_a8(inst: u32) -> u32 {
  if (inst&0x1400) != 0x1000 { return 0; }
  let idx = match (inst >> 13) & 0x7 {
    0x0 => 0x5800,
    0x1 => 0x0,
    0x2 => 0x5801,
    0x3 => 0x0,
    0x4 => 0x5802,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x5a83,
    _ => 0,
  };
  return idx;
}


// FMLAL_ELEM-BFMLALT_ELEM#0
pub const fn classify_impl_a9(inst: u32) -> u32 {
  if (inst&0xf400) != 0xf000 { return 0; }
  return 0x5a83;
}


// ANDOREOR_IMM-EOR_IMM#0,ANDOREOR_IMM-EOR_IMM#1,ANDOREOR_IMM-EOR_IMM#2,ANDOREOR_IMM-EOR_IMM#3,ANDOREOR_IMM-EOR_IMM#4,ANDOREOR_IMM-EOR_IMM#5,ANDOREOR_IMM-EOR_IMM#6,ANDOREOR_IMM-EOR_IMM#7,ANDOREOR_IMM-EOR_IMM#8,ANDOREOR_IMM-EOR_IMM#9,ANDOREOR_IMM-EOR_IMM#10,ANDOREOR_IMM-EOR_IMM#11,ANDOREOR_IMM-EOR_IMM#12,ANDOREOR_IMM-EOR_IMM#13,ANDOREOR_IMM-EOR_IMM#14,ANDOREOR_IMM-EOR_IMM#15,ANDOREOR_IMM-EOR_IMM#16,ANDOREOR_IMM-EOR_IMM#17,ANDOREOR_IMM-EOR_IMM#18,ANDOREOR_IMM-EOR_IMM#19,ANDOREOR_IMM-EOR_IMM#20,ANDOREOR_IMM-EOR_IMM#21,ANDOREOR_IMM-EOR_IMM#22,ANDOREOR_IMM-EOR_IMM#23,ANDOREOR_IMM-EOR_IMM#24,ANDOREOR_IMM-EOR_IMM#25,ANDOREOR_IMM-EOR_IMM#26,ANDOREOR_IMM-EOR_IMM#27,ANDOREOR_IMM-EOR_IMM#28,ANDOREOR_IMM-EOR_IMM#29,ANDOREOR_IMM-EOR_IMM#30,ANDOREOR_IMM-EOR_IMM#31,ANDOREOR_IMM-EOR_IMM#32,ANDOREOR_IMM-EOR_IMM#33,ANDOREOR_IMM-EOR_IMM#34,ANDOREOR_IMM-EOR_IMM#35,ANDOREOR_IMM-EOR_IMM#36,ANDOREOR_IMM-EOR_IMM#37,ANDOREOR_IMM-EOR_IMM#38,ANDOREOR_IMM-EOR_IMM#39,ANDOREOR_IMM-EOR_IMM#40,ANDOREOR_IMM-EOR_IMM#41,ANDOREOR_IMM-EOR_IMM#42,ANDOREOR_IMM-EOR_IMM#43,ANDOREOR_IMM-EOR_IMM#44,ANDOREOR_IMM-EOR_IMM#45,ANDOREOR_IMM-EOR_IMM#46,ANDOREOR_IMM-EOR_IMM#47,ANDOREOR_IMM-EOR_IMM#48,ANDOREOR_IMM-EOR_IMM#49,ANDOREOR_IMM-EOR_IMM#50,ANDOREOR_IMM-EOR_IMM#51,ANDOREOR_IMM-EOR_IMM#52,ANDOREOR_IMM-EOR_IMM#53,ANDOREOR_IMM-EOR_IMM#54,ANDOREOR_IMM-EOR_IMM#55,ANDOREOR_IMM-EOR_IMM#56
pub const fn classify_impl_aa(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x502,
    0x1 => 0x502,
    0x2 => 0x502,
    0x3 => 0x502,
    0x4 => 0x502,
    0x5 => 0x502,
    0x6 => 0x502,
    0x7 => 0x502,
    0x8 => 0x502,
    0x9 => 0x502,
    0xa => 0x502,
    0xb => 0x502,
    0xc => 0x502,
    0xd => 0x502,
    0xe => 0x502,
    0xf => 0x502,
    0x10 => 0x502,
    0x11 => 0x502,
    0x12 => 0x502,
    0x13 => 0x502,
    0x14 => 0x502,
    0x15 => 0x502,
    0x16 => 0x502,
    0x17 => 0x502,
    0x18 => 0x502,
    0x19 => 0x502,
    0x1a => 0x502,
    0x1b => 0x502,
    0x1c => 0x502,
    0x1d => 0x502,
    0x1e => 0x502,
    0x1f => 0x0,
    0x20 => 0x502,
    0x21 => 0x502,
    0x22 => 0x502,
    0x23 => 0x502,
    0x24 => 0x502,
    0x25 => 0x502,
    0x26 => 0x502,
    0x27 => 0x502,
    0x28 => 0x502,
    0x29 => 0x502,
    0x2a => 0x502,
    0x2b => 0x502,
    0x2c => 0x502,
    0x2d => 0x502,
    0x2e => 0x502,
    0x2f => 0x0,
    0x30 => 0x502,
    0x31 => 0x502,
    0x32 => 0x502,
    0x33 => 0x502,
    0x34 => 0x502,
    0x35 => 0x502,
    0x36 => 0x502,
    0x37 => 0x0,
    0x38 => 0x502,
    0x39 => 0x502,
    0x3a => 0x502,
    0x3b => 0x0,
    0x3c => 0x502,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// BFM-UBFM#0
pub const fn classify_impl_ab(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x902;
}


// BCOND-BCOND#0,BCOND-BCCOND#0
pub const fn classify_impl_ac(inst: u32) -> u32 {
  let idx = match (inst >> 4) & 0x1 {
    0x0 => 0x800,
    0x1 => 0x801,
    _ => 0,
  };
  return idx;
}


// RCPCU-STLURH#0
pub const fn classify_impl_ad(inst: u32) -> u32 {
  if (inst&0xc00) != 0x0 { return 0; }
  return 0x6184;
}


// RCPCU-LDAPURH#0
pub const fn classify_impl_ae(inst: u32) -> u32 {
  if (inst&0xc00) != 0x0 { return 0; }
  return 0x6185;
}


// RCPCU-LDAPURSH#0
pub const fn classify_impl_af(inst: u32) -> u32 {
  if (inst&0xc00) != 0x0 { return 0; }
  return 0x6186;
}


// RCPCU-LDAPURSHW#0
pub const fn classify_impl_b0(inst: u32) -> u32 {
  if (inst&0xc00) != 0x0 { return 0; }
  return 0x6187;
}


// ADCSBC-SBC#0
pub const fn classify_impl_b1(inst: u32) -> u32 {
  if (inst&0xfc00) != 0x0 { return 0; }
  return 0x282;
}


// CSEL-CSINV#0,CSEL-CSNEG#0
pub const fn classify_impl_b2(inst: u32) -> u32 {
  if (inst&0x800) != 0x0 { return 0; }
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x1202,
    0x1 => 0x1203,
    _ => 0,
  };
  return idx;
}


// CLZ-CLZ#0,CLZ-CLS#0,CLZ-CTZ#0,CLZ-CNT#0,CLZ-ABS#0,REV-RBIT#0,REV-REV16#0,REV-REV#0
pub const fn classify_impl_b3(inst: u32) -> u32 {
  if (inst&0xfc000) != 0x0 { return 0; }
  let idx = match (inst >> 10) & 0xf {
    0x0 => 0x1500,
    0x1 => 0x1501,
    0x2 => 0x1502,
    0x3 => 0x0,
    0x4 => 0x1080,
    0x5 => 0x1081,
    0x6 => 0x1082,
    0x7 => 0x1083,
    0x8 => 0x1084,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    _ => 0,
  };
  return idx;
}


// SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_1(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 12) & 0x7 {
    0x0 => 0x6d00,
    0x1 => 0x6d01,
    0x2 => 0x6d02,
    0x3 => 0x6d03,
    0x4 => 0x6d04,
    0x5 => 0x6d05,
    0x6 => 0x6d06,
    0x7 => 0x0,
    _ => 0,
  };
  return idx;
}


// DUP_SCALAR-DUP_SCALAR#0,SHA2_3REG-SHA1C#0
pub const fn classify_impl_b4_2_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6d00,
    0x1 => 0x2800,
    _ => 0,
  };
  return idx;
}


// SHA2_3REG-SHA1P#0
pub const fn classify_impl_b4_2_2(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d01;
}


// SHA2_3REG-SHA1M#0
pub const fn classify_impl_b4_2_3(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d02;
}


// SHA2_3REG-SHA1SU0#0
pub const fn classify_impl_b4_2_4(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d03;
}


// SHA2_3REG-SHA256H#0
pub const fn classify_impl_b4_2_5(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d04;
}


// SHA2_3REG-SHA256H2#0
pub const fn classify_impl_b4_2_6(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d05;
}


// SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_2_7(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d06;
}

// DUP_SCALAR-DUP_SCALAR#0,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_2(inst: u32) -> u32 {
  let idx = match (inst >> 12) & 0x7 {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_b4_2_1(inst), // DUP_SCALAR-DUP_SCALAR#0,SHA2_3REG-SHA1C#0
    0x2 => return classify_impl_b4_2_2(inst), // SHA2_3REG-SHA1P#0
    0x3 => return classify_impl_b4_2_3(inst), // SHA2_3REG-SHA1M#0
    0x4 => return classify_impl_b4_2_4(inst), // SHA2_3REG-SHA1SU0#0
    0x5 => return classify_impl_b4_2_5(inst), // SHA2_3REG-SHA256H#0
    0x6 => return classify_impl_b4_2_6(inst), // SHA2_3REG-SHA256H2#0
    0x7 => return classify_impl_b4_2_7(inst), // SHA2_3REG-SHA256SU1#0
    _ => idx
  };
  return idx;
}


// DUP_SCALAR-DUP_SCALAR#1,SHA2_3REG-SHA1C#0
pub const fn classify_impl_b4_3_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6d00,
    0x1 => 0x2800,
    _ => 0,
  };
  return idx;
}


// SHA2_3REG-SHA1P#0
pub const fn classify_impl_b4_3_2(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d01;
}


// SHA2_3REG-SHA1M#0
pub const fn classify_impl_b4_3_3(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d02;
}


// SHA2_3REG-SHA1SU0#0
pub const fn classify_impl_b4_3_4(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d03;
}


// SHA2_3REG-SHA256H#0
pub const fn classify_impl_b4_3_5(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d04;
}


// SHA2_3REG-SHA256H2#0
pub const fn classify_impl_b4_3_6(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d05;
}


// SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_3_7(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d06;
}

// DUP_SCALAR-DUP_SCALAR#1,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_3(inst: u32) -> u32 {
  let idx = match (inst >> 12) & 0x7 {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_b4_3_1(inst), // DUP_SCALAR-DUP_SCALAR#1,SHA2_3REG-SHA1C#0
    0x2 => return classify_impl_b4_3_2(inst), // SHA2_3REG-SHA1P#0
    0x3 => return classify_impl_b4_3_3(inst), // SHA2_3REG-SHA1M#0
    0x4 => return classify_impl_b4_3_4(inst), // SHA2_3REG-SHA1SU0#0
    0x5 => return classify_impl_b4_3_5(inst), // SHA2_3REG-SHA256H#0
    0x6 => return classify_impl_b4_3_6(inst), // SHA2_3REG-SHA256H2#0
    0x7 => return classify_impl_b4_3_7(inst), // SHA2_3REG-SHA256SU1#0
    _ => idx
  };
  return idx;
}


// DUP_SCALAR-DUP_SCALAR#2,SHA2_3REG-SHA1C#0
pub const fn classify_impl_b4_4_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6d00,
    0x1 => 0x2800,
    _ => 0,
  };
  return idx;
}


// SHA2_3REG-SHA1P#0
pub const fn classify_impl_b4_4_2(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d01;
}


// SHA2_3REG-SHA1M#0
pub const fn classify_impl_b4_4_3(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d02;
}


// SHA2_3REG-SHA1SU0#0
pub const fn classify_impl_b4_4_4(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d03;
}


// SHA2_3REG-SHA256H#0
pub const fn classify_impl_b4_4_5(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d04;
}


// SHA2_3REG-SHA256H2#0
pub const fn classify_impl_b4_4_6(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d05;
}


// SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_4_7(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d06;
}

// DUP_SCALAR-DUP_SCALAR#2,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_4(inst: u32) -> u32 {
  let idx = match (inst >> 12) & 0x7 {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_b4_4_1(inst), // DUP_SCALAR-DUP_SCALAR#2,SHA2_3REG-SHA1C#0
    0x2 => return classify_impl_b4_4_2(inst), // SHA2_3REG-SHA1P#0
    0x3 => return classify_impl_b4_4_3(inst), // SHA2_3REG-SHA1M#0
    0x4 => return classify_impl_b4_4_4(inst), // SHA2_3REG-SHA1SU0#0
    0x5 => return classify_impl_b4_4_5(inst), // SHA2_3REG-SHA256H#0
    0x6 => return classify_impl_b4_4_6(inst), // SHA2_3REG-SHA256H2#0
    0x7 => return classify_impl_b4_4_7(inst), // SHA2_3REG-SHA256SU1#0
    _ => idx
  };
  return idx;
}


// DUP_SCALAR-DUP_SCALAR#3,SHA2_3REG-SHA1C#0
pub const fn classify_impl_b4_5_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6d00,
    0x1 => 0x2800,
    _ => 0,
  };
  return idx;
}


// SHA2_3REG-SHA1P#0
pub const fn classify_impl_b4_5_2(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d01;
}


// SHA2_3REG-SHA1M#0
pub const fn classify_impl_b4_5_3(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d02;
}


// SHA2_3REG-SHA1SU0#0
pub const fn classify_impl_b4_5_4(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d03;
}


// SHA2_3REG-SHA256H#0
pub const fn classify_impl_b4_5_5(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d04;
}


// SHA2_3REG-SHA256H2#0
pub const fn classify_impl_b4_5_6(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d05;
}


// SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_5_7(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d06;
}

// DUP_SCALAR-DUP_SCALAR#3,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_5(inst: u32) -> u32 {
  let idx = match (inst >> 12) & 0x7 {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_b4_5_1(inst), // DUP_SCALAR-DUP_SCALAR#3,SHA2_3REG-SHA1C#0
    0x2 => return classify_impl_b4_5_2(inst), // SHA2_3REG-SHA1P#0
    0x3 => return classify_impl_b4_5_3(inst), // SHA2_3REG-SHA1M#0
    0x4 => return classify_impl_b4_5_4(inst), // SHA2_3REG-SHA1SU0#0
    0x5 => return classify_impl_b4_5_5(inst), // SHA2_3REG-SHA256H#0
    0x6 => return classify_impl_b4_5_6(inst), // SHA2_3REG-SHA256H2#0
    0x7 => return classify_impl_b4_5_7(inst), // SHA2_3REG-SHA256SU1#0
    _ => idx
  };
  return idx;
}


// DUP_SCALAR-DUP_SCALAR#4,SHA2_3REG-SHA1C#0
pub const fn classify_impl_b4_6_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6d00,
    0x1 => 0x2800,
    _ => 0,
  };
  return idx;
}


// SHA2_3REG-SHA1P#0
pub const fn classify_impl_b4_6_2(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d01;
}


// SHA2_3REG-SHA1M#0
pub const fn classify_impl_b4_6_3(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d02;
}


// SHA2_3REG-SHA1SU0#0
pub const fn classify_impl_b4_6_4(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d03;
}


// SHA2_3REG-SHA256H#0
pub const fn classify_impl_b4_6_5(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d04;
}


// SHA2_3REG-SHA256H2#0
pub const fn classify_impl_b4_6_6(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d05;
}


// SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_6_7(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d06;
}

// DUP_SCALAR-DUP_SCALAR#4,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_6(inst: u32) -> u32 {
  let idx = match (inst >> 12) & 0x7 {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_b4_6_1(inst), // DUP_SCALAR-DUP_SCALAR#4,SHA2_3REG-SHA1C#0
    0x2 => return classify_impl_b4_6_2(inst), // SHA2_3REG-SHA1P#0
    0x3 => return classify_impl_b4_6_3(inst), // SHA2_3REG-SHA1M#0
    0x4 => return classify_impl_b4_6_4(inst), // SHA2_3REG-SHA1SU0#0
    0x5 => return classify_impl_b4_6_5(inst), // SHA2_3REG-SHA256H#0
    0x6 => return classify_impl_b4_6_6(inst), // SHA2_3REG-SHA256H2#0
    0x7 => return classify_impl_b4_6_7(inst), // SHA2_3REG-SHA256SU1#0
    _ => idx
  };
  return idx;
}


// DUP_SCALAR-DUP_SCALAR#5,SHA2_3REG-SHA1C#0
pub const fn classify_impl_b4_7_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6d00,
    0x1 => 0x2800,
    _ => 0,
  };
  return idx;
}


// SHA2_3REG-SHA1P#0
pub const fn classify_impl_b4_7_2(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d01;
}


// SHA2_3REG-SHA1M#0
pub const fn classify_impl_b4_7_3(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d02;
}


// SHA2_3REG-SHA1SU0#0
pub const fn classify_impl_b4_7_4(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d03;
}


// SHA2_3REG-SHA256H#0
pub const fn classify_impl_b4_7_5(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d04;
}


// SHA2_3REG-SHA256H2#0
pub const fn classify_impl_b4_7_6(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d05;
}


// SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_7_7(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d06;
}

// DUP_SCALAR-DUP_SCALAR#5,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_7(inst: u32) -> u32 {
  let idx = match (inst >> 12) & 0x7 {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_b4_7_1(inst), // DUP_SCALAR-DUP_SCALAR#5,SHA2_3REG-SHA1C#0
    0x2 => return classify_impl_b4_7_2(inst), // SHA2_3REG-SHA1P#0
    0x3 => return classify_impl_b4_7_3(inst), // SHA2_3REG-SHA1M#0
    0x4 => return classify_impl_b4_7_4(inst), // SHA2_3REG-SHA1SU0#0
    0x5 => return classify_impl_b4_7_5(inst), // SHA2_3REG-SHA256H#0
    0x6 => return classify_impl_b4_7_6(inst), // SHA2_3REG-SHA256H2#0
    0x7 => return classify_impl_b4_7_7(inst), // SHA2_3REG-SHA256SU1#0
    _ => idx
  };
  return idx;
}


// DUP_SCALAR-DUP_SCALAR#6,SHA2_3REG-SHA1C#0
pub const fn classify_impl_b4_8_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6d00,
    0x1 => 0x2800,
    _ => 0,
  };
  return idx;
}


// SHA2_3REG-SHA1P#0
pub const fn classify_impl_b4_8_2(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d01;
}


// SHA2_3REG-SHA1M#0
pub const fn classify_impl_b4_8_3(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d02;
}


// SHA2_3REG-SHA1SU0#0
pub const fn classify_impl_b4_8_4(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d03;
}


// SHA2_3REG-SHA256H#0
pub const fn classify_impl_b4_8_5(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d04;
}


// SHA2_3REG-SHA256H2#0
pub const fn classify_impl_b4_8_6(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d05;
}


// SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_8_7(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d06;
}

// DUP_SCALAR-DUP_SCALAR#6,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_8(inst: u32) -> u32 {
  let idx = match (inst >> 12) & 0x7 {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_b4_8_1(inst), // DUP_SCALAR-DUP_SCALAR#6,SHA2_3REG-SHA1C#0
    0x2 => return classify_impl_b4_8_2(inst), // SHA2_3REG-SHA1P#0
    0x3 => return classify_impl_b4_8_3(inst), // SHA2_3REG-SHA1M#0
    0x4 => return classify_impl_b4_8_4(inst), // SHA2_3REG-SHA1SU0#0
    0x5 => return classify_impl_b4_8_5(inst), // SHA2_3REG-SHA256H#0
    0x6 => return classify_impl_b4_8_6(inst), // SHA2_3REG-SHA256H2#0
    0x7 => return classify_impl_b4_8_7(inst), // SHA2_3REG-SHA256SU1#0
    _ => idx
  };
  return idx;
}


// DUP_SCALAR-DUP_SCALAR#7,SHA2_3REG-SHA1C#0
pub const fn classify_impl_b4_9_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6d00,
    0x1 => 0x2800,
    _ => 0,
  };
  return idx;
}


// SHA2_3REG-SHA1P#0
pub const fn classify_impl_b4_9_2(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d01;
}


// SHA2_3REG-SHA1M#0
pub const fn classify_impl_b4_9_3(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d02;
}


// SHA2_3REG-SHA1SU0#0
pub const fn classify_impl_b4_9_4(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d03;
}


// SHA2_3REG-SHA256H#0
pub const fn classify_impl_b4_9_5(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d04;
}


// SHA2_3REG-SHA256H2#0
pub const fn classify_impl_b4_9_6(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d05;
}


// SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_9_7(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d06;
}

// DUP_SCALAR-DUP_SCALAR#7,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_9(inst: u32) -> u32 {
  let idx = match (inst >> 12) & 0x7 {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_b4_9_1(inst), // DUP_SCALAR-DUP_SCALAR#7,SHA2_3REG-SHA1C#0
    0x2 => return classify_impl_b4_9_2(inst), // SHA2_3REG-SHA1P#0
    0x3 => return classify_impl_b4_9_3(inst), // SHA2_3REG-SHA1M#0
    0x4 => return classify_impl_b4_9_4(inst), // SHA2_3REG-SHA1SU0#0
    0x5 => return classify_impl_b4_9_5(inst), // SHA2_3REG-SHA256H#0
    0x6 => return classify_impl_b4_9_6(inst), // SHA2_3REG-SHA256H2#0
    0x7 => return classify_impl_b4_9_7(inst), // SHA2_3REG-SHA256SU1#0
    _ => idx
  };
  return idx;
}


// DUP_SCALAR-DUP_SCALAR#8,SHA2_3REG-SHA1C#0
pub const fn classify_impl_b4_a_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6d00,
    0x1 => 0x2800,
    _ => 0,
  };
  return idx;
}


// SHA2_3REG-SHA1P#0
pub const fn classify_impl_b4_a_2(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d01;
}


// SHA2_3REG-SHA1M#0
pub const fn classify_impl_b4_a_3(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d02;
}


// SHA2_3REG-SHA1SU0#0
pub const fn classify_impl_b4_a_4(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d03;
}


// SHA2_3REG-SHA256H#0
pub const fn classify_impl_b4_a_5(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d04;
}


// SHA2_3REG-SHA256H2#0
pub const fn classify_impl_b4_a_6(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d05;
}


// SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_a_7(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d06;
}

// DUP_SCALAR-DUP_SCALAR#8,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_a(inst: u32) -> u32 {
  let idx = match (inst >> 12) & 0x7 {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_b4_a_1(inst), // DUP_SCALAR-DUP_SCALAR#8,SHA2_3REG-SHA1C#0
    0x2 => return classify_impl_b4_a_2(inst), // SHA2_3REG-SHA1P#0
    0x3 => return classify_impl_b4_a_3(inst), // SHA2_3REG-SHA1M#0
    0x4 => return classify_impl_b4_a_4(inst), // SHA2_3REG-SHA1SU0#0
    0x5 => return classify_impl_b4_a_5(inst), // SHA2_3REG-SHA256H#0
    0x6 => return classify_impl_b4_a_6(inst), // SHA2_3REG-SHA256H2#0
    0x7 => return classify_impl_b4_a_7(inst), // SHA2_3REG-SHA256SU1#0
    _ => idx
  };
  return idx;
}


// DUP_SCALAR-DUP_SCALAR#9,SHA2_3REG-SHA1C#0
pub const fn classify_impl_b4_b_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6d00,
    0x1 => 0x2800,
    _ => 0,
  };
  return idx;
}


// SHA2_3REG-SHA1P#0
pub const fn classify_impl_b4_b_2(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d01;
}


// SHA2_3REG-SHA1M#0
pub const fn classify_impl_b4_b_3(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d02;
}


// SHA2_3REG-SHA1SU0#0
pub const fn classify_impl_b4_b_4(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d03;
}


// SHA2_3REG-SHA256H#0
pub const fn classify_impl_b4_b_5(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d04;
}


// SHA2_3REG-SHA256H2#0
pub const fn classify_impl_b4_b_6(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d05;
}


// SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_b_7(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d06;
}

// DUP_SCALAR-DUP_SCALAR#9,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_b(inst: u32) -> u32 {
  let idx = match (inst >> 12) & 0x7 {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_b4_b_1(inst), // DUP_SCALAR-DUP_SCALAR#9,SHA2_3REG-SHA1C#0
    0x2 => return classify_impl_b4_b_2(inst), // SHA2_3REG-SHA1P#0
    0x3 => return classify_impl_b4_b_3(inst), // SHA2_3REG-SHA1M#0
    0x4 => return classify_impl_b4_b_4(inst), // SHA2_3REG-SHA1SU0#0
    0x5 => return classify_impl_b4_b_5(inst), // SHA2_3REG-SHA256H#0
    0x6 => return classify_impl_b4_b_6(inst), // SHA2_3REG-SHA256H2#0
    0x7 => return classify_impl_b4_b_7(inst), // SHA2_3REG-SHA256SU1#0
    _ => idx
  };
  return idx;
}


// DUP_SCALAR-DUP_SCALAR#10,SHA2_3REG-SHA1C#0
pub const fn classify_impl_b4_c_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6d00,
    0x1 => 0x2800,
    _ => 0,
  };
  return idx;
}


// SHA2_3REG-SHA1P#0
pub const fn classify_impl_b4_c_2(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d01;
}


// SHA2_3REG-SHA1M#0
pub const fn classify_impl_b4_c_3(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d02;
}


// SHA2_3REG-SHA1SU0#0
pub const fn classify_impl_b4_c_4(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d03;
}


// SHA2_3REG-SHA256H#0
pub const fn classify_impl_b4_c_5(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d04;
}


// SHA2_3REG-SHA256H2#0
pub const fn classify_impl_b4_c_6(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d05;
}


// SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_c_7(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d06;
}

// DUP_SCALAR-DUP_SCALAR#10,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_c(inst: u32) -> u32 {
  let idx = match (inst >> 12) & 0x7 {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_b4_c_1(inst), // DUP_SCALAR-DUP_SCALAR#10,SHA2_3REG-SHA1C#0
    0x2 => return classify_impl_b4_c_2(inst), // SHA2_3REG-SHA1P#0
    0x3 => return classify_impl_b4_c_3(inst), // SHA2_3REG-SHA1M#0
    0x4 => return classify_impl_b4_c_4(inst), // SHA2_3REG-SHA1SU0#0
    0x5 => return classify_impl_b4_c_5(inst), // SHA2_3REG-SHA256H#0
    0x6 => return classify_impl_b4_c_6(inst), // SHA2_3REG-SHA256H2#0
    0x7 => return classify_impl_b4_c_7(inst), // SHA2_3REG-SHA256SU1#0
    _ => idx
  };
  return idx;
}


// DUP_SCALAR-DUP_SCALAR#11,SHA2_3REG-SHA1C#0
pub const fn classify_impl_b4_d_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6d00,
    0x1 => 0x2800,
    _ => 0,
  };
  return idx;
}


// SHA2_3REG-SHA1P#0
pub const fn classify_impl_b4_d_2(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d01;
}


// SHA2_3REG-SHA1M#0
pub const fn classify_impl_b4_d_3(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d02;
}


// SHA2_3REG-SHA1SU0#0
pub const fn classify_impl_b4_d_4(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d03;
}


// SHA2_3REG-SHA256H#0
pub const fn classify_impl_b4_d_5(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d04;
}


// SHA2_3REG-SHA256H2#0
pub const fn classify_impl_b4_d_6(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d05;
}


// SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_d_7(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d06;
}

// DUP_SCALAR-DUP_SCALAR#11,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_d(inst: u32) -> u32 {
  let idx = match (inst >> 12) & 0x7 {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_b4_d_1(inst), // DUP_SCALAR-DUP_SCALAR#11,SHA2_3REG-SHA1C#0
    0x2 => return classify_impl_b4_d_2(inst), // SHA2_3REG-SHA1P#0
    0x3 => return classify_impl_b4_d_3(inst), // SHA2_3REG-SHA1M#0
    0x4 => return classify_impl_b4_d_4(inst), // SHA2_3REG-SHA1SU0#0
    0x5 => return classify_impl_b4_d_5(inst), // SHA2_3REG-SHA256H#0
    0x6 => return classify_impl_b4_d_6(inst), // SHA2_3REG-SHA256H2#0
    0x7 => return classify_impl_b4_d_7(inst), // SHA2_3REG-SHA256SU1#0
    _ => idx
  };
  return idx;
}


// DUP_SCALAR-DUP_SCALAR#12,SHA2_3REG-SHA1C#0
pub const fn classify_impl_b4_e_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6d00,
    0x1 => 0x2800,
    _ => 0,
  };
  return idx;
}


// SHA2_3REG-SHA1P#0
pub const fn classify_impl_b4_e_2(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d01;
}


// SHA2_3REG-SHA1M#0
pub const fn classify_impl_b4_e_3(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d02;
}


// SHA2_3REG-SHA1SU0#0
pub const fn classify_impl_b4_e_4(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d03;
}


// SHA2_3REG-SHA256H#0
pub const fn classify_impl_b4_e_5(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d04;
}


// SHA2_3REG-SHA256H2#0
pub const fn classify_impl_b4_e_6(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d05;
}


// SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_e_7(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d06;
}

// DUP_SCALAR-DUP_SCALAR#12,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_e(inst: u32) -> u32 {
  let idx = match (inst >> 12) & 0x7 {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_b4_e_1(inst), // DUP_SCALAR-DUP_SCALAR#12,SHA2_3REG-SHA1C#0
    0x2 => return classify_impl_b4_e_2(inst), // SHA2_3REG-SHA1P#0
    0x3 => return classify_impl_b4_e_3(inst), // SHA2_3REG-SHA1M#0
    0x4 => return classify_impl_b4_e_4(inst), // SHA2_3REG-SHA1SU0#0
    0x5 => return classify_impl_b4_e_5(inst), // SHA2_3REG-SHA256H#0
    0x6 => return classify_impl_b4_e_6(inst), // SHA2_3REG-SHA256H2#0
    0x7 => return classify_impl_b4_e_7(inst), // SHA2_3REG-SHA256SU1#0
    _ => idx
  };
  return idx;
}


// DUP_SCALAR-DUP_SCALAR#13,SHA2_3REG-SHA1C#0
pub const fn classify_impl_b4_f_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6d00,
    0x1 => 0x2800,
    _ => 0,
  };
  return idx;
}


// SHA2_3REG-SHA1P#0
pub const fn classify_impl_b4_f_2(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d01;
}


// SHA2_3REG-SHA1M#0
pub const fn classify_impl_b4_f_3(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d02;
}


// SHA2_3REG-SHA1SU0#0
pub const fn classify_impl_b4_f_4(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d03;
}


// SHA2_3REG-SHA256H#0
pub const fn classify_impl_b4_f_5(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d04;
}


// SHA2_3REG-SHA256H2#0
pub const fn classify_impl_b4_f_6(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d05;
}


// SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_f_7(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d06;
}

// DUP_SCALAR-DUP_SCALAR#13,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_f(inst: u32) -> u32 {
  let idx = match (inst >> 12) & 0x7 {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_b4_f_1(inst), // DUP_SCALAR-DUP_SCALAR#13,SHA2_3REG-SHA1C#0
    0x2 => return classify_impl_b4_f_2(inst), // SHA2_3REG-SHA1P#0
    0x3 => return classify_impl_b4_f_3(inst), // SHA2_3REG-SHA1M#0
    0x4 => return classify_impl_b4_f_4(inst), // SHA2_3REG-SHA1SU0#0
    0x5 => return classify_impl_b4_f_5(inst), // SHA2_3REG-SHA256H#0
    0x6 => return classify_impl_b4_f_6(inst), // SHA2_3REG-SHA256H2#0
    0x7 => return classify_impl_b4_f_7(inst), // SHA2_3REG-SHA256SU1#0
    _ => idx
  };
  return idx;
}


// DUP_SCALAR-DUP_SCALAR#14,SHA2_3REG-SHA1C#0
pub const fn classify_impl_b4_10_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6d00,
    0x1 => 0x2800,
    _ => 0,
  };
  return idx;
}


// SHA2_3REG-SHA1P#0
pub const fn classify_impl_b4_10_2(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d01;
}


// SHA2_3REG-SHA1M#0
pub const fn classify_impl_b4_10_3(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d02;
}


// SHA2_3REG-SHA1SU0#0
pub const fn classify_impl_b4_10_4(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d03;
}


// SHA2_3REG-SHA256H#0
pub const fn classify_impl_b4_10_5(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d04;
}


// SHA2_3REG-SHA256H2#0
pub const fn classify_impl_b4_10_6(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d05;
}


// SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_10_7(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x6d06;
}

// DUP_SCALAR-DUP_SCALAR#14,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
pub const fn classify_impl_b4_10(inst: u32) -> u32 {
  let idx = match (inst >> 12) & 0x7 {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_b4_10_1(inst), // DUP_SCALAR-DUP_SCALAR#14,SHA2_3REG-SHA1C#0
    0x2 => return classify_impl_b4_10_2(inst), // SHA2_3REG-SHA1P#0
    0x3 => return classify_impl_b4_10_3(inst), // SHA2_3REG-SHA1M#0
    0x4 => return classify_impl_b4_10_4(inst), // SHA2_3REG-SHA1SU0#0
    0x5 => return classify_impl_b4_10_5(inst), // SHA2_3REG-SHA256H#0
    0x6 => return classify_impl_b4_10_6(inst), // SHA2_3REG-SHA256H2#0
    0x7 => return classify_impl_b4_10_7(inst), // SHA2_3REG-SHA256SU1#0
    _ => idx
  };
  return idx;
}


pub const fn classify_impl_b4(inst: u32) -> u32 {
  if (inst&0x8800) != 0x0 { return 0; }
  let idx = match (inst >> 16) & 0xf {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x8,
    0x8 => 0x9,
    0x9 => 0xa,
    0xa => 0xb,
    0xb => 0xc,
    0xc => 0xd,
    0xd => 0xe,
    0xe => 0xf,
    0xf => 0x10,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_b4_1(inst), // SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
    0x2 => return classify_impl_b4_2(inst), // DUP_SCALAR-DUP_SCALAR#0,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
    0x3 => return classify_impl_b4_3(inst), // DUP_SCALAR-DUP_SCALAR#1,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
    0x4 => return classify_impl_b4_4(inst), // DUP_SCALAR-DUP_SCALAR#2,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
    0x5 => return classify_impl_b4_5(inst), // DUP_SCALAR-DUP_SCALAR#3,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
    0x6 => return classify_impl_b4_6(inst), // DUP_SCALAR-DUP_SCALAR#4,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
    0x7 => return classify_impl_b4_7(inst), // DUP_SCALAR-DUP_SCALAR#5,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
    0x8 => return classify_impl_b4_8(inst), // DUP_SCALAR-DUP_SCALAR#6,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
    0x9 => return classify_impl_b4_9(inst), // DUP_SCALAR-DUP_SCALAR#7,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
    0xa => return classify_impl_b4_a(inst), // DUP_SCALAR-DUP_SCALAR#8,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
    0xb => return classify_impl_b4_b(inst), // DUP_SCALAR-DUP_SCALAR#9,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
    0xc => return classify_impl_b4_c(inst), // DUP_SCALAR-DUP_SCALAR#10,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
    0xd => return classify_impl_b4_d(inst), // DUP_SCALAR-DUP_SCALAR#11,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
    0xe => return classify_impl_b4_e(inst), // DUP_SCALAR-DUP_SCALAR#12,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
    0xf => return classify_impl_b4_f(inst), // DUP_SCALAR-DUP_SCALAR#13,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
    0x10 => return classify_impl_b4_10(inst), // DUP_SCALAR-DUP_SCALAR#14,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
    _ => idx
  };
  return idx;
}


// ARITH1_SCALAR-SUQADD_SCALAR#0
pub const fn classify_impl_b5_1_1(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x3000;
}


// ARITH1_SCALAR-SQABS_SCALAR#0
pub const fn classify_impl_b5_1_2(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x3001;
}


// XTN_SCALAR-SQXTN_SCALAR#0
pub const fn classify_impl_b5_1_3(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x3300;
}


// FCVT_SCALAR-FCVTNS_SCALAR#0
pub const fn classify_impl_b5_1_4(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x4e80;
}


// FCVT_SCALAR-FCVTMS_SCALAR#0
pub const fn classify_impl_b5_1_5(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x4e81;
}


// FCVT_SCALAR-FCVTAS_SCALAR#0
pub const fn classify_impl_b5_1_6(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x4e82;
}


// FCVT_FROMINT_SCALAR-SCVTF_VEC_SCALAR#0
pub const fn classify_impl_b5_1_7(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x5000;
}

// QADDSUB_SCALAR-SQADD_SCALAR#0,QADDSUB_SCALAR-SQSUB_SCALAR#0,ARITH1_SCALAR-SUQADD_SCALAR#0,ARITH1_SCALAR-SQABS_SCALAR#0,XTN_SCALAR-SQXTN_SCALAR#0,SHL_REG_SCALAR-SQSHL_SCALAR#0,SHL_REG_SCALAR-SQRSHL_SCALAR#0,FCMP_REG_SCALAR-FCMEQ#0,FRECP_STEP_SCALAR-FRECPS#0,FMULX_SCALAR-FMULX#0,FCVT_SCALAR-FCVTNS_SCALAR#0,FCVT_SCALAR-FCVTMS_SCALAR#0,FCVT_SCALAR-FCVTAS_SCALAR#0,FCVT_FROMINT_SCALAR-SCVTF_VEC_SCALAR#0
pub const fn classify_impl_b5_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x2c00,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x2c01,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x1,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x3400,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x3401,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x2,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x3f00,
    0x38 => 0x0,
    0x39 => 0x3980,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x3e00,
    0x40 => 0x0,
    0x41 => 0x0,
    0x42 => 0x0,
    0x43 => 0x2c00,
    0x44 => 0x0,
    0x45 => 0x0,
    0x46 => 0x0,
    0x47 => 0x0,
    0x48 => 0x0,
    0x49 => 0x0,
    0x4a => 0x0,
    0x4b => 0x2c01,
    0x4c => 0x0,
    0x4d => 0x0,
    0x4e => 0x0,
    0x4f => 0x0,
    0x50 => 0x0,
    0x51 => 0x0,
    0x52 => 0x3,
    0x53 => 0x3400,
    0x54 => 0x0,
    0x55 => 0x0,
    0x56 => 0x0,
    0x57 => 0x3401,
    0x58 => 0x0,
    0x59 => 0x0,
    0x5a => 0x0,
    0x5b => 0x0,
    0x5c => 0x0,
    0x5d => 0x0,
    0x5e => 0x0,
    0x5f => 0x0,
    0x60 => 0x0,
    0x61 => 0x0,
    0x62 => 0x0,
    0x63 => 0x0,
    0x64 => 0x0,
    0x65 => 0x0,
    0x66 => 0x0,
    0x67 => 0x0,
    0x68 => 0x0,
    0x69 => 0x0,
    0x6a => 0x4,
    0x6b => 0x0,
    0x6c => 0x0,
    0x6d => 0x0,
    0x6e => 0x5,
    0x6f => 0x0,
    0x70 => 0x0,
    0x71 => 0x0,
    0x72 => 0x6,
    0x73 => 0x0,
    0x74 => 0x0,
    0x75 => 0x0,
    0x76 => 0x7,
    0x77 => 0x3f00,
    0x78 => 0x0,
    0x79 => 0x3980,
    0x7a => 0x0,
    0x7b => 0x0,
    0x7c => 0x0,
    0x7d => 0x0,
    0x7e => 0x0,
    0x7f => 0x3e00,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_b5_1_1(inst), // ARITH1_SCALAR-SUQADD_SCALAR#0
    0x2 => return classify_impl_b5_1_2(inst), // ARITH1_SCALAR-SQABS_SCALAR#0
    0x3 => return classify_impl_b5_1_3(inst), // XTN_SCALAR-SQXTN_SCALAR#0
    0x4 => return classify_impl_b5_1_4(inst), // FCVT_SCALAR-FCVTNS_SCALAR#0
    0x5 => return classify_impl_b5_1_5(inst), // FCVT_SCALAR-FCVTMS_SCALAR#0
    0x6 => return classify_impl_b5_1_6(inst), // FCVT_SCALAR-FCVTAS_SCALAR#0
    0x7 => return classify_impl_b5_1_7(inst), // FCVT_FROMINT_SCALAR-SCVTF_VEC_SCALAR#0
    _ => idx
  };
  return idx;
}


// SHA2_2REG-SHA1H#0
pub const fn classify_impl_b5_2_1(inst: u32) -> u32 {
  if (inst&0x70000) != 0x0 { return 0; }
  return 0x6d80;
}


// SHA2_2REG-SHA1SU1#0
pub const fn classify_impl_b5_2_2(inst: u32) -> u32 {
  if (inst&0x70000) != 0x0 { return 0; }
  return 0x6d81;
}


// SHA2_2REG-SHA256SU0#0
pub const fn classify_impl_b5_2_3(inst: u32) -> u32 {
  if (inst&0x70000) != 0x0 { return 0; }
  return 0x6d82;
}

// QADDSUB_SCALAR-SQADD_SCALAR#0,QADDSUB_SCALAR-SQSUB_SCALAR#0,SHL_REG_SCALAR-SQSHL_SCALAR#0,SHL_REG_SCALAR-SQRSHL_SCALAR#0,FCMP_REG_SCALAR-FCMEQ#0,FRECP_STEP_SCALAR-FRECPS#0,FMULX_SCALAR-FMULX#0,SHA2_2REG-SHA1H#0,SHA2_2REG-SHA1SU1#0,SHA2_2REG-SHA256SU0#0
pub const fn classify_impl_b5_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x1,
    0x3 => 0x2c00,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x2,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x3,
    0xb => 0x2c01,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x3400,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x3401,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x3f00,
    0x38 => 0x0,
    0x39 => 0x3980,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x3e00,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_b5_2_1(inst), // SHA2_2REG-SHA1H#0
    0x2 => return classify_impl_b5_2_2(inst), // SHA2_2REG-SHA1SU1#0
    0x3 => return classify_impl_b5_2_3(inst), // SHA2_2REG-SHA256SU0#0
    _ => idx
  };
  return idx;
}

// QADDSUB_SCALAR-SQADD_SCALAR#0,QADDSUB_SCALAR-SQSUB_SCALAR#0,ARITH1_SCALAR-SUQADD_SCALAR#0,ARITH1_SCALAR-SQABS_SCALAR#0,XTN_SCALAR-SQXTN_SCALAR#0,SHL_REG_SCALAR-SQSHL_SCALAR#0,SHL_REG_SCALAR-SQRSHL_SCALAR#0,FCMP_REG_SCALAR-FCMEQ#0,FRECP_STEP_SCALAR-FRECPS#0,FMULX_SCALAR-FMULX#0,FCVT_SCALAR-FCVTNS_SCALAR#0,FCVT_SCALAR-FCVTMS_SCALAR#0,FCVT_SCALAR-FCVTAS_SCALAR#0,FCVT_FROMINT_SCALAR-SCVTF_VEC_SCALAR#0,SHA2_2REG-SHA1H#0,SHA2_2REG-SHA1SU1#0,SHA2_2REG-SHA256SU0#0
pub const fn classify_impl_b5(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_b5_1(inst), // QADDSUB_SCALAR-SQADD_SCALAR#0,QADDSUB_SCALAR-SQSUB_SCALAR#0,ARITH1_SCALAR-SUQADD_SCALAR#0,ARITH1_SCALAR-SQABS_SCALAR#0,XTN_SCALAR-SQXTN_SCALAR#0,SHL_REG_SCALAR-SQSHL_SCALAR#0,SHL_REG_SCALAR-SQRSHL_SCALAR#0,FCMP_REG_SCALAR-FCMEQ#0,FRECP_STEP_SCALAR-FRECPS#0,FMULX_SCALAR-FMULX#0,FCVT_SCALAR-FCVTNS_SCALAR#0,FCVT_SCALAR-FCVTMS_SCALAR#0,FCVT_SCALAR-FCVTAS_SCALAR#0,FCVT_FROMINT_SCALAR-SCVTF_VEC_SCALAR#0
    0x2 => return classify_impl_b5_2(inst), // QADDSUB_SCALAR-SQADD_SCALAR#0,QADDSUB_SCALAR-SQSUB_SCALAR#0,SHL_REG_SCALAR-SQSHL_SCALAR#0,SHL_REG_SCALAR-SQRSHL_SCALAR#0,FCMP_REG_SCALAR-FCMEQ#0,FRECP_STEP_SCALAR-FRECPS#0,FMULX_SCALAR-FMULX#0,SHA2_2REG-SHA1H#0,SHA2_2REG-SHA1SU1#0,SHA2_2REG-SHA256SU0#0
    _ => idx
  };
  return idx;
}


// FP_HORZ_SCALAR-FMAXNMP_SCALAR_FP16#0
pub const fn classify_impl_b6_1(inst: u32) -> u32 {
  if (inst&0xf0000) != 0x0 { return 0; }
  return 0x5400;
}


// FP_HORZ_SCALAR-FADDP_SCALAR_FP16#0
pub const fn classify_impl_b6_2(inst: u32) -> u32 {
  if (inst&0xf0000) != 0x0 { return 0; }
  return 0x5401;
}


// FP_HORZ_SCALAR-FMAXP_SCALAR_FP16#0
pub const fn classify_impl_b6_3(inst: u32) -> u32 {
  if (inst&0xf0000) != 0x0 { return 0; }
  return 0x5402;
}

// QADDSUB_SCALAR-SQADD_SCALAR#0,QADDSUB_SCALAR-SQSUB_SCALAR#0,SHL_REG_SCALAR-SQSHL_SCALAR#0,SHL_REG_SCALAR-SQRSHL_SCALAR#0,FCMP_REG_SCALAR-FCMEQ#0,FRECP_STEP_SCALAR-FRECPS#0,FMULX_SCALAR-FMULX#0,FP_HORZ_SCALAR-FMAXNMP_SCALAR_FP16#0,FP_HORZ_SCALAR-FADDP_SCALAR_FP16#0,FP_HORZ_SCALAR-FMAXP_SCALAR_FP16#0
pub const fn classify_impl_b6(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x2c00,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x2c01,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x3400,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x3401,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x1,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x2,
    0x37 => 0x3f00,
    0x38 => 0x0,
    0x39 => 0x3980,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x3,
    0x3f => 0x3e00,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_b6_1(inst), // FP_HORZ_SCALAR-FMAXNMP_SCALAR_FP16#0
    0x2 => return classify_impl_b6_2(inst), // FP_HORZ_SCALAR-FADDP_SCALAR_FP16#0
    0x3 => return classify_impl_b6_3(inst), // FP_HORZ_SCALAR-FMAXP_SCALAR_FP16#0
    _ => idx
  };
  return idx;
}


// FP16_3REG_SCALAR-FMULX_SCALAR_FP16#0,FP16_3REG_SCALAR-FCMEQ_SCALAR_FP16#0,FP16_3REG_SCALAR-FRECPS_SCALAR_FP16#0
pub const fn classify_impl_b7(inst: u32) -> u32 {
  if (inst&0xc400) != 0x400 { return 0; }
  let idx = match (inst >> 11) & 0x7 {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x4100,
    0x4 => 0x4101,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x4102,
    _ => 0,
  };
  return idx;
}


// ARITH1_SCALAR-SUQADD_SCALAR#1
pub const fn classify_impl_b8_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3000;
}


// ARITH1_SCALAR-SQABS_SCALAR#1
pub const fn classify_impl_b8_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3001;
}


// XTN_SCALAR-SQXTN_SCALAR#1
pub const fn classify_impl_b8_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3300;
}


// FCVT_SCALAR-FCVTNS_SCALAR#0
pub const fn classify_impl_b8_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4e80;
}


// FCVT_SCALAR-FCVTMS_SCALAR#0
pub const fn classify_impl_b8_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4e81;
}


// FCVT_SCALAR-FCVTAS_SCALAR#0
pub const fn classify_impl_b8_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4e82;
}


// FCVT_FROMINT_SCALAR-SCVTF_VEC_SCALAR#0
pub const fn classify_impl_b8_7(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5000;
}

// QADDSUB_SCALAR-SQADD_SCALAR#0,QADDSUB_SCALAR-SQSUB_SCALAR#0,ARITH1_SCALAR-SUQADD_SCALAR#1,ARITH1_SCALAR-SQABS_SCALAR#1,XTN_SCALAR-SQXTN_SCALAR#1,SHL_REG_SCALAR-SQSHL_SCALAR#1,SHL_REG_SCALAR-SQRSHL_SCALAR#1,SQDMULH_SCALAR-SQDMULH_SCALAR#0,FCMP_REG_SCALAR-FCMEQ#0,FRECP_STEP_SCALAR-FRECPS#0,FMULX_SCALAR-FMULX#0,SQDMULL_SCALAR-SQDMLAL_SCALAR#0,SQDMULL_SCALAR-SQDMLSL_SCALAR#0,SQDMULL_SCALAR-SQDMULL_SCALAR#0,FCVT_SCALAR-FCVTNS_SCALAR#0,FCVT_SCALAR-FCVTMS_SCALAR#0,FCVT_SCALAR-FCVTAS_SCALAR#0,FCVT_FROMINT_SCALAR-SCVTF_VEC_SCALAR#0
pub const fn classify_impl_b8(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x2c00,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x2c01,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x1,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x3400,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x3401,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x2,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x4600,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x4601,
    0x2d => 0x3800,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x4602,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x3f00,
    0x38 => 0x0,
    0x39 => 0x3980,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x3e00,
    0x40 => 0x0,
    0x41 => 0x0,
    0x42 => 0x0,
    0x43 => 0x2c00,
    0x44 => 0x0,
    0x45 => 0x0,
    0x46 => 0x0,
    0x47 => 0x0,
    0x48 => 0x0,
    0x49 => 0x0,
    0x4a => 0x0,
    0x4b => 0x2c01,
    0x4c => 0x0,
    0x4d => 0x0,
    0x4e => 0x0,
    0x4f => 0x0,
    0x50 => 0x0,
    0x51 => 0x0,
    0x52 => 0x3,
    0x53 => 0x3400,
    0x54 => 0x0,
    0x55 => 0x0,
    0x56 => 0x0,
    0x57 => 0x3401,
    0x58 => 0x0,
    0x59 => 0x0,
    0x5a => 0x0,
    0x5b => 0x0,
    0x5c => 0x0,
    0x5d => 0x0,
    0x5e => 0x0,
    0x5f => 0x0,
    0x60 => 0x0,
    0x61 => 0x0,
    0x62 => 0x0,
    0x63 => 0x0,
    0x64 => 0x4600,
    0x65 => 0x0,
    0x66 => 0x0,
    0x67 => 0x0,
    0x68 => 0x0,
    0x69 => 0x0,
    0x6a => 0x4,
    0x6b => 0x0,
    0x6c => 0x4601,
    0x6d => 0x3800,
    0x6e => 0x5,
    0x6f => 0x0,
    0x70 => 0x0,
    0x71 => 0x0,
    0x72 => 0x6,
    0x73 => 0x0,
    0x74 => 0x4602,
    0x75 => 0x0,
    0x76 => 0x7,
    0x77 => 0x3f00,
    0x78 => 0x0,
    0x79 => 0x3980,
    0x7a => 0x0,
    0x7b => 0x0,
    0x7c => 0x0,
    0x7d => 0x0,
    0x7e => 0x0,
    0x7f => 0x3e00,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_b8_1(inst), // ARITH1_SCALAR-SUQADD_SCALAR#1
    0x2 => return classify_impl_b8_2(inst), // ARITH1_SCALAR-SQABS_SCALAR#1
    0x3 => return classify_impl_b8_3(inst), // XTN_SCALAR-SQXTN_SCALAR#1
    0x4 => return classify_impl_b8_4(inst), // FCVT_SCALAR-FCVTNS_SCALAR#0
    0x5 => return classify_impl_b8_5(inst), // FCVT_SCALAR-FCVTMS_SCALAR#0
    0x6 => return classify_impl_b8_6(inst), // FCVT_SCALAR-FCVTAS_SCALAR#0
    0x7 => return classify_impl_b8_7(inst), // FCVT_FROMINT_SCALAR-SCVTF_VEC_SCALAR#0
    _ => idx
  };
  return idx;
}


// FP16_2REG_SCALAR-FCVTNS_SCALAR_FP16#0
pub const fn classify_impl_b9_1(inst: u32) -> u32 {
  if (inst&0xf0000) != 0x90000 { return 0; }
  return 0x4200;
}


// FP16_2REG_SCALAR-FCVTMS_SCALAR_FP16#0
pub const fn classify_impl_b9_2(inst: u32) -> u32 {
  if (inst&0xf0000) != 0x90000 { return 0; }
  return 0x4201;
}


// FP16_2REG_SCALAR-FCVTAS_SCALAR_FP16#0
pub const fn classify_impl_b9_3(inst: u32) -> u32 {
  if (inst&0xf0000) != 0x90000 { return 0; }
  return 0x4202;
}


// FP16_2REG_SCALAR-SCVTF_SCALAR_FP16#0
pub const fn classify_impl_b9_4(inst: u32) -> u32 {
  if (inst&0xf0000) != 0x90000 { return 0; }
  return 0x4203;
}

// QADDSUB_SCALAR-SQADD_SCALAR#0,QADDSUB_SCALAR-SQSUB_SCALAR#0,SHL_REG_SCALAR-SQSHL_SCALAR#1,SHL_REG_SCALAR-SQRSHL_SCALAR#1,SQDMULH_SCALAR-SQDMULH_SCALAR#0,FCMP_REG_SCALAR-FCMEQ#0,FRECP_STEP_SCALAR-FRECPS#0,FMULX_SCALAR-FMULX#0,FP16_2REG_SCALAR-FCVTNS_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTMS_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTAS_SCALAR_FP16#0,FP16_2REG_SCALAR-SCVTF_SCALAR_FP16#0,SQDMULL_SCALAR-SQDMLAL_SCALAR#0,SQDMULL_SCALAR-SQDMLSL_SCALAR#0,SQDMULL_SCALAR-SQDMULL_SCALAR#0
pub const fn classify_impl_b9(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x2c00,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x2c01,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x3400,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x3401,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x4600,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x1,
    0x2b => 0x0,
    0x2c => 0x4601,
    0x2d => 0x3800,
    0x2e => 0x2,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x3,
    0x33 => 0x0,
    0x34 => 0x4602,
    0x35 => 0x0,
    0x36 => 0x4,
    0x37 => 0x3f00,
    0x38 => 0x0,
    0x39 => 0x3980,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x3e00,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_b9_1(inst), // FP16_2REG_SCALAR-FCVTNS_SCALAR_FP16#0
    0x2 => return classify_impl_b9_2(inst), // FP16_2REG_SCALAR-FCVTMS_SCALAR_FP16#0
    0x3 => return classify_impl_b9_3(inst), // FP16_2REG_SCALAR-FCVTAS_SCALAR_FP16#0
    0x4 => return classify_impl_b9_4(inst), // FP16_2REG_SCALAR-SCVTF_SCALAR_FP16#0
    _ => idx
  };
  return idx;
}


// ARITH1_SCALAR-SUQADD_SCALAR#2
pub const fn classify_impl_ba_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3000;
}


// ARITH1_SCALAR-SQABS_SCALAR#2
pub const fn classify_impl_ba_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3001;
}


// FCMP_ZERO_SCALAR-FCMGT_ZERO#0
pub const fn classify_impl_ba_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3a00;
}


// FCMP_ZERO_SCALAR-FCMEQ_ZERO#0
pub const fn classify_impl_ba_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3a01;
}


// FCMP_ZERO_SCALAR-FCMLT_ZERO#0
pub const fn classify_impl_ba_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3a02;
}


// XTN_SCALAR-SQXTN_SCALAR#2
pub const fn classify_impl_ba_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3300;
}


// FCVT_SCALAR-FCVTPS_SCALAR#0
pub const fn classify_impl_ba_7(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4e83;
}


// FCVT_SCALAR-FCVTZS_SCALAR#0
pub const fn classify_impl_ba_8(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4e84;
}


// FRECP_SCALAR-FRECPE_SCALAR#0
pub const fn classify_impl_ba_9(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3d00;
}


// FRECP_SCALAR-FRECPX_SCALAR#0
pub const fn classify_impl_ba_a(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3d01;
}

// QADDSUB_SCALAR-SQADD_SCALAR#0,QADDSUB_SCALAR-SQSUB_SCALAR#0,ARITH1_SCALAR-SUQADD_SCALAR#2,ARITH1_SCALAR-SQABS_SCALAR#2,XTN_SCALAR-SQXTN_SCALAR#2,SHL_REG_SCALAR-SQSHL_SCALAR#2,SHL_REG_SCALAR-SQRSHL_SCALAR#2,SQDMULH_SCALAR-SQDMULH_SCALAR#1,FCMP_ZERO_SCALAR-FCMGT_ZERO#0,FCMP_ZERO_SCALAR-FCMEQ_ZERO#0,FCMP_ZERO_SCALAR-FCMLT_ZERO#0,FRECP_SCALAR-FRECPE_SCALAR#0,FRECP_SCALAR-FRECPX_SCALAR#0,FRECP_STEP_SCALAR-FRSQRTS#0,SQDMULL_SCALAR-SQDMLAL_SCALAR#1,SQDMULL_SCALAR-SQDMLSL_SCALAR#1,SQDMULL_SCALAR-SQDMULL_SCALAR#1,FCVT_SCALAR-FCVTPS_SCALAR#0,FCVT_SCALAR-FCVTZS_SCALAR#0
pub const fn classify_impl_ba(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x2c00,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x2c01,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x1,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x3400,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x3401,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x2,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x4600,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x4601,
    0x2d => 0x3800,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x3,
    0x33 => 0x0,
    0x34 => 0x4602,
    0x35 => 0x0,
    0x36 => 0x4,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x5,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x3e01,
    0x40 => 0x0,
    0x41 => 0x0,
    0x42 => 0x0,
    0x43 => 0x2c00,
    0x44 => 0x0,
    0x45 => 0x0,
    0x46 => 0x0,
    0x47 => 0x0,
    0x48 => 0x0,
    0x49 => 0x0,
    0x4a => 0x0,
    0x4b => 0x2c01,
    0x4c => 0x0,
    0x4d => 0x0,
    0x4e => 0x0,
    0x4f => 0x0,
    0x50 => 0x0,
    0x51 => 0x0,
    0x52 => 0x6,
    0x53 => 0x3400,
    0x54 => 0x0,
    0x55 => 0x0,
    0x56 => 0x0,
    0x57 => 0x3401,
    0x58 => 0x0,
    0x59 => 0x0,
    0x5a => 0x0,
    0x5b => 0x0,
    0x5c => 0x0,
    0x5d => 0x0,
    0x5e => 0x0,
    0x5f => 0x0,
    0x60 => 0x0,
    0x61 => 0x0,
    0x62 => 0x0,
    0x63 => 0x0,
    0x64 => 0x4600,
    0x65 => 0x0,
    0x66 => 0x0,
    0x67 => 0x0,
    0x68 => 0x0,
    0x69 => 0x0,
    0x6a => 0x7,
    0x6b => 0x0,
    0x6c => 0x4601,
    0x6d => 0x3800,
    0x6e => 0x8,
    0x6f => 0x0,
    0x70 => 0x0,
    0x71 => 0x0,
    0x72 => 0x0,
    0x73 => 0x0,
    0x74 => 0x4602,
    0x75 => 0x0,
    0x76 => 0x9,
    0x77 => 0x0,
    0x78 => 0x0,
    0x79 => 0x0,
    0x7a => 0x0,
    0x7b => 0x0,
    0x7c => 0x0,
    0x7d => 0x0,
    0x7e => 0xa,
    0x7f => 0x3e01,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_ba_1(inst), // ARITH1_SCALAR-SUQADD_SCALAR#2
    0x2 => return classify_impl_ba_2(inst), // ARITH1_SCALAR-SQABS_SCALAR#2
    0x3 => return classify_impl_ba_3(inst), // FCMP_ZERO_SCALAR-FCMGT_ZERO#0
    0x4 => return classify_impl_ba_4(inst), // FCMP_ZERO_SCALAR-FCMEQ_ZERO#0
    0x5 => return classify_impl_ba_5(inst), // FCMP_ZERO_SCALAR-FCMLT_ZERO#0
    0x6 => return classify_impl_ba_6(inst), // XTN_SCALAR-SQXTN_SCALAR#2
    0x7 => return classify_impl_ba_7(inst), // FCVT_SCALAR-FCVTPS_SCALAR#0
    0x8 => return classify_impl_ba_8(inst), // FCVT_SCALAR-FCVTZS_SCALAR#0
    0x9 => return classify_impl_ba_9(inst), // FRECP_SCALAR-FRECPE_SCALAR#0
    0xa => return classify_impl_ba_a(inst), // FRECP_SCALAR-FRECPX_SCALAR#0
    _ => idx
  };
  return idx;
}


// FP_HORZ_SCALAR-FMINNMP_SCALAR_FP16#0
pub const fn classify_impl_bb_1(inst: u32) -> u32 {
  if (inst&0xf0000) != 0x0 { return 0; }
  return 0x5403;
}


// FP_HORZ_SCALAR-FMINP_SCALAR_FP16#0
pub const fn classify_impl_bb_2(inst: u32) -> u32 {
  if (inst&0xf0000) != 0x0 { return 0; }
  return 0x5404;
}

// QADDSUB_SCALAR-SQADD_SCALAR#0,QADDSUB_SCALAR-SQSUB_SCALAR#0,SHL_REG_SCALAR-SQSHL_SCALAR#2,SHL_REG_SCALAR-SQRSHL_SCALAR#2,SQDMULH_SCALAR-SQDMULH_SCALAR#1,FRECP_STEP_SCALAR-FRSQRTS#0,SQDMULL_SCALAR-SQDMLAL_SCALAR#1,SQDMULL_SCALAR-SQDMLSL_SCALAR#1,SQDMULL_SCALAR-SQDMULL_SCALAR#1,FP_HORZ_SCALAR-FMINNMP_SCALAR_FP16#0,FP_HORZ_SCALAR-FMINP_SCALAR_FP16#0
pub const fn classify_impl_bb(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x2c00,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x2c01,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x3400,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x3401,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x4600,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x4601,
    0x2d => 0x3800,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x1,
    0x33 => 0x0,
    0x34 => 0x4602,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x2,
    0x3f => 0x3e01,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_bb_1(inst), // FP_HORZ_SCALAR-FMINNMP_SCALAR_FP16#0
    0x2 => return classify_impl_bb_2(inst), // FP_HORZ_SCALAR-FMINP_SCALAR_FP16#0
    _ => idx
  };
  return idx;
}


// FP16_3REG_SCALAR-FRSQRTS_SCALAR_FP16#0
pub const fn classify_impl_bc(inst: u32) -> u32 {
  if (inst&0xfc00) != 0x3c00 { return 0; }
  return 0x4103;
}


// ARITH1_SCALAR-SUQADD_SCALAR#3
pub const fn classify_impl_bd_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3000;
}


// ARITH1_SCALAR-SQABS_SCALAR#3
pub const fn classify_impl_bd_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3001;
}


// CMZERO_SCALAR-CMGT_ZERO#0
pub const fn classify_impl_bd_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f00;
}


// CMZERO_SCALAR-CMEQ_ZERO#0
pub const fn classify_impl_bd_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f01;
}


// CMZERO_SCALAR-CMLT_ZERO#0
pub const fn classify_impl_bd_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f02;
}


// ARITH1_SCALAR-ABS_SCALAR#0
pub const fn classify_impl_bd_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3002;
}


// FCMP_ZERO_SCALAR-FCMGT_ZERO#0
pub const fn classify_impl_bd_7(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3a00;
}


// FCMP_ZERO_SCALAR-FCMEQ_ZERO#0
pub const fn classify_impl_bd_8(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3a01;
}


// FCMP_ZERO_SCALAR-FCMLT_ZERO#0
pub const fn classify_impl_bd_9(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3a02;
}


// FCVT_SCALAR-FCVTPS_SCALAR#0
pub const fn classify_impl_bd_a(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4e83;
}


// FCVT_SCALAR-FCVTZS_SCALAR#0
pub const fn classify_impl_bd_b(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4e84;
}


// FRECP_SCALAR-FRECPE_SCALAR#0
pub const fn classify_impl_bd_c(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3d00;
}


// FRECP_SCALAR-FRECPX_SCALAR#0
pub const fn classify_impl_bd_d(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3d01;
}

// QADDSUB_SCALAR-SQADD_SCALAR#0,QADDSUB_SCALAR-SQSUB_SCALAR#0,CMGT_SCALAR-CMGT#0,CMGT_SCALAR-CMGE#0,CMEQ_SCALAR-CMTST#0,CMZERO_SCALAR-CMGT_ZERO#0,CMZERO_SCALAR-CMEQ_ZERO#0,CMZERO_SCALAR-CMLT_ZERO#0,ARITH1_SCALAR-SUQADD_SCALAR#3,ARITH1_SCALAR-SQABS_SCALAR#3,ARITH1_SCALAR-ABS_SCALAR#0,SHL_REG_SCALAR-SQSHL_SCALAR#3,SHL_REG_SCALAR-SQRSHL_SCALAR#3,SHL_REG_SCALAR-SSHL_SCALAR#0,SHL_REG_SCALAR-SRSHL_SCALAR#0,ADDSUB_SCALAR-ADD_SCALAR#0,FCMP_ZERO_SCALAR-FCMGT_ZERO#0,FCMP_ZERO_SCALAR-FCMEQ_ZERO#0,FCMP_ZERO_SCALAR-FCMLT_ZERO#0,FRECP_SCALAR-FRECPE_SCALAR#0,FRECP_SCALAR-FRECPX_SCALAR#0,FRECP_STEP_SCALAR-FRSQRTS#0,FCVT_SCALAR-FCVTPS_SCALAR#0,FCVT_SCALAR-FCVTZS_SCALAR#0
pub const fn classify_impl_bd(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x2c00,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x2c01,
    0xc => 0x0,
    0xd => 0x2d00,
    0xe => 0x1,
    0xf => 0x2d01,
    0x10 => 0x0,
    0x11 => 0x3402,
    0x12 => 0x0,
    0x13 => 0x3400,
    0x14 => 0x0,
    0x15 => 0x3403,
    0x16 => 0x0,
    0x17 => 0x3401,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x2,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x3600,
    0x22 => 0x3,
    0x23 => 0x2e00,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x4,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x5,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x6,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x7,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x8,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x9,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x3e01,
    0x40 => 0x0,
    0x41 => 0x0,
    0x42 => 0x0,
    0x43 => 0x2c00,
    0x44 => 0x0,
    0x45 => 0x0,
    0x46 => 0x0,
    0x47 => 0x0,
    0x48 => 0x0,
    0x49 => 0x0,
    0x4a => 0x0,
    0x4b => 0x2c01,
    0x4c => 0x0,
    0x4d => 0x2d00,
    0x4e => 0x0,
    0x4f => 0x2d01,
    0x50 => 0x0,
    0x51 => 0x3402,
    0x52 => 0x0,
    0x53 => 0x3400,
    0x54 => 0x0,
    0x55 => 0x3403,
    0x56 => 0x0,
    0x57 => 0x3401,
    0x58 => 0x0,
    0x59 => 0x0,
    0x5a => 0x0,
    0x5b => 0x0,
    0x5c => 0x0,
    0x5d => 0x0,
    0x5e => 0x0,
    0x5f => 0x0,
    0x60 => 0x0,
    0x61 => 0x3600,
    0x62 => 0x0,
    0x63 => 0x2e00,
    0x64 => 0x0,
    0x65 => 0x0,
    0x66 => 0x0,
    0x67 => 0x0,
    0x68 => 0x0,
    0x69 => 0x0,
    0x6a => 0xa,
    0x6b => 0x0,
    0x6c => 0x0,
    0x6d => 0x0,
    0x6e => 0xb,
    0x6f => 0x0,
    0x70 => 0x0,
    0x71 => 0x0,
    0x72 => 0x0,
    0x73 => 0x0,
    0x74 => 0x0,
    0x75 => 0x0,
    0x76 => 0xc,
    0x77 => 0x0,
    0x78 => 0x0,
    0x79 => 0x0,
    0x7a => 0x0,
    0x7b => 0x0,
    0x7c => 0x0,
    0x7d => 0x0,
    0x7e => 0xd,
    0x7f => 0x3e01,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_bd_1(inst), // ARITH1_SCALAR-SUQADD_SCALAR#3
    0x2 => return classify_impl_bd_2(inst), // ARITH1_SCALAR-SQABS_SCALAR#3
    0x3 => return classify_impl_bd_3(inst), // CMZERO_SCALAR-CMGT_ZERO#0
    0x4 => return classify_impl_bd_4(inst), // CMZERO_SCALAR-CMEQ_ZERO#0
    0x5 => return classify_impl_bd_5(inst), // CMZERO_SCALAR-CMLT_ZERO#0
    0x6 => return classify_impl_bd_6(inst), // ARITH1_SCALAR-ABS_SCALAR#0
    0x7 => return classify_impl_bd_7(inst), // FCMP_ZERO_SCALAR-FCMGT_ZERO#0
    0x8 => return classify_impl_bd_8(inst), // FCMP_ZERO_SCALAR-FCMEQ_ZERO#0
    0x9 => return classify_impl_bd_9(inst), // FCMP_ZERO_SCALAR-FCMLT_ZERO#0
    0xa => return classify_impl_bd_a(inst), // FCVT_SCALAR-FCVTPS_SCALAR#0
    0xb => return classify_impl_bd_b(inst), // FCVT_SCALAR-FCVTZS_SCALAR#0
    0xc => return classify_impl_bd_c(inst), // FRECP_SCALAR-FRECPE_SCALAR#0
    0xd => return classify_impl_bd_d(inst), // FRECP_SCALAR-FRECPX_SCALAR#0
    _ => idx
  };
  return idx;
}


// INT_HORZ_SCALAR-ADDP_SCALAR#0
pub const fn classify_impl_be_1_1(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x5300;
}

// QADDSUB_SCALAR-SQADD_SCALAR#0,QADDSUB_SCALAR-SQSUB_SCALAR#0,CMGT_SCALAR-CMGT#0,CMGT_SCALAR-CMGE#0,CMEQ_SCALAR-CMTST#0,SHL_REG_SCALAR-SQSHL_SCALAR#3,SHL_REG_SCALAR-SQRSHL_SCALAR#3,SHL_REG_SCALAR-SSHL_SCALAR#0,SHL_REG_SCALAR-SRSHL_SCALAR#0,ADDSUB_SCALAR-ADD_SCALAR#0,FRECP_STEP_SCALAR-FRSQRTS#0,INT_HORZ_SCALAR-ADDP_SCALAR#0
pub const fn classify_impl_be_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x2c00,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x2c01,
    0xc => 0x0,
    0xd => 0x2d00,
    0xe => 0x0,
    0xf => 0x2d01,
    0x10 => 0x0,
    0x11 => 0x3402,
    0x12 => 0x0,
    0x13 => 0x3400,
    0x14 => 0x0,
    0x15 => 0x3403,
    0x16 => 0x0,
    0x17 => 0x3401,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x3600,
    0x22 => 0x0,
    0x23 => 0x2e00,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x1,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x3e01,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_be_1_1(inst), // INT_HORZ_SCALAR-ADDP_SCALAR#0
    _ => idx
  };
  return idx;
}


// FP16_2REG_SCALAR-FCMGT_ZERO_SCALAR_FP16#0
pub const fn classify_impl_be_2_1(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x4204;
}


// FP16_2REG_SCALAR-FCMEQ_ZERO_SCALAR_FP16#0
pub const fn classify_impl_be_2_2(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x4205;
}


// FP16_2REG_SCALAR-FCMLT_ZERO_SCALAR_FP16#0
pub const fn classify_impl_be_2_3(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x4206;
}


// FP16_2REG_SCALAR-FCVTPS_SCALAR_FP16#0
pub const fn classify_impl_be_2_4(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x4207;
}


// FP16_2REG_SCALAR-FCVTZS_SCALAR_FP16#0
pub const fn classify_impl_be_2_5(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x4208;
}


// FP16_2REG_SCALAR-FRECPE_SCALAR_FP16#0
pub const fn classify_impl_be_2_6(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x4209;
}


// FP16_2REG_SCALAR-FRECPX_SCALAR_FP16#0
pub const fn classify_impl_be_2_7(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x420a;
}

// QADDSUB_SCALAR-SQADD_SCALAR#0,QADDSUB_SCALAR-SQSUB_SCALAR#0,CMGT_SCALAR-CMGT#0,CMGT_SCALAR-CMGE#0,CMEQ_SCALAR-CMTST#0,SHL_REG_SCALAR-SQSHL_SCALAR#3,SHL_REG_SCALAR-SQRSHL_SCALAR#3,SHL_REG_SCALAR-SSHL_SCALAR#0,SHL_REG_SCALAR-SRSHL_SCALAR#0,ADDSUB_SCALAR-ADD_SCALAR#0,FRECP_STEP_SCALAR-FRSQRTS#0,FP16_2REG_SCALAR-FCMGT_ZERO_SCALAR_FP16#0,FP16_2REG_SCALAR-FCMEQ_ZERO_SCALAR_FP16#0,FP16_2REG_SCALAR-FCMLT_ZERO_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTPS_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTZS_SCALAR_FP16#0,FP16_2REG_SCALAR-FRECPE_SCALAR_FP16#0,FP16_2REG_SCALAR-FRECPX_SCALAR_FP16#0
pub const fn classify_impl_be_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x2c00,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x2c01,
    0xc => 0x0,
    0xd => 0x2d00,
    0xe => 0x0,
    0xf => 0x2d01,
    0x10 => 0x0,
    0x11 => 0x3402,
    0x12 => 0x0,
    0x13 => 0x3400,
    0x14 => 0x0,
    0x15 => 0x3403,
    0x16 => 0x0,
    0x17 => 0x3401,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x3600,
    0x22 => 0x0,
    0x23 => 0x2e00,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x1,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x2,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x3,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x3e01,
    0x40 => 0x0,
    0x41 => 0x0,
    0x42 => 0x0,
    0x43 => 0x2c00,
    0x44 => 0x0,
    0x45 => 0x0,
    0x46 => 0x0,
    0x47 => 0x0,
    0x48 => 0x0,
    0x49 => 0x0,
    0x4a => 0x0,
    0x4b => 0x2c01,
    0x4c => 0x0,
    0x4d => 0x2d00,
    0x4e => 0x0,
    0x4f => 0x2d01,
    0x50 => 0x0,
    0x51 => 0x3402,
    0x52 => 0x0,
    0x53 => 0x3400,
    0x54 => 0x0,
    0x55 => 0x3403,
    0x56 => 0x0,
    0x57 => 0x3401,
    0x58 => 0x0,
    0x59 => 0x0,
    0x5a => 0x0,
    0x5b => 0x0,
    0x5c => 0x0,
    0x5d => 0x0,
    0x5e => 0x0,
    0x5f => 0x0,
    0x60 => 0x0,
    0x61 => 0x3600,
    0x62 => 0x0,
    0x63 => 0x2e00,
    0x64 => 0x0,
    0x65 => 0x0,
    0x66 => 0x0,
    0x67 => 0x0,
    0x68 => 0x0,
    0x69 => 0x0,
    0x6a => 0x4,
    0x6b => 0x0,
    0x6c => 0x0,
    0x6d => 0x0,
    0x6e => 0x5,
    0x6f => 0x0,
    0x70 => 0x0,
    0x71 => 0x0,
    0x72 => 0x0,
    0x73 => 0x0,
    0x74 => 0x0,
    0x75 => 0x0,
    0x76 => 0x6,
    0x77 => 0x0,
    0x78 => 0x0,
    0x79 => 0x0,
    0x7a => 0x0,
    0x7b => 0x0,
    0x7c => 0x0,
    0x7d => 0x0,
    0x7e => 0x7,
    0x7f => 0x3e01,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_be_2_1(inst), // FP16_2REG_SCALAR-FCMGT_ZERO_SCALAR_FP16#0
    0x2 => return classify_impl_be_2_2(inst), // FP16_2REG_SCALAR-FCMEQ_ZERO_SCALAR_FP16#0
    0x3 => return classify_impl_be_2_3(inst), // FP16_2REG_SCALAR-FCMLT_ZERO_SCALAR_FP16#0
    0x4 => return classify_impl_be_2_4(inst), // FP16_2REG_SCALAR-FCVTPS_SCALAR_FP16#0
    0x5 => return classify_impl_be_2_5(inst), // FP16_2REG_SCALAR-FCVTZS_SCALAR_FP16#0
    0x6 => return classify_impl_be_2_6(inst), // FP16_2REG_SCALAR-FRECPE_SCALAR_FP16#0
    0x7 => return classify_impl_be_2_7(inst), // FP16_2REG_SCALAR-FRECPX_SCALAR_FP16#0
    _ => idx
  };
  return idx;
}

// QADDSUB_SCALAR-SQADD_SCALAR#0,QADDSUB_SCALAR-SQSUB_SCALAR#0,CMGT_SCALAR-CMGT#0,CMGT_SCALAR-CMGE#0,CMEQ_SCALAR-CMTST#0,SHL_REG_SCALAR-SQSHL_SCALAR#3,SHL_REG_SCALAR-SQRSHL_SCALAR#3,SHL_REG_SCALAR-SSHL_SCALAR#0,SHL_REG_SCALAR-SRSHL_SCALAR#0,ADDSUB_SCALAR-ADD_SCALAR#0,FRECP_STEP_SCALAR-FRSQRTS#0,FP16_2REG_SCALAR-FCMGT_ZERO_SCALAR_FP16#0,FP16_2REG_SCALAR-FCMEQ_ZERO_SCALAR_FP16#0,FP16_2REG_SCALAR-FCMLT_ZERO_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTPS_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTZS_SCALAR_FP16#0,FP16_2REG_SCALAR-FRECPE_SCALAR_FP16#0,FP16_2REG_SCALAR-FRECPX_SCALAR_FP16#0,INT_HORZ_SCALAR-ADDP_SCALAR#0
pub const fn classify_impl_be(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_be_1(inst), // QADDSUB_SCALAR-SQADD_SCALAR#0,QADDSUB_SCALAR-SQSUB_SCALAR#0,CMGT_SCALAR-CMGT#0,CMGT_SCALAR-CMGE#0,CMEQ_SCALAR-CMTST#0,SHL_REG_SCALAR-SQSHL_SCALAR#3,SHL_REG_SCALAR-SQRSHL_SCALAR#3,SHL_REG_SCALAR-SSHL_SCALAR#0,SHL_REG_SCALAR-SRSHL_SCALAR#0,ADDSUB_SCALAR-ADD_SCALAR#0,FRECP_STEP_SCALAR-FRSQRTS#0,INT_HORZ_SCALAR-ADDP_SCALAR#0
    0x2 => return classify_impl_be_2(inst), // QADDSUB_SCALAR-SQADD_SCALAR#0,QADDSUB_SCALAR-SQSUB_SCALAR#0,CMGT_SCALAR-CMGT#0,CMGT_SCALAR-CMGE#0,CMEQ_SCALAR-CMTST#0,SHL_REG_SCALAR-SQSHL_SCALAR#3,SHL_REG_SCALAR-SQRSHL_SCALAR#3,SHL_REG_SCALAR-SSHL_SCALAR#0,SHL_REG_SCALAR-SRSHL_SCALAR#0,ADDSUB_SCALAR-ADD_SCALAR#0,FRECP_STEP_SCALAR-FRSQRTS#0,FP16_2REG_SCALAR-FCMGT_ZERO_SCALAR_FP16#0,FP16_2REG_SCALAR-FCMEQ_ZERO_SCALAR_FP16#0,FP16_2REG_SCALAR-FCMLT_ZERO_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTPS_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTZS_SCALAR_FP16#0,FP16_2REG_SCALAR-FRECPE_SCALAR_FP16#0,FP16_2REG_SCALAR-FRECPX_SCALAR_FP16#0
    _ => idx
  };
  return idx;
}


// FMUL_ELEM_SCALAR_FP16-FMLA_ELEM_SCALAR_FP16#0
pub const fn classify_impl_bf_1(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x5780;
}


// FMUL_ELEM_SCALAR_FP16-FMLS_ELEM_SCALAR_FP16#0
pub const fn classify_impl_bf_2(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x5781;
}


// QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#0
pub const fn classify_impl_bf_3(inst: u32) -> u32 {
  if (inst&0x80c00) != 0x80400 { return 0; }
  return 0x4980;
}


// SHRN_SCALAR_IMM-SQSHRN_SCALAR#0
pub const fn classify_impl_bf_4_1(inst: u32) -> u32 {
  if (inst&0x80000) != 0x80000 { return 0; }
  return 0x4a80;
}


// SHRN_SCALAR_IMM-SQRSHRN_SCALAR#0
pub const fn classify_impl_bf_4_2(inst: u32) -> u32 {
  if (inst&0x80000) != 0x80000 { return 0; }
  return 0x4a81;
}

// SHRN_SCALAR_IMM-SQSHRN_SCALAR#0,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#0,FMUL_ELEM_SCALAR_FP16-FMUL_ELEM_SCALAR_FP16#0
pub const fn classify_impl_bf_4(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x5782,
    0x1 => 0x1,
    0x2 => 0x5782,
    0x3 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_bf_4_1(inst), // SHRN_SCALAR_IMM-SQSHRN_SCALAR#0
    0x2 => return classify_impl_bf_4_2(inst), // SHRN_SCALAR_IMM-SQRSHRN_SCALAR#0
    _ => idx
  };
  return idx;
}

// QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#0,SHRN_SCALAR_IMM-SQSHRN_SCALAR#0,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#0,FMUL_ELEM_SCALAR_FP16-FMLA_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMLS_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMUL_ELEM_SCALAR_FP16#0
pub const fn classify_impl_bf(inst: u32) -> u32 {
  if (inst&0x1000) != 0x1000 { return 0; }
  let idx = match (inst >> 13) & 0x7 {
    0x0 => 0x1,
    0x1 => 0x0,
    0x2 => 0x2,
    0x3 => 0x3,
    0x4 => 0x4,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_bf_1(inst), // FMUL_ELEM_SCALAR_FP16-FMLA_ELEM_SCALAR_FP16#0
    0x2 => return classify_impl_bf_2(inst), // FMUL_ELEM_SCALAR_FP16-FMLS_ELEM_SCALAR_FP16#0
    0x3 => return classify_impl_bf_3(inst), // QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#0
    0x4 => return classify_impl_bf_4(inst), // SHRN_SCALAR_IMM-SQSHRN_SCALAR#0,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#0,FMUL_ELEM_SCALAR_FP16-FMUL_ELEM_SCALAR_FP16#0
    _ => idx
  };
  return idx;
}


// QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#1,SHRN_SCALAR_IMM-SQSHRN_SCALAR#1,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#1,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX_FP16#0,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX_FP16#0,FMUL_ELEM_SCALAR_FP16-FMLA_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMLS_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMUL_ELEM_SCALAR_FP16#0
pub const fn classify_impl_c0_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x5780,
    0x5 => 0x0,
    0x6 => 0x5780,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x5781,
    0x15 => 0x0,
    0x16 => 0x5781,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4980,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x5782,
    0x25 => 0x4a80,
    0x26 => 0x5782,
    0x27 => 0x4a81,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d80,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4d81,
    _ => 0,
  };
  return idx;
}


// QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#2,SHRN_SCALAR_IMM-SQSHRN_SCALAR#2,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#2,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX_FP16#1,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX_FP16#1,FMUL_ELEM_SCALAR_FP16-FMLA_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMLS_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMUL_ELEM_SCALAR_FP16#0
pub const fn classify_impl_c0_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x5780,
    0x5 => 0x0,
    0x6 => 0x5780,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x5781,
    0x15 => 0x0,
    0x16 => 0x5781,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4980,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x5782,
    0x25 => 0x4a80,
    0x26 => 0x5782,
    0x27 => 0x4a81,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d80,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4d81,
    _ => 0,
  };
  return idx;
}

// QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#1,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#2,SHRN_SCALAR_IMM-SQSHRN_SCALAR#1,SHRN_SCALAR_IMM-SQSHRN_SCALAR#2,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#1,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#2,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX_FP16#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX_FP16#1,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX_FP16#0,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX_FP16#1,FMUL_ELEM_SCALAR_FP16-FMLA_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMLS_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMUL_ELEM_SCALAR_FP16#0
pub const fn classify_impl_c0(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_c0_1(inst), // QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#1,SHRN_SCALAR_IMM-SQSHRN_SCALAR#1,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#1,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX_FP16#0,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX_FP16#0,FMUL_ELEM_SCALAR_FP16-FMLA_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMLS_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMUL_ELEM_SCALAR_FP16#0
    0x2 => return classify_impl_c0_2(inst), // QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#2,SHRN_SCALAR_IMM-SQSHRN_SCALAR#2,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#2,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX_FP16#1,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX_FP16#1,FMUL_ELEM_SCALAR_FP16-FMLA_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMLS_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMUL_ELEM_SCALAR_FP16#0
    _ => idx
  };
  return idx;
}


// QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#3,SHRN_SCALAR_IMM-SQSHRN_SCALAR#3,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#3,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#0,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#0,FMUL_ELEM_SCALAR_FP16-FMLA_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMLS_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMUL_ELEM_SCALAR_FP16#0
pub const fn classify_impl_c1_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x5780,
    0x5 => 0x0,
    0x6 => 0x5780,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x5781,
    0x15 => 0x0,
    0x16 => 0x5781,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4980,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x5782,
    0x25 => 0x4a80,
    0x26 => 0x5782,
    0x27 => 0x4a81,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d82,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4d83,
    _ => 0,
  };
  return idx;
}


// QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#4,SHRN_SCALAR_IMM-SQSHRN_SCALAR#4,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#4,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#1,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#1,FMUL_ELEM_SCALAR_FP16-FMLA_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMLS_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMUL_ELEM_SCALAR_FP16#0
pub const fn classify_impl_c1_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x5780,
    0x5 => 0x0,
    0x6 => 0x5780,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x5781,
    0x15 => 0x0,
    0x16 => 0x5781,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4980,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x5782,
    0x25 => 0x4a80,
    0x26 => 0x5782,
    0x27 => 0x4a81,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d82,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4d83,
    _ => 0,
  };
  return idx;
}

// QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#3,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#4,SHRN_SCALAR_IMM-SQSHRN_SCALAR#3,SHRN_SCALAR_IMM-SQSHRN_SCALAR#4,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#3,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#4,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#1,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#0,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#1,FMUL_ELEM_SCALAR_FP16-FMLA_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMLS_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMUL_ELEM_SCALAR_FP16#0
pub const fn classify_impl_c1(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_c1_1(inst), // QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#3,SHRN_SCALAR_IMM-SQSHRN_SCALAR#3,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#3,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#0,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#0,FMUL_ELEM_SCALAR_FP16-FMLA_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMLS_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMUL_ELEM_SCALAR_FP16#0
    0x2 => return classify_impl_c1_2(inst), // QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#4,SHRN_SCALAR_IMM-SQSHRN_SCALAR#4,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#4,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#1,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#1,FMUL_ELEM_SCALAR_FP16-FMLA_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMLS_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMUL_ELEM_SCALAR_FP16#0
    _ => idx
  };
  return idx;
}


// QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#5,SHRN_SCALAR_IMM-SQSHRN_SCALAR#5,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#5,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#2,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#2,FMUL_ELEM_SCALAR_FP16-FMLA_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMLS_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMUL_ELEM_SCALAR_FP16#0
pub const fn classify_impl_c2_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x5780,
    0x5 => 0x0,
    0x6 => 0x5780,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x5781,
    0x15 => 0x0,
    0x16 => 0x5781,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4980,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x5782,
    0x25 => 0x4a80,
    0x26 => 0x5782,
    0x27 => 0x4a81,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d82,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4d83,
    _ => 0,
  };
  return idx;
}


// QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#6,SHRN_SCALAR_IMM-SQSHRN_SCALAR#6,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#6,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#3,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#3,FMUL_ELEM_SCALAR_FP16-FMLA_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMLS_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMUL_ELEM_SCALAR_FP16#0
pub const fn classify_impl_c2_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x5780,
    0x5 => 0x0,
    0x6 => 0x5780,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x5781,
    0x15 => 0x0,
    0x16 => 0x5781,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4980,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x5782,
    0x25 => 0x4a80,
    0x26 => 0x5782,
    0x27 => 0x4a81,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d82,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4d83,
    _ => 0,
  };
  return idx;
}

// QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#5,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#6,SHRN_SCALAR_IMM-SQSHRN_SCALAR#5,SHRN_SCALAR_IMM-SQSHRN_SCALAR#6,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#5,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#6,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#2,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#3,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#2,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#3,FMUL_ELEM_SCALAR_FP16-FMLA_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMLS_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMUL_ELEM_SCALAR_FP16#0
pub const fn classify_impl_c2(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_c2_1(inst), // QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#5,SHRN_SCALAR_IMM-SQSHRN_SCALAR#5,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#5,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#2,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#2,FMUL_ELEM_SCALAR_FP16-FMLA_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMLS_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMUL_ELEM_SCALAR_FP16#0
    0x2 => return classify_impl_c2_2(inst), // QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#6,SHRN_SCALAR_IMM-SQSHRN_SCALAR#6,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#6,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#3,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#3,FMUL_ELEM_SCALAR_FP16-FMLA_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMLS_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMUL_ELEM_SCALAR_FP16#0
    _ => idx
  };
  return idx;
}


// SHR_SCALAR_IMM-SSHR_SCALAR#0,SHR_SCALAR_IMM-SSRA_SCALAR#0,SHR_SCALAR_IMM-SRSHR_SCALAR#0,SHR_SCALAR_IMM-SRSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#7,SHIFT_SCALAR_IMM-SHL_SCALAR#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#4,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#4,MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#0
pub const fn classify_impl_c3_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4880,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4881,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4882,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x5600,
    0xd => 0x4883,
    0xe => 0x5600,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4c80,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x5601,
    0x1d => 0x4980,
    0x1e => 0x5601,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x5602,
    0x2d => 0x0,
    0x2e => 0x5602,
    0x2f => 0x0,
    0x30 => 0x5500,
    0x31 => 0x0,
    0x32 => 0x5500,
    0x33 => 0x0,
    0x34 => 0x5501,
    0x35 => 0x0,
    0x36 => 0x5501,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d82,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4d83,
    _ => 0,
  };
  return idx;
}


// SHR_SCALAR_IMM-SSHR_SCALAR#0,SHR_SCALAR_IMM-SSRA_SCALAR#0,SHR_SCALAR_IMM-SRSHR_SCALAR#0,SHR_SCALAR_IMM-SRSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#8,SHIFT_SCALAR_IMM-SHL_SCALAR#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#5,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#5,MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#0
pub const fn classify_impl_c3_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4880,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4881,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4882,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x5600,
    0xd => 0x4883,
    0xe => 0x5600,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4c80,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x5601,
    0x1d => 0x4980,
    0x1e => 0x5601,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x5602,
    0x2d => 0x0,
    0x2e => 0x5602,
    0x2f => 0x0,
    0x30 => 0x5500,
    0x31 => 0x0,
    0x32 => 0x5500,
    0x33 => 0x0,
    0x34 => 0x5501,
    0x35 => 0x0,
    0x36 => 0x5501,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d82,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4d83,
    _ => 0,
  };
  return idx;
}

// SHR_SCALAR_IMM-SSHR_SCALAR#0,SHR_SCALAR_IMM-SSRA_SCALAR#0,SHR_SCALAR_IMM-SRSHR_SCALAR#0,SHR_SCALAR_IMM-SRSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#7,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#8,SHIFT_SCALAR_IMM-SHL_SCALAR#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#4,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#5,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#4,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#5,MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#0
pub const fn classify_impl_c3(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_c3_1(inst), // SHR_SCALAR_IMM-SSHR_SCALAR#0,SHR_SCALAR_IMM-SSRA_SCALAR#0,SHR_SCALAR_IMM-SRSHR_SCALAR#0,SHR_SCALAR_IMM-SRSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#7,SHIFT_SCALAR_IMM-SHL_SCALAR#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#4,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#4,MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#0
    0x2 => return classify_impl_c3_2(inst), // SHR_SCALAR_IMM-SSHR_SCALAR#0,SHR_SCALAR_IMM-SSRA_SCALAR#0,SHR_SCALAR_IMM-SRSHR_SCALAR#0,SHR_SCALAR_IMM-SRSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#8,SHIFT_SCALAR_IMM-SHL_SCALAR#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#5,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#5,MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#0
    _ => idx
  };
  return idx;
}


// SHR_SCALAR_IMM-SSHR_SCALAR#0,SHR_SCALAR_IMM-SSRA_SCALAR#0,SHR_SCALAR_IMM-SRSHR_SCALAR#0,SHR_SCALAR_IMM-SRSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#9,SHIFT_SCALAR_IMM-SHL_SCALAR#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#6,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#6,MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#0
pub const fn classify_impl_c4_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4880,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4881,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4882,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x5600,
    0xd => 0x4883,
    0xe => 0x5600,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4c80,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x5601,
    0x1d => 0x4980,
    0x1e => 0x5601,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x5602,
    0x2d => 0x0,
    0x2e => 0x5602,
    0x2f => 0x0,
    0x30 => 0x5500,
    0x31 => 0x0,
    0x32 => 0x5500,
    0x33 => 0x0,
    0x34 => 0x5501,
    0x35 => 0x0,
    0x36 => 0x5501,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d82,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4d83,
    _ => 0,
  };
  return idx;
}


// SHR_SCALAR_IMM-SSHR_SCALAR#0,SHR_SCALAR_IMM-SSRA_SCALAR#0,SHR_SCALAR_IMM-SRSHR_SCALAR#0,SHR_SCALAR_IMM-SRSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#10,SHIFT_SCALAR_IMM-SHL_SCALAR#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#7,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#7,MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#0
pub const fn classify_impl_c4_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4880,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4881,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4882,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x5600,
    0xd => 0x4883,
    0xe => 0x5600,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4c80,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x5601,
    0x1d => 0x4980,
    0x1e => 0x5601,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x5602,
    0x2d => 0x0,
    0x2e => 0x5602,
    0x2f => 0x0,
    0x30 => 0x5500,
    0x31 => 0x0,
    0x32 => 0x5500,
    0x33 => 0x0,
    0x34 => 0x5501,
    0x35 => 0x0,
    0x36 => 0x5501,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d82,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4d83,
    _ => 0,
  };
  return idx;
}

// SHR_SCALAR_IMM-SSHR_SCALAR#0,SHR_SCALAR_IMM-SSRA_SCALAR#0,SHR_SCALAR_IMM-SRSHR_SCALAR#0,SHR_SCALAR_IMM-SRSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#9,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#10,SHIFT_SCALAR_IMM-SHL_SCALAR#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#6,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#7,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#6,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#7,MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#0
pub const fn classify_impl_c4(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_c4_1(inst), // SHR_SCALAR_IMM-SSHR_SCALAR#0,SHR_SCALAR_IMM-SSRA_SCALAR#0,SHR_SCALAR_IMM-SRSHR_SCALAR#0,SHR_SCALAR_IMM-SRSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#9,SHIFT_SCALAR_IMM-SHL_SCALAR#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#6,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#6,MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#0
    0x2 => return classify_impl_c4_2(inst), // SHR_SCALAR_IMM-SSHR_SCALAR#0,SHR_SCALAR_IMM-SSRA_SCALAR#0,SHR_SCALAR_IMM-SRSHR_SCALAR#0,SHR_SCALAR_IMM-SRSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#10,SHIFT_SCALAR_IMM-SHL_SCALAR#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#7,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#7,MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#0
    _ => idx
  };
  return idx;
}


// SHR_SCALAR_IMM-SSHR_SCALAR#0,SHR_SCALAR_IMM-SSRA_SCALAR#0,SHR_SCALAR_IMM-SRSHR_SCALAR#0,SHR_SCALAR_IMM-SRSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#11,SHIFT_SCALAR_IMM-SHL_SCALAR#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#8,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#8,MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#0
pub const fn classify_impl_c5_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4880,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4881,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4882,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x5600,
    0xd => 0x4883,
    0xe => 0x5600,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4c80,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x5601,
    0x1d => 0x4980,
    0x1e => 0x5601,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x5602,
    0x2d => 0x0,
    0x2e => 0x5602,
    0x2f => 0x0,
    0x30 => 0x5500,
    0x31 => 0x0,
    0x32 => 0x5500,
    0x33 => 0x0,
    0x34 => 0x5501,
    0x35 => 0x0,
    0x36 => 0x5501,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d82,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4d83,
    _ => 0,
  };
  return idx;
}


// SHR_SCALAR_IMM-SSHR_SCALAR#0,SHR_SCALAR_IMM-SSRA_SCALAR#0,SHR_SCALAR_IMM-SRSHR_SCALAR#0,SHR_SCALAR_IMM-SRSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#12,SHIFT_SCALAR_IMM-SHL_SCALAR#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#9,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#9,MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#0
pub const fn classify_impl_c5_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4880,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4881,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4882,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x5600,
    0xd => 0x4883,
    0xe => 0x5600,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4c80,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x5601,
    0x1d => 0x4980,
    0x1e => 0x5601,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x5602,
    0x2d => 0x0,
    0x2e => 0x5602,
    0x2f => 0x0,
    0x30 => 0x5500,
    0x31 => 0x0,
    0x32 => 0x5500,
    0x33 => 0x0,
    0x34 => 0x5501,
    0x35 => 0x0,
    0x36 => 0x5501,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d82,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4d83,
    _ => 0,
  };
  return idx;
}

// SHR_SCALAR_IMM-SSHR_SCALAR#0,SHR_SCALAR_IMM-SSRA_SCALAR#0,SHR_SCALAR_IMM-SRSHR_SCALAR#0,SHR_SCALAR_IMM-SRSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#11,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#12,SHIFT_SCALAR_IMM-SHL_SCALAR#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#8,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#9,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#8,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#9,MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#0
pub const fn classify_impl_c5(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_c5_1(inst), // SHR_SCALAR_IMM-SSHR_SCALAR#0,SHR_SCALAR_IMM-SSRA_SCALAR#0,SHR_SCALAR_IMM-SRSHR_SCALAR#0,SHR_SCALAR_IMM-SRSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#11,SHIFT_SCALAR_IMM-SHL_SCALAR#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#8,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#8,MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#0
    0x2 => return classify_impl_c5_2(inst), // SHR_SCALAR_IMM-SSHR_SCALAR#0,SHR_SCALAR_IMM-SSRA_SCALAR#0,SHR_SCALAR_IMM-SRSHR_SCALAR#0,SHR_SCALAR_IMM-SRSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#12,SHIFT_SCALAR_IMM-SHL_SCALAR#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#9,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#9,MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#0
    _ => idx
  };
  return idx;
}


// SHR_SCALAR_IMM-SSHR_SCALAR#0,SHR_SCALAR_IMM-SSRA_SCALAR#0,SHR_SCALAR_IMM-SRSHR_SCALAR#0,SHR_SCALAR_IMM-SRSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#13,SHIFT_SCALAR_IMM-SHL_SCALAR#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#10,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#10,MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#0
pub const fn classify_impl_c6_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4880,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4881,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4882,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x5600,
    0xd => 0x4883,
    0xe => 0x5600,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4c80,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x5601,
    0x1d => 0x4980,
    0x1e => 0x5601,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x5602,
    0x2d => 0x0,
    0x2e => 0x5602,
    0x2f => 0x0,
    0x30 => 0x5500,
    0x31 => 0x0,
    0x32 => 0x5500,
    0x33 => 0x0,
    0x34 => 0x5501,
    0x35 => 0x0,
    0x36 => 0x5501,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d82,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4d83,
    _ => 0,
  };
  return idx;
}


// SHR_SCALAR_IMM-SSHR_SCALAR#0,SHR_SCALAR_IMM-SSRA_SCALAR#0,SHR_SCALAR_IMM-SRSHR_SCALAR#0,SHR_SCALAR_IMM-SRSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#14,SHIFT_SCALAR_IMM-SHL_SCALAR#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#11,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#11,MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#0
pub const fn classify_impl_c6_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4880,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4881,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4882,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x5600,
    0xd => 0x4883,
    0xe => 0x5600,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4c80,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x5601,
    0x1d => 0x4980,
    0x1e => 0x5601,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x5602,
    0x2d => 0x0,
    0x2e => 0x5602,
    0x2f => 0x0,
    0x30 => 0x5500,
    0x31 => 0x0,
    0x32 => 0x5500,
    0x33 => 0x0,
    0x34 => 0x5501,
    0x35 => 0x0,
    0x36 => 0x5501,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d82,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4d83,
    _ => 0,
  };
  return idx;
}

// SHR_SCALAR_IMM-SSHR_SCALAR#0,SHR_SCALAR_IMM-SSRA_SCALAR#0,SHR_SCALAR_IMM-SRSHR_SCALAR#0,SHR_SCALAR_IMM-SRSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#13,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#14,SHIFT_SCALAR_IMM-SHL_SCALAR#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#10,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#11,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#10,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#11,MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#0
pub const fn classify_impl_c6(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_c6_1(inst), // SHR_SCALAR_IMM-SSHR_SCALAR#0,SHR_SCALAR_IMM-SSRA_SCALAR#0,SHR_SCALAR_IMM-SRSHR_SCALAR#0,SHR_SCALAR_IMM-SRSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#13,SHIFT_SCALAR_IMM-SHL_SCALAR#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#10,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#10,MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#0
    0x2 => return classify_impl_c6_2(inst), // SHR_SCALAR_IMM-SSHR_SCALAR#0,SHR_SCALAR_IMM-SSRA_SCALAR#0,SHR_SCALAR_IMM-SRSHR_SCALAR#0,SHR_SCALAR_IMM-SRSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#14,SHIFT_SCALAR_IMM-SHL_SCALAR#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#11,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#11,MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#0
    _ => idx
  };
  return idx;
}


// MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#1,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#1,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#1,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#1,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#1,FMUL_ELEM_SCALAR-FMLA_ELEM_SCALAR#0,FMUL_ELEM_SCALAR-FMLS_ELEM_SCALAR#0,FMUL_ELEM_SCALAR-FMUL_ELEM_SCALAR#0
pub const fn classify_impl_c7(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 12) & 0xf {
    0x0 => 0x0,
    0x1 => 0x5700,
    0x2 => 0x0,
    0x3 => 0x5600,
    0x4 => 0x0,
    0x5 => 0x5701,
    0x6 => 0x0,
    0x7 => 0x5601,
    0x8 => 0x0,
    0x9 => 0x5702,
    0xa => 0x0,
    0xb => 0x5602,
    0xc => 0x5500,
    0xd => 0x5501,
    0xe => 0x0,
    0xf => 0x0,
    _ => 0,
  };
  return idx;
}


// MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#1,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#1,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#1,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#1,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#1,FMUL_ELEM_SCALAR-FMLA_ELEM_SCALAR#1,FMUL_ELEM_SCALAR-FMLS_ELEM_SCALAR#1,FMUL_ELEM_SCALAR-FMUL_ELEM_SCALAR#1
pub const fn classify_impl_c8(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 12) & 0xf {
    0x0 => 0x0,
    0x1 => 0x5700,
    0x2 => 0x0,
    0x3 => 0x5600,
    0x4 => 0x0,
    0x5 => 0x5701,
    0x6 => 0x0,
    0x7 => 0x5601,
    0x8 => 0x0,
    0x9 => 0x5702,
    0xa => 0x0,
    0xb => 0x5602,
    0xc => 0x5500,
    0xd => 0x5501,
    0xe => 0x0,
    0xf => 0x0,
    _ => 0,
  };
  return idx;
}


// FMUL_ELEM_SCALAR-FMLA_ELEM_SCALAR#2,FMUL_ELEM_SCALAR-FMLS_ELEM_SCALAR#2,FMUL_ELEM_SCALAR-FMUL_ELEM_SCALAR#2
pub const fn classify_impl_c9(inst: u32) -> u32 {
  if (inst&0x3400) != 0x1000 { return 0; }
  let idx = match (inst >> 14) & 0x3 {
    0x0 => 0x5700,
    0x1 => 0x5701,
    0x2 => 0x5702,
    0x3 => 0x0,
    _ => 0,
  };
  return idx;
}


// ANDOREOR_SHIFT-ANDS_SHIFT#0
pub const fn classify_impl_ca(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x586;
}


// ANDOREOR_SHIFT-BICS_SHIFT#0
pub const fn classify_impl_cb(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x587;
}


// ADDSUB_SHIFT-SUBS_SHIFT#0
pub const fn classify_impl_cc(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x403;
}


// ADDSUB_EXT-SUBS_EXT#0,ADDSUB_EXT-SUBS_EXT#1,ADDSUB_EXT-SUBS_EXT#2,ADDSUB_EXT-SUBS_EXT#3,ADDSUB_EXT-SUBS_EXT#4
pub const fn classify_impl_cd(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7 {
    0x0 => 0x303,
    0x1 => 0x303,
    0x2 => 0x303,
    0x3 => 0x303,
    0x4 => 0x303,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    _ => 0,
  };
  return idx;
}


// ADDSUB_SHIFT-SUBS_SHIFT#1
pub const fn classify_impl_ce(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x403;
}


// ADDSUB_SHIFT-SUBS_SHIFT#2
pub const fn classify_impl_cf(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x403;
}


// EXT-EXT#1,EXT-EXT#2
pub const fn classify_impl_d0_1(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  return 0x2b00;
}


// INS-INS_ELEM#0,INS-INS_ELEM#1,INS-INS_ELEM#2,INS-INS_ELEM#3,INS-INS_ELEM#4,INS-INS_ELEM#5,INS-INS_ELEM#6,INS-INS_ELEM#7,INS-INS_ELEM#8,INS-INS_ELEM#9,INS-INS_ELEM#10,INS-INS_ELEM#11,INS-INS_ELEM#12,INS-INS_ELEM#13,INS-INS_ELEM#14,INS-INS_ELEM#15,EXT-EXT#1,EXT-EXT#2
pub const fn classify_impl_d0_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2b00,
    0x1 => 0x2901,
    0x2 => 0x2b00,
    0x3 => 0x2901,
    0x4 => 0x2b00,
    0x5 => 0x2901,
    0x6 => 0x2b00,
    0x7 => 0x2901,
    0x8 => 0x2b00,
    0x9 => 0x2901,
    0xa => 0x2b00,
    0xb => 0x2901,
    0xc => 0x2b00,
    0xd => 0x2901,
    0xe => 0x2b00,
    0xf => 0x2901,
    0x10 => 0x2b00,
    0x11 => 0x2901,
    0x12 => 0x2b00,
    0x13 => 0x2901,
    0x14 => 0x2b00,
    0x15 => 0x2901,
    0x16 => 0x2b00,
    0x17 => 0x2901,
    0x18 => 0x2b00,
    0x19 => 0x2901,
    0x1a => 0x2b00,
    0x1b => 0x2901,
    0x1c => 0x2b00,
    0x1d => 0x2901,
    0x1e => 0x2b00,
    0x1f => 0x2901,
    _ => 0,
  };
  return idx;
}


// INS-INS_ELEM#16,INS-INS_ELEM#17,INS-INS_ELEM#18,INS-INS_ELEM#19,INS-INS_ELEM#20,INS-INS_ELEM#21,INS-INS_ELEM#22,INS-INS_ELEM#23,INS-INS_ELEM#24,INS-INS_ELEM#25,INS-INS_ELEM#26,INS-INS_ELEM#27,INS-INS_ELEM#28,INS-INS_ELEM#29,INS-INS_ELEM#30,INS-INS_ELEM#31,EXT-EXT#1,EXT-EXT#2
pub const fn classify_impl_d0_3(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2b00,
    0x1 => 0x2901,
    0x2 => 0x2b00,
    0x3 => 0x2901,
    0x4 => 0x2b00,
    0x5 => 0x2901,
    0x6 => 0x2b00,
    0x7 => 0x2901,
    0x8 => 0x2b00,
    0x9 => 0x2901,
    0xa => 0x2b00,
    0xb => 0x2901,
    0xc => 0x2b00,
    0xd => 0x2901,
    0xe => 0x2b00,
    0xf => 0x2901,
    0x10 => 0x2b00,
    0x11 => 0x2901,
    0x12 => 0x2b00,
    0x13 => 0x2901,
    0x14 => 0x2b00,
    0x15 => 0x2901,
    0x16 => 0x2b00,
    0x17 => 0x2901,
    0x18 => 0x2b00,
    0x19 => 0x2901,
    0x1a => 0x2b00,
    0x1b => 0x2901,
    0x1c => 0x2b00,
    0x1d => 0x2901,
    0x1e => 0x2b00,
    0x1f => 0x2901,
    _ => 0,
  };
  return idx;
}


// INS-INS_ELEM#32,INS-INS_ELEM#33,INS-INS_ELEM#34,INS-INS_ELEM#35,INS-INS_ELEM#36,INS-INS_ELEM#37,INS-INS_ELEM#38,INS-INS_ELEM#39,INS-INS_ELEM#40,INS-INS_ELEM#41,INS-INS_ELEM#42,INS-INS_ELEM#43,INS-INS_ELEM#44,INS-INS_ELEM#45,INS-INS_ELEM#46,INS-INS_ELEM#47,EXT-EXT#1,EXT-EXT#2
pub const fn classify_impl_d0_4(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2b00,
    0x1 => 0x2901,
    0x2 => 0x2b00,
    0x3 => 0x2901,
    0x4 => 0x2b00,
    0x5 => 0x2901,
    0x6 => 0x2b00,
    0x7 => 0x2901,
    0x8 => 0x2b00,
    0x9 => 0x2901,
    0xa => 0x2b00,
    0xb => 0x2901,
    0xc => 0x2b00,
    0xd => 0x2901,
    0xe => 0x2b00,
    0xf => 0x2901,
    0x10 => 0x2b00,
    0x11 => 0x2901,
    0x12 => 0x2b00,
    0x13 => 0x2901,
    0x14 => 0x2b00,
    0x15 => 0x2901,
    0x16 => 0x2b00,
    0x17 => 0x2901,
    0x18 => 0x2b00,
    0x19 => 0x2901,
    0x1a => 0x2b00,
    0x1b => 0x2901,
    0x1c => 0x2b00,
    0x1d => 0x2901,
    0x1e => 0x2b00,
    0x1f => 0x2901,
    _ => 0,
  };
  return idx;
}


// INS-INS_ELEM#48,INS-INS_ELEM#49,INS-INS_ELEM#50,INS-INS_ELEM#51,INS-INS_ELEM#52,INS-INS_ELEM#53,INS-INS_ELEM#54,INS-INS_ELEM#55,INS-INS_ELEM#56,INS-INS_ELEM#57,INS-INS_ELEM#58,INS-INS_ELEM#59,INS-INS_ELEM#60,INS-INS_ELEM#61,INS-INS_ELEM#62,INS-INS_ELEM#63,EXT-EXT#1,EXT-EXT#2
pub const fn classify_impl_d0_5(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2b00,
    0x1 => 0x2901,
    0x2 => 0x2b00,
    0x3 => 0x2901,
    0x4 => 0x2b00,
    0x5 => 0x2901,
    0x6 => 0x2b00,
    0x7 => 0x2901,
    0x8 => 0x2b00,
    0x9 => 0x2901,
    0xa => 0x2b00,
    0xb => 0x2901,
    0xc => 0x2b00,
    0xd => 0x2901,
    0xe => 0x2b00,
    0xf => 0x2901,
    0x10 => 0x2b00,
    0x11 => 0x2901,
    0x12 => 0x2b00,
    0x13 => 0x2901,
    0x14 => 0x2b00,
    0x15 => 0x2901,
    0x16 => 0x2b00,
    0x17 => 0x2901,
    0x18 => 0x2b00,
    0x19 => 0x2901,
    0x1a => 0x2b00,
    0x1b => 0x2901,
    0x1c => 0x2b00,
    0x1d => 0x2901,
    0x1e => 0x2b00,
    0x1f => 0x2901,
    _ => 0,
  };
  return idx;
}


// INS-INS_ELEM#64,INS-INS_ELEM#65,INS-INS_ELEM#66,INS-INS_ELEM#67,INS-INS_ELEM#68,INS-INS_ELEM#69,INS-INS_ELEM#70,INS-INS_ELEM#71,INS-INS_ELEM#72,INS-INS_ELEM#73,INS-INS_ELEM#74,INS-INS_ELEM#75,INS-INS_ELEM#76,INS-INS_ELEM#77,INS-INS_ELEM#78,INS-INS_ELEM#79,EXT-EXT#1,EXT-EXT#2
pub const fn classify_impl_d0_6(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2b00,
    0x1 => 0x2901,
    0x2 => 0x2b00,
    0x3 => 0x2901,
    0x4 => 0x2b00,
    0x5 => 0x2901,
    0x6 => 0x2b00,
    0x7 => 0x2901,
    0x8 => 0x2b00,
    0x9 => 0x2901,
    0xa => 0x2b00,
    0xb => 0x2901,
    0xc => 0x2b00,
    0xd => 0x2901,
    0xe => 0x2b00,
    0xf => 0x2901,
    0x10 => 0x2b00,
    0x11 => 0x2901,
    0x12 => 0x2b00,
    0x13 => 0x2901,
    0x14 => 0x2b00,
    0x15 => 0x2901,
    0x16 => 0x2b00,
    0x17 => 0x2901,
    0x18 => 0x2b00,
    0x19 => 0x2901,
    0x1a => 0x2b00,
    0x1b => 0x2901,
    0x1c => 0x2b00,
    0x1d => 0x2901,
    0x1e => 0x2b00,
    0x1f => 0x2901,
    _ => 0,
  };
  return idx;
}


// INS-INS_ELEM#80,INS-INS_ELEM#81,INS-INS_ELEM#82,INS-INS_ELEM#83,INS-INS_ELEM#84,INS-INS_ELEM#85,INS-INS_ELEM#86,INS-INS_ELEM#87,INS-INS_ELEM#88,INS-INS_ELEM#89,INS-INS_ELEM#90,INS-INS_ELEM#91,INS-INS_ELEM#92,INS-INS_ELEM#93,INS-INS_ELEM#94,INS-INS_ELEM#95,EXT-EXT#1,EXT-EXT#2
pub const fn classify_impl_d0_7(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2b00,
    0x1 => 0x2901,
    0x2 => 0x2b00,
    0x3 => 0x2901,
    0x4 => 0x2b00,
    0x5 => 0x2901,
    0x6 => 0x2b00,
    0x7 => 0x2901,
    0x8 => 0x2b00,
    0x9 => 0x2901,
    0xa => 0x2b00,
    0xb => 0x2901,
    0xc => 0x2b00,
    0xd => 0x2901,
    0xe => 0x2b00,
    0xf => 0x2901,
    0x10 => 0x2b00,
    0x11 => 0x2901,
    0x12 => 0x2b00,
    0x13 => 0x2901,
    0x14 => 0x2b00,
    0x15 => 0x2901,
    0x16 => 0x2b00,
    0x17 => 0x2901,
    0x18 => 0x2b00,
    0x19 => 0x2901,
    0x1a => 0x2b00,
    0x1b => 0x2901,
    0x1c => 0x2b00,
    0x1d => 0x2901,
    0x1e => 0x2b00,
    0x1f => 0x2901,
    _ => 0,
  };
  return idx;
}


// INS-INS_ELEM#96,INS-INS_ELEM#97,INS-INS_ELEM#98,INS-INS_ELEM#99,INS-INS_ELEM#100,INS-INS_ELEM#101,INS-INS_ELEM#102,INS-INS_ELEM#103,INS-INS_ELEM#104,INS-INS_ELEM#105,INS-INS_ELEM#106,INS-INS_ELEM#107,INS-INS_ELEM#108,INS-INS_ELEM#109,INS-INS_ELEM#110,INS-INS_ELEM#111,EXT-EXT#1,EXT-EXT#2
pub const fn classify_impl_d0_8(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2b00,
    0x1 => 0x2901,
    0x2 => 0x2b00,
    0x3 => 0x2901,
    0x4 => 0x2b00,
    0x5 => 0x2901,
    0x6 => 0x2b00,
    0x7 => 0x2901,
    0x8 => 0x2b00,
    0x9 => 0x2901,
    0xa => 0x2b00,
    0xb => 0x2901,
    0xc => 0x2b00,
    0xd => 0x2901,
    0xe => 0x2b00,
    0xf => 0x2901,
    0x10 => 0x2b00,
    0x11 => 0x2901,
    0x12 => 0x2b00,
    0x13 => 0x2901,
    0x14 => 0x2b00,
    0x15 => 0x2901,
    0x16 => 0x2b00,
    0x17 => 0x2901,
    0x18 => 0x2b00,
    0x19 => 0x2901,
    0x1a => 0x2b00,
    0x1b => 0x2901,
    0x1c => 0x2b00,
    0x1d => 0x2901,
    0x1e => 0x2b00,
    0x1f => 0x2901,
    _ => 0,
  };
  return idx;
}


// INS-INS_ELEM#112,INS-INS_ELEM#113,INS-INS_ELEM#114,INS-INS_ELEM#115,INS-INS_ELEM#116,INS-INS_ELEM#117,INS-INS_ELEM#118,INS-INS_ELEM#119,INS-INS_ELEM#120,INS-INS_ELEM#121,INS-INS_ELEM#122,INS-INS_ELEM#123,INS-INS_ELEM#124,INS-INS_ELEM#125,INS-INS_ELEM#126,INS-INS_ELEM#127,EXT-EXT#1,EXT-EXT#2
pub const fn classify_impl_d0_9(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2b00,
    0x1 => 0x2901,
    0x2 => 0x2b00,
    0x3 => 0x2901,
    0x4 => 0x2b00,
    0x5 => 0x2901,
    0x6 => 0x2b00,
    0x7 => 0x2901,
    0x8 => 0x2b00,
    0x9 => 0x2901,
    0xa => 0x2b00,
    0xb => 0x2901,
    0xc => 0x2b00,
    0xd => 0x2901,
    0xe => 0x2b00,
    0xf => 0x2901,
    0x10 => 0x2b00,
    0x11 => 0x2901,
    0x12 => 0x2b00,
    0x13 => 0x2901,
    0x14 => 0x2b00,
    0x15 => 0x2901,
    0x16 => 0x2b00,
    0x17 => 0x2901,
    0x18 => 0x2b00,
    0x19 => 0x2901,
    0x1a => 0x2b00,
    0x1b => 0x2901,
    0x1c => 0x2b00,
    0x1d => 0x2901,
    0x1e => 0x2b00,
    0x1f => 0x2901,
    _ => 0,
  };
  return idx;
}


// INS-INS_ELEM#128,INS-INS_ELEM#129,INS-INS_ELEM#130,INS-INS_ELEM#131,INS-INS_ELEM#132,INS-INS_ELEM#133,INS-INS_ELEM#134,INS-INS_ELEM#135,INS-INS_ELEM#136,INS-INS_ELEM#137,INS-INS_ELEM#138,INS-INS_ELEM#139,INS-INS_ELEM#140,INS-INS_ELEM#141,INS-INS_ELEM#142,INS-INS_ELEM#143,EXT-EXT#1,EXT-EXT#2
pub const fn classify_impl_d0_a(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2b00,
    0x1 => 0x2901,
    0x2 => 0x2b00,
    0x3 => 0x2901,
    0x4 => 0x2b00,
    0x5 => 0x2901,
    0x6 => 0x2b00,
    0x7 => 0x2901,
    0x8 => 0x2b00,
    0x9 => 0x2901,
    0xa => 0x2b00,
    0xb => 0x2901,
    0xc => 0x2b00,
    0xd => 0x2901,
    0xe => 0x2b00,
    0xf => 0x2901,
    0x10 => 0x2b00,
    0x11 => 0x2901,
    0x12 => 0x2b00,
    0x13 => 0x2901,
    0x14 => 0x2b00,
    0x15 => 0x2901,
    0x16 => 0x2b00,
    0x17 => 0x2901,
    0x18 => 0x2b00,
    0x19 => 0x2901,
    0x1a => 0x2b00,
    0x1b => 0x2901,
    0x1c => 0x2b00,
    0x1d => 0x2901,
    0x1e => 0x2b00,
    0x1f => 0x2901,
    _ => 0,
  };
  return idx;
}


// INS-INS_ELEM#144,INS-INS_ELEM#145,INS-INS_ELEM#146,INS-INS_ELEM#147,INS-INS_ELEM#148,INS-INS_ELEM#149,INS-INS_ELEM#150,INS-INS_ELEM#151,INS-INS_ELEM#152,INS-INS_ELEM#153,INS-INS_ELEM#154,INS-INS_ELEM#155,INS-INS_ELEM#156,INS-INS_ELEM#157,INS-INS_ELEM#158,INS-INS_ELEM#159,EXT-EXT#1,EXT-EXT#2
pub const fn classify_impl_d0_b(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2b00,
    0x1 => 0x2901,
    0x2 => 0x2b00,
    0x3 => 0x2901,
    0x4 => 0x2b00,
    0x5 => 0x2901,
    0x6 => 0x2b00,
    0x7 => 0x2901,
    0x8 => 0x2b00,
    0x9 => 0x2901,
    0xa => 0x2b00,
    0xb => 0x2901,
    0xc => 0x2b00,
    0xd => 0x2901,
    0xe => 0x2b00,
    0xf => 0x2901,
    0x10 => 0x2b00,
    0x11 => 0x2901,
    0x12 => 0x2b00,
    0x13 => 0x2901,
    0x14 => 0x2b00,
    0x15 => 0x2901,
    0x16 => 0x2b00,
    0x17 => 0x2901,
    0x18 => 0x2b00,
    0x19 => 0x2901,
    0x1a => 0x2b00,
    0x1b => 0x2901,
    0x1c => 0x2b00,
    0x1d => 0x2901,
    0x1e => 0x2b00,
    0x1f => 0x2901,
    _ => 0,
  };
  return idx;
}


// INS-INS_ELEM#160,INS-INS_ELEM#161,INS-INS_ELEM#162,INS-INS_ELEM#163,INS-INS_ELEM#164,INS-INS_ELEM#165,INS-INS_ELEM#166,INS-INS_ELEM#167,INS-INS_ELEM#168,INS-INS_ELEM#169,INS-INS_ELEM#170,INS-INS_ELEM#171,INS-INS_ELEM#172,INS-INS_ELEM#173,INS-INS_ELEM#174,INS-INS_ELEM#175,EXT-EXT#1,EXT-EXT#2
pub const fn classify_impl_d0_c(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2b00,
    0x1 => 0x2901,
    0x2 => 0x2b00,
    0x3 => 0x2901,
    0x4 => 0x2b00,
    0x5 => 0x2901,
    0x6 => 0x2b00,
    0x7 => 0x2901,
    0x8 => 0x2b00,
    0x9 => 0x2901,
    0xa => 0x2b00,
    0xb => 0x2901,
    0xc => 0x2b00,
    0xd => 0x2901,
    0xe => 0x2b00,
    0xf => 0x2901,
    0x10 => 0x2b00,
    0x11 => 0x2901,
    0x12 => 0x2b00,
    0x13 => 0x2901,
    0x14 => 0x2b00,
    0x15 => 0x2901,
    0x16 => 0x2b00,
    0x17 => 0x2901,
    0x18 => 0x2b00,
    0x19 => 0x2901,
    0x1a => 0x2b00,
    0x1b => 0x2901,
    0x1c => 0x2b00,
    0x1d => 0x2901,
    0x1e => 0x2b00,
    0x1f => 0x2901,
    _ => 0,
  };
  return idx;
}


// INS-INS_ELEM#176,INS-INS_ELEM#177,INS-INS_ELEM#178,INS-INS_ELEM#179,INS-INS_ELEM#180,INS-INS_ELEM#181,INS-INS_ELEM#182,INS-INS_ELEM#183,INS-INS_ELEM#184,INS-INS_ELEM#185,INS-INS_ELEM#186,INS-INS_ELEM#187,INS-INS_ELEM#188,INS-INS_ELEM#189,INS-INS_ELEM#190,INS-INS_ELEM#191,EXT-EXT#1,EXT-EXT#2
pub const fn classify_impl_d0_d(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2b00,
    0x1 => 0x2901,
    0x2 => 0x2b00,
    0x3 => 0x2901,
    0x4 => 0x2b00,
    0x5 => 0x2901,
    0x6 => 0x2b00,
    0x7 => 0x2901,
    0x8 => 0x2b00,
    0x9 => 0x2901,
    0xa => 0x2b00,
    0xb => 0x2901,
    0xc => 0x2b00,
    0xd => 0x2901,
    0xe => 0x2b00,
    0xf => 0x2901,
    0x10 => 0x2b00,
    0x11 => 0x2901,
    0x12 => 0x2b00,
    0x13 => 0x2901,
    0x14 => 0x2b00,
    0x15 => 0x2901,
    0x16 => 0x2b00,
    0x17 => 0x2901,
    0x18 => 0x2b00,
    0x19 => 0x2901,
    0x1a => 0x2b00,
    0x1b => 0x2901,
    0x1c => 0x2b00,
    0x1d => 0x2901,
    0x1e => 0x2b00,
    0x1f => 0x2901,
    _ => 0,
  };
  return idx;
}


// INS-INS_ELEM#192,INS-INS_ELEM#193,INS-INS_ELEM#194,INS-INS_ELEM#195,INS-INS_ELEM#196,INS-INS_ELEM#197,INS-INS_ELEM#198,INS-INS_ELEM#199,INS-INS_ELEM#200,INS-INS_ELEM#201,INS-INS_ELEM#202,INS-INS_ELEM#203,INS-INS_ELEM#204,INS-INS_ELEM#205,INS-INS_ELEM#206,INS-INS_ELEM#207,EXT-EXT#1,EXT-EXT#2
pub const fn classify_impl_d0_e(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2b00,
    0x1 => 0x2901,
    0x2 => 0x2b00,
    0x3 => 0x2901,
    0x4 => 0x2b00,
    0x5 => 0x2901,
    0x6 => 0x2b00,
    0x7 => 0x2901,
    0x8 => 0x2b00,
    0x9 => 0x2901,
    0xa => 0x2b00,
    0xb => 0x2901,
    0xc => 0x2b00,
    0xd => 0x2901,
    0xe => 0x2b00,
    0xf => 0x2901,
    0x10 => 0x2b00,
    0x11 => 0x2901,
    0x12 => 0x2b00,
    0x13 => 0x2901,
    0x14 => 0x2b00,
    0x15 => 0x2901,
    0x16 => 0x2b00,
    0x17 => 0x2901,
    0x18 => 0x2b00,
    0x19 => 0x2901,
    0x1a => 0x2b00,
    0x1b => 0x2901,
    0x1c => 0x2b00,
    0x1d => 0x2901,
    0x1e => 0x2b00,
    0x1f => 0x2901,
    _ => 0,
  };
  return idx;
}


// INS-INS_ELEM#208,INS-INS_ELEM#209,INS-INS_ELEM#210,INS-INS_ELEM#211,INS-INS_ELEM#212,INS-INS_ELEM#213,INS-INS_ELEM#214,INS-INS_ELEM#215,INS-INS_ELEM#216,INS-INS_ELEM#217,INS-INS_ELEM#218,INS-INS_ELEM#219,INS-INS_ELEM#220,INS-INS_ELEM#221,INS-INS_ELEM#222,INS-INS_ELEM#223,EXT-EXT#1,EXT-EXT#2
pub const fn classify_impl_d0_f(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2b00,
    0x1 => 0x2901,
    0x2 => 0x2b00,
    0x3 => 0x2901,
    0x4 => 0x2b00,
    0x5 => 0x2901,
    0x6 => 0x2b00,
    0x7 => 0x2901,
    0x8 => 0x2b00,
    0x9 => 0x2901,
    0xa => 0x2b00,
    0xb => 0x2901,
    0xc => 0x2b00,
    0xd => 0x2901,
    0xe => 0x2b00,
    0xf => 0x2901,
    0x10 => 0x2b00,
    0x11 => 0x2901,
    0x12 => 0x2b00,
    0x13 => 0x2901,
    0x14 => 0x2b00,
    0x15 => 0x2901,
    0x16 => 0x2b00,
    0x17 => 0x2901,
    0x18 => 0x2b00,
    0x19 => 0x2901,
    0x1a => 0x2b00,
    0x1b => 0x2901,
    0x1c => 0x2b00,
    0x1d => 0x2901,
    0x1e => 0x2b00,
    0x1f => 0x2901,
    _ => 0,
  };
  return idx;
}


// INS-INS_ELEM#224,INS-INS_ELEM#225,INS-INS_ELEM#226,INS-INS_ELEM#227,INS-INS_ELEM#228,INS-INS_ELEM#229,INS-INS_ELEM#230,INS-INS_ELEM#231,INS-INS_ELEM#232,INS-INS_ELEM#233,INS-INS_ELEM#234,INS-INS_ELEM#235,INS-INS_ELEM#236,INS-INS_ELEM#237,INS-INS_ELEM#238,INS-INS_ELEM#239,EXT-EXT#1,EXT-EXT#2
pub const fn classify_impl_d0_10(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x2b00,
    0x1 => 0x2901,
    0x2 => 0x2b00,
    0x3 => 0x2901,
    0x4 => 0x2b00,
    0x5 => 0x2901,
    0x6 => 0x2b00,
    0x7 => 0x2901,
    0x8 => 0x2b00,
    0x9 => 0x2901,
    0xa => 0x2b00,
    0xb => 0x2901,
    0xc => 0x2b00,
    0xd => 0x2901,
    0xe => 0x2b00,
    0xf => 0x2901,
    0x10 => 0x2b00,
    0x11 => 0x2901,
    0x12 => 0x2b00,
    0x13 => 0x2901,
    0x14 => 0x2b00,
    0x15 => 0x2901,
    0x16 => 0x2b00,
    0x17 => 0x2901,
    0x18 => 0x2b00,
    0x19 => 0x2901,
    0x1a => 0x2b00,
    0x1b => 0x2901,
    0x1c => 0x2b00,
    0x1d => 0x2901,
    0x1e => 0x2b00,
    0x1f => 0x2901,
    _ => 0,
  };
  return idx;
}

// INS-INS_ELEM#0,INS-INS_ELEM#1,INS-INS_ELEM#2,INS-INS_ELEM#3,INS-INS_ELEM#4,INS-INS_ELEM#5,INS-INS_ELEM#6,INS-INS_ELEM#7,INS-INS_ELEM#8,INS-INS_ELEM#9,INS-INS_ELEM#10,INS-INS_ELEM#11,INS-INS_ELEM#12,INS-INS_ELEM#13,INS-INS_ELEM#14,INS-INS_ELEM#15,INS-INS_ELEM#16,INS-INS_ELEM#17,INS-INS_ELEM#18,INS-INS_ELEM#19,INS-INS_ELEM#20,INS-INS_ELEM#21,INS-INS_ELEM#22,INS-INS_ELEM#23,INS-INS_ELEM#24,INS-INS_ELEM#25,INS-INS_ELEM#26,INS-INS_ELEM#27,INS-INS_ELEM#28,INS-INS_ELEM#29,INS-INS_ELEM#30,INS-INS_ELEM#31,INS-INS_ELEM#32,INS-INS_ELEM#33,INS-INS_ELEM#34,INS-INS_ELEM#35,INS-INS_ELEM#36,INS-INS_ELEM#37,INS-INS_ELEM#38,INS-INS_ELEM#39,INS-INS_ELEM#40,INS-INS_ELEM#41,INS-INS_ELEM#42,INS-INS_ELEM#43,INS-INS_ELEM#44,INS-INS_ELEM#45,INS-INS_ELEM#46,INS-INS_ELEM#47,INS-INS_ELEM#48,INS-INS_ELEM#49,INS-INS_ELEM#50,INS-INS_ELEM#51,INS-INS_ELEM#52,INS-INS_ELEM#53,INS-INS_ELEM#54,INS-INS_ELEM#55,INS-INS_ELEM#56,INS-INS_ELEM#57,INS-INS_ELEM#58,INS-INS_ELEM#59,INS-INS_ELEM#60,INS-INS_ELEM#61,INS-INS_ELEM#62,INS-INS_ELEM#63,INS-INS_ELEM#64,INS-INS_ELEM#65,INS-INS_ELEM#66,INS-INS_ELEM#67,INS-INS_ELEM#68,INS-INS_ELEM#69,INS-INS_ELEM#70,INS-INS_ELEM#71,INS-INS_ELEM#72,INS-INS_ELEM#73,INS-INS_ELEM#74,INS-INS_ELEM#75,INS-INS_ELEM#76,INS-INS_ELEM#77,INS-INS_ELEM#78,INS-INS_ELEM#79,INS-INS_ELEM#80,INS-INS_ELEM#81,INS-INS_ELEM#82,INS-INS_ELEM#83,INS-INS_ELEM#84,INS-INS_ELEM#85,INS-INS_ELEM#86,INS-INS_ELEM#87,INS-INS_ELEM#88,INS-INS_ELEM#89,INS-INS_ELEM#90,INS-INS_ELEM#91,INS-INS_ELEM#92,INS-INS_ELEM#93,INS-INS_ELEM#94,INS-INS_ELEM#95,INS-INS_ELEM#96,INS-INS_ELEM#97,INS-INS_ELEM#98,INS-INS_ELEM#99,INS-INS_ELEM#100,INS-INS_ELEM#101,INS-INS_ELEM#102,INS-INS_ELEM#103,INS-INS_ELEM#104,INS-INS_ELEM#105,INS-INS_ELEM#106,INS-INS_ELEM#107,INS-INS_ELEM#108,INS-INS_ELEM#109,INS-INS_ELEM#110,INS-INS_ELEM#111,INS-INS_ELEM#112,INS-INS_ELEM#113,INS-INS_ELEM#114,INS-INS_ELEM#115,INS-INS_ELEM#116,INS-INS_ELEM#117,INS-INS_ELEM#118,INS-INS_ELEM#119,INS-INS_ELEM#120,INS-INS_ELEM#121,INS-INS_ELEM#122,INS-INS_ELEM#123,INS-INS_ELEM#124,INS-INS_ELEM#125,INS-INS_ELEM#126,INS-INS_ELEM#127,INS-INS_ELEM#128,INS-INS_ELEM#129,INS-INS_ELEM#130,INS-INS_ELEM#131,INS-INS_ELEM#132,INS-INS_ELEM#133,INS-INS_ELEM#134,INS-INS_ELEM#135,INS-INS_ELEM#136,INS-INS_ELEM#137,INS-INS_ELEM#138,INS-INS_ELEM#139,INS-INS_ELEM#140,INS-INS_ELEM#141,INS-INS_ELEM#142,INS-INS_ELEM#143,INS-INS_ELEM#144,INS-INS_ELEM#145,INS-INS_ELEM#146,INS-INS_ELEM#147,INS-INS_ELEM#148,INS-INS_ELEM#149,INS-INS_ELEM#150,INS-INS_ELEM#151,INS-INS_ELEM#152,INS-INS_ELEM#153,INS-INS_ELEM#154,INS-INS_ELEM#155,INS-INS_ELEM#156,INS-INS_ELEM#157,INS-INS_ELEM#158,INS-INS_ELEM#159,INS-INS_ELEM#160,INS-INS_ELEM#161,INS-INS_ELEM#162,INS-INS_ELEM#163,INS-INS_ELEM#164,INS-INS_ELEM#165,INS-INS_ELEM#166,INS-INS_ELEM#167,INS-INS_ELEM#168,INS-INS_ELEM#169,INS-INS_ELEM#170,INS-INS_ELEM#171,INS-INS_ELEM#172,INS-INS_ELEM#173,INS-INS_ELEM#174,INS-INS_ELEM#175,INS-INS_ELEM#176,INS-INS_ELEM#177,INS-INS_ELEM#178,INS-INS_ELEM#179,INS-INS_ELEM#180,INS-INS_ELEM#181,INS-INS_ELEM#182,INS-INS_ELEM#183,INS-INS_ELEM#184,INS-INS_ELEM#185,INS-INS_ELEM#186,INS-INS_ELEM#187,INS-INS_ELEM#188,INS-INS_ELEM#189,INS-INS_ELEM#190,INS-INS_ELEM#191,INS-INS_ELEM#192,INS-INS_ELEM#193,INS-INS_ELEM#194,INS-INS_ELEM#195,INS-INS_ELEM#196,INS-INS_ELEM#197,INS-INS_ELEM#198,INS-INS_ELEM#199,INS-INS_ELEM#200,INS-INS_ELEM#201,INS-INS_ELEM#202,INS-INS_ELEM#203,INS-INS_ELEM#204,INS-INS_ELEM#205,INS-INS_ELEM#206,INS-INS_ELEM#207,INS-INS_ELEM#208,INS-INS_ELEM#209,INS-INS_ELEM#210,INS-INS_ELEM#211,INS-INS_ELEM#212,INS-INS_ELEM#213,INS-INS_ELEM#214,INS-INS_ELEM#215,INS-INS_ELEM#216,INS-INS_ELEM#217,INS-INS_ELEM#218,INS-INS_ELEM#219,INS-INS_ELEM#220,INS-INS_ELEM#221,INS-INS_ELEM#222,INS-INS_ELEM#223,INS-INS_ELEM#224,INS-INS_ELEM#225,INS-INS_ELEM#226,INS-INS_ELEM#227,INS-INS_ELEM#228,INS-INS_ELEM#229,INS-INS_ELEM#230,INS-INS_ELEM#231,INS-INS_ELEM#232,INS-INS_ELEM#233,INS-INS_ELEM#234,INS-INS_ELEM#235,INS-INS_ELEM#236,INS-INS_ELEM#237,INS-INS_ELEM#238,INS-INS_ELEM#239,EXT-EXT#1,EXT-EXT#2
pub const fn classify_impl_d0(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  let idx = match (inst >> 16) & 0xf {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x8,
    0x8 => 0x9,
    0x9 => 0xa,
    0xa => 0xb,
    0xb => 0xc,
    0xc => 0xd,
    0xd => 0xe,
    0xe => 0xf,
    0xf => 0x10,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_d0_1(inst), // EXT-EXT#1,EXT-EXT#2
    0x2 => return classify_impl_d0_2(inst), // INS-INS_ELEM#0,INS-INS_ELEM#1,INS-INS_ELEM#2,INS-INS_ELEM#3,INS-INS_ELEM#4,INS-INS_ELEM#5,INS-INS_ELEM#6,INS-INS_ELEM#7,INS-INS_ELEM#8,INS-INS_ELEM#9,INS-INS_ELEM#10,INS-INS_ELEM#11,INS-INS_ELEM#12,INS-INS_ELEM#13,INS-INS_ELEM#14,INS-INS_ELEM#15,EXT-EXT#1,EXT-EXT#2
    0x3 => return classify_impl_d0_3(inst), // INS-INS_ELEM#16,INS-INS_ELEM#17,INS-INS_ELEM#18,INS-INS_ELEM#19,INS-INS_ELEM#20,INS-INS_ELEM#21,INS-INS_ELEM#22,INS-INS_ELEM#23,INS-INS_ELEM#24,INS-INS_ELEM#25,INS-INS_ELEM#26,INS-INS_ELEM#27,INS-INS_ELEM#28,INS-INS_ELEM#29,INS-INS_ELEM#30,INS-INS_ELEM#31,EXT-EXT#1,EXT-EXT#2
    0x4 => return classify_impl_d0_4(inst), // INS-INS_ELEM#32,INS-INS_ELEM#33,INS-INS_ELEM#34,INS-INS_ELEM#35,INS-INS_ELEM#36,INS-INS_ELEM#37,INS-INS_ELEM#38,INS-INS_ELEM#39,INS-INS_ELEM#40,INS-INS_ELEM#41,INS-INS_ELEM#42,INS-INS_ELEM#43,INS-INS_ELEM#44,INS-INS_ELEM#45,INS-INS_ELEM#46,INS-INS_ELEM#47,EXT-EXT#1,EXT-EXT#2
    0x5 => return classify_impl_d0_5(inst), // INS-INS_ELEM#48,INS-INS_ELEM#49,INS-INS_ELEM#50,INS-INS_ELEM#51,INS-INS_ELEM#52,INS-INS_ELEM#53,INS-INS_ELEM#54,INS-INS_ELEM#55,INS-INS_ELEM#56,INS-INS_ELEM#57,INS-INS_ELEM#58,INS-INS_ELEM#59,INS-INS_ELEM#60,INS-INS_ELEM#61,INS-INS_ELEM#62,INS-INS_ELEM#63,EXT-EXT#1,EXT-EXT#2
    0x6 => return classify_impl_d0_6(inst), // INS-INS_ELEM#64,INS-INS_ELEM#65,INS-INS_ELEM#66,INS-INS_ELEM#67,INS-INS_ELEM#68,INS-INS_ELEM#69,INS-INS_ELEM#70,INS-INS_ELEM#71,INS-INS_ELEM#72,INS-INS_ELEM#73,INS-INS_ELEM#74,INS-INS_ELEM#75,INS-INS_ELEM#76,INS-INS_ELEM#77,INS-INS_ELEM#78,INS-INS_ELEM#79,EXT-EXT#1,EXT-EXT#2
    0x7 => return classify_impl_d0_7(inst), // INS-INS_ELEM#80,INS-INS_ELEM#81,INS-INS_ELEM#82,INS-INS_ELEM#83,INS-INS_ELEM#84,INS-INS_ELEM#85,INS-INS_ELEM#86,INS-INS_ELEM#87,INS-INS_ELEM#88,INS-INS_ELEM#89,INS-INS_ELEM#90,INS-INS_ELEM#91,INS-INS_ELEM#92,INS-INS_ELEM#93,INS-INS_ELEM#94,INS-INS_ELEM#95,EXT-EXT#1,EXT-EXT#2
    0x8 => return classify_impl_d0_8(inst), // INS-INS_ELEM#96,INS-INS_ELEM#97,INS-INS_ELEM#98,INS-INS_ELEM#99,INS-INS_ELEM#100,INS-INS_ELEM#101,INS-INS_ELEM#102,INS-INS_ELEM#103,INS-INS_ELEM#104,INS-INS_ELEM#105,INS-INS_ELEM#106,INS-INS_ELEM#107,INS-INS_ELEM#108,INS-INS_ELEM#109,INS-INS_ELEM#110,INS-INS_ELEM#111,EXT-EXT#1,EXT-EXT#2
    0x9 => return classify_impl_d0_9(inst), // INS-INS_ELEM#112,INS-INS_ELEM#113,INS-INS_ELEM#114,INS-INS_ELEM#115,INS-INS_ELEM#116,INS-INS_ELEM#117,INS-INS_ELEM#118,INS-INS_ELEM#119,INS-INS_ELEM#120,INS-INS_ELEM#121,INS-INS_ELEM#122,INS-INS_ELEM#123,INS-INS_ELEM#124,INS-INS_ELEM#125,INS-INS_ELEM#126,INS-INS_ELEM#127,EXT-EXT#1,EXT-EXT#2
    0xa => return classify_impl_d0_a(inst), // INS-INS_ELEM#128,INS-INS_ELEM#129,INS-INS_ELEM#130,INS-INS_ELEM#131,INS-INS_ELEM#132,INS-INS_ELEM#133,INS-INS_ELEM#134,INS-INS_ELEM#135,INS-INS_ELEM#136,INS-INS_ELEM#137,INS-INS_ELEM#138,INS-INS_ELEM#139,INS-INS_ELEM#140,INS-INS_ELEM#141,INS-INS_ELEM#142,INS-INS_ELEM#143,EXT-EXT#1,EXT-EXT#2
    0xb => return classify_impl_d0_b(inst), // INS-INS_ELEM#144,INS-INS_ELEM#145,INS-INS_ELEM#146,INS-INS_ELEM#147,INS-INS_ELEM#148,INS-INS_ELEM#149,INS-INS_ELEM#150,INS-INS_ELEM#151,INS-INS_ELEM#152,INS-INS_ELEM#153,INS-INS_ELEM#154,INS-INS_ELEM#155,INS-INS_ELEM#156,INS-INS_ELEM#157,INS-INS_ELEM#158,INS-INS_ELEM#159,EXT-EXT#1,EXT-EXT#2
    0xc => return classify_impl_d0_c(inst), // INS-INS_ELEM#160,INS-INS_ELEM#161,INS-INS_ELEM#162,INS-INS_ELEM#163,INS-INS_ELEM#164,INS-INS_ELEM#165,INS-INS_ELEM#166,INS-INS_ELEM#167,INS-INS_ELEM#168,INS-INS_ELEM#169,INS-INS_ELEM#170,INS-INS_ELEM#171,INS-INS_ELEM#172,INS-INS_ELEM#173,INS-INS_ELEM#174,INS-INS_ELEM#175,EXT-EXT#1,EXT-EXT#2
    0xd => return classify_impl_d0_d(inst), // INS-INS_ELEM#176,INS-INS_ELEM#177,INS-INS_ELEM#178,INS-INS_ELEM#179,INS-INS_ELEM#180,INS-INS_ELEM#181,INS-INS_ELEM#182,INS-INS_ELEM#183,INS-INS_ELEM#184,INS-INS_ELEM#185,INS-INS_ELEM#186,INS-INS_ELEM#187,INS-INS_ELEM#188,INS-INS_ELEM#189,INS-INS_ELEM#190,INS-INS_ELEM#191,EXT-EXT#1,EXT-EXT#2
    0xe => return classify_impl_d0_e(inst), // INS-INS_ELEM#192,INS-INS_ELEM#193,INS-INS_ELEM#194,INS-INS_ELEM#195,INS-INS_ELEM#196,INS-INS_ELEM#197,INS-INS_ELEM#198,INS-INS_ELEM#199,INS-INS_ELEM#200,INS-INS_ELEM#201,INS-INS_ELEM#202,INS-INS_ELEM#203,INS-INS_ELEM#204,INS-INS_ELEM#205,INS-INS_ELEM#206,INS-INS_ELEM#207,EXT-EXT#1,EXT-EXT#2
    0xf => return classify_impl_d0_f(inst), // INS-INS_ELEM#208,INS-INS_ELEM#209,INS-INS_ELEM#210,INS-INS_ELEM#211,INS-INS_ELEM#212,INS-INS_ELEM#213,INS-INS_ELEM#214,INS-INS_ELEM#215,INS-INS_ELEM#216,INS-INS_ELEM#217,INS-INS_ELEM#218,INS-INS_ELEM#219,INS-INS_ELEM#220,INS-INS_ELEM#221,INS-INS_ELEM#222,INS-INS_ELEM#223,EXT-EXT#1,EXT-EXT#2
    0x10 => return classify_impl_d0_10(inst), // INS-INS_ELEM#224,INS-INS_ELEM#225,INS-INS_ELEM#226,INS-INS_ELEM#227,INS-INS_ELEM#228,INS-INS_ELEM#229,INS-INS_ELEM#230,INS-INS_ELEM#231,INS-INS_ELEM#232,INS-INS_ELEM#233,INS-INS_ELEM#234,INS-INS_ELEM#235,INS-INS_ELEM#236,INS-INS_ELEM#237,INS-INS_ELEM#238,INS-INS_ELEM#239,EXT-EXT#1,EXT-EXT#2
    _ => idx
  };
  return idx;
}


// REV_VEC-REV32_VEC#0
pub const fn classify_impl_d1_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3282;
}


// ADDLP_VEC-UADDLP#0
pub const fn classify_impl_d1_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3102;
}


// ARITH1_VEC-USQADD_VEC#3
pub const fn classify_impl_d1_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3083;
}


// CLZ_VEC-CLZ_VEC#0
pub const fn classify_impl_d1_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3181;
}


// BIT_VEC-NOT_VEC#0
pub const fn classify_impl_d1_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3201;
}


// ADDLP_VEC-UADALP#0
pub const fn classify_impl_d1_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3103;
}


// ARITH1_VEC-SQNEG_VEC#3
pub const fn classify_impl_d1_7(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3084;
}


// CMZERO_VEC-CMGE_ZERO_VEC#3
pub const fn classify_impl_d1_8(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f83;
}


// CMZERO_VEC-CMLE_ZERO_VEC#3
pub const fn classify_impl_d1_9(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f84;
}


// ARITH1_VEC-NEG_VEC#3
pub const fn classify_impl_d1_a(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3085;
}


// XTN_VEC-SQXTUN2_VEC#0
pub const fn classify_impl_d1_b(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3386;
}


// SHLL_VEC_ESZ-SHLL2_VEC_ESZ#0
pub const fn classify_impl_d1_c(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4c01;
}


// XTN_VEC-UQXTN2_VEC#0
pub const fn classify_impl_d1_d(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3387;
}


// FRINT_VEC-FRINTA_VEC#1
pub const fn classify_impl_d1_e(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5204;
}


// FRINT_VEC-FRINTX_VEC#1
pub const fn classify_impl_d1_f(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5205;
}


// FCVT_VEC-FCVTNU_VEC#1
pub const fn classify_impl_d1_10(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f05;
}


// FCVT_VEC-FCVTMU_VEC#1
pub const fn classify_impl_d1_11(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f06;
}


// FCVT_VEC-FCVTAU_VEC#1
pub const fn classify_impl_d1_12(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f07;
}


// FCVT_FROMINT_VEC-UCVTF_VEC#1
pub const fn classify_impl_d1_13(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5081;
}


// FRINTTS_VEC-FRINT32X_VEC#1
pub const fn classify_impl_d1_14(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5282;
}


// FRINTTS_VEC-FRINT64X_VEC#1
pub const fn classify_impl_d1_15(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5283;
}

// HADDSUB_VEC-UHADD#0,HADDSUB_VEC-URHADD#0,HADDSUB_VEC-UHSUB#0,QADDSUB_VEC-UQADD#3,QADDSUB_VEC-UQSUB#3,CMGT_VEC-CMHIV#3,CMGT_VEC-CMHSV#3,CMEQ_VEC-CMEQV#3,CMZERO_VEC-CMGE_ZERO_VEC#3,CMZERO_VEC-CMLE_ZERO_VEC#3,ARITH1_VEC-USQADD_VEC#3,ARITH1_VEC-SQNEG_VEC#3,ARITH1_VEC-NEG_VEC#3,ADDLP_VEC-UADDLP#0,ADDLP_VEC-UADALP#0,CLZ_VEC-CLZ_VEC#0,BIT_VEC-NOT_VEC#0,REV_VEC-REV32_VEC#0,XTN_VEC-SQXTUN2_VEC#0,XTN_VEC-UQXTN2_VEC#0,SHL_REG_VEC-USHL#3,SHL_REG_VEC-UQSHL#3,SHL_REG_VEC-URSHL#3,SHL_REG_VEC-UQRSHL#3,MINMAX_VEC-UMAX#0,MINMAX_VEC-UMIN#0,MINMAX_VEC-UMAXP#0,MINMAX_VEC-UMINP#0,ABD_VEC-UABD#0,ABD_VEC-UABA#0,ADDSUB_VEC-SUB_VEC#3,MUL_VEC-MLS_VEC#0,MUL_VEC-PMUL_VEC#0,FMINMAX_VEC-FMAXNMP_VEC#1,FMINMAX_VEC-FMAXP_VEC#1,FCMP_REG_VEC-FCMGE_VEC#1,FCMP_REG_VEC-FACGE_VEC#1,FADDSUB_VEC-FADDP_VEC#1,FMUL_VEC-FMULV#1,FDIV_VEC-FDIVV#1,ANDOREOR_VEC-EORV#0,ADDSUBL_VEC-UADDL2#0,ADDSUBL_VEC-USUBL2#0,ADDSUBW_VEC-UADDW2#0,ADDSUBW_VEC-USUBW2#0,ADDSUBHN_VEC-RADDHN2#0,ADDSUBHN_VEC-RSUBHN2#0,ABDL_VEC-UABAL2#0,ABDL_VEC-UABDL2#0,MULL_VEC-UMLAL2#0,MULL_VEC-UMLSL2#0,MULL_VEC-UMULL2#0,SHLL_VEC_ESZ-SHLL2_VEC_ESZ#0,FCVT_VEC-FCVTNU_VEC#1,FCVT_VEC-FCVTMU_VEC#1,FCVT_VEC-FCVTAU_VEC#1,FCVT_FROMINT_VEC-UCVTF_VEC#1,FRINT_VEC-FRINTA_VEC#1,FRINT_VEC-FRINTX_VEC#1,FRINTTS_VEC-FRINT32X_VEC#1,FRINTTS_VEC-FRINT64X_VEC#1,FHM_VEC-FMLAL2_VEC#0
pub const fn classify_impl_d1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x4386,
    0x1 => 0x2b83,
    0x2 => 0x1,
    0x3 => 0x2c82,
    0x4 => 0x4406,
    0x5 => 0x2b84,
    0x6 => 0x0,
    0x7 => 0x4304,
    0x8 => 0x4387,
    0x9 => 0x2b85,
    0xa => 0x2,
    0xb => 0x2c83,
    0xc => 0x4407,
    0xd => 0x2d82,
    0xe => 0x3,
    0xf => 0x2d83,
    0x10 => 0x4486,
    0x11 => 0x3484,
    0x12 => 0x4,
    0x13 => 0x3485,
    0x14 => 0x4506,
    0x15 => 0x3486,
    0x16 => 0x5,
    0x17 => 0x3487,
    0x18 => 0x4487,
    0x19 => 0x3504,
    0x1a => 0x6,
    0x1b => 0x3505,
    0x1c => 0x4507,
    0x1d => 0x3582,
    0x1e => 0x7,
    0x1f => 0x3583,
    0x20 => 0x4589,
    0x21 => 0x3681,
    0x22 => 0x8,
    0x23 => 0x2e81,
    0x24 => 0x0,
    0x25 => 0x3782,
    0x26 => 0x9,
    0x27 => 0x3783,
    0x28 => 0x458a,
    0x29 => 0x3506,
    0x2a => 0x0,
    0x2b => 0x3507,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0xa,
    0x2f => 0x0,
    0x30 => 0x458b,
    0x31 => 0x3904,
    0x32 => 0x0,
    0x33 => 0x5b02,
    0x34 => 0x0,
    0x35 => 0x3c82,
    0x36 => 0x0,
    0x37 => 0x3f81,
    0x38 => 0x0,
    0x39 => 0x3a81,
    0x3a => 0x0,
    0x3b => 0x3a82,
    0x3c => 0x0,
    0x3d => 0x3905,
    0x3e => 0x0,
    0x3f => 0x4080,
    0x40 => 0x4386,
    0x41 => 0x2b83,
    0x42 => 0x0,
    0x43 => 0x2c82,
    0x44 => 0x4406,
    0x45 => 0x2b84,
    0x46 => 0x0,
    0x47 => 0x4304,
    0x48 => 0x4387,
    0x49 => 0x2b85,
    0x4a => 0xb,
    0x4b => 0x2c83,
    0x4c => 0x4407,
    0x4d => 0x2d82,
    0x4e => 0xc,
    0x4f => 0x2d83,
    0x50 => 0x4486,
    0x51 => 0x3484,
    0x52 => 0xd,
    0x53 => 0x3485,
    0x54 => 0x4506,
    0x55 => 0x3486,
    0x56 => 0x0,
    0x57 => 0x3487,
    0x58 => 0x4487,
    0x59 => 0x3504,
    0x5a => 0x0,
    0x5b => 0x3505,
    0x5c => 0x4507,
    0x5d => 0x3582,
    0x5e => 0x0,
    0x5f => 0x3583,
    0x60 => 0x4589,
    0x61 => 0x3681,
    0x62 => 0xe,
    0x63 => 0x2e81,
    0x64 => 0x0,
    0x65 => 0x3782,
    0x66 => 0xf,
    0x67 => 0x3783,
    0x68 => 0x458a,
    0x69 => 0x3506,
    0x6a => 0x10,
    0x6b => 0x3507,
    0x6c => 0x0,
    0x6d => 0x0,
    0x6e => 0x11,
    0x6f => 0x0,
    0x70 => 0x458b,
    0x71 => 0x3904,
    0x72 => 0x12,
    0x73 => 0x5b02,
    0x74 => 0x0,
    0x75 => 0x3c82,
    0x76 => 0x13,
    0x77 => 0x3f81,
    0x78 => 0x0,
    0x79 => 0x3a81,
    0x7a => 0x14,
    0x7b => 0x3a82,
    0x7c => 0x0,
    0x7d => 0x3905,
    0x7e => 0x15,
    0x7f => 0x4080,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_d1_1(inst), // REV_VEC-REV32_VEC#0
    0x2 => return classify_impl_d1_2(inst), // ADDLP_VEC-UADDLP#0
    0x3 => return classify_impl_d1_3(inst), // ARITH1_VEC-USQADD_VEC#3
    0x4 => return classify_impl_d1_4(inst), // CLZ_VEC-CLZ_VEC#0
    0x5 => return classify_impl_d1_5(inst), // BIT_VEC-NOT_VEC#0
    0x6 => return classify_impl_d1_6(inst), // ADDLP_VEC-UADALP#0
    0x7 => return classify_impl_d1_7(inst), // ARITH1_VEC-SQNEG_VEC#3
    0x8 => return classify_impl_d1_8(inst), // CMZERO_VEC-CMGE_ZERO_VEC#3
    0x9 => return classify_impl_d1_9(inst), // CMZERO_VEC-CMLE_ZERO_VEC#3
    0xa => return classify_impl_d1_a(inst), // ARITH1_VEC-NEG_VEC#3
    0xb => return classify_impl_d1_b(inst), // XTN_VEC-SQXTUN2_VEC#0
    0xc => return classify_impl_d1_c(inst), // SHLL_VEC_ESZ-SHLL2_VEC_ESZ#0
    0xd => return classify_impl_d1_d(inst), // XTN_VEC-UQXTN2_VEC#0
    0xe => return classify_impl_d1_e(inst), // FRINT_VEC-FRINTA_VEC#1
    0xf => return classify_impl_d1_f(inst), // FRINT_VEC-FRINTX_VEC#1
    0x10 => return classify_impl_d1_10(inst), // FCVT_VEC-FCVTNU_VEC#1
    0x11 => return classify_impl_d1_11(inst), // FCVT_VEC-FCVTMU_VEC#1
    0x12 => return classify_impl_d1_12(inst), // FCVT_VEC-FCVTAU_VEC#1
    0x13 => return classify_impl_d1_13(inst), // FCVT_FROMINT_VEC-UCVTF_VEC#1
    0x14 => return classify_impl_d1_14(inst), // FRINTTS_VEC-FRINT32X_VEC#1
    0x15 => return classify_impl_d1_15(inst), // FRINTTS_VEC-FRINT64X_VEC#1
    _ => idx
  };
  return idx;
}


// INT_HORZ_VEC-UADDLV#2
pub const fn classify_impl_d2_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5384;
}


// INT_HORZ_VEC-UMAXV#2
pub const fn classify_impl_d2_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5385;
}


// FP_HORZ_VEC-FMAXNMV#0
pub const fn classify_impl_d2_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5484;
}


// FP_HORZ_VEC-FMAXV#0
pub const fn classify_impl_d2_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5485;
}


// INT_HORZ_VEC-UMINV#2
pub const fn classify_impl_d2_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5386;
}

// HADDSUB_VEC-UHADD#0,HADDSUB_VEC-URHADD#0,HADDSUB_VEC-UHSUB#0,QADDSUB_VEC-UQADD#3,QADDSUB_VEC-UQSUB#3,CMGT_VEC-CMHIV#3,CMGT_VEC-CMHSV#3,CMEQ_VEC-CMEQV#3,SHL_REG_VEC-USHL#3,SHL_REG_VEC-UQSHL#3,SHL_REG_VEC-URSHL#3,SHL_REG_VEC-UQRSHL#3,MINMAX_VEC-UMAX#0,MINMAX_VEC-UMIN#0,MINMAX_VEC-UMAXP#0,MINMAX_VEC-UMINP#0,ABD_VEC-UABD#0,ABD_VEC-UABA#0,ADDSUB_VEC-SUB_VEC#3,MUL_VEC-MLS_VEC#0,MUL_VEC-PMUL_VEC#0,FMINMAX_VEC-FMAXNMP_VEC#1,FMINMAX_VEC-FMAXP_VEC#1,FCMP_REG_VEC-FCMGE_VEC#1,FCMP_REG_VEC-FACGE_VEC#1,FADDSUB_VEC-FADDP_VEC#1,FMUL_VEC-FMULV#1,FDIV_VEC-FDIVV#1,ANDOREOR_VEC-EORV#0,ADDSUBL_VEC-UADDL2#0,ADDSUBL_VEC-USUBL2#0,ADDSUBW_VEC-UADDW2#0,ADDSUBW_VEC-USUBW2#0,ADDSUBHN_VEC-RADDHN2#0,ADDSUBHN_VEC-RSUBHN2#0,ABDL_VEC-UABAL2#0,ABDL_VEC-UABDL2#0,MULL_VEC-UMLAL2#0,MULL_VEC-UMLSL2#0,MULL_VEC-UMULL2#0,INT_HORZ_VEC-UADDLV#2,INT_HORZ_VEC-UMAXV#2,INT_HORZ_VEC-UMINV#2,FP_HORZ_VEC-FMAXNMV#0,FP_HORZ_VEC-FMAXV#0,FHM_VEC-FMLAL2_VEC#0
pub const fn classify_impl_d2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x4386,
    0x1 => 0x2b83,
    0x2 => 0x0,
    0x3 => 0x2c82,
    0x4 => 0x4406,
    0x5 => 0x2b84,
    0x6 => 0x0,
    0x7 => 0x4304,
    0x8 => 0x4387,
    0x9 => 0x2b85,
    0xa => 0x0,
    0xb => 0x2c83,
    0xc => 0x4407,
    0xd => 0x2d82,
    0xe => 0x1,
    0xf => 0x2d83,
    0x10 => 0x4486,
    0x11 => 0x3484,
    0x12 => 0x0,
    0x13 => 0x3485,
    0x14 => 0x4506,
    0x15 => 0x3486,
    0x16 => 0x0,
    0x17 => 0x3487,
    0x18 => 0x4487,
    0x19 => 0x3504,
    0x1a => 0x0,
    0x1b => 0x3505,
    0x1c => 0x4507,
    0x1d => 0x3582,
    0x1e => 0x0,
    0x1f => 0x3583,
    0x20 => 0x4589,
    0x21 => 0x3681,
    0x22 => 0x0,
    0x23 => 0x2e81,
    0x24 => 0x0,
    0x25 => 0x3782,
    0x26 => 0x0,
    0x27 => 0x3783,
    0x28 => 0x458a,
    0x29 => 0x3506,
    0x2a => 0x2,
    0x2b => 0x3507,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x458b,
    0x31 => 0x3904,
    0x32 => 0x3,
    0x33 => 0x5b02,
    0x34 => 0x0,
    0x35 => 0x3c82,
    0x36 => 0x0,
    0x37 => 0x3f81,
    0x38 => 0x0,
    0x39 => 0x3a81,
    0x3a => 0x0,
    0x3b => 0x3a82,
    0x3c => 0x0,
    0x3d => 0x3905,
    0x3e => 0x4,
    0x3f => 0x4080,
    0x40 => 0x4386,
    0x41 => 0x2b83,
    0x42 => 0x0,
    0x43 => 0x2c82,
    0x44 => 0x4406,
    0x45 => 0x2b84,
    0x46 => 0x0,
    0x47 => 0x4304,
    0x48 => 0x4387,
    0x49 => 0x2b85,
    0x4a => 0x0,
    0x4b => 0x2c83,
    0x4c => 0x4407,
    0x4d => 0x2d82,
    0x4e => 0x0,
    0x4f => 0x2d83,
    0x50 => 0x4486,
    0x51 => 0x3484,
    0x52 => 0x0,
    0x53 => 0x3485,
    0x54 => 0x4506,
    0x55 => 0x3486,
    0x56 => 0x0,
    0x57 => 0x3487,
    0x58 => 0x4487,
    0x59 => 0x3504,
    0x5a => 0x0,
    0x5b => 0x3505,
    0x5c => 0x4507,
    0x5d => 0x3582,
    0x5e => 0x0,
    0x5f => 0x3583,
    0x60 => 0x4589,
    0x61 => 0x3681,
    0x62 => 0x0,
    0x63 => 0x2e81,
    0x64 => 0x0,
    0x65 => 0x3782,
    0x66 => 0x0,
    0x67 => 0x3783,
    0x68 => 0x458a,
    0x69 => 0x3506,
    0x6a => 0x5,
    0x6b => 0x3507,
    0x6c => 0x0,
    0x6d => 0x0,
    0x6e => 0x0,
    0x6f => 0x0,
    0x70 => 0x458b,
    0x71 => 0x3904,
    0x72 => 0x0,
    0x73 => 0x5b02,
    0x74 => 0x0,
    0x75 => 0x3c82,
    0x76 => 0x0,
    0x77 => 0x3f81,
    0x78 => 0x0,
    0x79 => 0x3a81,
    0x7a => 0x0,
    0x7b => 0x3a82,
    0x7c => 0x0,
    0x7d => 0x3905,
    0x7e => 0x0,
    0x7f => 0x4080,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_d2_1(inst), // INT_HORZ_VEC-UADDLV#2
    0x2 => return classify_impl_d2_2(inst), // INT_HORZ_VEC-UMAXV#2
    0x3 => return classify_impl_d2_3(inst), // FP_HORZ_VEC-FMAXNMV#0
    0x4 => return classify_impl_d2_4(inst), // FP_HORZ_VEC-FMAXV#0
    0x5 => return classify_impl_d2_5(inst), // INT_HORZ_VEC-UMINV#2
    _ => idx
  };
  return idx;
}


// FP16_3REG_VEC-FMAXNMP_VEC_FP16#0,FP16_3REG_VEC-FADDP_VEC_FP16#0,FP16_3REG_VEC-FMUL_VEC_FP16#0,FP16_3REG_VEC-FCMGE_VEC_FP16#0,FP16_3REG_VEC-FACGE_VEC_FP16#0,FP16_3REG_VEC-FMAXP_VEC_FP16#0,FP16_3REG_VEC-FDIV_VEC_FP16#0,SQRDMLAH_VEC-SQRDMLAH#0,SQRDMLAH_VEC-SQRDMLSH#0,DOT_VEC-BFDOT_VEC#1,DOT_VEC-BFMMLA_VEC#0,FCMLA_VEC-FCMLA_VEC#4,FCMLA_VEC-FCMLA_VEC#5,FCMLA_VEC-FCADD_VEC#2
pub const fn classify_impl_d3(inst: u32) -> u32 {
  if (inst&0x400) != 0x400 { return 0; }
  let idx = match (inst >> 11) & 0x1f {
    0x0 => 0x418d,
    0x1 => 0x0,
    0x2 => 0x418e,
    0x3 => 0x418f,
    0x4 => 0x4190,
    0x5 => 0x4191,
    0x6 => 0x4192,
    0x7 => 0x4193,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x4800,
    0x11 => 0x4801,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x5c00,
    0x19 => 0x5c00,
    0x1a => 0x5c00,
    0x1b => 0x5c00,
    0x1c => 0x5c01,
    0x1d => 0x5906,
    0x1e => 0x5c01,
    0x1f => 0x5902,
    _ => 0,
  };
  return idx;
}


// REV_VEC-REV32_VEC#1
pub const fn classify_impl_d4_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3282;
}


// ADDLP_VEC-UADDLP#1
pub const fn classify_impl_d4_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3102;
}


// ARITH1_VEC-USQADD_VEC#4
pub const fn classify_impl_d4_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3083;
}


// CLZ_VEC-CLZ_VEC#1
pub const fn classify_impl_d4_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3181;
}


// BIT_VEC-RBIT_VEC#0
pub const fn classify_impl_d4_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3202;
}


// ADDLP_VEC-UADALP#1
pub const fn classify_impl_d4_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3103;
}


// ARITH1_VEC-SQNEG_VEC#4
pub const fn classify_impl_d4_7(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3084;
}


// CMZERO_VEC-CMGE_ZERO_VEC#4
pub const fn classify_impl_d4_8(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f83;
}


// CMZERO_VEC-CMLE_ZERO_VEC#4
pub const fn classify_impl_d4_9(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f84;
}


// ARITH1_VEC-NEG_VEC#4
pub const fn classify_impl_d4_a(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3085;
}


// XTN_VEC-SQXTUN2_VEC#1
pub const fn classify_impl_d4_b(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3386;
}


// SHLL_VEC_ESZ-SHLL2_VEC_ESZ#1
pub const fn classify_impl_d4_c(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4c01;
}


// XTN_VEC-UQXTN2_VEC#1
pub const fn classify_impl_d4_d(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3387;
}


// FCVTN_VEC-FCVTXN2#0
pub const fn classify_impl_d4_e(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5185;
}


// FRINT_VEC-FRINTA_VEC#2
pub const fn classify_impl_d4_f(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5204;
}


// FRINT_VEC-FRINTX_VEC#2
pub const fn classify_impl_d4_10(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5205;
}


// FCVT_VEC-FCVTNU_VEC#2
pub const fn classify_impl_d4_11(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f05;
}


// FCVT_VEC-FCVTMU_VEC#2
pub const fn classify_impl_d4_12(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f06;
}


// FCVT_VEC-FCVTAU_VEC#2
pub const fn classify_impl_d4_13(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f07;
}


// FCVT_FROMINT_VEC-UCVTF_VEC#2
pub const fn classify_impl_d4_14(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5081;
}


// FRINTTS_VEC-FRINT32X_VEC#2
pub const fn classify_impl_d4_15(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5282;
}


// FRINTTS_VEC-FRINT64X_VEC#2
pub const fn classify_impl_d4_16(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5283;
}

// HADDSUB_VEC-UHADD#1,HADDSUB_VEC-URHADD#1,HADDSUB_VEC-UHSUB#1,QADDSUB_VEC-UQADD#4,QADDSUB_VEC-UQSUB#4,CMGT_VEC-CMHIV#4,CMGT_VEC-CMHSV#4,CMEQ_VEC-CMEQV#4,CMZERO_VEC-CMGE_ZERO_VEC#4,CMZERO_VEC-CMLE_ZERO_VEC#4,ARITH1_VEC-USQADD_VEC#4,ARITH1_VEC-SQNEG_VEC#4,ARITH1_VEC-NEG_VEC#4,ADDLP_VEC-UADDLP#1,ADDLP_VEC-UADALP#1,CLZ_VEC-CLZ_VEC#1,BIT_VEC-RBIT_VEC#0,REV_VEC-REV32_VEC#1,XTN_VEC-SQXTUN2_VEC#1,XTN_VEC-UQXTN2_VEC#1,SHL_REG_VEC-USHL#4,SHL_REG_VEC-UQSHL#4,SHL_REG_VEC-URSHL#4,SHL_REG_VEC-UQRSHL#4,MINMAX_VEC-UMAX#1,MINMAX_VEC-UMIN#1,MINMAX_VEC-UMAXP#1,MINMAX_VEC-UMINP#1,ABD_VEC-UABD#1,ABD_VEC-UABA#1,ADDSUB_VEC-SUB_VEC#4,MUL_VEC-MLS_VEC#1,SQDMULH_VEC-SQRDMULH#0,FMINMAX_VEC-FMAXNMP_VEC#2,FMINMAX_VEC-FMAXP_VEC#2,FCMP_REG_VEC-FCMGE_VEC#2,FCMP_REG_VEC-FACGE_VEC#2,FADDSUB_VEC-FADDP_VEC#2,FMUL_VEC-FMULV#2,FDIV_VEC-FDIVV#2,ANDOREOR_VEC-BSLV#0,ADDSUBL_VEC-UADDL2#1,ADDSUBL_VEC-USUBL2#1,ADDSUBW_VEC-UADDW2#1,ADDSUBW_VEC-USUBW2#1,ADDSUBHN_VEC-RADDHN2#1,ADDSUBHN_VEC-RSUBHN2#1,ABDL_VEC-UABAL2#1,ABDL_VEC-UABDL2#1,MULL_VEC-UMLAL2#1,MULL_VEC-UMLSL2#1,MULL_VEC-UMULL2#1,SHLL_VEC_ESZ-SHLL2_VEC_ESZ#1,FCVT_VEC-FCVTNU_VEC#2,FCVT_VEC-FCVTMU_VEC#2,FCVT_VEC-FCVTAU_VEC#2,FCVT_FROMINT_VEC-UCVTF_VEC#2,FCVTN_VEC-FCVTXN2#0,FRINT_VEC-FRINTA_VEC#2,FRINT_VEC-FRINTX_VEC#2,FRINTTS_VEC-FRINT32X_VEC#2,FRINTTS_VEC-FRINT64X_VEC#2
pub const fn classify_impl_d4(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x4386,
    0x1 => 0x2b83,
    0x2 => 0x1,
    0x3 => 0x2c82,
    0x4 => 0x4406,
    0x5 => 0x2b84,
    0x6 => 0x0,
    0x7 => 0x4305,
    0x8 => 0x4387,
    0x9 => 0x2b85,
    0xa => 0x2,
    0xb => 0x2c83,
    0xc => 0x4407,
    0xd => 0x2d82,
    0xe => 0x3,
    0xf => 0x2d83,
    0x10 => 0x4486,
    0x11 => 0x3484,
    0x12 => 0x4,
    0x13 => 0x3485,
    0x14 => 0x4506,
    0x15 => 0x3486,
    0x16 => 0x5,
    0x17 => 0x3487,
    0x18 => 0x4487,
    0x19 => 0x3504,
    0x1a => 0x6,
    0x1b => 0x3505,
    0x1c => 0x4507,
    0x1d => 0x3582,
    0x1e => 0x7,
    0x1f => 0x3583,
    0x20 => 0x4589,
    0x21 => 0x3681,
    0x22 => 0x8,
    0x23 => 0x2e81,
    0x24 => 0x0,
    0x25 => 0x3782,
    0x26 => 0x9,
    0x27 => 0x0,
    0x28 => 0x458a,
    0x29 => 0x3506,
    0x2a => 0x0,
    0x2b => 0x3507,
    0x2c => 0x0,
    0x2d => 0x3881,
    0x2e => 0xa,
    0x2f => 0x0,
    0x30 => 0x458b,
    0x31 => 0x3904,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x3c82,
    0x36 => 0x0,
    0x37 => 0x3f81,
    0x38 => 0x0,
    0x39 => 0x3a81,
    0x3a => 0x0,
    0x3b => 0x3a82,
    0x3c => 0x0,
    0x3d => 0x3905,
    0x3e => 0x0,
    0x3f => 0x4080,
    0x40 => 0x4386,
    0x41 => 0x2b83,
    0x42 => 0x0,
    0x43 => 0x2c82,
    0x44 => 0x4406,
    0x45 => 0x2b84,
    0x46 => 0x0,
    0x47 => 0x4305,
    0x48 => 0x4387,
    0x49 => 0x2b85,
    0x4a => 0xb,
    0x4b => 0x2c83,
    0x4c => 0x4407,
    0x4d => 0x2d82,
    0x4e => 0xc,
    0x4f => 0x2d83,
    0x50 => 0x4486,
    0x51 => 0x3484,
    0x52 => 0xd,
    0x53 => 0x3485,
    0x54 => 0x4506,
    0x55 => 0x3486,
    0x56 => 0x0,
    0x57 => 0x3487,
    0x58 => 0x4487,
    0x59 => 0x3504,
    0x5a => 0xe,
    0x5b => 0x3505,
    0x5c => 0x4507,
    0x5d => 0x3582,
    0x5e => 0x0,
    0x5f => 0x3583,
    0x60 => 0x4589,
    0x61 => 0x3681,
    0x62 => 0xf,
    0x63 => 0x2e81,
    0x64 => 0x0,
    0x65 => 0x3782,
    0x66 => 0x10,
    0x67 => 0x0,
    0x68 => 0x458a,
    0x69 => 0x3506,
    0x6a => 0x11,
    0x6b => 0x3507,
    0x6c => 0x0,
    0x6d => 0x3881,
    0x6e => 0x12,
    0x6f => 0x0,
    0x70 => 0x458b,
    0x71 => 0x3904,
    0x72 => 0x13,
    0x73 => 0x0,
    0x74 => 0x0,
    0x75 => 0x3c82,
    0x76 => 0x14,
    0x77 => 0x3f81,
    0x78 => 0x0,
    0x79 => 0x3a81,
    0x7a => 0x15,
    0x7b => 0x3a82,
    0x7c => 0x0,
    0x7d => 0x3905,
    0x7e => 0x16,
    0x7f => 0x4080,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_d4_1(inst), // REV_VEC-REV32_VEC#1
    0x2 => return classify_impl_d4_2(inst), // ADDLP_VEC-UADDLP#1
    0x3 => return classify_impl_d4_3(inst), // ARITH1_VEC-USQADD_VEC#4
    0x4 => return classify_impl_d4_4(inst), // CLZ_VEC-CLZ_VEC#1
    0x5 => return classify_impl_d4_5(inst), // BIT_VEC-RBIT_VEC#0
    0x6 => return classify_impl_d4_6(inst), // ADDLP_VEC-UADALP#1
    0x7 => return classify_impl_d4_7(inst), // ARITH1_VEC-SQNEG_VEC#4
    0x8 => return classify_impl_d4_8(inst), // CMZERO_VEC-CMGE_ZERO_VEC#4
    0x9 => return classify_impl_d4_9(inst), // CMZERO_VEC-CMLE_ZERO_VEC#4
    0xa => return classify_impl_d4_a(inst), // ARITH1_VEC-NEG_VEC#4
    0xb => return classify_impl_d4_b(inst), // XTN_VEC-SQXTUN2_VEC#1
    0xc => return classify_impl_d4_c(inst), // SHLL_VEC_ESZ-SHLL2_VEC_ESZ#1
    0xd => return classify_impl_d4_d(inst), // XTN_VEC-UQXTN2_VEC#1
    0xe => return classify_impl_d4_e(inst), // FCVTN_VEC-FCVTXN2#0
    0xf => return classify_impl_d4_f(inst), // FRINT_VEC-FRINTA_VEC#2
    0x10 => return classify_impl_d4_10(inst), // FRINT_VEC-FRINTX_VEC#2
    0x11 => return classify_impl_d4_11(inst), // FCVT_VEC-FCVTNU_VEC#2
    0x12 => return classify_impl_d4_12(inst), // FCVT_VEC-FCVTMU_VEC#2
    0x13 => return classify_impl_d4_13(inst), // FCVT_VEC-FCVTAU_VEC#2
    0x14 => return classify_impl_d4_14(inst), // FCVT_FROMINT_VEC-UCVTF_VEC#2
    0x15 => return classify_impl_d4_15(inst), // FRINTTS_VEC-FRINT32X_VEC#2
    0x16 => return classify_impl_d4_16(inst), // FRINTTS_VEC-FRINT64X_VEC#2
    _ => idx
  };
  return idx;
}


// INT_HORZ_VEC-UADDLV#3
pub const fn classify_impl_d5_1_1(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x5384;
}


// INT_HORZ_VEC-UMAXV#3
pub const fn classify_impl_d5_1_2(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x5385;
}


// INT_HORZ_VEC-UMINV#3
pub const fn classify_impl_d5_1_3(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x5386;
}

// HADDSUB_VEC-UHADD#1,HADDSUB_VEC-URHADD#1,HADDSUB_VEC-UHSUB#1,QADDSUB_VEC-UQADD#4,QADDSUB_VEC-UQSUB#4,CMGT_VEC-CMHIV#4,CMGT_VEC-CMHSV#4,CMEQ_VEC-CMEQV#4,SHL_REG_VEC-USHL#4,SHL_REG_VEC-UQSHL#4,SHL_REG_VEC-URSHL#4,SHL_REG_VEC-UQRSHL#4,MINMAX_VEC-UMAX#1,MINMAX_VEC-UMIN#1,MINMAX_VEC-UMAXP#1,MINMAX_VEC-UMINP#1,ABD_VEC-UABD#1,ABD_VEC-UABA#1,ADDSUB_VEC-SUB_VEC#4,MUL_VEC-MLS_VEC#1,SQDMULH_VEC-SQRDMULH#0,FMINMAX_VEC-FMAXNMP_VEC#2,FMINMAX_VEC-FMAXP_VEC#2,FCMP_REG_VEC-FCMGE_VEC#2,FCMP_REG_VEC-FACGE_VEC#2,FADDSUB_VEC-FADDP_VEC#2,FMUL_VEC-FMULV#2,FDIV_VEC-FDIVV#2,ANDOREOR_VEC-BSLV#0,ADDSUBL_VEC-UADDL2#1,ADDSUBL_VEC-USUBL2#1,ADDSUBW_VEC-UADDW2#1,ADDSUBW_VEC-USUBW2#1,ADDSUBHN_VEC-RADDHN2#1,ADDSUBHN_VEC-RSUBHN2#1,ABDL_VEC-UABAL2#1,ABDL_VEC-UABDL2#1,MULL_VEC-UMLAL2#1,MULL_VEC-UMLSL2#1,MULL_VEC-UMULL2#1,INT_HORZ_VEC-UADDLV#3,INT_HORZ_VEC-UMAXV#3,INT_HORZ_VEC-UMINV#3
pub const fn classify_impl_d5_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x4386,
    0x1 => 0x2b83,
    0x2 => 0x0,
    0x3 => 0x2c82,
    0x4 => 0x4406,
    0x5 => 0x2b84,
    0x6 => 0x0,
    0x7 => 0x4305,
    0x8 => 0x4387,
    0x9 => 0x2b85,
    0xa => 0x0,
    0xb => 0x2c83,
    0xc => 0x4407,
    0xd => 0x2d82,
    0xe => 0x1,
    0xf => 0x2d83,
    0x10 => 0x4486,
    0x11 => 0x3484,
    0x12 => 0x0,
    0x13 => 0x3485,
    0x14 => 0x4506,
    0x15 => 0x3486,
    0x16 => 0x0,
    0x17 => 0x3487,
    0x18 => 0x4487,
    0x19 => 0x3504,
    0x1a => 0x0,
    0x1b => 0x3505,
    0x1c => 0x4507,
    0x1d => 0x3582,
    0x1e => 0x0,
    0x1f => 0x3583,
    0x20 => 0x4589,
    0x21 => 0x3681,
    0x22 => 0x0,
    0x23 => 0x2e81,
    0x24 => 0x0,
    0x25 => 0x3782,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x458a,
    0x29 => 0x3506,
    0x2a => 0x2,
    0x2b => 0x3507,
    0x2c => 0x0,
    0x2d => 0x3881,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x458b,
    0x31 => 0x3904,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x3c82,
    0x36 => 0x0,
    0x37 => 0x3f81,
    0x38 => 0x0,
    0x39 => 0x3a81,
    0x3a => 0x0,
    0x3b => 0x3a82,
    0x3c => 0x0,
    0x3d => 0x3905,
    0x3e => 0x0,
    0x3f => 0x4080,
    0x40 => 0x4386,
    0x41 => 0x2b83,
    0x42 => 0x0,
    0x43 => 0x2c82,
    0x44 => 0x4406,
    0x45 => 0x2b84,
    0x46 => 0x0,
    0x47 => 0x4305,
    0x48 => 0x4387,
    0x49 => 0x2b85,
    0x4a => 0x0,
    0x4b => 0x2c83,
    0x4c => 0x4407,
    0x4d => 0x2d82,
    0x4e => 0x0,
    0x4f => 0x2d83,
    0x50 => 0x4486,
    0x51 => 0x3484,
    0x52 => 0x0,
    0x53 => 0x3485,
    0x54 => 0x4506,
    0x55 => 0x3486,
    0x56 => 0x0,
    0x57 => 0x3487,
    0x58 => 0x4487,
    0x59 => 0x3504,
    0x5a => 0x0,
    0x5b => 0x3505,
    0x5c => 0x4507,
    0x5d => 0x3582,
    0x5e => 0x0,
    0x5f => 0x3583,
    0x60 => 0x4589,
    0x61 => 0x3681,
    0x62 => 0x0,
    0x63 => 0x2e81,
    0x64 => 0x0,
    0x65 => 0x3782,
    0x66 => 0x0,
    0x67 => 0x0,
    0x68 => 0x458a,
    0x69 => 0x3506,
    0x6a => 0x3,
    0x6b => 0x3507,
    0x6c => 0x0,
    0x6d => 0x3881,
    0x6e => 0x0,
    0x6f => 0x0,
    0x70 => 0x458b,
    0x71 => 0x3904,
    0x72 => 0x0,
    0x73 => 0x0,
    0x74 => 0x0,
    0x75 => 0x3c82,
    0x76 => 0x0,
    0x77 => 0x3f81,
    0x78 => 0x0,
    0x79 => 0x3a81,
    0x7a => 0x0,
    0x7b => 0x3a82,
    0x7c => 0x0,
    0x7d => 0x3905,
    0x7e => 0x0,
    0x7f => 0x4080,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_d5_1_1(inst), // INT_HORZ_VEC-UADDLV#3
    0x2 => return classify_impl_d5_1_2(inst), // INT_HORZ_VEC-UMAXV#3
    0x3 => return classify_impl_d5_1_3(inst), // INT_HORZ_VEC-UMINV#3
    _ => idx
  };
  return idx;
}


// FP16_2REG_VEC-FRINTA_VEC_FP16#0
pub const fn classify_impl_d5_2_1(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x428f;
}


// FP16_2REG_VEC-FRINTX_VEC_FP16#0
pub const fn classify_impl_d5_2_2(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x4290;
}


// FP16_2REG_VEC-FCVTNU_VEC_FP16#0
pub const fn classify_impl_d5_2_3(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x4291;
}


// FP16_2REG_VEC-FCVTMU_VEC_FP16#0
pub const fn classify_impl_d5_2_4(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x4292;
}


// FP16_2REG_VEC-FCVTAU_VEC_FP16#0
pub const fn classify_impl_d5_2_5(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x4293;
}


// FP16_2REG_VEC-UCVTF_VEC_FP16#0
pub const fn classify_impl_d5_2_6(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x4294;
}

// HADDSUB_VEC-UHADD#1,HADDSUB_VEC-URHADD#1,HADDSUB_VEC-UHSUB#1,QADDSUB_VEC-UQADD#4,QADDSUB_VEC-UQSUB#4,CMGT_VEC-CMHIV#4,CMGT_VEC-CMHSV#4,CMEQ_VEC-CMEQV#4,SHL_REG_VEC-USHL#4,SHL_REG_VEC-UQSHL#4,SHL_REG_VEC-URSHL#4,SHL_REG_VEC-UQRSHL#4,MINMAX_VEC-UMAX#1,MINMAX_VEC-UMIN#1,MINMAX_VEC-UMAXP#1,MINMAX_VEC-UMINP#1,ABD_VEC-UABD#1,ABD_VEC-UABA#1,ADDSUB_VEC-SUB_VEC#4,MUL_VEC-MLS_VEC#1,SQDMULH_VEC-SQRDMULH#0,FMINMAX_VEC-FMAXNMP_VEC#2,FMINMAX_VEC-FMAXP_VEC#2,FCMP_REG_VEC-FCMGE_VEC#2,FCMP_REG_VEC-FACGE_VEC#2,FADDSUB_VEC-FADDP_VEC#2,FMUL_VEC-FMULV#2,FDIV_VEC-FDIVV#2,FP16_2REG_VEC-FRINTA_VEC_FP16#0,FP16_2REG_VEC-FRINTX_VEC_FP16#0,FP16_2REG_VEC-FCVTNU_VEC_FP16#0,FP16_2REG_VEC-FCVTMU_VEC_FP16#0,FP16_2REG_VEC-FCVTAU_VEC_FP16#0,FP16_2REG_VEC-UCVTF_VEC_FP16#0,ANDOREOR_VEC-BSLV#0,ADDSUBL_VEC-UADDL2#1,ADDSUBL_VEC-USUBL2#1,ADDSUBW_VEC-UADDW2#1,ADDSUBW_VEC-USUBW2#1,ADDSUBHN_VEC-RADDHN2#1,ADDSUBHN_VEC-RSUBHN2#1,ABDL_VEC-UABAL2#1,ABDL_VEC-UABDL2#1,MULL_VEC-UMLAL2#1,MULL_VEC-UMLSL2#1,MULL_VEC-UMULL2#1
pub const fn classify_impl_d5_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x4386,
    0x1 => 0x2b83,
    0x2 => 0x0,
    0x3 => 0x2c82,
    0x4 => 0x4406,
    0x5 => 0x2b84,
    0x6 => 0x0,
    0x7 => 0x4305,
    0x8 => 0x4387,
    0x9 => 0x2b85,
    0xa => 0x0,
    0xb => 0x2c83,
    0xc => 0x4407,
    0xd => 0x2d82,
    0xe => 0x0,
    0xf => 0x2d83,
    0x10 => 0x4486,
    0x11 => 0x3484,
    0x12 => 0x0,
    0x13 => 0x3485,
    0x14 => 0x4506,
    0x15 => 0x3486,
    0x16 => 0x0,
    0x17 => 0x3487,
    0x18 => 0x4487,
    0x19 => 0x3504,
    0x1a => 0x0,
    0x1b => 0x3505,
    0x1c => 0x4507,
    0x1d => 0x3582,
    0x1e => 0x0,
    0x1f => 0x3583,
    0x20 => 0x4589,
    0x21 => 0x3681,
    0x22 => 0x1,
    0x23 => 0x2e81,
    0x24 => 0x0,
    0x25 => 0x3782,
    0x26 => 0x2,
    0x27 => 0x0,
    0x28 => 0x458a,
    0x29 => 0x3506,
    0x2a => 0x3,
    0x2b => 0x3507,
    0x2c => 0x0,
    0x2d => 0x3881,
    0x2e => 0x4,
    0x2f => 0x0,
    0x30 => 0x458b,
    0x31 => 0x3904,
    0x32 => 0x5,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x3c82,
    0x36 => 0x6,
    0x37 => 0x3f81,
    0x38 => 0x0,
    0x39 => 0x3a81,
    0x3a => 0x0,
    0x3b => 0x3a82,
    0x3c => 0x0,
    0x3d => 0x3905,
    0x3e => 0x0,
    0x3f => 0x4080,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_d5_2_1(inst), // FP16_2REG_VEC-FRINTA_VEC_FP16#0
    0x2 => return classify_impl_d5_2_2(inst), // FP16_2REG_VEC-FRINTX_VEC_FP16#0
    0x3 => return classify_impl_d5_2_3(inst), // FP16_2REG_VEC-FCVTNU_VEC_FP16#0
    0x4 => return classify_impl_d5_2_4(inst), // FP16_2REG_VEC-FCVTMU_VEC_FP16#0
    0x5 => return classify_impl_d5_2_5(inst), // FP16_2REG_VEC-FCVTAU_VEC_FP16#0
    0x6 => return classify_impl_d5_2_6(inst), // FP16_2REG_VEC-UCVTF_VEC_FP16#0
    _ => idx
  };
  return idx;
}

// HADDSUB_VEC-UHADD#1,HADDSUB_VEC-URHADD#1,HADDSUB_VEC-UHSUB#1,QADDSUB_VEC-UQADD#4,QADDSUB_VEC-UQSUB#4,CMGT_VEC-CMHIV#4,CMGT_VEC-CMHSV#4,CMEQ_VEC-CMEQV#4,SHL_REG_VEC-USHL#4,SHL_REG_VEC-UQSHL#4,SHL_REG_VEC-URSHL#4,SHL_REG_VEC-UQRSHL#4,MINMAX_VEC-UMAX#1,MINMAX_VEC-UMIN#1,MINMAX_VEC-UMAXP#1,MINMAX_VEC-UMINP#1,ABD_VEC-UABD#1,ABD_VEC-UABA#1,ADDSUB_VEC-SUB_VEC#4,MUL_VEC-MLS_VEC#1,SQDMULH_VEC-SQRDMULH#0,FMINMAX_VEC-FMAXNMP_VEC#2,FMINMAX_VEC-FMAXP_VEC#2,FCMP_REG_VEC-FCMGE_VEC#2,FCMP_REG_VEC-FACGE_VEC#2,FADDSUB_VEC-FADDP_VEC#2,FMUL_VEC-FMULV#2,FDIV_VEC-FDIVV#2,FP16_2REG_VEC-FRINTA_VEC_FP16#0,FP16_2REG_VEC-FRINTX_VEC_FP16#0,FP16_2REG_VEC-FCVTNU_VEC_FP16#0,FP16_2REG_VEC-FCVTMU_VEC_FP16#0,FP16_2REG_VEC-FCVTAU_VEC_FP16#0,FP16_2REG_VEC-UCVTF_VEC_FP16#0,ANDOREOR_VEC-BSLV#0,ADDSUBL_VEC-UADDL2#1,ADDSUBL_VEC-USUBL2#1,ADDSUBW_VEC-UADDW2#1,ADDSUBW_VEC-USUBW2#1,ADDSUBHN_VEC-RADDHN2#1,ADDSUBHN_VEC-RSUBHN2#1,ABDL_VEC-UABAL2#1,ABDL_VEC-UABDL2#1,MULL_VEC-UMLAL2#1,MULL_VEC-UMLSL2#1,MULL_VEC-UMULL2#1,INT_HORZ_VEC-UADDLV#3,INT_HORZ_VEC-UMAXV#3,INT_HORZ_VEC-UMINV#3
pub const fn classify_impl_d5(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_d5_1(inst), // HADDSUB_VEC-UHADD#1,HADDSUB_VEC-URHADD#1,HADDSUB_VEC-UHSUB#1,QADDSUB_VEC-UQADD#4,QADDSUB_VEC-UQSUB#4,CMGT_VEC-CMHIV#4,CMGT_VEC-CMHSV#4,CMEQ_VEC-CMEQV#4,SHL_REG_VEC-USHL#4,SHL_REG_VEC-UQSHL#4,SHL_REG_VEC-URSHL#4,SHL_REG_VEC-UQRSHL#4,MINMAX_VEC-UMAX#1,MINMAX_VEC-UMIN#1,MINMAX_VEC-UMAXP#1,MINMAX_VEC-UMINP#1,ABD_VEC-UABD#1,ABD_VEC-UABA#1,ADDSUB_VEC-SUB_VEC#4,MUL_VEC-MLS_VEC#1,SQDMULH_VEC-SQRDMULH#0,FMINMAX_VEC-FMAXNMP_VEC#2,FMINMAX_VEC-FMAXP_VEC#2,FCMP_REG_VEC-FCMGE_VEC#2,FCMP_REG_VEC-FACGE_VEC#2,FADDSUB_VEC-FADDP_VEC#2,FMUL_VEC-FMULV#2,FDIV_VEC-FDIVV#2,ANDOREOR_VEC-BSLV#0,ADDSUBL_VEC-UADDL2#1,ADDSUBL_VEC-USUBL2#1,ADDSUBW_VEC-UADDW2#1,ADDSUBW_VEC-USUBW2#1,ADDSUBHN_VEC-RADDHN2#1,ADDSUBHN_VEC-RSUBHN2#1,ABDL_VEC-UABAL2#1,ABDL_VEC-UABDL2#1,MULL_VEC-UMLAL2#1,MULL_VEC-UMLSL2#1,MULL_VEC-UMULL2#1,INT_HORZ_VEC-UADDLV#3,INT_HORZ_VEC-UMAXV#3,INT_HORZ_VEC-UMINV#3
    0x2 => return classify_impl_d5_2(inst), // HADDSUB_VEC-UHADD#1,HADDSUB_VEC-URHADD#1,HADDSUB_VEC-UHSUB#1,QADDSUB_VEC-UQADD#4,QADDSUB_VEC-UQSUB#4,CMGT_VEC-CMHIV#4,CMGT_VEC-CMHSV#4,CMEQ_VEC-CMEQV#4,SHL_REG_VEC-USHL#4,SHL_REG_VEC-UQSHL#4,SHL_REG_VEC-URSHL#4,SHL_REG_VEC-UQRSHL#4,MINMAX_VEC-UMAX#1,MINMAX_VEC-UMIN#1,MINMAX_VEC-UMAXP#1,MINMAX_VEC-UMINP#1,ABD_VEC-UABD#1,ABD_VEC-UABA#1,ADDSUB_VEC-SUB_VEC#4,MUL_VEC-MLS_VEC#1,SQDMULH_VEC-SQRDMULH#0,FMINMAX_VEC-FMAXNMP_VEC#2,FMINMAX_VEC-FMAXP_VEC#2,FCMP_REG_VEC-FCMGE_VEC#2,FCMP_REG_VEC-FACGE_VEC#2,FADDSUB_VEC-FADDP_VEC#2,FMUL_VEC-FMULV#2,FDIV_VEC-FDIVV#2,FP16_2REG_VEC-FRINTA_VEC_FP16#0,FP16_2REG_VEC-FRINTX_VEC_FP16#0,FP16_2REG_VEC-FCVTNU_VEC_FP16#0,FP16_2REG_VEC-FCVTMU_VEC_FP16#0,FP16_2REG_VEC-FCVTAU_VEC_FP16#0,FP16_2REG_VEC-UCVTF_VEC_FP16#0,ANDOREOR_VEC-BSLV#0,ADDSUBL_VEC-UADDL2#1,ADDSUBL_VEC-USUBL2#1,ADDSUBW_VEC-UADDW2#1,ADDSUBW_VEC-USUBW2#1,ADDSUBHN_VEC-RADDHN2#1,ADDSUBHN_VEC-RSUBHN2#1,ABDL_VEC-UABAL2#1,ABDL_VEC-UABDL2#1,MULL_VEC-UMLAL2#1,MULL_VEC-UMLSL2#1,MULL_VEC-UMULL2#1
    _ => idx
  };
  return idx;
}


// SQRDMLAH_VEC-SQRDMLAH#1,SQRDMLAH_VEC-SQRDMLSH#1,DOT_VEC-UDOT_VEC#1,DOT_VEC-UMMLA_VEC#0,FCMLA_VEC-FCMLA_VEC#6,FCMLA_VEC-FCMLA_VEC#7,FCMLA_VEC-FCADD_VEC#3
pub const fn classify_impl_d6(inst: u32) -> u32 {
  if (inst&0x8400) != 0x8400 { return 0; }
  let idx = match (inst >> 11) & 0xf {
    0x0 => 0x4800,
    0x1 => 0x4801,
    0x2 => 0x5903,
    0x3 => 0x0,
    0x4 => 0x5907,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x5c00,
    0x9 => 0x5c00,
    0xa => 0x5c00,
    0xb => 0x5c00,
    0xc => 0x5c01,
    0xd => 0x0,
    0xe => 0x5c01,
    0xf => 0x0,
    _ => 0,
  };
  return idx;
}


// ADDLP_VEC-UADDLP#2
pub const fn classify_impl_d7_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3102;
}


// ARITH1_VEC-USQADD_VEC#5
pub const fn classify_impl_d7_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3083;
}


// CLZ_VEC-CLZ_VEC#2
pub const fn classify_impl_d7_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3181;
}


// ADDLP_VEC-UADALP#2
pub const fn classify_impl_d7_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3103;
}


// ARITH1_VEC-SQNEG_VEC#5
pub const fn classify_impl_d7_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3084;
}


// CMZERO_VEC-CMGE_ZERO_VEC#5
pub const fn classify_impl_d7_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f83;
}


// CMZERO_VEC-CMLE_ZERO_VEC#5
pub const fn classify_impl_d7_7(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f84;
}


// ARITH1_VEC-NEG_VEC#5
pub const fn classify_impl_d7_8(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3085;
}


// FCMP_ZERO_VEC-FCMGE_ZERO_VEC#1
pub const fn classify_impl_d7_9(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3b03;
}


// FCMP_ZERO_VEC-FCMLE_ZERO_VEC#1
pub const fn classify_impl_d7_a(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3b04;
}


// FARITH1_VEC-FNEG_VEC#1
pub const fn classify_impl_d7_b(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3b81;
}


// XTN_VEC-SQXTUN2_VEC#2
pub const fn classify_impl_d7_c(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3386;
}


// SHLL_VEC_ESZ-SHLL2_VEC_ESZ#2
pub const fn classify_impl_d7_d(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4c01;
}


// XTN_VEC-UQXTN2_VEC#2
pub const fn classify_impl_d7_e(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3387;
}


// FRINT_VEC-FRINTI_VEC#1
pub const fn classify_impl_d7_f(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5206;
}


// FCVT_VEC-FCVTPU_VEC#1
pub const fn classify_impl_d7_10(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f08;
}


// FCVT_VEC-FCVTZU_VEC#1
pub const fn classify_impl_d7_11(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f09;
}


// FRECP_VEC-URSQRTE_VEC#1
pub const fn classify_impl_d7_12(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3d82;
}


// FRECP_VEC-FRSQRTE_VEC#1
pub const fn classify_impl_d7_13(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3d83;
}


// FARITH1_VEC-FSQRT_VEC#1
pub const fn classify_impl_d7_14(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3b82;
}

// HADDSUB_VEC-UHADD#2,HADDSUB_VEC-URHADD#2,HADDSUB_VEC-UHSUB#2,QADDSUB_VEC-UQADD#5,QADDSUB_VEC-UQSUB#5,CMGT_VEC-CMHIV#5,CMGT_VEC-CMHSV#5,CMEQ_VEC-CMEQV#5,CMZERO_VEC-CMGE_ZERO_VEC#5,CMZERO_VEC-CMLE_ZERO_VEC#5,ARITH1_VEC-USQADD_VEC#5,ARITH1_VEC-SQNEG_VEC#5,ARITH1_VEC-NEG_VEC#5,ADDLP_VEC-UADDLP#2,ADDLP_VEC-UADALP#2,CLZ_VEC-CLZ_VEC#2,XTN_VEC-SQXTUN2_VEC#2,XTN_VEC-UQXTN2_VEC#2,SHL_REG_VEC-USHL#5,SHL_REG_VEC-UQSHL#5,SHL_REG_VEC-URSHL#5,SHL_REG_VEC-UQRSHL#5,MINMAX_VEC-UMAX#2,MINMAX_VEC-UMIN#2,MINMAX_VEC-UMAXP#2,MINMAX_VEC-UMINP#2,ABD_VEC-UABD#2,ABD_VEC-UABA#2,ADDSUB_VEC-SUB_VEC#5,MUL_VEC-MLS_VEC#2,SQDMULH_VEC-SQRDMULH#1,FMINMAX_VEC-FMINNMP_VEC#1,FMINMAX_VEC-FMINP_VEC#1,FCMP_REG_VEC-FCMGT_VEC#1,FCMP_REG_VEC-FACGT_VEC#1,FCMP_ZERO_VEC-FCMGE_ZERO_VEC#1,FCMP_ZERO_VEC-FCMLE_ZERO_VEC#1,FARITH1_VEC-FNEG_VEC#1,FARITH1_VEC-FSQRT_VEC#1,FADDSUB_VEC-FABD_VEC#1,FRECP_VEC-URSQRTE_VEC#1,FRECP_VEC-FRSQRTE_VEC#1,ANDOREOR_VEC-BITV#0,ADDSUBL_VEC-UADDL2#2,ADDSUBL_VEC-USUBL2#2,ADDSUBW_VEC-UADDW2#2,ADDSUBW_VEC-USUBW2#2,ADDSUBHN_VEC-RADDHN2#2,ADDSUBHN_VEC-RSUBHN2#2,ABDL_VEC-UABAL2#2,ABDL_VEC-UABDL2#2,MULL_VEC-UMLAL2#2,MULL_VEC-UMLSL2#2,MULL_VEC-UMULL2#2,SHLL_VEC_ESZ-SHLL2_VEC_ESZ#2,FCVT_VEC-FCVTPU_VEC#1,FCVT_VEC-FCVTZU_VEC#1,FRINT_VEC-FRINTI_VEC#1,FHM_VEC-FMLSL2_VEC#0
pub const fn classify_impl_d7(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x4386,
    0x1 => 0x2b83,
    0x2 => 0x0,
    0x3 => 0x2c82,
    0x4 => 0x4406,
    0x5 => 0x2b84,
    0x6 => 0x0,
    0x7 => 0x4306,
    0x8 => 0x4387,
    0x9 => 0x2b85,
    0xa => 0x1,
    0xb => 0x2c83,
    0xc => 0x4407,
    0xd => 0x2d82,
    0xe => 0x2,
    0xf => 0x2d83,
    0x10 => 0x4486,
    0x11 => 0x3484,
    0x12 => 0x3,
    0x13 => 0x3485,
    0x14 => 0x4506,
    0x15 => 0x3486,
    0x16 => 0x0,
    0x17 => 0x3487,
    0x18 => 0x4487,
    0x19 => 0x3504,
    0x1a => 0x4,
    0x1b => 0x3505,
    0x1c => 0x4507,
    0x1d => 0x3582,
    0x1e => 0x5,
    0x1f => 0x3583,
    0x20 => 0x4589,
    0x21 => 0x3681,
    0x22 => 0x6,
    0x23 => 0x2e81,
    0x24 => 0x0,
    0x25 => 0x3782,
    0x26 => 0x7,
    0x27 => 0x0,
    0x28 => 0x458a,
    0x29 => 0x3506,
    0x2a => 0x0,
    0x2b => 0x3507,
    0x2c => 0x0,
    0x2d => 0x3881,
    0x2e => 0x8,
    0x2f => 0x0,
    0x30 => 0x458b,
    0x31 => 0x3906,
    0x32 => 0x9,
    0x33 => 0x5b03,
    0x34 => 0x0,
    0x35 => 0x3c83,
    0x36 => 0xa,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x3a83,
    0x3a => 0x0,
    0x3b => 0x3a84,
    0x3c => 0x0,
    0x3d => 0x3907,
    0x3e => 0xb,
    0x3f => 0x0,
    0x40 => 0x4386,
    0x41 => 0x2b83,
    0x42 => 0x0,
    0x43 => 0x2c82,
    0x44 => 0x4406,
    0x45 => 0x2b84,
    0x46 => 0x0,
    0x47 => 0x4306,
    0x48 => 0x4387,
    0x49 => 0x2b85,
    0x4a => 0xc,
    0x4b => 0x2c83,
    0x4c => 0x4407,
    0x4d => 0x2d82,
    0x4e => 0xd,
    0x4f => 0x2d83,
    0x50 => 0x4486,
    0x51 => 0x3484,
    0x52 => 0xe,
    0x53 => 0x3485,
    0x54 => 0x4506,
    0x55 => 0x3486,
    0x56 => 0x0,
    0x57 => 0x3487,
    0x58 => 0x4487,
    0x59 => 0x3504,
    0x5a => 0x0,
    0x5b => 0x3505,
    0x5c => 0x4507,
    0x5d => 0x3582,
    0x5e => 0x0,
    0x5f => 0x3583,
    0x60 => 0x4589,
    0x61 => 0x3681,
    0x62 => 0x0,
    0x63 => 0x2e81,
    0x64 => 0x0,
    0x65 => 0x3782,
    0x66 => 0xf,
    0x67 => 0x0,
    0x68 => 0x458a,
    0x69 => 0x3506,
    0x6a => 0x10,
    0x6b => 0x3507,
    0x6c => 0x0,
    0x6d => 0x3881,
    0x6e => 0x11,
    0x6f => 0x0,
    0x70 => 0x458b,
    0x71 => 0x3906,
    0x72 => 0x12,
    0x73 => 0x5b03,
    0x74 => 0x0,
    0x75 => 0x3c83,
    0x76 => 0x13,
    0x77 => 0x0,
    0x78 => 0x0,
    0x79 => 0x3a83,
    0x7a => 0x0,
    0x7b => 0x3a84,
    0x7c => 0x0,
    0x7d => 0x3907,
    0x7e => 0x14,
    0x7f => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_d7_1(inst), // ADDLP_VEC-UADDLP#2
    0x2 => return classify_impl_d7_2(inst), // ARITH1_VEC-USQADD_VEC#5
    0x3 => return classify_impl_d7_3(inst), // CLZ_VEC-CLZ_VEC#2
    0x4 => return classify_impl_d7_4(inst), // ADDLP_VEC-UADALP#2
    0x5 => return classify_impl_d7_5(inst), // ARITH1_VEC-SQNEG_VEC#5
    0x6 => return classify_impl_d7_6(inst), // CMZERO_VEC-CMGE_ZERO_VEC#5
    0x7 => return classify_impl_d7_7(inst), // CMZERO_VEC-CMLE_ZERO_VEC#5
    0x8 => return classify_impl_d7_8(inst), // ARITH1_VEC-NEG_VEC#5
    0x9 => return classify_impl_d7_9(inst), // FCMP_ZERO_VEC-FCMGE_ZERO_VEC#1
    0xa => return classify_impl_d7_a(inst), // FCMP_ZERO_VEC-FCMLE_ZERO_VEC#1
    0xb => return classify_impl_d7_b(inst), // FARITH1_VEC-FNEG_VEC#1
    0xc => return classify_impl_d7_c(inst), // XTN_VEC-SQXTUN2_VEC#2
    0xd => return classify_impl_d7_d(inst), // SHLL_VEC_ESZ-SHLL2_VEC_ESZ#2
    0xe => return classify_impl_d7_e(inst), // XTN_VEC-UQXTN2_VEC#2
    0xf => return classify_impl_d7_f(inst), // FRINT_VEC-FRINTI_VEC#1
    0x10 => return classify_impl_d7_10(inst), // FCVT_VEC-FCVTPU_VEC#1
    0x11 => return classify_impl_d7_11(inst), // FCVT_VEC-FCVTZU_VEC#1
    0x12 => return classify_impl_d7_12(inst), // FRECP_VEC-URSQRTE_VEC#1
    0x13 => return classify_impl_d7_13(inst), // FRECP_VEC-FRSQRTE_VEC#1
    0x14 => return classify_impl_d7_14(inst), // FARITH1_VEC-FSQRT_VEC#1
    _ => idx
  };
  return idx;
}


// INT_HORZ_VEC-UADDLV#4
pub const fn classify_impl_d8_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5384;
}


// INT_HORZ_VEC-UMAXV#4
pub const fn classify_impl_d8_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5385;
}


// FP_HORZ_VEC-FMINNMV#0
pub const fn classify_impl_d8_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5486;
}


// FP_HORZ_VEC-FMINV#0
pub const fn classify_impl_d8_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5487;
}


// INT_HORZ_VEC-UMINV#4
pub const fn classify_impl_d8_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5386;
}

// HADDSUB_VEC-UHADD#2,HADDSUB_VEC-URHADD#2,HADDSUB_VEC-UHSUB#2,QADDSUB_VEC-UQADD#5,QADDSUB_VEC-UQSUB#5,CMGT_VEC-CMHIV#5,CMGT_VEC-CMHSV#5,CMEQ_VEC-CMEQV#5,SHL_REG_VEC-USHL#5,SHL_REG_VEC-UQSHL#5,SHL_REG_VEC-URSHL#5,SHL_REG_VEC-UQRSHL#5,MINMAX_VEC-UMAX#2,MINMAX_VEC-UMIN#2,MINMAX_VEC-UMAXP#2,MINMAX_VEC-UMINP#2,ABD_VEC-UABD#2,ABD_VEC-UABA#2,ADDSUB_VEC-SUB_VEC#5,MUL_VEC-MLS_VEC#2,SQDMULH_VEC-SQRDMULH#1,FMINMAX_VEC-FMINNMP_VEC#1,FMINMAX_VEC-FMINP_VEC#1,FCMP_REG_VEC-FCMGT_VEC#1,FCMP_REG_VEC-FACGT_VEC#1,FADDSUB_VEC-FABD_VEC#1,ANDOREOR_VEC-BITV#0,ADDSUBL_VEC-UADDL2#2,ADDSUBL_VEC-USUBL2#2,ADDSUBW_VEC-UADDW2#2,ADDSUBW_VEC-USUBW2#2,ADDSUBHN_VEC-RADDHN2#2,ADDSUBHN_VEC-RSUBHN2#2,ABDL_VEC-UABAL2#2,ABDL_VEC-UABDL2#2,MULL_VEC-UMLAL2#2,MULL_VEC-UMLSL2#2,MULL_VEC-UMULL2#2,INT_HORZ_VEC-UADDLV#4,INT_HORZ_VEC-UMAXV#4,INT_HORZ_VEC-UMINV#4,FP_HORZ_VEC-FMINNMV#0,FP_HORZ_VEC-FMINV#0,FHM_VEC-FMLSL2_VEC#0
pub const fn classify_impl_d8(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x4386,
    0x1 => 0x2b83,
    0x2 => 0x0,
    0x3 => 0x2c82,
    0x4 => 0x4406,
    0x5 => 0x2b84,
    0x6 => 0x0,
    0x7 => 0x4306,
    0x8 => 0x4387,
    0x9 => 0x2b85,
    0xa => 0x0,
    0xb => 0x2c83,
    0xc => 0x4407,
    0xd => 0x2d82,
    0xe => 0x1,
    0xf => 0x2d83,
    0x10 => 0x4486,
    0x11 => 0x3484,
    0x12 => 0x0,
    0x13 => 0x3485,
    0x14 => 0x4506,
    0x15 => 0x3486,
    0x16 => 0x0,
    0x17 => 0x3487,
    0x18 => 0x4487,
    0x19 => 0x3504,
    0x1a => 0x0,
    0x1b => 0x3505,
    0x1c => 0x4507,
    0x1d => 0x3582,
    0x1e => 0x0,
    0x1f => 0x3583,
    0x20 => 0x4589,
    0x21 => 0x3681,
    0x22 => 0x0,
    0x23 => 0x2e81,
    0x24 => 0x0,
    0x25 => 0x3782,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x458a,
    0x29 => 0x3506,
    0x2a => 0x2,
    0x2b => 0x3507,
    0x2c => 0x0,
    0x2d => 0x3881,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x458b,
    0x31 => 0x3906,
    0x32 => 0x3,
    0x33 => 0x5b03,
    0x34 => 0x0,
    0x35 => 0x3c83,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x3a83,
    0x3a => 0x0,
    0x3b => 0x3a84,
    0x3c => 0x0,
    0x3d => 0x3907,
    0x3e => 0x4,
    0x3f => 0x0,
    0x40 => 0x4386,
    0x41 => 0x2b83,
    0x42 => 0x0,
    0x43 => 0x2c82,
    0x44 => 0x4406,
    0x45 => 0x2b84,
    0x46 => 0x0,
    0x47 => 0x4306,
    0x48 => 0x4387,
    0x49 => 0x2b85,
    0x4a => 0x0,
    0x4b => 0x2c83,
    0x4c => 0x4407,
    0x4d => 0x2d82,
    0x4e => 0x0,
    0x4f => 0x2d83,
    0x50 => 0x4486,
    0x51 => 0x3484,
    0x52 => 0x0,
    0x53 => 0x3485,
    0x54 => 0x4506,
    0x55 => 0x3486,
    0x56 => 0x0,
    0x57 => 0x3487,
    0x58 => 0x4487,
    0x59 => 0x3504,
    0x5a => 0x0,
    0x5b => 0x3505,
    0x5c => 0x4507,
    0x5d => 0x3582,
    0x5e => 0x0,
    0x5f => 0x3583,
    0x60 => 0x4589,
    0x61 => 0x3681,
    0x62 => 0x0,
    0x63 => 0x2e81,
    0x64 => 0x0,
    0x65 => 0x3782,
    0x66 => 0x0,
    0x67 => 0x0,
    0x68 => 0x458a,
    0x69 => 0x3506,
    0x6a => 0x5,
    0x6b => 0x3507,
    0x6c => 0x0,
    0x6d => 0x3881,
    0x6e => 0x0,
    0x6f => 0x0,
    0x70 => 0x458b,
    0x71 => 0x3906,
    0x72 => 0x0,
    0x73 => 0x5b03,
    0x74 => 0x0,
    0x75 => 0x3c83,
    0x76 => 0x0,
    0x77 => 0x0,
    0x78 => 0x0,
    0x79 => 0x3a83,
    0x7a => 0x0,
    0x7b => 0x3a84,
    0x7c => 0x0,
    0x7d => 0x3907,
    0x7e => 0x0,
    0x7f => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_d8_1(inst), // INT_HORZ_VEC-UADDLV#4
    0x2 => return classify_impl_d8_2(inst), // INT_HORZ_VEC-UMAXV#4
    0x3 => return classify_impl_d8_3(inst), // FP_HORZ_VEC-FMINNMV#0
    0x4 => return classify_impl_d8_4(inst), // FP_HORZ_VEC-FMINV#0
    0x5 => return classify_impl_d8_5(inst), // INT_HORZ_VEC-UMINV#4
    _ => idx
  };
  return idx;
}


// FP16_3REG_VEC-FMINNMP_VEC_FP16#0,FP16_3REG_VEC-FABD_VEC_FP16#0,FP16_3REG_VEC-FCMGT_VEC_FP16#0,FP16_3REG_VEC-FACGT_VEC_FP16#0,FP16_3REG_VEC-FMINP_VEC_FP16#0,FMLAL_VEC-BFMLALT_VEC#0,FCMLA_VEC-FCMLA_VEC#8,FCMLA_VEC-FCMLA_VEC#9,FCMLA_VEC-FCADD_VEC#4
pub const fn classify_impl_d9(inst: u32) -> u32 {
  if (inst&0x400) != 0x400 { return 0; }
  let idx = match (inst >> 11) & 0x1f {
    0x0 => 0x4194,
    0x1 => 0x0,
    0x2 => 0x4195,
    0x3 => 0x0,
    0x4 => 0x4197,
    0x5 => 0x4198,
    0x6 => 0x4199,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x5c00,
    0x19 => 0x5c00,
    0x1a => 0x5c00,
    0x1b => 0x5c00,
    0x1c => 0x5c01,
    0x1d => 0x0,
    0x1e => 0x5c01,
    0x1f => 0x5a03,
    _ => 0,
  };
  return idx;
}


// ARITH1_VEC-USQADD_VEC#6
pub const fn classify_impl_da_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3083;
}


// ARITH1_VEC-SQNEG_VEC#6
pub const fn classify_impl_da_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3084;
}


// CMZERO_VEC-CMGE_ZERO_VEC#6
pub const fn classify_impl_da_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f83;
}


// CMZERO_VEC-CMLE_ZERO_VEC#6
pub const fn classify_impl_da_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f84;
}


// ARITH1_VEC-NEG_VEC#6
pub const fn classify_impl_da_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3085;
}


// FCMP_ZERO_VEC-FCMGE_ZERO_VEC#2
pub const fn classify_impl_da_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3b03;
}


// FCMP_ZERO_VEC-FCMLE_ZERO_VEC#2
pub const fn classify_impl_da_7(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3b04;
}


// FARITH1_VEC-FNEG_VEC#2
pub const fn classify_impl_da_8(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3b81;
}


// FRINT_VEC-FRINTI_VEC#2
pub const fn classify_impl_da_9(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5206;
}


// FCVT_VEC-FCVTPU_VEC#2
pub const fn classify_impl_da_a(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f08;
}


// FCVT_VEC-FCVTZU_VEC#2
pub const fn classify_impl_da_b(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4f09;
}


// FRECP_VEC-FRSQRTE_VEC#2
pub const fn classify_impl_da_c(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3d83;
}


// FARITH1_VEC-FSQRT_VEC#2
pub const fn classify_impl_da_d(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3b82;
}

// QADDSUB_VEC-UQADD#6,QADDSUB_VEC-UQSUB#6,CMGT_VEC-CMHIV#6,CMGT_VEC-CMHSV#6,CMEQ_VEC-CMEQV#6,CMZERO_VEC-CMGE_ZERO_VEC#6,CMZERO_VEC-CMLE_ZERO_VEC#6,ARITH1_VEC-USQADD_VEC#6,ARITH1_VEC-SQNEG_VEC#6,ARITH1_VEC-NEG_VEC#6,SHL_REG_VEC-USHL#6,SHL_REG_VEC-UQSHL#6,SHL_REG_VEC-URSHL#6,SHL_REG_VEC-UQRSHL#6,ADDSUB_VEC-SUB_VEC#6,FMINMAX_VEC-FMINNMP_VEC#2,FMINMAX_VEC-FMINP_VEC#2,FCMP_REG_VEC-FCMGT_VEC#2,FCMP_REG_VEC-FACGT_VEC#2,FCMP_ZERO_VEC-FCMGE_ZERO_VEC#2,FCMP_ZERO_VEC-FCMLE_ZERO_VEC#2,FARITH1_VEC-FNEG_VEC#2,FARITH1_VEC-FSQRT_VEC#2,FADDSUB_VEC-FABD_VEC#2,FRECP_VEC-FRSQRTE_VEC#2,ANDOREOR_VEC-BIFV#0,FCVT_VEC-FCVTPU_VEC#2,FCVT_VEC-FCVTZU_VEC#2,FRINT_VEC-FRINTI_VEC#2
pub const fn classify_impl_da(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x2c82,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x4307,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x2c83,
    0xc => 0x0,
    0xd => 0x2d82,
    0xe => 0x1,
    0xf => 0x2d83,
    0x10 => 0x0,
    0x11 => 0x3484,
    0x12 => 0x0,
    0x13 => 0x3485,
    0x14 => 0x0,
    0x15 => 0x3486,
    0x16 => 0x0,
    0x17 => 0x3487,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x2,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x3681,
    0x22 => 0x3,
    0x23 => 0x2e81,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x4,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x5,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x3906,
    0x32 => 0x6,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x3c83,
    0x36 => 0x7,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x3a83,
    0x3a => 0x0,
    0x3b => 0x3a84,
    0x3c => 0x0,
    0x3d => 0x3907,
    0x3e => 0x8,
    0x3f => 0x0,
    0x40 => 0x0,
    0x41 => 0x0,
    0x42 => 0x0,
    0x43 => 0x2c82,
    0x44 => 0x0,
    0x45 => 0x0,
    0x46 => 0x0,
    0x47 => 0x4307,
    0x48 => 0x0,
    0x49 => 0x0,
    0x4a => 0x0,
    0x4b => 0x2c83,
    0x4c => 0x0,
    0x4d => 0x2d82,
    0x4e => 0x0,
    0x4f => 0x2d83,
    0x50 => 0x0,
    0x51 => 0x3484,
    0x52 => 0x0,
    0x53 => 0x3485,
    0x54 => 0x0,
    0x55 => 0x3486,
    0x56 => 0x0,
    0x57 => 0x3487,
    0x58 => 0x0,
    0x59 => 0x0,
    0x5a => 0x0,
    0x5b => 0x0,
    0x5c => 0x0,
    0x5d => 0x0,
    0x5e => 0x0,
    0x5f => 0x0,
    0x60 => 0x0,
    0x61 => 0x3681,
    0x62 => 0x0,
    0x63 => 0x2e81,
    0x64 => 0x0,
    0x65 => 0x0,
    0x66 => 0x9,
    0x67 => 0x0,
    0x68 => 0x0,
    0x69 => 0x0,
    0x6a => 0xa,
    0x6b => 0x0,
    0x6c => 0x0,
    0x6d => 0x0,
    0x6e => 0xb,
    0x6f => 0x0,
    0x70 => 0x0,
    0x71 => 0x3906,
    0x72 => 0x0,
    0x73 => 0x0,
    0x74 => 0x0,
    0x75 => 0x3c83,
    0x76 => 0xc,
    0x77 => 0x0,
    0x78 => 0x0,
    0x79 => 0x3a83,
    0x7a => 0x0,
    0x7b => 0x3a84,
    0x7c => 0x0,
    0x7d => 0x3907,
    0x7e => 0xd,
    0x7f => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_da_1(inst), // ARITH1_VEC-USQADD_VEC#6
    0x2 => return classify_impl_da_2(inst), // ARITH1_VEC-SQNEG_VEC#6
    0x3 => return classify_impl_da_3(inst), // CMZERO_VEC-CMGE_ZERO_VEC#6
    0x4 => return classify_impl_da_4(inst), // CMZERO_VEC-CMLE_ZERO_VEC#6
    0x5 => return classify_impl_da_5(inst), // ARITH1_VEC-NEG_VEC#6
    0x6 => return classify_impl_da_6(inst), // FCMP_ZERO_VEC-FCMGE_ZERO_VEC#2
    0x7 => return classify_impl_da_7(inst), // FCMP_ZERO_VEC-FCMLE_ZERO_VEC#2
    0x8 => return classify_impl_da_8(inst), // FARITH1_VEC-FNEG_VEC#2
    0x9 => return classify_impl_da_9(inst), // FRINT_VEC-FRINTI_VEC#2
    0xa => return classify_impl_da_a(inst), // FCVT_VEC-FCVTPU_VEC#2
    0xb => return classify_impl_da_b(inst), // FCVT_VEC-FCVTZU_VEC#2
    0xc => return classify_impl_da_c(inst), // FRECP_VEC-FRSQRTE_VEC#2
    0xd => return classify_impl_da_d(inst), // FARITH1_VEC-FSQRT_VEC#2
    _ => idx
  };
  return idx;
}


// FP16_2REG_VEC-FCMGE_ZERO_VEC_FP16#0
pub const fn classify_impl_db_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x4295;
}


// FP16_2REG_VEC-FCMLE_ZERO_VEC_FP16#0
pub const fn classify_impl_db_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x4296;
}


// FP16_2REG_VEC-FNEG_VEC_FP16#0
pub const fn classify_impl_db_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x4297;
}


// FP16_2REG_VEC-FRINTI_VEC_FP16#0
pub const fn classify_impl_db_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x4298;
}


// FP16_2REG_VEC-FCVTPU_VEC_FP16#0
pub const fn classify_impl_db_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x4299;
}


// FP16_2REG_VEC-FCVTZU_VEC_FP16#0
pub const fn classify_impl_db_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x429a;
}


// FP16_2REG_VEC-FRSQRTE_VEC_FP16#0
pub const fn classify_impl_db_7(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x429b;
}


// FP16_2REG_VEC-FSQRT_VEC_FP16#0
pub const fn classify_impl_db_8(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  return 0x429c;
}

// QADDSUB_VEC-UQADD#6,QADDSUB_VEC-UQSUB#6,CMGT_VEC-CMHIV#6,CMGT_VEC-CMHSV#6,CMEQ_VEC-CMEQV#6,SHL_REG_VEC-USHL#6,SHL_REG_VEC-UQSHL#6,SHL_REG_VEC-URSHL#6,SHL_REG_VEC-UQRSHL#6,ADDSUB_VEC-SUB_VEC#6,FMINMAX_VEC-FMINNMP_VEC#2,FMINMAX_VEC-FMINP_VEC#2,FCMP_REG_VEC-FCMGT_VEC#2,FCMP_REG_VEC-FACGT_VEC#2,FADDSUB_VEC-FABD_VEC#2,FP16_2REG_VEC-FCMGE_ZERO_VEC_FP16#0,FP16_2REG_VEC-FCMLE_ZERO_VEC_FP16#0,FP16_2REG_VEC-FNEG_VEC_FP16#0,FP16_2REG_VEC-FRINTI_VEC_FP16#0,FP16_2REG_VEC-FCVTPU_VEC_FP16#0,FP16_2REG_VEC-FCVTZU_VEC_FP16#0,FP16_2REG_VEC-FRSQRTE_VEC_FP16#0,FP16_2REG_VEC-FSQRT_VEC_FP16#0,ANDOREOR_VEC-BIFV#0
pub const fn classify_impl_db(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x2c82,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x4307,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x2c83,
    0xc => 0x0,
    0xd => 0x2d82,
    0xe => 0x0,
    0xf => 0x2d83,
    0x10 => 0x0,
    0x11 => 0x3484,
    0x12 => 0x0,
    0x13 => 0x3485,
    0x14 => 0x0,
    0x15 => 0x3486,
    0x16 => 0x0,
    0x17 => 0x3487,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x3681,
    0x22 => 0x0,
    0x23 => 0x2e81,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x3906,
    0x32 => 0x1,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x3c83,
    0x36 => 0x2,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x3a83,
    0x3a => 0x0,
    0x3b => 0x3a84,
    0x3c => 0x0,
    0x3d => 0x3907,
    0x3e => 0x3,
    0x3f => 0x0,
    0x40 => 0x0,
    0x41 => 0x0,
    0x42 => 0x0,
    0x43 => 0x2c82,
    0x44 => 0x0,
    0x45 => 0x0,
    0x46 => 0x0,
    0x47 => 0x4307,
    0x48 => 0x0,
    0x49 => 0x0,
    0x4a => 0x0,
    0x4b => 0x2c83,
    0x4c => 0x0,
    0x4d => 0x2d82,
    0x4e => 0x0,
    0x4f => 0x2d83,
    0x50 => 0x0,
    0x51 => 0x3484,
    0x52 => 0x0,
    0x53 => 0x3485,
    0x54 => 0x0,
    0x55 => 0x3486,
    0x56 => 0x0,
    0x57 => 0x3487,
    0x58 => 0x0,
    0x59 => 0x0,
    0x5a => 0x0,
    0x5b => 0x0,
    0x5c => 0x0,
    0x5d => 0x0,
    0x5e => 0x0,
    0x5f => 0x0,
    0x60 => 0x0,
    0x61 => 0x3681,
    0x62 => 0x0,
    0x63 => 0x2e81,
    0x64 => 0x0,
    0x65 => 0x0,
    0x66 => 0x4,
    0x67 => 0x0,
    0x68 => 0x0,
    0x69 => 0x0,
    0x6a => 0x5,
    0x6b => 0x0,
    0x6c => 0x0,
    0x6d => 0x0,
    0x6e => 0x6,
    0x6f => 0x0,
    0x70 => 0x0,
    0x71 => 0x3906,
    0x72 => 0x0,
    0x73 => 0x0,
    0x74 => 0x0,
    0x75 => 0x3c83,
    0x76 => 0x7,
    0x77 => 0x0,
    0x78 => 0x0,
    0x79 => 0x3a83,
    0x7a => 0x0,
    0x7b => 0x3a84,
    0x7c => 0x0,
    0x7d => 0x3907,
    0x7e => 0x8,
    0x7f => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_db_1(inst), // FP16_2REG_VEC-FCMGE_ZERO_VEC_FP16#0
    0x2 => return classify_impl_db_2(inst), // FP16_2REG_VEC-FCMLE_ZERO_VEC_FP16#0
    0x3 => return classify_impl_db_3(inst), // FP16_2REG_VEC-FNEG_VEC_FP16#0
    0x4 => return classify_impl_db_4(inst), // FP16_2REG_VEC-FRINTI_VEC_FP16#0
    0x5 => return classify_impl_db_5(inst), // FP16_2REG_VEC-FCVTPU_VEC_FP16#0
    0x6 => return classify_impl_db_6(inst), // FP16_2REG_VEC-FCVTZU_VEC_FP16#0
    0x7 => return classify_impl_db_7(inst), // FP16_2REG_VEC-FRSQRTE_VEC_FP16#0
    0x8 => return classify_impl_db_8(inst), // FP16_2REG_VEC-FSQRT_VEC_FP16#0
    _ => idx
  };
  return idx;
}


// SIMD_IMM-MVNI32#4
pub const fn classify_impl_dc_1_1(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d08;
}


// SIMD_IMM-BICI32#4
pub const fn classify_impl_dc_1_2(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d09;
}


// SIMD_IMM-MVNI32#5
pub const fn classify_impl_dc_1_3(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d08;
}


// SIMD_IMM-BICI32#5
pub const fn classify_impl_dc_1_4(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d09;
}


// SIMD_IMM-MVNI32#6
pub const fn classify_impl_dc_1_5(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d08;
}


// SIMD_IMM-BICI32#6
pub const fn classify_impl_dc_1_6(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d09;
}


// SIMD_IMM-MVNI32#7
pub const fn classify_impl_dc_1_7(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d08;
}


// SIMD_IMM-BICI32#7
pub const fn classify_impl_dc_1_8(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d09;
}


// SIMD_IMM-MVNI16#2
pub const fn classify_impl_dc_1_9(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d0a;
}


// SIMD_IMM-BICI16#2
pub const fn classify_impl_dc_1_a_1(inst: u32) -> u32 {
  if (inst&0x800) != 0x0 { return 0; }
  return 0x5d0b;
}

// FMUL_ELEM_FP16-FMULX_ELEM_FP16#0,SIMD_IMM-BICI16#2
pub const fn classify_impl_dc_1_a(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x5883,
    0x1 => 0x1,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_dc_1_a_1(inst), // SIMD_IMM-BICI16#2
    _ => idx
  };
  return idx;
}


// SIMD_IMM-MVNI16#3
pub const fn classify_impl_dc_1_b(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d0a;
}


// SIMD_IMM-BICI16#3
pub const fn classify_impl_dc_1_c(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d0b;
}


// SIMD_IMM-MVNI32_MSL#2
pub const fn classify_impl_dc_1_d(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d0c;
}


// SIMD_IMM-MVNI32_MSL#3
pub const fn classify_impl_dc_1_e(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d0c;
}


// SIMD_IMM-MOVI64#1
pub const fn classify_impl_dc_1_f(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d0d;
}


// SIMD_IMM-FMOV64#0
pub const fn classify_impl_dc_1_10(inst: u32) -> u32 {
  if (inst&0xc00) != 0x400 { return 0; }
  return 0x5d0e;
}

// FMUL_ELEM_FP16-FMULX_ELEM_FP16#0,SIMD_IMM-MVNI32#4,SIMD_IMM-MVNI32#5,SIMD_IMM-MVNI32#6,SIMD_IMM-MVNI32#7,SIMD_IMM-BICI32#4,SIMD_IMM-BICI32#5,SIMD_IMM-BICI32#6,SIMD_IMM-BICI32#7,SIMD_IMM-MVNI16#2,SIMD_IMM-MVNI16#3,SIMD_IMM-BICI16#2,SIMD_IMM-BICI16#3,SIMD_IMM-MVNI32_MSL#2,SIMD_IMM-MVNI32_MSL#3,SIMD_IMM-MOVI64#1,SIMD_IMM-FMOV64#0
pub const fn classify_impl_dc_1(inst: u32) -> u32 {
  let idx = match (inst >> 12) & 0xf {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x8,
    0x8 => 0x9,
    0x9 => 0xa,
    0xa => 0xb,
    0xb => 0xc,
    0xc => 0xd,
    0xd => 0xe,
    0xe => 0xf,
    0xf => 0x10,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_dc_1_1(inst), // SIMD_IMM-MVNI32#4
    0x2 => return classify_impl_dc_1_2(inst), // SIMD_IMM-BICI32#4
    0x3 => return classify_impl_dc_1_3(inst), // SIMD_IMM-MVNI32#5
    0x4 => return classify_impl_dc_1_4(inst), // SIMD_IMM-BICI32#5
    0x5 => return classify_impl_dc_1_5(inst), // SIMD_IMM-MVNI32#6
    0x6 => return classify_impl_dc_1_6(inst), // SIMD_IMM-BICI32#6
    0x7 => return classify_impl_dc_1_7(inst), // SIMD_IMM-MVNI32#7
    0x8 => return classify_impl_dc_1_8(inst), // SIMD_IMM-BICI32#7
    0x9 => return classify_impl_dc_1_9(inst), // SIMD_IMM-MVNI16#2
    0xa => return classify_impl_dc_1_a(inst), // FMUL_ELEM_FP16-FMULX_ELEM_FP16#0,SIMD_IMM-BICI16#2
    0xb => return classify_impl_dc_1_b(inst), // SIMD_IMM-MVNI16#3
    0xc => return classify_impl_dc_1_c(inst), // SIMD_IMM-BICI16#3
    0xd => return classify_impl_dc_1_d(inst), // SIMD_IMM-MVNI32_MSL#2
    0xe => return classify_impl_dc_1_e(inst), // SIMD_IMM-MVNI32_MSL#3
    0xf => return classify_impl_dc_1_f(inst), // SIMD_IMM-MOVI64#1
    0x10 => return classify_impl_dc_1_10(inst), // SIMD_IMM-FMOV64#0
    _ => idx
  };
  return idx;
}


// SHR_VEC_IMM-USHR#7,SHR_VEC_IMM-USRA#7,SHR_VEC_IMM-URSHR#7,SHR_VEC_IMM-URSRA#7,QSHL_VEC_IMM-SQSHLU_IMM#7,QSHL_VEC_IMM-UQSHL_IMM#7,SHRN_VEC_IMM-SQSHRUN2#0,SHRN_VEC_IMM-SQRSHRUN2#0,SHRN_VEC_IMM-UQSHRN2#0,SHRN_VEC_IMM-UQRSHRN2#0,SHLL_VEC_IMM-USHLL2#0,SHIFT_VEC_IMM-SRI#7,SHIFT_VEC_IMM-SLI#7,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
pub const fn classify_impl_dc_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4904,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4905,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4906,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4907,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x4d01,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4d02,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4a01,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a02,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b0c,
    0x22 => 0x0,
    0x23 => 0x4b0d,
    0x24 => 0x5883,
    0x25 => 0x4b0e,
    0x26 => 0x5883,
    0x27 => 0x4b0f,
    0x28 => 0x0,
    0x29 => 0x4b83,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}

// SHR_VEC_IMM-USHR#7,SHR_VEC_IMM-USRA#7,SHR_VEC_IMM-URSHR#7,SHR_VEC_IMM-URSRA#7,QSHL_VEC_IMM-SQSHLU_IMM#7,QSHL_VEC_IMM-UQSHL_IMM#7,SHRN_VEC_IMM-SQSHRUN2#0,SHRN_VEC_IMM-SQRSHRUN2#0,SHRN_VEC_IMM-UQSHRN2#0,SHRN_VEC_IMM-UQRSHRN2#0,SHLL_VEC_IMM-USHLL2#0,SHIFT_VEC_IMM-SRI#7,SHIFT_VEC_IMM-SLI#7,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0,SIMD_IMM-MVNI32#4,SIMD_IMM-MVNI32#5,SIMD_IMM-MVNI32#6,SIMD_IMM-MVNI32#7,SIMD_IMM-BICI32#4,SIMD_IMM-BICI32#5,SIMD_IMM-BICI32#6,SIMD_IMM-BICI32#7,SIMD_IMM-MVNI16#2,SIMD_IMM-MVNI16#3,SIMD_IMM-BICI16#2,SIMD_IMM-BICI16#3,SIMD_IMM-MVNI32_MSL#2,SIMD_IMM-MVNI32_MSL#3,SIMD_IMM-MOVI64#1,SIMD_IMM-FMOV64#0
pub const fn classify_impl_dc(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_dc_1(inst), // FMUL_ELEM_FP16-FMULX_ELEM_FP16#0,SIMD_IMM-MVNI32#4,SIMD_IMM-MVNI32#5,SIMD_IMM-MVNI32#6,SIMD_IMM-MVNI32#7,SIMD_IMM-BICI32#4,SIMD_IMM-BICI32#5,SIMD_IMM-BICI32#6,SIMD_IMM-BICI32#7,SIMD_IMM-MVNI16#2,SIMD_IMM-MVNI16#3,SIMD_IMM-BICI16#2,SIMD_IMM-BICI16#3,SIMD_IMM-MVNI32_MSL#2,SIMD_IMM-MVNI32_MSL#3,SIMD_IMM-MOVI64#1,SIMD_IMM-FMOV64#0
    0x2 => return classify_impl_dc_2(inst), // SHR_VEC_IMM-USHR#7,SHR_VEC_IMM-USRA#7,SHR_VEC_IMM-URSHR#7,SHR_VEC_IMM-URSRA#7,QSHL_VEC_IMM-SQSHLU_IMM#7,QSHL_VEC_IMM-UQSHL_IMM#7,SHRN_VEC_IMM-SQSHRUN2#0,SHRN_VEC_IMM-SQRSHRUN2#0,SHRN_VEC_IMM-UQSHRN2#0,SHRN_VEC_IMM-UQRSHRN2#0,SHLL_VEC_IMM-USHLL2#0,SHIFT_VEC_IMM-SRI#7,SHIFT_VEC_IMM-SLI#7,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
    _ => idx
  };
  return idx;
}


// SHR_VEC_IMM-USHR#8,SHR_VEC_IMM-USRA#8,SHR_VEC_IMM-URSHR#8,SHR_VEC_IMM-URSRA#8,QSHL_VEC_IMM-SQSHLU_IMM#8,QSHL_VEC_IMM-UQSHL_IMM#8,SHRN_VEC_IMM-SQSHRUN2#1,SHRN_VEC_IMM-SQRSHRUN2#1,SHRN_VEC_IMM-UQSHRN2#1,SHRN_VEC_IMM-UQRSHRN2#1,SHLL_VEC_IMM-USHLL2#1,SHIFT_VEC_IMM-SRI#8,SHIFT_VEC_IMM-SLI#8,FCVT_VEC_FIXED-UCVTF_VEC_FIX_FP16#2,FCVT_VEC_FIXED-FCVTZU_VEC_FIX_FP16#2,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
pub const fn classify_impl_dd_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4904,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4905,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4906,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4907,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x4d01,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4d02,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4a01,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a02,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b0c,
    0x22 => 0x0,
    0x23 => 0x4b0d,
    0x24 => 0x5883,
    0x25 => 0x4b0e,
    0x26 => 0x5883,
    0x27 => 0x4b0f,
    0x28 => 0x0,
    0x29 => 0x4b83,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e04,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4e05,
    _ => 0,
  };
  return idx;
}


// SHR_VEC_IMM-USHR#9,SHR_VEC_IMM-USRA#9,SHR_VEC_IMM-URSHR#9,SHR_VEC_IMM-URSRA#9,QSHL_VEC_IMM-SQSHLU_IMM#9,QSHL_VEC_IMM-UQSHL_IMM#9,SHRN_VEC_IMM-SQSHRUN2#2,SHRN_VEC_IMM-SQRSHRUN2#2,SHRN_VEC_IMM-UQSHRN2#2,SHRN_VEC_IMM-UQRSHRN2#2,SHLL_VEC_IMM-USHLL2#2,SHIFT_VEC_IMM-SRI#9,SHIFT_VEC_IMM-SLI#9,FCVT_VEC_FIXED-UCVTF_VEC_FIX_FP16#3,FCVT_VEC_FIXED-FCVTZU_VEC_FIX_FP16#3,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
pub const fn classify_impl_dd_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4904,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4905,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4906,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4907,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x4d01,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4d02,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4a01,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a02,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b0c,
    0x22 => 0x0,
    0x23 => 0x4b0d,
    0x24 => 0x5883,
    0x25 => 0x4b0e,
    0x26 => 0x5883,
    0x27 => 0x4b0f,
    0x28 => 0x0,
    0x29 => 0x4b83,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e04,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4e05,
    _ => 0,
  };
  return idx;
}

// SHR_VEC_IMM-USHR#8,SHR_VEC_IMM-USHR#9,SHR_VEC_IMM-USRA#8,SHR_VEC_IMM-USRA#9,SHR_VEC_IMM-URSHR#8,SHR_VEC_IMM-URSHR#9,SHR_VEC_IMM-URSRA#8,SHR_VEC_IMM-URSRA#9,QSHL_VEC_IMM-SQSHLU_IMM#8,QSHL_VEC_IMM-SQSHLU_IMM#9,QSHL_VEC_IMM-UQSHL_IMM#8,QSHL_VEC_IMM-UQSHL_IMM#9,SHRN_VEC_IMM-SQSHRUN2#1,SHRN_VEC_IMM-SQSHRUN2#2,SHRN_VEC_IMM-SQRSHRUN2#1,SHRN_VEC_IMM-SQRSHRUN2#2,SHRN_VEC_IMM-UQSHRN2#1,SHRN_VEC_IMM-UQSHRN2#2,SHRN_VEC_IMM-UQRSHRN2#1,SHRN_VEC_IMM-UQRSHRN2#2,SHLL_VEC_IMM-USHLL2#1,SHLL_VEC_IMM-USHLL2#2,SHIFT_VEC_IMM-SRI#8,SHIFT_VEC_IMM-SRI#9,SHIFT_VEC_IMM-SLI#8,SHIFT_VEC_IMM-SLI#9,FCVT_VEC_FIXED-UCVTF_VEC_FIX_FP16#2,FCVT_VEC_FIXED-UCVTF_VEC_FIX_FP16#3,FCVT_VEC_FIXED-FCVTZU_VEC_FIX_FP16#2,FCVT_VEC_FIXED-FCVTZU_VEC_FIX_FP16#3,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
pub const fn classify_impl_dd(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_dd_1(inst), // SHR_VEC_IMM-USHR#8,SHR_VEC_IMM-USRA#8,SHR_VEC_IMM-URSHR#8,SHR_VEC_IMM-URSRA#8,QSHL_VEC_IMM-SQSHLU_IMM#8,QSHL_VEC_IMM-UQSHL_IMM#8,SHRN_VEC_IMM-SQSHRUN2#1,SHRN_VEC_IMM-SQRSHRUN2#1,SHRN_VEC_IMM-UQSHRN2#1,SHRN_VEC_IMM-UQRSHRN2#1,SHLL_VEC_IMM-USHLL2#1,SHIFT_VEC_IMM-SRI#8,SHIFT_VEC_IMM-SLI#8,FCVT_VEC_FIXED-UCVTF_VEC_FIX_FP16#2,FCVT_VEC_FIXED-FCVTZU_VEC_FIX_FP16#2,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
    0x2 => return classify_impl_dd_2(inst), // SHR_VEC_IMM-USHR#9,SHR_VEC_IMM-USRA#9,SHR_VEC_IMM-URSHR#9,SHR_VEC_IMM-URSRA#9,QSHL_VEC_IMM-SQSHLU_IMM#9,QSHL_VEC_IMM-UQSHL_IMM#9,SHRN_VEC_IMM-SQSHRUN2#2,SHRN_VEC_IMM-SQRSHRUN2#2,SHRN_VEC_IMM-UQSHRN2#2,SHRN_VEC_IMM-UQRSHRN2#2,SHLL_VEC_IMM-USHLL2#2,SHIFT_VEC_IMM-SRI#9,SHIFT_VEC_IMM-SLI#9,FCVT_VEC_FIXED-UCVTF_VEC_FIX_FP16#3,FCVT_VEC_FIXED-FCVTZU_VEC_FIX_FP16#3,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
    _ => idx
  };
  return idx;
}


// SHR_VEC_IMM-USHR#10,SHR_VEC_IMM-USRA#10,SHR_VEC_IMM-URSHR#10,SHR_VEC_IMM-URSRA#10,QSHL_VEC_IMM-SQSHLU_IMM#10,QSHL_VEC_IMM-UQSHL_IMM#10,SHRN_VEC_IMM-SQSHRUN2#3,SHRN_VEC_IMM-SQRSHRUN2#3,SHRN_VEC_IMM-UQSHRN2#3,SHRN_VEC_IMM-UQRSHRN2#3,SHLL_VEC_IMM-USHLL2#3,SHIFT_VEC_IMM-SRI#10,SHIFT_VEC_IMM-SLI#10,FCVT_VEC_FIXED-UCVTF_VEC_FIX#4,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#4,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
pub const fn classify_impl_de_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4904,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4905,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4906,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4907,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x4d01,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4d02,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4a01,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a02,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b0c,
    0x22 => 0x0,
    0x23 => 0x4b0d,
    0x24 => 0x5883,
    0x25 => 0x4b0e,
    0x26 => 0x5883,
    0x27 => 0x4b0f,
    0x28 => 0x0,
    0x29 => 0x4b83,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e06,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4e07,
    _ => 0,
  };
  return idx;
}


// SHR_VEC_IMM-USHR#11,SHR_VEC_IMM-USRA#11,SHR_VEC_IMM-URSHR#11,SHR_VEC_IMM-URSRA#11,QSHL_VEC_IMM-SQSHLU_IMM#11,QSHL_VEC_IMM-UQSHL_IMM#11,SHRN_VEC_IMM-SQSHRUN2#4,SHRN_VEC_IMM-SQRSHRUN2#4,SHRN_VEC_IMM-UQSHRN2#4,SHRN_VEC_IMM-UQRSHRN2#4,SHLL_VEC_IMM-USHLL2#4,SHIFT_VEC_IMM-SRI#11,SHIFT_VEC_IMM-SLI#11,FCVT_VEC_FIXED-UCVTF_VEC_FIX#5,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#5,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
pub const fn classify_impl_de_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4904,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4905,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4906,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4907,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x4d01,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4d02,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4a01,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a02,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b0c,
    0x22 => 0x0,
    0x23 => 0x4b0d,
    0x24 => 0x5883,
    0x25 => 0x4b0e,
    0x26 => 0x5883,
    0x27 => 0x4b0f,
    0x28 => 0x0,
    0x29 => 0x4b83,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e06,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4e07,
    _ => 0,
  };
  return idx;
}

// SHR_VEC_IMM-USHR#10,SHR_VEC_IMM-USHR#11,SHR_VEC_IMM-USRA#10,SHR_VEC_IMM-USRA#11,SHR_VEC_IMM-URSHR#10,SHR_VEC_IMM-URSHR#11,SHR_VEC_IMM-URSRA#10,SHR_VEC_IMM-URSRA#11,QSHL_VEC_IMM-SQSHLU_IMM#10,QSHL_VEC_IMM-SQSHLU_IMM#11,QSHL_VEC_IMM-UQSHL_IMM#10,QSHL_VEC_IMM-UQSHL_IMM#11,SHRN_VEC_IMM-SQSHRUN2#3,SHRN_VEC_IMM-SQSHRUN2#4,SHRN_VEC_IMM-SQRSHRUN2#3,SHRN_VEC_IMM-SQRSHRUN2#4,SHRN_VEC_IMM-UQSHRN2#3,SHRN_VEC_IMM-UQSHRN2#4,SHRN_VEC_IMM-UQRSHRN2#3,SHRN_VEC_IMM-UQRSHRN2#4,SHLL_VEC_IMM-USHLL2#3,SHLL_VEC_IMM-USHLL2#4,SHIFT_VEC_IMM-SRI#10,SHIFT_VEC_IMM-SRI#11,SHIFT_VEC_IMM-SLI#10,SHIFT_VEC_IMM-SLI#11,FCVT_VEC_FIXED-UCVTF_VEC_FIX#4,FCVT_VEC_FIXED-UCVTF_VEC_FIX#5,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#4,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#5,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
pub const fn classify_impl_de(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_de_1(inst), // SHR_VEC_IMM-USHR#10,SHR_VEC_IMM-USRA#10,SHR_VEC_IMM-URSHR#10,SHR_VEC_IMM-URSRA#10,QSHL_VEC_IMM-SQSHLU_IMM#10,QSHL_VEC_IMM-UQSHL_IMM#10,SHRN_VEC_IMM-SQSHRUN2#3,SHRN_VEC_IMM-SQRSHRUN2#3,SHRN_VEC_IMM-UQSHRN2#3,SHRN_VEC_IMM-UQRSHRN2#3,SHLL_VEC_IMM-USHLL2#3,SHIFT_VEC_IMM-SRI#10,SHIFT_VEC_IMM-SLI#10,FCVT_VEC_FIXED-UCVTF_VEC_FIX#4,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#4,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
    0x2 => return classify_impl_de_2(inst), // SHR_VEC_IMM-USHR#11,SHR_VEC_IMM-USRA#11,SHR_VEC_IMM-URSHR#11,SHR_VEC_IMM-URSRA#11,QSHL_VEC_IMM-SQSHLU_IMM#11,QSHL_VEC_IMM-UQSHL_IMM#11,SHRN_VEC_IMM-SQSHRUN2#4,SHRN_VEC_IMM-SQRSHRUN2#4,SHRN_VEC_IMM-UQSHRN2#4,SHRN_VEC_IMM-UQRSHRN2#4,SHLL_VEC_IMM-USHLL2#4,SHIFT_VEC_IMM-SRI#11,SHIFT_VEC_IMM-SLI#11,FCVT_VEC_FIXED-UCVTF_VEC_FIX#5,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#5,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
    _ => idx
  };
  return idx;
}


// SHR_VEC_IMM-USHR#12,SHR_VEC_IMM-USRA#12,SHR_VEC_IMM-URSHR#12,SHR_VEC_IMM-URSRA#12,QSHL_VEC_IMM-SQSHLU_IMM#12,QSHL_VEC_IMM-UQSHL_IMM#12,SHRN_VEC_IMM-SQSHRUN2#5,SHRN_VEC_IMM-SQRSHRUN2#5,SHRN_VEC_IMM-UQSHRN2#5,SHRN_VEC_IMM-UQRSHRN2#5,SHLL_VEC_IMM-USHLL2#5,SHIFT_VEC_IMM-SRI#12,SHIFT_VEC_IMM-SLI#12,FCVT_VEC_FIXED-UCVTF_VEC_FIX#6,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#6,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
pub const fn classify_impl_df_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4904,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4905,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4906,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4907,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x4d01,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4d02,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4a01,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a02,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b0c,
    0x22 => 0x0,
    0x23 => 0x4b0d,
    0x24 => 0x5883,
    0x25 => 0x4b0e,
    0x26 => 0x5883,
    0x27 => 0x4b0f,
    0x28 => 0x0,
    0x29 => 0x4b83,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e06,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4e07,
    _ => 0,
  };
  return idx;
}


// SHR_VEC_IMM-USHR#13,SHR_VEC_IMM-USRA#13,SHR_VEC_IMM-URSHR#13,SHR_VEC_IMM-URSRA#13,QSHL_VEC_IMM-SQSHLU_IMM#13,QSHL_VEC_IMM-UQSHL_IMM#13,SHRN_VEC_IMM-SQSHRUN2#6,SHRN_VEC_IMM-SQRSHRUN2#6,SHRN_VEC_IMM-UQSHRN2#6,SHRN_VEC_IMM-UQRSHRN2#6,SHLL_VEC_IMM-USHLL2#6,SHIFT_VEC_IMM-SRI#13,SHIFT_VEC_IMM-SLI#13,FCVT_VEC_FIXED-UCVTF_VEC_FIX#7,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#7,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
pub const fn classify_impl_df_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4904,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4905,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4906,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4907,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x4d01,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4d02,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4a01,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4a02,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4b0c,
    0x22 => 0x0,
    0x23 => 0x4b0d,
    0x24 => 0x5883,
    0x25 => 0x4b0e,
    0x26 => 0x5883,
    0x27 => 0x4b0f,
    0x28 => 0x0,
    0x29 => 0x4b83,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e06,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4e07,
    _ => 0,
  };
  return idx;
}

// SHR_VEC_IMM-USHR#12,SHR_VEC_IMM-USHR#13,SHR_VEC_IMM-USRA#12,SHR_VEC_IMM-USRA#13,SHR_VEC_IMM-URSHR#12,SHR_VEC_IMM-URSHR#13,SHR_VEC_IMM-URSRA#12,SHR_VEC_IMM-URSRA#13,QSHL_VEC_IMM-SQSHLU_IMM#12,QSHL_VEC_IMM-SQSHLU_IMM#13,QSHL_VEC_IMM-UQSHL_IMM#12,QSHL_VEC_IMM-UQSHL_IMM#13,SHRN_VEC_IMM-SQSHRUN2#5,SHRN_VEC_IMM-SQSHRUN2#6,SHRN_VEC_IMM-SQRSHRUN2#5,SHRN_VEC_IMM-SQRSHRUN2#6,SHRN_VEC_IMM-UQSHRN2#5,SHRN_VEC_IMM-UQSHRN2#6,SHRN_VEC_IMM-UQRSHRN2#5,SHRN_VEC_IMM-UQRSHRN2#6,SHLL_VEC_IMM-USHLL2#5,SHLL_VEC_IMM-USHLL2#6,SHIFT_VEC_IMM-SRI#12,SHIFT_VEC_IMM-SRI#13,SHIFT_VEC_IMM-SLI#12,SHIFT_VEC_IMM-SLI#13,FCVT_VEC_FIXED-UCVTF_VEC_FIX#6,FCVT_VEC_FIXED-UCVTF_VEC_FIX#7,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#6,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#7,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
pub const fn classify_impl_df(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_df_1(inst), // SHR_VEC_IMM-USHR#12,SHR_VEC_IMM-USRA#12,SHR_VEC_IMM-URSHR#12,SHR_VEC_IMM-URSRA#12,QSHL_VEC_IMM-SQSHLU_IMM#12,QSHL_VEC_IMM-UQSHL_IMM#12,SHRN_VEC_IMM-SQSHRUN2#5,SHRN_VEC_IMM-SQRSHRUN2#5,SHRN_VEC_IMM-UQSHRN2#5,SHRN_VEC_IMM-UQRSHRN2#5,SHLL_VEC_IMM-USHLL2#5,SHIFT_VEC_IMM-SRI#12,SHIFT_VEC_IMM-SLI#12,FCVT_VEC_FIXED-UCVTF_VEC_FIX#6,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#6,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
    0x2 => return classify_impl_df_2(inst), // SHR_VEC_IMM-USHR#13,SHR_VEC_IMM-USRA#13,SHR_VEC_IMM-URSHR#13,SHR_VEC_IMM-URSRA#13,QSHL_VEC_IMM-SQSHLU_IMM#13,QSHL_VEC_IMM-UQSHL_IMM#13,SHRN_VEC_IMM-SQSHRUN2#6,SHRN_VEC_IMM-SQRSHRUN2#6,SHRN_VEC_IMM-UQSHRN2#6,SHRN_VEC_IMM-UQRSHRN2#6,SHLL_VEC_IMM-USHLL2#6,SHIFT_VEC_IMM-SRI#13,SHIFT_VEC_IMM-SLI#13,FCVT_VEC_FIXED-UCVTF_VEC_FIX#7,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#7,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
    _ => idx
  };
  return idx;
}


// SHR_VEC_IMM-USHR#14,SHR_VEC_IMM-USRA#14,SHR_VEC_IMM-URSHR#14,SHR_VEC_IMM-URSRA#14,QSHL_VEC_IMM-SQSHLU_IMM#14,QSHL_VEC_IMM-UQSHL_IMM#14,SHIFT_VEC_IMM-SRI#14,SHIFT_VEC_IMM-SLI#14,FCVT_VEC_FIXED-UCVTF_VEC_FIX#8,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#8,MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL2_ELEM#0,MULL_ELEM-UMLSL2_ELEM#0,MULL_ELEM-UMULL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#2,FCMLA_ELEM-FCMLA_ELEM#3
pub const fn classify_impl_e0_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x5583,
    0x1 => 0x4904,
    0x2 => 0x5583,
    0x3 => 0x0,
    0x4 => 0x5c80,
    0x5 => 0x4905,
    0x6 => 0x5c80,
    0x7 => 0x0,
    0x8 => 0x568f,
    0x9 => 0x4906,
    0xa => 0x568f,
    0xb => 0x0,
    0xc => 0x5c80,
    0xd => 0x4907,
    0xe => 0x5c80,
    0xf => 0x0,
    0x10 => 0x5584,
    0x11 => 0x4d01,
    0x12 => 0x5584,
    0x13 => 0x0,
    0x14 => 0x5c80,
    0x15 => 0x4d02,
    0x16 => 0x5c80,
    0x17 => 0x0,
    0x18 => 0x5690,
    0x19 => 0x4a01,
    0x1a => 0x5690,
    0x1b => 0x0,
    0x1c => 0x5c80,
    0x1d => 0x4a02,
    0x1e => 0x5c80,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x5691,
    0x29 => 0x0,
    0x2a => 0x5691,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x5585,
    0x35 => 0x0,
    0x36 => 0x5585,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e06,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5586,
    0x3d => 0x0,
    0x3e => 0x5586,
    0x3f => 0x4e07,
    _ => 0,
  };
  return idx;
}


// SHR_VEC_IMM-USHR#15,SHR_VEC_IMM-USRA#15,SHR_VEC_IMM-URSHR#15,SHR_VEC_IMM-URSRA#15,QSHL_VEC_IMM-SQSHLU_IMM#15,QSHL_VEC_IMM-UQSHL_IMM#15,SHIFT_VEC_IMM-SRI#15,SHIFT_VEC_IMM-SLI#15,FCVT_VEC_FIXED-UCVTF_VEC_FIX#9,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#9,MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL2_ELEM#0,MULL_ELEM-UMLSL2_ELEM#0,MULL_ELEM-UMULL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#2,FCMLA_ELEM-FCMLA_ELEM#3
pub const fn classify_impl_e0_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x5583,
    0x1 => 0x4904,
    0x2 => 0x5583,
    0x3 => 0x0,
    0x4 => 0x5c80,
    0x5 => 0x4905,
    0x6 => 0x5c80,
    0x7 => 0x0,
    0x8 => 0x568f,
    0x9 => 0x4906,
    0xa => 0x568f,
    0xb => 0x0,
    0xc => 0x5c80,
    0xd => 0x4907,
    0xe => 0x5c80,
    0xf => 0x0,
    0x10 => 0x5584,
    0x11 => 0x4d01,
    0x12 => 0x5584,
    0x13 => 0x0,
    0x14 => 0x5c80,
    0x15 => 0x4d02,
    0x16 => 0x5c80,
    0x17 => 0x0,
    0x18 => 0x5690,
    0x19 => 0x4a01,
    0x1a => 0x5690,
    0x1b => 0x0,
    0x1c => 0x5c80,
    0x1d => 0x4a02,
    0x1e => 0x5c80,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x5691,
    0x29 => 0x0,
    0x2a => 0x5691,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x5585,
    0x35 => 0x0,
    0x36 => 0x5585,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e06,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5586,
    0x3d => 0x0,
    0x3e => 0x5586,
    0x3f => 0x4e07,
    _ => 0,
  };
  return idx;
}

// SHR_VEC_IMM-USHR#14,SHR_VEC_IMM-USHR#15,SHR_VEC_IMM-USRA#14,SHR_VEC_IMM-USRA#15,SHR_VEC_IMM-URSHR#14,SHR_VEC_IMM-URSHR#15,SHR_VEC_IMM-URSRA#14,SHR_VEC_IMM-URSRA#15,QSHL_VEC_IMM-SQSHLU_IMM#14,QSHL_VEC_IMM-SQSHLU_IMM#15,QSHL_VEC_IMM-UQSHL_IMM#14,QSHL_VEC_IMM-UQSHL_IMM#15,SHIFT_VEC_IMM-SRI#14,SHIFT_VEC_IMM-SRI#15,SHIFT_VEC_IMM-SLI#14,SHIFT_VEC_IMM-SLI#15,FCVT_VEC_FIXED-UCVTF_VEC_FIX#8,FCVT_VEC_FIXED-UCVTF_VEC_FIX#9,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#8,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#9,MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL2_ELEM#0,MULL_ELEM-UMLSL2_ELEM#0,MULL_ELEM-UMULL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#2,FCMLA_ELEM-FCMLA_ELEM#3
pub const fn classify_impl_e0(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_e0_1(inst), // SHR_VEC_IMM-USHR#14,SHR_VEC_IMM-USRA#14,SHR_VEC_IMM-URSHR#14,SHR_VEC_IMM-URSRA#14,QSHL_VEC_IMM-SQSHLU_IMM#14,QSHL_VEC_IMM-UQSHL_IMM#14,SHIFT_VEC_IMM-SRI#14,SHIFT_VEC_IMM-SLI#14,FCVT_VEC_FIXED-UCVTF_VEC_FIX#8,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#8,MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL2_ELEM#0,MULL_ELEM-UMLSL2_ELEM#0,MULL_ELEM-UMULL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#2,FCMLA_ELEM-FCMLA_ELEM#3
    0x2 => return classify_impl_e0_2(inst), // SHR_VEC_IMM-USHR#15,SHR_VEC_IMM-USRA#15,SHR_VEC_IMM-URSHR#15,SHR_VEC_IMM-URSRA#15,QSHL_VEC_IMM-SQSHLU_IMM#15,QSHL_VEC_IMM-UQSHL_IMM#15,SHIFT_VEC_IMM-SRI#15,SHIFT_VEC_IMM-SLI#15,FCVT_VEC_FIXED-UCVTF_VEC_FIX#9,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#9,MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL2_ELEM#0,MULL_ELEM-UMLSL2_ELEM#0,MULL_ELEM-UMULL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#2,FCMLA_ELEM-FCMLA_ELEM#3
    _ => idx
  };
  return idx;
}


// SHR_VEC_IMM-USHR#16,SHR_VEC_IMM-USRA#16,SHR_VEC_IMM-URSHR#16,SHR_VEC_IMM-URSRA#16,QSHL_VEC_IMM-SQSHLU_IMM#16,QSHL_VEC_IMM-UQSHL_IMM#16,SHIFT_VEC_IMM-SRI#16,SHIFT_VEC_IMM-SLI#16,FCVT_VEC_FIXED-UCVTF_VEC_FIX#10,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#10,MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL2_ELEM#0,MULL_ELEM-UMLSL2_ELEM#0,MULL_ELEM-UMULL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#2,FCMLA_ELEM-FCMLA_ELEM#3
pub const fn classify_impl_e1_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x5583,
    0x1 => 0x4904,
    0x2 => 0x5583,
    0x3 => 0x0,
    0x4 => 0x5c80,
    0x5 => 0x4905,
    0x6 => 0x5c80,
    0x7 => 0x0,
    0x8 => 0x568f,
    0x9 => 0x4906,
    0xa => 0x568f,
    0xb => 0x0,
    0xc => 0x5c80,
    0xd => 0x4907,
    0xe => 0x5c80,
    0xf => 0x0,
    0x10 => 0x5584,
    0x11 => 0x4d01,
    0x12 => 0x5584,
    0x13 => 0x0,
    0x14 => 0x5c80,
    0x15 => 0x4d02,
    0x16 => 0x5c80,
    0x17 => 0x0,
    0x18 => 0x5690,
    0x19 => 0x4a01,
    0x1a => 0x5690,
    0x1b => 0x0,
    0x1c => 0x5c80,
    0x1d => 0x4a02,
    0x1e => 0x5c80,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x5691,
    0x29 => 0x0,
    0x2a => 0x5691,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x5585,
    0x35 => 0x0,
    0x36 => 0x5585,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e06,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5586,
    0x3d => 0x0,
    0x3e => 0x5586,
    0x3f => 0x4e07,
    _ => 0,
  };
  return idx;
}


// SHR_VEC_IMM-USHR#17,SHR_VEC_IMM-USRA#17,SHR_VEC_IMM-URSHR#17,SHR_VEC_IMM-URSRA#17,QSHL_VEC_IMM-SQSHLU_IMM#17,QSHL_VEC_IMM-UQSHL_IMM#17,SHIFT_VEC_IMM-SRI#17,SHIFT_VEC_IMM-SLI#17,FCVT_VEC_FIXED-UCVTF_VEC_FIX#11,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#11,MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL2_ELEM#0,MULL_ELEM-UMLSL2_ELEM#0,MULL_ELEM-UMULL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#2,FCMLA_ELEM-FCMLA_ELEM#3
pub const fn classify_impl_e1_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x5583,
    0x1 => 0x4904,
    0x2 => 0x5583,
    0x3 => 0x0,
    0x4 => 0x5c80,
    0x5 => 0x4905,
    0x6 => 0x5c80,
    0x7 => 0x0,
    0x8 => 0x568f,
    0x9 => 0x4906,
    0xa => 0x568f,
    0xb => 0x0,
    0xc => 0x5c80,
    0xd => 0x4907,
    0xe => 0x5c80,
    0xf => 0x0,
    0x10 => 0x5584,
    0x11 => 0x4d01,
    0x12 => 0x5584,
    0x13 => 0x0,
    0x14 => 0x5c80,
    0x15 => 0x4d02,
    0x16 => 0x5c80,
    0x17 => 0x0,
    0x18 => 0x5690,
    0x19 => 0x4a01,
    0x1a => 0x5690,
    0x1b => 0x0,
    0x1c => 0x5c80,
    0x1d => 0x4a02,
    0x1e => 0x5c80,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x5691,
    0x29 => 0x0,
    0x2a => 0x5691,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x5585,
    0x35 => 0x0,
    0x36 => 0x5585,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e06,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5586,
    0x3d => 0x0,
    0x3e => 0x5586,
    0x3f => 0x4e07,
    _ => 0,
  };
  return idx;
}

// SHR_VEC_IMM-USHR#16,SHR_VEC_IMM-USHR#17,SHR_VEC_IMM-USRA#16,SHR_VEC_IMM-USRA#17,SHR_VEC_IMM-URSHR#16,SHR_VEC_IMM-URSHR#17,SHR_VEC_IMM-URSRA#16,SHR_VEC_IMM-URSRA#17,QSHL_VEC_IMM-SQSHLU_IMM#16,QSHL_VEC_IMM-SQSHLU_IMM#17,QSHL_VEC_IMM-UQSHL_IMM#16,QSHL_VEC_IMM-UQSHL_IMM#17,SHIFT_VEC_IMM-SRI#16,SHIFT_VEC_IMM-SRI#17,SHIFT_VEC_IMM-SLI#16,SHIFT_VEC_IMM-SLI#17,FCVT_VEC_FIXED-UCVTF_VEC_FIX#10,FCVT_VEC_FIXED-UCVTF_VEC_FIX#11,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#10,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#11,MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL2_ELEM#0,MULL_ELEM-UMLSL2_ELEM#0,MULL_ELEM-UMULL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#2,FCMLA_ELEM-FCMLA_ELEM#3
pub const fn classify_impl_e1(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_e1_1(inst), // SHR_VEC_IMM-USHR#16,SHR_VEC_IMM-USRA#16,SHR_VEC_IMM-URSHR#16,SHR_VEC_IMM-URSRA#16,QSHL_VEC_IMM-SQSHLU_IMM#16,QSHL_VEC_IMM-UQSHL_IMM#16,SHIFT_VEC_IMM-SRI#16,SHIFT_VEC_IMM-SLI#16,FCVT_VEC_FIXED-UCVTF_VEC_FIX#10,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#10,MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL2_ELEM#0,MULL_ELEM-UMLSL2_ELEM#0,MULL_ELEM-UMULL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#2,FCMLA_ELEM-FCMLA_ELEM#3
    0x2 => return classify_impl_e1_2(inst), // SHR_VEC_IMM-USHR#17,SHR_VEC_IMM-USRA#17,SHR_VEC_IMM-URSHR#17,SHR_VEC_IMM-URSRA#17,QSHL_VEC_IMM-SQSHLU_IMM#17,QSHL_VEC_IMM-UQSHL_IMM#17,SHIFT_VEC_IMM-SRI#17,SHIFT_VEC_IMM-SLI#17,FCVT_VEC_FIXED-UCVTF_VEC_FIX#11,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#11,MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL2_ELEM#0,MULL_ELEM-UMLSL2_ELEM#0,MULL_ELEM-UMULL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#2,FCMLA_ELEM-FCMLA_ELEM#3
    _ => idx
  };
  return idx;
}


// SHR_VEC_IMM-USHR#18,SHR_VEC_IMM-USRA#18,SHR_VEC_IMM-URSHR#18,SHR_VEC_IMM-URSRA#18,QSHL_VEC_IMM-SQSHLU_IMM#18,QSHL_VEC_IMM-UQSHL_IMM#18,SHIFT_VEC_IMM-SRI#18,SHIFT_VEC_IMM-SLI#18,FCVT_VEC_FIXED-UCVTF_VEC_FIX#12,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#12,MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL2_ELEM#0,MULL_ELEM-UMLSL2_ELEM#0,MULL_ELEM-UMULL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#4,FCMLA_ELEM-FCMLA_ELEM#5
pub const fn classify_impl_e2_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x5583,
    0x1 => 0x4904,
    0x2 => 0x5583,
    0x3 => 0x0,
    0x4 => 0x5c80,
    0x5 => 0x4905,
    0x6 => 0x5c80,
    0x7 => 0x0,
    0x8 => 0x568f,
    0x9 => 0x4906,
    0xa => 0x568f,
    0xb => 0x0,
    0xc => 0x5c80,
    0xd => 0x4907,
    0xe => 0x5c80,
    0xf => 0x0,
    0x10 => 0x5584,
    0x11 => 0x4d01,
    0x12 => 0x5584,
    0x13 => 0x0,
    0x14 => 0x5c80,
    0x15 => 0x4d02,
    0x16 => 0x5c80,
    0x17 => 0x0,
    0x18 => 0x5690,
    0x19 => 0x4a01,
    0x1a => 0x5690,
    0x1b => 0x0,
    0x1c => 0x5c80,
    0x1d => 0x4a02,
    0x1e => 0x5c80,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x5691,
    0x29 => 0x0,
    0x2a => 0x5691,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x5585,
    0x35 => 0x0,
    0x36 => 0x5585,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e06,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5586,
    0x3d => 0x0,
    0x3e => 0x5586,
    0x3f => 0x4e07,
    _ => 0,
  };
  return idx;
}


// SHR_VEC_IMM-USHR#19,SHR_VEC_IMM-USRA#19,SHR_VEC_IMM-URSHR#19,SHR_VEC_IMM-URSRA#19,QSHL_VEC_IMM-SQSHLU_IMM#19,QSHL_VEC_IMM-UQSHL_IMM#19,SHIFT_VEC_IMM-SRI#19,SHIFT_VEC_IMM-SLI#19,FCVT_VEC_FIXED-UCVTF_VEC_FIX#13,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#13,MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL2_ELEM#0,MULL_ELEM-UMLSL2_ELEM#0,MULL_ELEM-UMULL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#4,FCMLA_ELEM-FCMLA_ELEM#5
pub const fn classify_impl_e2_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x5583,
    0x1 => 0x4904,
    0x2 => 0x5583,
    0x3 => 0x0,
    0x4 => 0x5c80,
    0x5 => 0x4905,
    0x6 => 0x5c80,
    0x7 => 0x0,
    0x8 => 0x568f,
    0x9 => 0x4906,
    0xa => 0x568f,
    0xb => 0x0,
    0xc => 0x5c80,
    0xd => 0x4907,
    0xe => 0x5c80,
    0xf => 0x0,
    0x10 => 0x5584,
    0x11 => 0x4d01,
    0x12 => 0x5584,
    0x13 => 0x0,
    0x14 => 0x5c80,
    0x15 => 0x4d02,
    0x16 => 0x5c80,
    0x17 => 0x0,
    0x18 => 0x5690,
    0x19 => 0x4a01,
    0x1a => 0x5690,
    0x1b => 0x0,
    0x1c => 0x5c80,
    0x1d => 0x4a02,
    0x1e => 0x5c80,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x5691,
    0x29 => 0x0,
    0x2a => 0x5691,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x5585,
    0x35 => 0x0,
    0x36 => 0x5585,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e06,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5586,
    0x3d => 0x0,
    0x3e => 0x5586,
    0x3f => 0x4e07,
    _ => 0,
  };
  return idx;
}

// SHR_VEC_IMM-USHR#18,SHR_VEC_IMM-USHR#19,SHR_VEC_IMM-USRA#18,SHR_VEC_IMM-USRA#19,SHR_VEC_IMM-URSHR#18,SHR_VEC_IMM-URSHR#19,SHR_VEC_IMM-URSRA#18,SHR_VEC_IMM-URSRA#19,QSHL_VEC_IMM-SQSHLU_IMM#18,QSHL_VEC_IMM-SQSHLU_IMM#19,QSHL_VEC_IMM-UQSHL_IMM#18,QSHL_VEC_IMM-UQSHL_IMM#19,SHIFT_VEC_IMM-SRI#18,SHIFT_VEC_IMM-SRI#19,SHIFT_VEC_IMM-SLI#18,SHIFT_VEC_IMM-SLI#19,FCVT_VEC_FIXED-UCVTF_VEC_FIX#12,FCVT_VEC_FIXED-UCVTF_VEC_FIX#13,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#12,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#13,MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL2_ELEM#0,MULL_ELEM-UMLSL2_ELEM#0,MULL_ELEM-UMULL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#4,FCMLA_ELEM-FCMLA_ELEM#5
pub const fn classify_impl_e2(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_e2_1(inst), // SHR_VEC_IMM-USHR#18,SHR_VEC_IMM-USRA#18,SHR_VEC_IMM-URSHR#18,SHR_VEC_IMM-URSRA#18,QSHL_VEC_IMM-SQSHLU_IMM#18,QSHL_VEC_IMM-UQSHL_IMM#18,SHIFT_VEC_IMM-SRI#18,SHIFT_VEC_IMM-SLI#18,FCVT_VEC_FIXED-UCVTF_VEC_FIX#12,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#12,MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL2_ELEM#0,MULL_ELEM-UMLSL2_ELEM#0,MULL_ELEM-UMULL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#4,FCMLA_ELEM-FCMLA_ELEM#5
    0x2 => return classify_impl_e2_2(inst), // SHR_VEC_IMM-USHR#19,SHR_VEC_IMM-USRA#19,SHR_VEC_IMM-URSHR#19,SHR_VEC_IMM-URSRA#19,QSHL_VEC_IMM-SQSHLU_IMM#19,QSHL_VEC_IMM-UQSHL_IMM#19,SHIFT_VEC_IMM-SRI#19,SHIFT_VEC_IMM-SLI#19,FCVT_VEC_FIXED-UCVTF_VEC_FIX#13,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#13,MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL2_ELEM#0,MULL_ELEM-UMLSL2_ELEM#0,MULL_ELEM-UMULL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#4,FCMLA_ELEM-FCMLA_ELEM#5
    _ => idx
  };
  return idx;
}


// SHR_VEC_IMM-USHR#20,SHR_VEC_IMM-USRA#20,SHR_VEC_IMM-URSHR#20,SHR_VEC_IMM-URSRA#20,QSHL_VEC_IMM-SQSHLU_IMM#20,QSHL_VEC_IMM-UQSHL_IMM#20,SHIFT_VEC_IMM-SRI#20,SHIFT_VEC_IMM-SLI#20,FCVT_VEC_FIXED-UCVTF_VEC_FIX#14,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#14,MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL2_ELEM#0,MULL_ELEM-UMLSL2_ELEM#0,MULL_ELEM-UMULL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#4,FCMLA_ELEM-FCMLA_ELEM#5
pub const fn classify_impl_e3_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x5583,
    0x1 => 0x4904,
    0x2 => 0x5583,
    0x3 => 0x0,
    0x4 => 0x5c80,
    0x5 => 0x4905,
    0x6 => 0x5c80,
    0x7 => 0x0,
    0x8 => 0x568f,
    0x9 => 0x4906,
    0xa => 0x568f,
    0xb => 0x0,
    0xc => 0x5c80,
    0xd => 0x4907,
    0xe => 0x5c80,
    0xf => 0x0,
    0x10 => 0x5584,
    0x11 => 0x4d01,
    0x12 => 0x5584,
    0x13 => 0x0,
    0x14 => 0x5c80,
    0x15 => 0x4d02,
    0x16 => 0x5c80,
    0x17 => 0x0,
    0x18 => 0x5690,
    0x19 => 0x4a01,
    0x1a => 0x5690,
    0x1b => 0x0,
    0x1c => 0x5c80,
    0x1d => 0x4a02,
    0x1e => 0x5c80,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x5691,
    0x29 => 0x0,
    0x2a => 0x5691,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x5585,
    0x35 => 0x0,
    0x36 => 0x5585,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e06,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5586,
    0x3d => 0x0,
    0x3e => 0x5586,
    0x3f => 0x4e07,
    _ => 0,
  };
  return idx;
}


// SHR_VEC_IMM-USHR#21,SHR_VEC_IMM-USRA#21,SHR_VEC_IMM-URSHR#21,SHR_VEC_IMM-URSRA#21,QSHL_VEC_IMM-SQSHLU_IMM#21,QSHL_VEC_IMM-UQSHL_IMM#21,SHIFT_VEC_IMM-SRI#21,SHIFT_VEC_IMM-SLI#21,FCVT_VEC_FIXED-UCVTF_VEC_FIX#15,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#15,MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL2_ELEM#0,MULL_ELEM-UMLSL2_ELEM#0,MULL_ELEM-UMULL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#4,FCMLA_ELEM-FCMLA_ELEM#5
pub const fn classify_impl_e3_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x5583,
    0x1 => 0x4904,
    0x2 => 0x5583,
    0x3 => 0x0,
    0x4 => 0x5c80,
    0x5 => 0x4905,
    0x6 => 0x5c80,
    0x7 => 0x0,
    0x8 => 0x568f,
    0x9 => 0x4906,
    0xa => 0x568f,
    0xb => 0x0,
    0xc => 0x5c80,
    0xd => 0x4907,
    0xe => 0x5c80,
    0xf => 0x0,
    0x10 => 0x5584,
    0x11 => 0x4d01,
    0x12 => 0x5584,
    0x13 => 0x0,
    0x14 => 0x5c80,
    0x15 => 0x4d02,
    0x16 => 0x5c80,
    0x17 => 0x0,
    0x18 => 0x5690,
    0x19 => 0x4a01,
    0x1a => 0x5690,
    0x1b => 0x0,
    0x1c => 0x5c80,
    0x1d => 0x4a02,
    0x1e => 0x5c80,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x5691,
    0x29 => 0x0,
    0x2a => 0x5691,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x5585,
    0x35 => 0x0,
    0x36 => 0x5585,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4e06,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5586,
    0x3d => 0x0,
    0x3e => 0x5586,
    0x3f => 0x4e07,
    _ => 0,
  };
  return idx;
}

// SHR_VEC_IMM-USHR#20,SHR_VEC_IMM-USHR#21,SHR_VEC_IMM-USRA#20,SHR_VEC_IMM-USRA#21,SHR_VEC_IMM-URSHR#20,SHR_VEC_IMM-URSHR#21,SHR_VEC_IMM-URSRA#20,SHR_VEC_IMM-URSRA#21,QSHL_VEC_IMM-SQSHLU_IMM#20,QSHL_VEC_IMM-SQSHLU_IMM#21,QSHL_VEC_IMM-UQSHL_IMM#20,QSHL_VEC_IMM-UQSHL_IMM#21,SHIFT_VEC_IMM-SRI#20,SHIFT_VEC_IMM-SRI#21,SHIFT_VEC_IMM-SLI#20,SHIFT_VEC_IMM-SLI#21,FCVT_VEC_FIXED-UCVTF_VEC_FIX#14,FCVT_VEC_FIXED-UCVTF_VEC_FIX#15,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#14,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#15,MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL2_ELEM#0,MULL_ELEM-UMLSL2_ELEM#0,MULL_ELEM-UMULL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#4,FCMLA_ELEM-FCMLA_ELEM#5
pub const fn classify_impl_e3(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_e3_1(inst), // SHR_VEC_IMM-USHR#20,SHR_VEC_IMM-USRA#20,SHR_VEC_IMM-URSHR#20,SHR_VEC_IMM-URSRA#20,QSHL_VEC_IMM-SQSHLU_IMM#20,QSHL_VEC_IMM-UQSHL_IMM#20,SHIFT_VEC_IMM-SRI#20,SHIFT_VEC_IMM-SLI#20,FCVT_VEC_FIXED-UCVTF_VEC_FIX#14,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#14,MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL2_ELEM#0,MULL_ELEM-UMLSL2_ELEM#0,MULL_ELEM-UMULL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#4,FCMLA_ELEM-FCMLA_ELEM#5
    0x2 => return classify_impl_e3_2(inst), // SHR_VEC_IMM-USHR#21,SHR_VEC_IMM-USRA#21,SHR_VEC_IMM-URSHR#21,SHR_VEC_IMM-URSRA#21,QSHL_VEC_IMM-SQSHLU_IMM#21,QSHL_VEC_IMM-UQSHL_IMM#21,SHIFT_VEC_IMM-SRI#21,SHIFT_VEC_IMM-SLI#21,FCVT_VEC_FIXED-UCVTF_VEC_FIX#15,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#15,MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL2_ELEM#0,MULL_ELEM-UMLSL2_ELEM#0,MULL_ELEM-UMULL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#4,FCMLA_ELEM-FCMLA_ELEM#5
    _ => idx
  };
  return idx;
}


// MUL_ELEM-MLA_ELEM#1,MUL_ELEM-MLS_ELEM#1,MUL_ELEM-SQRDMLAH_ELEM#1,MUL_ELEM-SQRDMLSH_ELEM#1,MULL_ELEM-UMLAL2_ELEM#1,MULL_ELEM-UMLSL2_ELEM#1,MULL_ELEM-UMULL2_ELEM#1,FMUL_ELEM-FMULX_ELEM#2,DOT_ELEM-UDOT_ELEM#0,FHM_ELEM-FMLAL2_ELEM#0,FHM_ELEM-FMLSL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#6,FCMLA_ELEM-FCMLA_ELEM#7
pub const fn classify_impl_e4(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 11) & 0x1f {
    0x0 => 0x5583,
    0x1 => 0x5583,
    0x2 => 0x5c80,
    0x3 => 0x5c80,
    0x4 => 0x568f,
    0x5 => 0x568f,
    0x6 => 0x5c80,
    0x7 => 0x5c80,
    0x8 => 0x5584,
    0x9 => 0x5584,
    0xa => 0x5c80,
    0xb => 0x5c80,
    0xc => 0x5690,
    0xd => 0x5690,
    0xe => 0x5c80,
    0xf => 0x5c80,
    0x10 => 0x5b82,
    0x11 => 0x5b82,
    0x12 => 0x5803,
    0x13 => 0x5803,
    0x14 => 0x5691,
    0x15 => 0x5691,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x5b83,
    0x19 => 0x5b83,
    0x1a => 0x5585,
    0x1b => 0x5585,
    0x1c => 0x5984,
    0x1d => 0x5984,
    0x1e => 0x5586,
    0x1f => 0x5586,
    _ => 0,
  };
  return idx;
}


// MUL_ELEM-MLA_ELEM#1,MUL_ELEM-MLS_ELEM#1,MUL_ELEM-SQRDMLAH_ELEM#1,MUL_ELEM-SQRDMLSH_ELEM#1,MULL_ELEM-UMLAL2_ELEM#1,MULL_ELEM-UMLSL2_ELEM#1,MULL_ELEM-UMULL2_ELEM#1,FMUL_ELEM-FMULX_ELEM#3,DOT_ELEM-UDOT_ELEM#0,FHM_ELEM-FMLAL2_ELEM#0,FHM_ELEM-FMLSL2_ELEM#0
pub const fn classify_impl_e5(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 12) & 0xf {
    0x0 => 0x5583,
    0x1 => 0x0,
    0x2 => 0x568f,
    0x3 => 0x0,
    0x4 => 0x5584,
    0x5 => 0x0,
    0x6 => 0x5690,
    0x7 => 0x0,
    0x8 => 0x5b82,
    0x9 => 0x5803,
    0xa => 0x5691,
    0xb => 0x0,
    0xc => 0x5b83,
    0xd => 0x5585,
    0xe => 0x5984,
    0xf => 0x5586,
    _ => 0,
  };
  return idx;
}


// FMUL_ELEM-FMULX_ELEM#4
pub const fn classify_impl_e6(inst: u32) -> u32 {
  if (inst&0xf400) != 0x9000 { return 0; }
  return 0x5803;
}


// ANDOREOR_IMM-ANDS_IMM#0,ANDOREOR_IMM-ANDS_IMM#1,ANDOREOR_IMM-ANDS_IMM#2,ANDOREOR_IMM-ANDS_IMM#3,ANDOREOR_IMM-ANDS_IMM#4,ANDOREOR_IMM-ANDS_IMM#5,ANDOREOR_IMM-ANDS_IMM#6,ANDOREOR_IMM-ANDS_IMM#7,ANDOREOR_IMM-ANDS_IMM#8,ANDOREOR_IMM-ANDS_IMM#9,ANDOREOR_IMM-ANDS_IMM#10,ANDOREOR_IMM-ANDS_IMM#11,ANDOREOR_IMM-ANDS_IMM#12,ANDOREOR_IMM-ANDS_IMM#13,ANDOREOR_IMM-ANDS_IMM#14,ANDOREOR_IMM-ANDS_IMM#15,ANDOREOR_IMM-ANDS_IMM#16,ANDOREOR_IMM-ANDS_IMM#17,ANDOREOR_IMM-ANDS_IMM#18,ANDOREOR_IMM-ANDS_IMM#19,ANDOREOR_IMM-ANDS_IMM#20,ANDOREOR_IMM-ANDS_IMM#21,ANDOREOR_IMM-ANDS_IMM#22,ANDOREOR_IMM-ANDS_IMM#23,ANDOREOR_IMM-ANDS_IMM#24,ANDOREOR_IMM-ANDS_IMM#25,ANDOREOR_IMM-ANDS_IMM#26,ANDOREOR_IMM-ANDS_IMM#27,ANDOREOR_IMM-ANDS_IMM#28,ANDOREOR_IMM-ANDS_IMM#29,ANDOREOR_IMM-ANDS_IMM#30,ANDOREOR_IMM-ANDS_IMM#31,ANDOREOR_IMM-ANDS_IMM#32,ANDOREOR_IMM-ANDS_IMM#33,ANDOREOR_IMM-ANDS_IMM#34,ANDOREOR_IMM-ANDS_IMM#35,ANDOREOR_IMM-ANDS_IMM#36,ANDOREOR_IMM-ANDS_IMM#37,ANDOREOR_IMM-ANDS_IMM#38,ANDOREOR_IMM-ANDS_IMM#39,ANDOREOR_IMM-ANDS_IMM#40,ANDOREOR_IMM-ANDS_IMM#41,ANDOREOR_IMM-ANDS_IMM#42,ANDOREOR_IMM-ANDS_IMM#43,ANDOREOR_IMM-ANDS_IMM#44,ANDOREOR_IMM-ANDS_IMM#45,ANDOREOR_IMM-ANDS_IMM#46,ANDOREOR_IMM-ANDS_IMM#47,ANDOREOR_IMM-ANDS_IMM#48,ANDOREOR_IMM-ANDS_IMM#49,ANDOREOR_IMM-ANDS_IMM#50,ANDOREOR_IMM-ANDS_IMM#51,ANDOREOR_IMM-ANDS_IMM#52,ANDOREOR_IMM-ANDS_IMM#53,ANDOREOR_IMM-ANDS_IMM#54,ANDOREOR_IMM-ANDS_IMM#55,ANDOREOR_IMM-ANDS_IMM#56
pub const fn classify_impl_e7(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x503,
    0x1 => 0x503,
    0x2 => 0x503,
    0x3 => 0x503,
    0x4 => 0x503,
    0x5 => 0x503,
    0x6 => 0x503,
    0x7 => 0x503,
    0x8 => 0x503,
    0x9 => 0x503,
    0xa => 0x503,
    0xb => 0x503,
    0xc => 0x503,
    0xd => 0x503,
    0xe => 0x503,
    0xf => 0x503,
    0x10 => 0x503,
    0x11 => 0x503,
    0x12 => 0x503,
    0x13 => 0x503,
    0x14 => 0x503,
    0x15 => 0x503,
    0x16 => 0x503,
    0x17 => 0x503,
    0x18 => 0x503,
    0x19 => 0x503,
    0x1a => 0x503,
    0x1b => 0x503,
    0x1c => 0x503,
    0x1d => 0x503,
    0x1e => 0x503,
    0x1f => 0x0,
    0x20 => 0x503,
    0x21 => 0x503,
    0x22 => 0x503,
    0x23 => 0x503,
    0x24 => 0x503,
    0x25 => 0x503,
    0x26 => 0x503,
    0x27 => 0x503,
    0x28 => 0x503,
    0x29 => 0x503,
    0x2a => 0x503,
    0x2b => 0x503,
    0x2c => 0x503,
    0x2d => 0x503,
    0x2e => 0x503,
    0x2f => 0x0,
    0x30 => 0x503,
    0x31 => 0x503,
    0x32 => 0x503,
    0x33 => 0x503,
    0x34 => 0x503,
    0x35 => 0x503,
    0x36 => 0x503,
    0x37 => 0x0,
    0x38 => 0x503,
    0x39 => 0x503,
    0x3a => 0x503,
    0x3b => 0x0,
    0x3c => 0x503,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// MEMU-STURH#0,MEMU-STRH_POST#0,MEMU-STTRH#0,MEMU-STRH_PRE#0
pub const fn classify_impl_e8(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x1810,
    0x1 => 0x1811,
    0x2 => 0x1812,
    0x3 => 0x1813,
    _ => 0,
  };
  return idx;
}


// MEM_REG-STRH_REG#0,SWP-SWPH#0,LDATOMIC-LDADDH#0,LDATOMIC-LDCLRH#0,LDATOMIC-LDEORH#0,LDATOMIC-LDSETH#0,LDATOMIC-LDSMAXH#0,LDATOMIC-LDSMINH#0,LDATOMIC-LDUMAXH#0,LDATOMIC-LDUMINH#0
pub const fn classify_impl_e9(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 11) & 0x1f {
    0x0 => 0x6120,
    0x1 => 0x0,
    0x2 => 0x6121,
    0x3 => 0x0,
    0x4 => 0x6122,
    0x5 => 0x0,
    0x6 => 0x6123,
    0x7 => 0x0,
    0x8 => 0x6124,
    0x9 => 0x1904,
    0xa => 0x6125,
    0xb => 0x1904,
    0xc => 0x6126,
    0xd => 0x1904,
    0xe => 0x6127,
    0xf => 0x1904,
    0x10 => 0x6084,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x1904,
    0x1a => 0x0,
    0x1b => 0x1904,
    0x1c => 0x0,
    0x1d => 0x1904,
    0x1e => 0x0,
    0x1f => 0x1904,
    _ => 0,
  };
  return idx;
}


// MEMU-LDURH#0,MEMU-LDRH_POST#0,MEMU-LDTRH#0,MEMU-LDRH_PRE#0
pub const fn classify_impl_ea(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x1814,
    0x1 => 0x1815,
    0x2 => 0x1816,
    0x3 => 0x1817,
    _ => 0,
  };
  return idx;
}


// MEM_REG-LDRH_REG#0,SWP-SWPLH#0,LDATOMIC-LDADDLH#0,LDATOMIC-LDCLRLH#0,LDATOMIC-LDEORLH#0,LDATOMIC-LDSETLH#0,LDATOMIC-LDSMAXLH#0,LDATOMIC-LDSMINLH#0,LDATOMIC-LDUMAXLH#0,LDATOMIC-LDUMINLH#0
pub const fn classify_impl_eb(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 11) & 0x1f {
    0x0 => 0x6128,
    0x1 => 0x0,
    0x2 => 0x6129,
    0x3 => 0x0,
    0x4 => 0x612a,
    0x5 => 0x0,
    0x6 => 0x612b,
    0x7 => 0x0,
    0x8 => 0x612c,
    0x9 => 0x1905,
    0xa => 0x612d,
    0xb => 0x1905,
    0xc => 0x612e,
    0xd => 0x1905,
    0xe => 0x612f,
    0xf => 0x1905,
    0x10 => 0x6085,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x1905,
    0x1a => 0x0,
    0x1b => 0x1905,
    0x1c => 0x0,
    0x1d => 0x1905,
    0x1e => 0x0,
    0x1f => 0x1905,
    _ => 0,
  };
  return idx;
}


// MEMU-LDURSH#0,MEMU-LDRSH_POST#0,MEMU-LDTRSH#0,MEMU-LDRSH_PRE#0
pub const fn classify_impl_ec(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x1818,
    0x1 => 0x1819,
    0x2 => 0x181a,
    0x3 => 0x181b,
    _ => 0,
  };
  return idx;
}


// MEM_REG-LDRSH_REG#0,SWP-SWPAH#0,LDATOMIC-LDADDAH#0,LDATOMIC-LDCLRAH#0,LDATOMIC-LDEORAH#0,LDATOMIC-LDSETAH#0,LDATOMIC-LDSMAXAH#0,LDATOMIC-LDSMINAH#0,LDATOMIC-LDUMAXAH#0,LDATOMIC-LDUMINAH#0
pub const fn classify_impl_ed(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 11) & 0x1f {
    0x0 => 0x6130,
    0x1 => 0x0,
    0x2 => 0x6131,
    0x3 => 0x0,
    0x4 => 0x6132,
    0x5 => 0x0,
    0x6 => 0x6133,
    0x7 => 0x0,
    0x8 => 0x6134,
    0x9 => 0x1906,
    0xa => 0x6135,
    0xb => 0x1906,
    0xc => 0x6136,
    0xd => 0x1906,
    0xe => 0x6137,
    0xf => 0x1906,
    0x10 => 0x6086,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x1906,
    0x1a => 0x0,
    0x1b => 0x1906,
    0x1c => 0x0,
    0x1d => 0x1906,
    0x1e => 0x0,
    0x1f => 0x1906,
    _ => 0,
  };
  return idx;
}


// RCPC-LDAPRH#0
pub const fn classify_impl_ee_1(inst: u32) -> u32 {
  if (inst&0xf0000) != 0xf0000 { return 0; }
  return 0x6201;
}

// MEM_REG-LDRSH_REG#0,SWP-SWPAH#0,LDATOMIC-LDADDAH#0,LDATOMIC-LDCLRAH#0,LDATOMIC-LDEORAH#0,LDATOMIC-LDSETAH#0,LDATOMIC-LDSMAXAH#0,LDATOMIC-LDSMINAH#0,LDATOMIC-LDUMAXAH#0,LDATOMIC-LDUMINAH#0,RCPC-LDAPRH#0
pub const fn classify_impl_ee(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 11) & 0x1f {
    0x0 => 0x6130,
    0x1 => 0x0,
    0x2 => 0x6131,
    0x3 => 0x0,
    0x4 => 0x6132,
    0x5 => 0x0,
    0x6 => 0x6133,
    0x7 => 0x0,
    0x8 => 0x6134,
    0x9 => 0x1906,
    0xa => 0x6135,
    0xb => 0x1906,
    0xc => 0x6136,
    0xd => 0x1906,
    0xe => 0x6137,
    0xf => 0x1906,
    0x10 => 0x6086,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x1,
    0x19 => 0x1906,
    0x1a => 0x0,
    0x1b => 0x1906,
    0x1c => 0x0,
    0x1d => 0x1906,
    0x1e => 0x0,
    0x1f => 0x1906,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_ee_1(inst), // RCPC-LDAPRH#0
    _ => idx
  };
  return idx;
}


// MEMU-LDURSHW#0,MEMU-LDRSHW_POST#0,MEMU-LDTRSHW#0,MEMU-LDRSHW_PRE#0
pub const fn classify_impl_ef(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x181c,
    0x1 => 0x181d,
    0x2 => 0x181e,
    0x3 => 0x181f,
    _ => 0,
  };
  return idx;
}


// MEM_REG-LDRSHW_REG#0,SWP-SWPALH#0,LDATOMIC-LDADDALH#0,LDATOMIC-LDCLRALH#0,LDATOMIC-LDEORALH#0,LDATOMIC-LDSETALH#0,LDATOMIC-LDSMAXALH#0,LDATOMIC-LDSMINALH#0,LDATOMIC-LDUMAXALH#0,LDATOMIC-LDUMINALH#0
pub const fn classify_impl_f0(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 11) & 0x1f {
    0x0 => 0x6138,
    0x1 => 0x0,
    0x2 => 0x6139,
    0x3 => 0x0,
    0x4 => 0x613a,
    0x5 => 0x0,
    0x6 => 0x613b,
    0x7 => 0x0,
    0x8 => 0x613c,
    0x9 => 0x1907,
    0xa => 0x613d,
    0xb => 0x1907,
    0xc => 0x613e,
    0xd => 0x1907,
    0xe => 0x613f,
    0xf => 0x1907,
    0x10 => 0x6087,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x1907,
    0x1a => 0x0,
    0x1b => 0x1907,
    0x1c => 0x0,
    0x1d => 0x1907,
    0x1e => 0x0,
    0x1f => 0x1907,
    _ => 0,
  };
  return idx;
}


// ADCSBC-SBCS#0
pub const fn classify_impl_f1(inst: u32) -> u32 {
  if (inst&0xfc00) != 0x0 { return 0; }
  return 0x283;
}


// CCMP_IMM-CCMP_IMM#0,CCMP_REG-CCMP_REG#0
pub const fn classify_impl_f2(inst: u32) -> u32 {
  if (inst&0x410) != 0x0 { return 0; }
  let idx = match (inst >> 11) & 0x1 {
    0x0 => 0xc01,
    0x1 => 0xb81,
    _ => 0,
  };
  return idx;
}


// MEMU_FP-STUR_FP#2,MEMU_FP-STR_FP_POST#2,MEMU_FP-STR_FP_PRE#2
pub const fn classify_impl_f3(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x1a80,
    0x1 => 0x1a81,
    0x2 => 0x0,
    0x3 => 0x1a82,
    _ => 0,
  };
  return idx;
}


// MEM_REG_FP-STR_REG_FP#2
pub const fn classify_impl_f4(inst: u32) -> u32 {
  if (inst&0x4c00) != 0x4800 { return 0; }
  return 0x1b80;
}


// MEMU_FP-LDUR_FP#2,MEMU_FP-LDR_FP_POST#2,MEMU_FP-LDR_FP_PRE#2
pub const fn classify_impl_f5(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x1a83,
    0x1 => 0x1a84,
    0x2 => 0x0,
    0x3 => 0x1a85,
    _ => 0,
  };
  return idx;
}


// MEM_REG_FP-LDR_REG_FP#2
pub const fn classify_impl_f6(inst: u32) -> u32 {
  if (inst&0x4c00) != 0x4800 { return 0; }
  return 0x1b81;
}


// ARITH1_SCALAR-USQADD_SCALAR#0
pub const fn classify_impl_f7_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3003;
}


// ARITH1_SCALAR-SQNEG_SCALAR#0
pub const fn classify_impl_f7_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3004;
}


// XTN_SCALAR-SQXTUN_SCALAR#0
pub const fn classify_impl_f7_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3301;
}


// XTN_SCALAR-UQXTN_SCALAR#0
pub const fn classify_impl_f7_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3302;
}


// FCVT_SCALAR-FCVTNU_SCALAR#0
pub const fn classify_impl_f7_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4e85;
}


// FCVT_SCALAR-FCVTMU_SCALAR#0
pub const fn classify_impl_f7_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4e86;
}


// FCVT_SCALAR-FCVTAU_SCALAR#0
pub const fn classify_impl_f7_7(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4e87;
}


// FCVT_FROMINT_SCALAR-UCVTF_VEC_SCALAR#0
pub const fn classify_impl_f7_8(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5001;
}

// QADDSUB_SCALAR-UQADD_SCALAR#0,QADDSUB_SCALAR-UQSUB_SCALAR#0,ARITH1_SCALAR-USQADD_SCALAR#0,ARITH1_SCALAR-SQNEG_SCALAR#0,XTN_SCALAR-SQXTUN_SCALAR#0,XTN_SCALAR-UQXTN_SCALAR#0,SHL_REG_SCALAR-UQSHL_SCALAR#0,SHL_REG_SCALAR-UQRSHL_SCALAR#0,FCMP_REG_SCALAR-FCMGE#0,FCMP_REG_SCALAR-FACGE#0,FCVT_SCALAR-FCVTNU_SCALAR#0,FCVT_SCALAR-FCVTMU_SCALAR#0,FCVT_SCALAR-FCVTAU_SCALAR#0,FCVT_FROMINT_SCALAR-UCVTF_VEC_SCALAR#0
pub const fn classify_impl_f7(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x2c02,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x2c03,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x1,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x3404,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x3405,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x2,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x3981,
    0x3a => 0x0,
    0x3b => 0x3982,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    0x40 => 0x0,
    0x41 => 0x0,
    0x42 => 0x0,
    0x43 => 0x2c02,
    0x44 => 0x0,
    0x45 => 0x0,
    0x46 => 0x0,
    0x47 => 0x0,
    0x48 => 0x0,
    0x49 => 0x0,
    0x4a => 0x3,
    0x4b => 0x2c03,
    0x4c => 0x0,
    0x4d => 0x0,
    0x4e => 0x0,
    0x4f => 0x0,
    0x50 => 0x0,
    0x51 => 0x0,
    0x52 => 0x4,
    0x53 => 0x3404,
    0x54 => 0x0,
    0x55 => 0x0,
    0x56 => 0x0,
    0x57 => 0x3405,
    0x58 => 0x0,
    0x59 => 0x0,
    0x5a => 0x0,
    0x5b => 0x0,
    0x5c => 0x0,
    0x5d => 0x0,
    0x5e => 0x0,
    0x5f => 0x0,
    0x60 => 0x0,
    0x61 => 0x0,
    0x62 => 0x0,
    0x63 => 0x0,
    0x64 => 0x0,
    0x65 => 0x0,
    0x66 => 0x0,
    0x67 => 0x0,
    0x68 => 0x0,
    0x69 => 0x0,
    0x6a => 0x5,
    0x6b => 0x0,
    0x6c => 0x0,
    0x6d => 0x0,
    0x6e => 0x6,
    0x6f => 0x0,
    0x70 => 0x0,
    0x71 => 0x0,
    0x72 => 0x7,
    0x73 => 0x0,
    0x74 => 0x0,
    0x75 => 0x0,
    0x76 => 0x8,
    0x77 => 0x0,
    0x78 => 0x0,
    0x79 => 0x3981,
    0x7a => 0x0,
    0x7b => 0x3982,
    0x7c => 0x0,
    0x7d => 0x0,
    0x7e => 0x0,
    0x7f => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_f7_1(inst), // ARITH1_SCALAR-USQADD_SCALAR#0
    0x2 => return classify_impl_f7_2(inst), // ARITH1_SCALAR-SQNEG_SCALAR#0
    0x3 => return classify_impl_f7_3(inst), // XTN_SCALAR-SQXTUN_SCALAR#0
    0x4 => return classify_impl_f7_4(inst), // XTN_SCALAR-UQXTN_SCALAR#0
    0x5 => return classify_impl_f7_5(inst), // FCVT_SCALAR-FCVTNU_SCALAR#0
    0x6 => return classify_impl_f7_6(inst), // FCVT_SCALAR-FCVTMU_SCALAR#0
    0x7 => return classify_impl_f7_7(inst), // FCVT_SCALAR-FCVTAU_SCALAR#0
    0x8 => return classify_impl_f7_8(inst), // FCVT_FROMINT_SCALAR-UCVTF_VEC_SCALAR#0
    _ => idx
  };
  return idx;
}


// FP_HORZ_SCALAR-FMAXNMP_SCALAR#0
pub const fn classify_impl_f8_1(inst: u32) -> u32 {
  if (inst&0xf0000) != 0x0 { return 0; }
  return 0x5405;
}


// FP_HORZ_SCALAR-FADDP_SCALAR#0
pub const fn classify_impl_f8_2(inst: u32) -> u32 {
  if (inst&0xf0000) != 0x0 { return 0; }
  return 0x5406;
}


// FP_HORZ_SCALAR-FMAXP_SCALAR#0
pub const fn classify_impl_f8_3(inst: u32) -> u32 {
  if (inst&0xf0000) != 0x0 { return 0; }
  return 0x5407;
}

// QADDSUB_SCALAR-UQADD_SCALAR#0,QADDSUB_SCALAR-UQSUB_SCALAR#0,SHL_REG_SCALAR-UQSHL_SCALAR#0,SHL_REG_SCALAR-UQRSHL_SCALAR#0,FCMP_REG_SCALAR-FCMGE#0,FCMP_REG_SCALAR-FACGE#0,FP_HORZ_SCALAR-FMAXNMP_SCALAR#0,FP_HORZ_SCALAR-FADDP_SCALAR#0,FP_HORZ_SCALAR-FMAXP_SCALAR#0
pub const fn classify_impl_f8(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x2c02,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x2c03,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x3404,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x3405,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x1,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x2,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x3981,
    0x3a => 0x0,
    0x3b => 0x3982,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x3,
    0x3f => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_f8_1(inst), // FP_HORZ_SCALAR-FMAXNMP_SCALAR#0
    0x2 => return classify_impl_f8_2(inst), // FP_HORZ_SCALAR-FADDP_SCALAR#0
    0x3 => return classify_impl_f8_3(inst), // FP_HORZ_SCALAR-FMAXP_SCALAR#0
    _ => idx
  };
  return idx;
}


// FP16_3REG_SCALAR-FCMGE_SCALAR_FP16#0,FP16_3REG_SCALAR-FACGE_SCALAR_FP16#0
pub const fn classify_impl_f9_1(inst: u32) -> u32 {
  if (inst&0x2000) != 0x2000 { return 0; }
  let idx = match (inst >> 11) & 0x1 {
    0x0 => 0x4104,
    0x1 => 0x4105,
    _ => 0,
  };
  return idx;
}


// SQRDMLAH_SCALAR-SQRDMLAH_SCALAR#0,SQRDMLAH_SCALAR-SQRDMLSH_SCALAR#0
pub const fn classify_impl_f9_2(inst: u32) -> u32 {
  if (inst&0x2000) != 0x0 { return 0; }
  let idx = match (inst >> 11) & 0x1 {
    0x0 => 0x4780,
    0x1 => 0x4781,
    _ => 0,
  };
  return idx;
}

// FP16_3REG_SCALAR-FCMGE_SCALAR_FP16#0,FP16_3REG_SCALAR-FACGE_SCALAR_FP16#0,SQRDMLAH_SCALAR-SQRDMLAH_SCALAR#0,SQRDMLAH_SCALAR-SQRDMLSH_SCALAR#0
pub const fn classify_impl_f9(inst: u32) -> u32 {
  if (inst&0x5400) != 0x400 { return 0; }
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_f9_1(inst), // FP16_3REG_SCALAR-FCMGE_SCALAR_FP16#0,FP16_3REG_SCALAR-FACGE_SCALAR_FP16#0
    0x2 => return classify_impl_f9_2(inst), // SQRDMLAH_SCALAR-SQRDMLAH_SCALAR#0,SQRDMLAH_SCALAR-SQRDMLSH_SCALAR#0
    _ => idx
  };
  return idx;
}


// ARITH1_SCALAR-USQADD_SCALAR#1
pub const fn classify_impl_fa_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3003;
}


// ARITH1_SCALAR-SQNEG_SCALAR#1
pub const fn classify_impl_fa_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3004;
}


// XTN_SCALAR-SQXTUN_SCALAR#1
pub const fn classify_impl_fa_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3301;
}


// XTN_SCALAR-UQXTN_SCALAR#1
pub const fn classify_impl_fa_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3302;
}


// FCVTN_SCALAR-FCVTXN_SCALAR#0
pub const fn classify_impl_fa_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5100;
}


// FCVT_SCALAR-FCVTNU_SCALAR#0
pub const fn classify_impl_fa_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4e85;
}


// FCVT_SCALAR-FCVTMU_SCALAR#0
pub const fn classify_impl_fa_7(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4e86;
}


// FCVT_SCALAR-FCVTAU_SCALAR#0
pub const fn classify_impl_fa_8(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4e87;
}


// FCVT_FROMINT_SCALAR-UCVTF_VEC_SCALAR#0
pub const fn classify_impl_fa_9(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x5001;
}

// QADDSUB_SCALAR-UQADD_SCALAR#0,QADDSUB_SCALAR-UQSUB_SCALAR#0,ARITH1_SCALAR-USQADD_SCALAR#1,ARITH1_SCALAR-SQNEG_SCALAR#1,XTN_SCALAR-SQXTUN_SCALAR#1,XTN_SCALAR-UQXTN_SCALAR#1,SHL_REG_SCALAR-UQSHL_SCALAR#1,SHL_REG_SCALAR-UQRSHL_SCALAR#1,SQDMULH_SCALAR-SQRDMULH_SCALAR#0,FCMP_REG_SCALAR-FCMGE#0,FCMP_REG_SCALAR-FACGE#0,FCVT_SCALAR-FCVTNU_SCALAR#0,FCVT_SCALAR-FCVTMU_SCALAR#0,FCVT_SCALAR-FCVTAU_SCALAR#0,FCVT_FROMINT_SCALAR-UCVTF_VEC_SCALAR#0,FCVTN_SCALAR-FCVTXN_SCALAR#0
pub const fn classify_impl_fa(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x2c02,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x2c03,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x1,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x3404,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x3405,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x2,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x3801,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x3981,
    0x3a => 0x0,
    0x3b => 0x3982,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    0x40 => 0x0,
    0x41 => 0x0,
    0x42 => 0x0,
    0x43 => 0x2c02,
    0x44 => 0x0,
    0x45 => 0x0,
    0x46 => 0x0,
    0x47 => 0x0,
    0x48 => 0x0,
    0x49 => 0x0,
    0x4a => 0x3,
    0x4b => 0x2c03,
    0x4c => 0x0,
    0x4d => 0x0,
    0x4e => 0x0,
    0x4f => 0x0,
    0x50 => 0x0,
    0x51 => 0x0,
    0x52 => 0x4,
    0x53 => 0x3404,
    0x54 => 0x0,
    0x55 => 0x0,
    0x56 => 0x0,
    0x57 => 0x3405,
    0x58 => 0x0,
    0x59 => 0x0,
    0x5a => 0x5,
    0x5b => 0x0,
    0x5c => 0x0,
    0x5d => 0x0,
    0x5e => 0x0,
    0x5f => 0x0,
    0x60 => 0x0,
    0x61 => 0x0,
    0x62 => 0x0,
    0x63 => 0x0,
    0x64 => 0x0,
    0x65 => 0x0,
    0x66 => 0x0,
    0x67 => 0x0,
    0x68 => 0x0,
    0x69 => 0x0,
    0x6a => 0x6,
    0x6b => 0x0,
    0x6c => 0x0,
    0x6d => 0x3801,
    0x6e => 0x7,
    0x6f => 0x0,
    0x70 => 0x0,
    0x71 => 0x0,
    0x72 => 0x8,
    0x73 => 0x0,
    0x74 => 0x0,
    0x75 => 0x0,
    0x76 => 0x9,
    0x77 => 0x0,
    0x78 => 0x0,
    0x79 => 0x3981,
    0x7a => 0x0,
    0x7b => 0x3982,
    0x7c => 0x0,
    0x7d => 0x0,
    0x7e => 0x0,
    0x7f => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_fa_1(inst), // ARITH1_SCALAR-USQADD_SCALAR#1
    0x2 => return classify_impl_fa_2(inst), // ARITH1_SCALAR-SQNEG_SCALAR#1
    0x3 => return classify_impl_fa_3(inst), // XTN_SCALAR-SQXTUN_SCALAR#1
    0x4 => return classify_impl_fa_4(inst), // XTN_SCALAR-UQXTN_SCALAR#1
    0x5 => return classify_impl_fa_5(inst), // FCVTN_SCALAR-FCVTXN_SCALAR#0
    0x6 => return classify_impl_fa_6(inst), // FCVT_SCALAR-FCVTNU_SCALAR#0
    0x7 => return classify_impl_fa_7(inst), // FCVT_SCALAR-FCVTMU_SCALAR#0
    0x8 => return classify_impl_fa_8(inst), // FCVT_SCALAR-FCVTAU_SCALAR#0
    0x9 => return classify_impl_fa_9(inst), // FCVT_FROMINT_SCALAR-UCVTF_VEC_SCALAR#0
    _ => idx
  };
  return idx;
}


// FP_HORZ_SCALAR-FMAXNMP_SCALAR#1
pub const fn classify_impl_fb_1_1(inst: u32) -> u32 {
  if (inst&0x70000) != 0x0 { return 0; }
  return 0x5405;
}


// FP_HORZ_SCALAR-FADDP_SCALAR#1
pub const fn classify_impl_fb_1_2(inst: u32) -> u32 {
  if (inst&0x70000) != 0x0 { return 0; }
  return 0x5406;
}


// FP_HORZ_SCALAR-FMAXP_SCALAR#1
pub const fn classify_impl_fb_1_3(inst: u32) -> u32 {
  if (inst&0x70000) != 0x0 { return 0; }
  return 0x5407;
}

// QADDSUB_SCALAR-UQADD_SCALAR#0,QADDSUB_SCALAR-UQSUB_SCALAR#0,SHL_REG_SCALAR-UQSHL_SCALAR#1,SHL_REG_SCALAR-UQRSHL_SCALAR#1,SQDMULH_SCALAR-SQRDMULH_SCALAR#0,FCMP_REG_SCALAR-FCMGE#0,FCMP_REG_SCALAR-FACGE#0,FP_HORZ_SCALAR-FMAXNMP_SCALAR#1,FP_HORZ_SCALAR-FADDP_SCALAR#1,FP_HORZ_SCALAR-FMAXP_SCALAR#1
pub const fn classify_impl_fb_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x2c02,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x2c03,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x3404,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x3405,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x3801,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x1,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x2,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x3981,
    0x3a => 0x0,
    0x3b => 0x3982,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x3,
    0x3f => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_fb_1_1(inst), // FP_HORZ_SCALAR-FMAXNMP_SCALAR#1
    0x2 => return classify_impl_fb_1_2(inst), // FP_HORZ_SCALAR-FADDP_SCALAR#1
    0x3 => return classify_impl_fb_1_3(inst), // FP_HORZ_SCALAR-FMAXP_SCALAR#1
    _ => idx
  };
  return idx;
}


// FP16_2REG_SCALAR-FCVTNU_SCALAR_FP16#0
pub const fn classify_impl_fb_2_1(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x420b;
}


// FP16_2REG_SCALAR-FCVTMU_SCALAR_FP16#0
pub const fn classify_impl_fb_2_2(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x420c;
}


// FP16_2REG_SCALAR-FCVTAU_SCALAR_FP16#0
pub const fn classify_impl_fb_2_3(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x420d;
}


// FP16_2REG_SCALAR-UCVTF_SCALAR_FP16#0
pub const fn classify_impl_fb_2_4(inst: u32) -> u32 {
  if (inst&0x70000) != 0x10000 { return 0; }
  return 0x420e;
}

// QADDSUB_SCALAR-UQADD_SCALAR#0,QADDSUB_SCALAR-UQSUB_SCALAR#0,SHL_REG_SCALAR-UQSHL_SCALAR#1,SHL_REG_SCALAR-UQRSHL_SCALAR#1,SQDMULH_SCALAR-SQRDMULH_SCALAR#0,FCMP_REG_SCALAR-FCMGE#0,FCMP_REG_SCALAR-FACGE#0,FP16_2REG_SCALAR-FCVTNU_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTMU_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTAU_SCALAR_FP16#0,FP16_2REG_SCALAR-UCVTF_SCALAR_FP16#0
pub const fn classify_impl_fb_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x2c02,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x2c03,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x3404,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x3405,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x1,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x3801,
    0x2e => 0x2,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x3,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x4,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x3981,
    0x3a => 0x0,
    0x3b => 0x3982,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_fb_2_1(inst), // FP16_2REG_SCALAR-FCVTNU_SCALAR_FP16#0
    0x2 => return classify_impl_fb_2_2(inst), // FP16_2REG_SCALAR-FCVTMU_SCALAR_FP16#0
    0x3 => return classify_impl_fb_2_3(inst), // FP16_2REG_SCALAR-FCVTAU_SCALAR_FP16#0
    0x4 => return classify_impl_fb_2_4(inst), // FP16_2REG_SCALAR-UCVTF_SCALAR_FP16#0
    _ => idx
  };
  return idx;
}

// QADDSUB_SCALAR-UQADD_SCALAR#0,QADDSUB_SCALAR-UQSUB_SCALAR#0,SHL_REG_SCALAR-UQSHL_SCALAR#1,SHL_REG_SCALAR-UQRSHL_SCALAR#1,SQDMULH_SCALAR-SQRDMULH_SCALAR#0,FCMP_REG_SCALAR-FCMGE#0,FCMP_REG_SCALAR-FACGE#0,FP16_2REG_SCALAR-FCVTNU_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTMU_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTAU_SCALAR_FP16#0,FP16_2REG_SCALAR-UCVTF_SCALAR_FP16#0,FP_HORZ_SCALAR-FMAXNMP_SCALAR#1,FP_HORZ_SCALAR-FADDP_SCALAR#1,FP_HORZ_SCALAR-FMAXP_SCALAR#1
pub const fn classify_impl_fb(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_fb_1(inst), // QADDSUB_SCALAR-UQADD_SCALAR#0,QADDSUB_SCALAR-UQSUB_SCALAR#0,SHL_REG_SCALAR-UQSHL_SCALAR#1,SHL_REG_SCALAR-UQRSHL_SCALAR#1,SQDMULH_SCALAR-SQRDMULH_SCALAR#0,FCMP_REG_SCALAR-FCMGE#0,FCMP_REG_SCALAR-FACGE#0,FP_HORZ_SCALAR-FMAXNMP_SCALAR#1,FP_HORZ_SCALAR-FADDP_SCALAR#1,FP_HORZ_SCALAR-FMAXP_SCALAR#1
    0x2 => return classify_impl_fb_2(inst), // QADDSUB_SCALAR-UQADD_SCALAR#0,QADDSUB_SCALAR-UQSUB_SCALAR#0,SHL_REG_SCALAR-UQSHL_SCALAR#1,SHL_REG_SCALAR-UQRSHL_SCALAR#1,SQDMULH_SCALAR-SQRDMULH_SCALAR#0,FCMP_REG_SCALAR-FCMGE#0,FCMP_REG_SCALAR-FACGE#0,FP16_2REG_SCALAR-FCVTNU_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTMU_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTAU_SCALAR_FP16#0,FP16_2REG_SCALAR-UCVTF_SCALAR_FP16#0
    _ => idx
  };
  return idx;
}


// SQRDMLAH_SCALAR-SQRDMLAH_SCALAR#1,SQRDMLAH_SCALAR-SQRDMLSH_SCALAR#1
pub const fn classify_impl_fc(inst: u32) -> u32 {
  if (inst&0xf400) != 0x8400 { return 0; }
  let idx = match (inst >> 11) & 0x1 {
    0x0 => 0x4780,
    0x1 => 0x4781,
    _ => 0,
  };
  return idx;
}


// ARITH1_SCALAR-USQADD_SCALAR#2
pub const fn classify_impl_fd_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3003;
}


// ARITH1_SCALAR-SQNEG_SCALAR#2
pub const fn classify_impl_fd_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3004;
}


// FCMP_ZERO_SCALAR-FCMGE_ZERO#0
pub const fn classify_impl_fd_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3a03;
}


// FCMP_ZERO_SCALAR-FCMLE_ZERO#0
pub const fn classify_impl_fd_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3a04;
}


// XTN_SCALAR-SQXTUN_SCALAR#2
pub const fn classify_impl_fd_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3301;
}


// XTN_SCALAR-UQXTN_SCALAR#2
pub const fn classify_impl_fd_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3302;
}


// FCVT_SCALAR-FCVTPU_SCALAR#0
pub const fn classify_impl_fd_7(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4e88;
}


// FCVT_SCALAR-FCVTZU_SCALAR#0
pub const fn classify_impl_fd_8(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4e89;
}


// FRECP_SCALAR-FRSQRTE_SCALAR#0
pub const fn classify_impl_fd_9(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3d02;
}

// QADDSUB_SCALAR-UQADD_SCALAR#0,QADDSUB_SCALAR-UQSUB_SCALAR#0,ARITH1_SCALAR-USQADD_SCALAR#2,ARITH1_SCALAR-SQNEG_SCALAR#2,XTN_SCALAR-SQXTUN_SCALAR#2,XTN_SCALAR-UQXTN_SCALAR#2,SHL_REG_SCALAR-UQSHL_SCALAR#2,SHL_REG_SCALAR-UQRSHL_SCALAR#2,SQDMULH_SCALAR-SQRDMULH_SCALAR#1,FCMP_REG_SCALAR-FCMGT#0,FCMP_REG_SCALAR-FACGT#0,FCMP_ZERO_SCALAR-FCMGE_ZERO#0,FCMP_ZERO_SCALAR-FCMLE_ZERO#0,FABD_SCALAR-FABD#0,FRECP_SCALAR-FRSQRTE_SCALAR#0,FCVT_SCALAR-FCVTPU_SCALAR#0,FCVT_SCALAR-FCVTZU_SCALAR#0
pub const fn classify_impl_fd(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x2c02,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x2c03,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x1,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x3404,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x3405,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x2,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x3801,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x3,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x3c00,
    0x36 => 0x4,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x3983,
    0x3a => 0x0,
    0x3b => 0x3984,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    0x40 => 0x0,
    0x41 => 0x0,
    0x42 => 0x0,
    0x43 => 0x2c02,
    0x44 => 0x0,
    0x45 => 0x0,
    0x46 => 0x0,
    0x47 => 0x0,
    0x48 => 0x0,
    0x49 => 0x0,
    0x4a => 0x5,
    0x4b => 0x2c03,
    0x4c => 0x0,
    0x4d => 0x0,
    0x4e => 0x0,
    0x4f => 0x0,
    0x50 => 0x0,
    0x51 => 0x0,
    0x52 => 0x6,
    0x53 => 0x3404,
    0x54 => 0x0,
    0x55 => 0x0,
    0x56 => 0x0,
    0x57 => 0x3405,
    0x58 => 0x0,
    0x59 => 0x0,
    0x5a => 0x0,
    0x5b => 0x0,
    0x5c => 0x0,
    0x5d => 0x0,
    0x5e => 0x0,
    0x5f => 0x0,
    0x60 => 0x0,
    0x61 => 0x0,
    0x62 => 0x0,
    0x63 => 0x0,
    0x64 => 0x0,
    0x65 => 0x0,
    0x66 => 0x0,
    0x67 => 0x0,
    0x68 => 0x0,
    0x69 => 0x0,
    0x6a => 0x7,
    0x6b => 0x0,
    0x6c => 0x0,
    0x6d => 0x3801,
    0x6e => 0x8,
    0x6f => 0x0,
    0x70 => 0x0,
    0x71 => 0x0,
    0x72 => 0x0,
    0x73 => 0x0,
    0x74 => 0x0,
    0x75 => 0x3c00,
    0x76 => 0x9,
    0x77 => 0x0,
    0x78 => 0x0,
    0x79 => 0x3983,
    0x7a => 0x0,
    0x7b => 0x3984,
    0x7c => 0x0,
    0x7d => 0x0,
    0x7e => 0x0,
    0x7f => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_fd_1(inst), // ARITH1_SCALAR-USQADD_SCALAR#2
    0x2 => return classify_impl_fd_2(inst), // ARITH1_SCALAR-SQNEG_SCALAR#2
    0x3 => return classify_impl_fd_3(inst), // FCMP_ZERO_SCALAR-FCMGE_ZERO#0
    0x4 => return classify_impl_fd_4(inst), // FCMP_ZERO_SCALAR-FCMLE_ZERO#0
    0x5 => return classify_impl_fd_5(inst), // XTN_SCALAR-SQXTUN_SCALAR#2
    0x6 => return classify_impl_fd_6(inst), // XTN_SCALAR-UQXTN_SCALAR#2
    0x7 => return classify_impl_fd_7(inst), // FCVT_SCALAR-FCVTPU_SCALAR#0
    0x8 => return classify_impl_fd_8(inst), // FCVT_SCALAR-FCVTZU_SCALAR#0
    0x9 => return classify_impl_fd_9(inst), // FRECP_SCALAR-FRSQRTE_SCALAR#0
    _ => idx
  };
  return idx;
}


// FP_HORZ_SCALAR-FMINNMP_SCALAR#0
pub const fn classify_impl_fe_1(inst: u32) -> u32 {
  if (inst&0xf0000) != 0x0 { return 0; }
  return 0x5408;
}


// FP_HORZ_SCALAR-FMINP_SCALAR#0
pub const fn classify_impl_fe_2(inst: u32) -> u32 {
  if (inst&0xf0000) != 0x0 { return 0; }
  return 0x5409;
}

// QADDSUB_SCALAR-UQADD_SCALAR#0,QADDSUB_SCALAR-UQSUB_SCALAR#0,SHL_REG_SCALAR-UQSHL_SCALAR#2,SHL_REG_SCALAR-UQRSHL_SCALAR#2,SQDMULH_SCALAR-SQRDMULH_SCALAR#1,FCMP_REG_SCALAR-FCMGT#0,FCMP_REG_SCALAR-FACGT#0,FABD_SCALAR-FABD#0,FP_HORZ_SCALAR-FMINNMP_SCALAR#0,FP_HORZ_SCALAR-FMINP_SCALAR#0
pub const fn classify_impl_fe(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x2c02,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x2c03,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x3404,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x3405,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x3801,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x1,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x3c00,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x3983,
    0x3a => 0x0,
    0x3b => 0x3984,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x2,
    0x3f => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_fe_1(inst), // FP_HORZ_SCALAR-FMINNMP_SCALAR#0
    0x2 => return classify_impl_fe_2(inst), // FP_HORZ_SCALAR-FMINP_SCALAR#0
    _ => idx
  };
  return idx;
}


// FP16_3REG_SCALAR-FABD_SCALAR_FP16#0,FP16_3REG_SCALAR-FCMGT_SCALAR_FP16#0,FP16_3REG_SCALAR-FACGT_SCALAR_FP16#0
pub const fn classify_impl_ff(inst: u32) -> u32 {
  if (inst&0xc400) != 0x400 { return 0; }
  let idx = match (inst >> 11) & 0x7 {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x4106,
    0x3 => 0x0,
    0x4 => 0x4107,
    0x5 => 0x4108,
    0x6 => 0x0,
    0x7 => 0x0,
    _ => 0,
  };
  return idx;
}


// ARITH1_SCALAR-USQADD_SCALAR#3
pub const fn classify_impl_100_1(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3003;
}


// ARITH1_SCALAR-SQNEG_SCALAR#3
pub const fn classify_impl_100_2(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3004;
}


// CMZERO_SCALAR-CMGE_ZERO#0
pub const fn classify_impl_100_3(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f03;
}


// CMZERO_SCALAR-CMLE_ZERO#0
pub const fn classify_impl_100_4(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x2f04;
}


// ARITH1_SCALAR-NEG_SCALAR#0
pub const fn classify_impl_100_5(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3005;
}


// FCMP_ZERO_SCALAR-FCMGE_ZERO#0
pub const fn classify_impl_100_6(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3a03;
}


// FCMP_ZERO_SCALAR-FCMLE_ZERO#0
pub const fn classify_impl_100_7(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3a04;
}


// FCVT_SCALAR-FCVTPU_SCALAR#0
pub const fn classify_impl_100_8(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4e88;
}


// FCVT_SCALAR-FCVTZU_SCALAR#0
pub const fn classify_impl_100_9(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x4e89;
}


// FRECP_SCALAR-FRSQRTE_SCALAR#0
pub const fn classify_impl_100_a(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x0 { return 0; }
  return 0x3d02;
}

// QADDSUB_SCALAR-UQADD_SCALAR#0,QADDSUB_SCALAR-UQSUB_SCALAR#0,CMGT_SCALAR-CMHI#0,CMGT_SCALAR-CMHS#0,CMEQ_SCALAR-CMEQ#0,CMZERO_SCALAR-CMGE_ZERO#0,CMZERO_SCALAR-CMLE_ZERO#0,ARITH1_SCALAR-USQADD_SCALAR#3,ARITH1_SCALAR-SQNEG_SCALAR#3,ARITH1_SCALAR-NEG_SCALAR#0,SHL_REG_SCALAR-UQSHL_SCALAR#3,SHL_REG_SCALAR-UQRSHL_SCALAR#3,SHL_REG_SCALAR-USHL_SCALAR#0,SHL_REG_SCALAR-URSHL_SCALAR#0,ADDSUB_SCALAR-SUB_SCALAR#0,FCMP_REG_SCALAR-FCMGT#0,FCMP_REG_SCALAR-FACGT#0,FCMP_ZERO_SCALAR-FCMGE_ZERO#0,FCMP_ZERO_SCALAR-FCMLE_ZERO#0,FABD_SCALAR-FABD#0,FRECP_SCALAR-FRSQRTE_SCALAR#0,FCVT_SCALAR-FCVTPU_SCALAR#0,FCVT_SCALAR-FCVTZU_SCALAR#0
pub const fn classify_impl_100(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x2c02,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x2c03,
    0xc => 0x0,
    0xd => 0x2d02,
    0xe => 0x1,
    0xf => 0x2d03,
    0x10 => 0x0,
    0x11 => 0x3406,
    0x12 => 0x0,
    0x13 => 0x3404,
    0x14 => 0x0,
    0x15 => 0x3407,
    0x16 => 0x0,
    0x17 => 0x3405,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x2,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x3601,
    0x22 => 0x3,
    0x23 => 0x2e01,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x4,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x5,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x6,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x3c00,
    0x36 => 0x7,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x3983,
    0x3a => 0x0,
    0x3b => 0x3984,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    0x40 => 0x0,
    0x41 => 0x0,
    0x42 => 0x0,
    0x43 => 0x2c02,
    0x44 => 0x0,
    0x45 => 0x0,
    0x46 => 0x0,
    0x47 => 0x0,
    0x48 => 0x0,
    0x49 => 0x0,
    0x4a => 0x0,
    0x4b => 0x2c03,
    0x4c => 0x0,
    0x4d => 0x2d02,
    0x4e => 0x0,
    0x4f => 0x2d03,
    0x50 => 0x0,
    0x51 => 0x3406,
    0x52 => 0x0,
    0x53 => 0x3404,
    0x54 => 0x0,
    0x55 => 0x3407,
    0x56 => 0x0,
    0x57 => 0x3405,
    0x58 => 0x0,
    0x59 => 0x0,
    0x5a => 0x0,
    0x5b => 0x0,
    0x5c => 0x0,
    0x5d => 0x0,
    0x5e => 0x0,
    0x5f => 0x0,
    0x60 => 0x0,
    0x61 => 0x3601,
    0x62 => 0x0,
    0x63 => 0x2e01,
    0x64 => 0x0,
    0x65 => 0x0,
    0x66 => 0x0,
    0x67 => 0x0,
    0x68 => 0x0,
    0x69 => 0x0,
    0x6a => 0x8,
    0x6b => 0x0,
    0x6c => 0x0,
    0x6d => 0x0,
    0x6e => 0x9,
    0x6f => 0x0,
    0x70 => 0x0,
    0x71 => 0x0,
    0x72 => 0x0,
    0x73 => 0x0,
    0x74 => 0x0,
    0x75 => 0x3c00,
    0x76 => 0xa,
    0x77 => 0x0,
    0x78 => 0x0,
    0x79 => 0x3983,
    0x7a => 0x0,
    0x7b => 0x3984,
    0x7c => 0x0,
    0x7d => 0x0,
    0x7e => 0x0,
    0x7f => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_100_1(inst), // ARITH1_SCALAR-USQADD_SCALAR#3
    0x2 => return classify_impl_100_2(inst), // ARITH1_SCALAR-SQNEG_SCALAR#3
    0x3 => return classify_impl_100_3(inst), // CMZERO_SCALAR-CMGE_ZERO#0
    0x4 => return classify_impl_100_4(inst), // CMZERO_SCALAR-CMLE_ZERO#0
    0x5 => return classify_impl_100_5(inst), // ARITH1_SCALAR-NEG_SCALAR#0
    0x6 => return classify_impl_100_6(inst), // FCMP_ZERO_SCALAR-FCMGE_ZERO#0
    0x7 => return classify_impl_100_7(inst), // FCMP_ZERO_SCALAR-FCMLE_ZERO#0
    0x8 => return classify_impl_100_8(inst), // FCVT_SCALAR-FCVTPU_SCALAR#0
    0x9 => return classify_impl_100_9(inst), // FCVT_SCALAR-FCVTZU_SCALAR#0
    0xa => return classify_impl_100_a(inst), // FRECP_SCALAR-FRSQRTE_SCALAR#0
    _ => idx
  };
  return idx;
}


// FP_HORZ_SCALAR-FMINNMP_SCALAR#1
pub const fn classify_impl_101_1_1(inst: u32) -> u32 {
  if (inst&0x70000) != 0x0 { return 0; }
  return 0x5408;
}


// FP_HORZ_SCALAR-FMINP_SCALAR#1
pub const fn classify_impl_101_1_2(inst: u32) -> u32 {
  if (inst&0x70000) != 0x0 { return 0; }
  return 0x5409;
}

// QADDSUB_SCALAR-UQADD_SCALAR#0,QADDSUB_SCALAR-UQSUB_SCALAR#0,CMGT_SCALAR-CMHI#0,CMGT_SCALAR-CMHS#0,CMEQ_SCALAR-CMEQ#0,SHL_REG_SCALAR-UQSHL_SCALAR#3,SHL_REG_SCALAR-UQRSHL_SCALAR#3,SHL_REG_SCALAR-USHL_SCALAR#0,SHL_REG_SCALAR-URSHL_SCALAR#0,ADDSUB_SCALAR-SUB_SCALAR#0,FCMP_REG_SCALAR-FCMGT#0,FCMP_REG_SCALAR-FACGT#0,FABD_SCALAR-FABD#0,FP_HORZ_SCALAR-FMINNMP_SCALAR#1,FP_HORZ_SCALAR-FMINP_SCALAR#1
pub const fn classify_impl_101_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x2c02,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x2c03,
    0xc => 0x0,
    0xd => 0x2d02,
    0xe => 0x0,
    0xf => 0x2d03,
    0x10 => 0x0,
    0x11 => 0x3406,
    0x12 => 0x0,
    0x13 => 0x3404,
    0x14 => 0x0,
    0x15 => 0x3407,
    0x16 => 0x0,
    0x17 => 0x3405,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x3601,
    0x22 => 0x0,
    0x23 => 0x2e01,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x1,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x3c00,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x3983,
    0x3a => 0x0,
    0x3b => 0x3984,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x2,
    0x3f => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_101_1_1(inst), // FP_HORZ_SCALAR-FMINNMP_SCALAR#1
    0x2 => return classify_impl_101_1_2(inst), // FP_HORZ_SCALAR-FMINP_SCALAR#1
    _ => idx
  };
  return idx;
}


// FP16_2REG_SCALAR-FCMGE_ZERO_SCALAR_FP16#0
pub const fn classify_impl_101_2_1(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x420f;
}


// FP16_2REG_SCALAR-FCMLE_ZERO_SCALAR_FP16#0
pub const fn classify_impl_101_2_2(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x4210;
}


// FP16_2REG_SCALAR-FCVTPU_SCALAR_FP16#0
pub const fn classify_impl_101_2_3(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x4211;
}


// FP16_2REG_SCALAR-FCVTZU_SCALAR_FP16#0
pub const fn classify_impl_101_2_4(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x4212;
}


// FP16_2REG_SCALAR-FRSQRTE_SCALAR_FP16#0
pub const fn classify_impl_101_2_5(inst: u32) -> u32 {
  if (inst&0x60000) != 0x0 { return 0; }
  return 0x4213;
}

// QADDSUB_SCALAR-UQADD_SCALAR#0,QADDSUB_SCALAR-UQSUB_SCALAR#0,CMGT_SCALAR-CMHI#0,CMGT_SCALAR-CMHS#0,CMEQ_SCALAR-CMEQ#0,SHL_REG_SCALAR-UQSHL_SCALAR#3,SHL_REG_SCALAR-UQRSHL_SCALAR#3,SHL_REG_SCALAR-USHL_SCALAR#0,SHL_REG_SCALAR-URSHL_SCALAR#0,ADDSUB_SCALAR-SUB_SCALAR#0,FCMP_REG_SCALAR-FCMGT#0,FCMP_REG_SCALAR-FACGT#0,FABD_SCALAR-FABD#0,FP16_2REG_SCALAR-FCMGE_ZERO_SCALAR_FP16#0,FP16_2REG_SCALAR-FCMLE_ZERO_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTPU_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTZU_SCALAR_FP16#0,FP16_2REG_SCALAR-FRSQRTE_SCALAR_FP16#0
pub const fn classify_impl_101_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x7f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x2c02,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x2c03,
    0xc => 0x0,
    0xd => 0x2d02,
    0xe => 0x0,
    0xf => 0x2d03,
    0x10 => 0x0,
    0x11 => 0x3406,
    0x12 => 0x0,
    0x13 => 0x3404,
    0x14 => 0x0,
    0x15 => 0x3407,
    0x16 => 0x0,
    0x17 => 0x3405,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x3601,
    0x22 => 0x0,
    0x23 => 0x2e01,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x1,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x3c00,
    0x36 => 0x2,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x3983,
    0x3a => 0x0,
    0x3b => 0x3984,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    0x40 => 0x0,
    0x41 => 0x0,
    0x42 => 0x0,
    0x43 => 0x2c02,
    0x44 => 0x0,
    0x45 => 0x0,
    0x46 => 0x0,
    0x47 => 0x0,
    0x48 => 0x0,
    0x49 => 0x0,
    0x4a => 0x0,
    0x4b => 0x2c03,
    0x4c => 0x0,
    0x4d => 0x2d02,
    0x4e => 0x0,
    0x4f => 0x2d03,
    0x50 => 0x0,
    0x51 => 0x3406,
    0x52 => 0x0,
    0x53 => 0x3404,
    0x54 => 0x0,
    0x55 => 0x3407,
    0x56 => 0x0,
    0x57 => 0x3405,
    0x58 => 0x0,
    0x59 => 0x0,
    0x5a => 0x0,
    0x5b => 0x0,
    0x5c => 0x0,
    0x5d => 0x0,
    0x5e => 0x0,
    0x5f => 0x0,
    0x60 => 0x0,
    0x61 => 0x3601,
    0x62 => 0x0,
    0x63 => 0x2e01,
    0x64 => 0x0,
    0x65 => 0x0,
    0x66 => 0x0,
    0x67 => 0x0,
    0x68 => 0x0,
    0x69 => 0x0,
    0x6a => 0x3,
    0x6b => 0x0,
    0x6c => 0x0,
    0x6d => 0x0,
    0x6e => 0x4,
    0x6f => 0x0,
    0x70 => 0x0,
    0x71 => 0x0,
    0x72 => 0x0,
    0x73 => 0x0,
    0x74 => 0x0,
    0x75 => 0x3c00,
    0x76 => 0x5,
    0x77 => 0x0,
    0x78 => 0x0,
    0x79 => 0x3983,
    0x7a => 0x0,
    0x7b => 0x3984,
    0x7c => 0x0,
    0x7d => 0x0,
    0x7e => 0x0,
    0x7f => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_101_2_1(inst), // FP16_2REG_SCALAR-FCMGE_ZERO_SCALAR_FP16#0
    0x2 => return classify_impl_101_2_2(inst), // FP16_2REG_SCALAR-FCMLE_ZERO_SCALAR_FP16#0
    0x3 => return classify_impl_101_2_3(inst), // FP16_2REG_SCALAR-FCVTPU_SCALAR_FP16#0
    0x4 => return classify_impl_101_2_4(inst), // FP16_2REG_SCALAR-FCVTZU_SCALAR_FP16#0
    0x5 => return classify_impl_101_2_5(inst), // FP16_2REG_SCALAR-FRSQRTE_SCALAR_FP16#0
    _ => idx
  };
  return idx;
}

// QADDSUB_SCALAR-UQADD_SCALAR#0,QADDSUB_SCALAR-UQSUB_SCALAR#0,CMGT_SCALAR-CMHI#0,CMGT_SCALAR-CMHS#0,CMEQ_SCALAR-CMEQ#0,SHL_REG_SCALAR-UQSHL_SCALAR#3,SHL_REG_SCALAR-UQRSHL_SCALAR#3,SHL_REG_SCALAR-USHL_SCALAR#0,SHL_REG_SCALAR-URSHL_SCALAR#0,ADDSUB_SCALAR-SUB_SCALAR#0,FCMP_REG_SCALAR-FCMGT#0,FCMP_REG_SCALAR-FACGT#0,FABD_SCALAR-FABD#0,FP16_2REG_SCALAR-FCMGE_ZERO_SCALAR_FP16#0,FP16_2REG_SCALAR-FCMLE_ZERO_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTPU_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTZU_SCALAR_FP16#0,FP16_2REG_SCALAR-FRSQRTE_SCALAR_FP16#0,FP_HORZ_SCALAR-FMINNMP_SCALAR#1,FP_HORZ_SCALAR-FMINP_SCALAR#1
pub const fn classify_impl_101(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_101_1(inst), // QADDSUB_SCALAR-UQADD_SCALAR#0,QADDSUB_SCALAR-UQSUB_SCALAR#0,CMGT_SCALAR-CMHI#0,CMGT_SCALAR-CMHS#0,CMEQ_SCALAR-CMEQ#0,SHL_REG_SCALAR-UQSHL_SCALAR#3,SHL_REG_SCALAR-UQRSHL_SCALAR#3,SHL_REG_SCALAR-USHL_SCALAR#0,SHL_REG_SCALAR-URSHL_SCALAR#0,ADDSUB_SCALAR-SUB_SCALAR#0,FCMP_REG_SCALAR-FCMGT#0,FCMP_REG_SCALAR-FACGT#0,FABD_SCALAR-FABD#0,FP_HORZ_SCALAR-FMINNMP_SCALAR#1,FP_HORZ_SCALAR-FMINP_SCALAR#1
    0x2 => return classify_impl_101_2(inst), // QADDSUB_SCALAR-UQADD_SCALAR#0,QADDSUB_SCALAR-UQSUB_SCALAR#0,CMGT_SCALAR-CMHI#0,CMGT_SCALAR-CMHS#0,CMEQ_SCALAR-CMEQ#0,SHL_REG_SCALAR-UQSHL_SCALAR#3,SHL_REG_SCALAR-UQRSHL_SCALAR#3,SHL_REG_SCALAR-USHL_SCALAR#0,SHL_REG_SCALAR-URSHL_SCALAR#0,ADDSUB_SCALAR-SUB_SCALAR#0,FCMP_REG_SCALAR-FCMGT#0,FCMP_REG_SCALAR-FACGT#0,FABD_SCALAR-FABD#0,FP16_2REG_SCALAR-FCMGE_ZERO_SCALAR_FP16#0,FP16_2REG_SCALAR-FCMLE_ZERO_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTPU_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTZU_SCALAR_FP16#0,FP16_2REG_SCALAR-FRSQRTE_SCALAR_FP16#0
    _ => idx
  };
  return idx;
}


// QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#0
pub const fn classify_impl_102_1(inst: u32) -> u32 {
  if (inst&0x80000) != 0x80000 { return 0; }
  return 0x4981;
}


// QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#0
pub const fn classify_impl_102_2(inst: u32) -> u32 {
  if (inst&0x80000) != 0x80000 { return 0; }
  return 0x4982;
}


// SHRN_SCALAR_IMM-SQSHRUN_SCALAR#0
pub const fn classify_impl_102_3(inst: u32) -> u32 {
  if (inst&0x80000) != 0x80000 { return 0; }
  return 0x4a82;
}


// SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#0
pub const fn classify_impl_102_4(inst: u32) -> u32 {
  if (inst&0x80000) != 0x80000 { return 0; }
  return 0x4a83;
}


// SHRN_SCALAR_IMM-UQSHRN_SCALAR#0
pub const fn classify_impl_102_5(inst: u32) -> u32 {
  if (inst&0x80000) != 0x80000 { return 0; }
  return 0x4a84;
}


// SHRN_SCALAR_IMM-UQRSHRN_SCALAR#0
pub const fn classify_impl_102_6(inst: u32) -> u32 {
  if (inst&0x80000) != 0x80000 { return 0; }
  return 0x4a85;
}

// QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#0,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#0,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#0,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#0,SHRN_SCALAR_IMM-UQSHRN_SCALAR#0,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#0,FMUL_ELEM_SCALAR_FP16-FMULX_ELEM_SCALAR_FP16#0
pub const fn classify_impl_102(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x1,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x2,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x3,
    0x22 => 0x0,
    0x23 => 0x4,
    0x24 => 0x5783,
    0x25 => 0x5,
    0x26 => 0x5783,
    0x27 => 0x6,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_102_1(inst), // QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#0
    0x2 => return classify_impl_102_2(inst), // QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#0
    0x3 => return classify_impl_102_3(inst), // SHRN_SCALAR_IMM-SQSHRUN_SCALAR#0
    0x4 => return classify_impl_102_4(inst), // SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#0
    0x5 => return classify_impl_102_5(inst), // SHRN_SCALAR_IMM-UQSHRN_SCALAR#0
    0x6 => return classify_impl_102_6(inst), // SHRN_SCALAR_IMM-UQRSHRN_SCALAR#0
    _ => idx
  };
  return idx;
}


// QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#1,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#1,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#1,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#1,SHRN_SCALAR_IMM-UQSHRN_SCALAR#1,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#1,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX_FP16#0,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX_FP16#0,FMUL_ELEM_SCALAR_FP16-FMULX_ELEM_SCALAR_FP16#0
pub const fn classify_impl_103_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4981,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4982,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4a82,
    0x22 => 0x0,
    0x23 => 0x4a83,
    0x24 => 0x5783,
    0x25 => 0x4a84,
    0x26 => 0x5783,
    0x27 => 0x4a85,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d84,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4d85,
    _ => 0,
  };
  return idx;
}


// QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#2,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#2,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#2,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#2,SHRN_SCALAR_IMM-UQSHRN_SCALAR#2,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#2,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX_FP16#1,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX_FP16#1,FMUL_ELEM_SCALAR_FP16-FMULX_ELEM_SCALAR_FP16#0
pub const fn classify_impl_103_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4981,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4982,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4a82,
    0x22 => 0x0,
    0x23 => 0x4a83,
    0x24 => 0x5783,
    0x25 => 0x4a84,
    0x26 => 0x5783,
    0x27 => 0x4a85,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d84,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4d85,
    _ => 0,
  };
  return idx;
}

// QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#1,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#2,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#1,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#2,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#1,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#2,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#1,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#2,SHRN_SCALAR_IMM-UQSHRN_SCALAR#1,SHRN_SCALAR_IMM-UQSHRN_SCALAR#2,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#1,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#2,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX_FP16#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX_FP16#1,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX_FP16#0,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX_FP16#1,FMUL_ELEM_SCALAR_FP16-FMULX_ELEM_SCALAR_FP16#0
pub const fn classify_impl_103(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_103_1(inst), // QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#1,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#1,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#1,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#1,SHRN_SCALAR_IMM-UQSHRN_SCALAR#1,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#1,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX_FP16#0,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX_FP16#0,FMUL_ELEM_SCALAR_FP16-FMULX_ELEM_SCALAR_FP16#0
    0x2 => return classify_impl_103_2(inst), // QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#2,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#2,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#2,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#2,SHRN_SCALAR_IMM-UQSHRN_SCALAR#2,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#2,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX_FP16#1,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX_FP16#1,FMUL_ELEM_SCALAR_FP16-FMULX_ELEM_SCALAR_FP16#0
    _ => idx
  };
  return idx;
}


// QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#3,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#3,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#3,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#3,SHRN_SCALAR_IMM-UQSHRN_SCALAR#3,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#3,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#0,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#0,FMUL_ELEM_SCALAR_FP16-FMULX_ELEM_SCALAR_FP16#0
pub const fn classify_impl_104_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4981,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4982,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4a82,
    0x22 => 0x0,
    0x23 => 0x4a83,
    0x24 => 0x5783,
    0x25 => 0x4a84,
    0x26 => 0x5783,
    0x27 => 0x4a85,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d86,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4d87,
    _ => 0,
  };
  return idx;
}


// QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#4,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#4,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#4,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#4,SHRN_SCALAR_IMM-UQSHRN_SCALAR#4,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#4,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#1,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#1,FMUL_ELEM_SCALAR_FP16-FMULX_ELEM_SCALAR_FP16#0
pub const fn classify_impl_104_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4981,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4982,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4a82,
    0x22 => 0x0,
    0x23 => 0x4a83,
    0x24 => 0x5783,
    0x25 => 0x4a84,
    0x26 => 0x5783,
    0x27 => 0x4a85,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d86,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4d87,
    _ => 0,
  };
  return idx;
}

// QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#3,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#4,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#3,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#4,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#3,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#4,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#3,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#4,SHRN_SCALAR_IMM-UQSHRN_SCALAR#3,SHRN_SCALAR_IMM-UQSHRN_SCALAR#4,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#3,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#4,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#1,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#0,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#1,FMUL_ELEM_SCALAR_FP16-FMULX_ELEM_SCALAR_FP16#0
pub const fn classify_impl_104(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_104_1(inst), // QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#3,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#3,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#3,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#3,SHRN_SCALAR_IMM-UQSHRN_SCALAR#3,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#3,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#0,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#0,FMUL_ELEM_SCALAR_FP16-FMULX_ELEM_SCALAR_FP16#0
    0x2 => return classify_impl_104_2(inst), // QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#4,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#4,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#4,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#4,SHRN_SCALAR_IMM-UQSHRN_SCALAR#4,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#4,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#1,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#1,FMUL_ELEM_SCALAR_FP16-FMULX_ELEM_SCALAR_FP16#0
    _ => idx
  };
  return idx;
}


// QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#5,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#5,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#5,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#5,SHRN_SCALAR_IMM-UQSHRN_SCALAR#5,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#5,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#2,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#2,FMUL_ELEM_SCALAR_FP16-FMULX_ELEM_SCALAR_FP16#0
pub const fn classify_impl_105_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4981,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4982,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4a82,
    0x22 => 0x0,
    0x23 => 0x4a83,
    0x24 => 0x5783,
    0x25 => 0x4a84,
    0x26 => 0x5783,
    0x27 => 0x4a85,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d86,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4d87,
    _ => 0,
  };
  return idx;
}


// QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#6,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#6,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#6,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#6,SHRN_SCALAR_IMM-UQSHRN_SCALAR#6,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#6,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#3,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#3,FMUL_ELEM_SCALAR_FP16-FMULX_ELEM_SCALAR_FP16#0
pub const fn classify_impl_105_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4981,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4982,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x4a82,
    0x22 => 0x0,
    0x23 => 0x4a83,
    0x24 => 0x5783,
    0x25 => 0x4a84,
    0x26 => 0x5783,
    0x27 => 0x4a85,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d86,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x4d87,
    _ => 0,
  };
  return idx;
}

// QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#5,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#6,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#5,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#6,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#5,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#6,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#5,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#6,SHRN_SCALAR_IMM-UQSHRN_SCALAR#5,SHRN_SCALAR_IMM-UQSHRN_SCALAR#6,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#5,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#6,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#2,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#3,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#2,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#3,FMUL_ELEM_SCALAR_FP16-FMULX_ELEM_SCALAR_FP16#0
pub const fn classify_impl_105(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_105_1(inst), // QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#5,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#5,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#5,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#5,SHRN_SCALAR_IMM-UQSHRN_SCALAR#5,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#5,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#2,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#2,FMUL_ELEM_SCALAR_FP16-FMULX_ELEM_SCALAR_FP16#0
    0x2 => return classify_impl_105_2(inst), // QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#6,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#6,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#6,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#6,SHRN_SCALAR_IMM-UQSHRN_SCALAR#6,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#6,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#3,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#3,FMUL_ELEM_SCALAR_FP16-FMULX_ELEM_SCALAR_FP16#0
    _ => idx
  };
  return idx;
}


// SHR_SCALAR_IMM-USHR_SCALAR#0,SHR_SCALAR_IMM-USRA_SCALAR#0,SHR_SCALAR_IMM-URSHR_SCALAR#0,SHR_SCALAR_IMM-URSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#7,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#7,SHIFT_SCALAR_IMM-SRI_SCALAR#0,SHIFT_SCALAR_IMM-SLI_SCALAR#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#4,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#4,MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#0
pub const fn classify_impl_106_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4884,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4885,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4886,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4887,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x4c81,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4c82,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4981,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4982,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x5502,
    0x35 => 0x0,
    0x36 => 0x5502,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d86,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5503,
    0x3d => 0x0,
    0x3e => 0x5503,
    0x3f => 0x4d87,
    _ => 0,
  };
  return idx;
}


// SHR_SCALAR_IMM-USHR_SCALAR#0,SHR_SCALAR_IMM-USRA_SCALAR#0,SHR_SCALAR_IMM-URSHR_SCALAR#0,SHR_SCALAR_IMM-URSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#8,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#8,SHIFT_SCALAR_IMM-SRI_SCALAR#0,SHIFT_SCALAR_IMM-SLI_SCALAR#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#5,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#5,MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#0
pub const fn classify_impl_106_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4884,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4885,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4886,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4887,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x4c81,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4c82,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4981,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4982,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x5502,
    0x35 => 0x0,
    0x36 => 0x5502,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d86,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5503,
    0x3d => 0x0,
    0x3e => 0x5503,
    0x3f => 0x4d87,
    _ => 0,
  };
  return idx;
}

// SHR_SCALAR_IMM-USHR_SCALAR#0,SHR_SCALAR_IMM-USRA_SCALAR#0,SHR_SCALAR_IMM-URSHR_SCALAR#0,SHR_SCALAR_IMM-URSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#7,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#8,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#7,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#8,SHIFT_SCALAR_IMM-SRI_SCALAR#0,SHIFT_SCALAR_IMM-SLI_SCALAR#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#4,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#5,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#4,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#5,MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#0
pub const fn classify_impl_106(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_106_1(inst), // SHR_SCALAR_IMM-USHR_SCALAR#0,SHR_SCALAR_IMM-USRA_SCALAR#0,SHR_SCALAR_IMM-URSHR_SCALAR#0,SHR_SCALAR_IMM-URSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#7,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#7,SHIFT_SCALAR_IMM-SRI_SCALAR#0,SHIFT_SCALAR_IMM-SLI_SCALAR#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#4,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#4,MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#0
    0x2 => return classify_impl_106_2(inst), // SHR_SCALAR_IMM-USHR_SCALAR#0,SHR_SCALAR_IMM-USRA_SCALAR#0,SHR_SCALAR_IMM-URSHR_SCALAR#0,SHR_SCALAR_IMM-URSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#8,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#8,SHIFT_SCALAR_IMM-SRI_SCALAR#0,SHIFT_SCALAR_IMM-SLI_SCALAR#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#5,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#5,MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#0
    _ => idx
  };
  return idx;
}


// SHR_SCALAR_IMM-USHR_SCALAR#0,SHR_SCALAR_IMM-USRA_SCALAR#0,SHR_SCALAR_IMM-URSHR_SCALAR#0,SHR_SCALAR_IMM-URSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#9,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#9,SHIFT_SCALAR_IMM-SRI_SCALAR#0,SHIFT_SCALAR_IMM-SLI_SCALAR#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#6,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#6,MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#0
pub const fn classify_impl_107_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4884,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4885,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4886,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4887,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x4c81,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4c82,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4981,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4982,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x5502,
    0x35 => 0x0,
    0x36 => 0x5502,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d86,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5503,
    0x3d => 0x0,
    0x3e => 0x5503,
    0x3f => 0x4d87,
    _ => 0,
  };
  return idx;
}


// SHR_SCALAR_IMM-USHR_SCALAR#0,SHR_SCALAR_IMM-USRA_SCALAR#0,SHR_SCALAR_IMM-URSHR_SCALAR#0,SHR_SCALAR_IMM-URSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#10,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#10,SHIFT_SCALAR_IMM-SRI_SCALAR#0,SHIFT_SCALAR_IMM-SLI_SCALAR#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#7,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#7,MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#0
pub const fn classify_impl_107_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4884,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4885,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4886,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4887,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x4c81,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4c82,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4981,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4982,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x5502,
    0x35 => 0x0,
    0x36 => 0x5502,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d86,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5503,
    0x3d => 0x0,
    0x3e => 0x5503,
    0x3f => 0x4d87,
    _ => 0,
  };
  return idx;
}

// SHR_SCALAR_IMM-USHR_SCALAR#0,SHR_SCALAR_IMM-USRA_SCALAR#0,SHR_SCALAR_IMM-URSHR_SCALAR#0,SHR_SCALAR_IMM-URSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#9,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#10,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#9,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#10,SHIFT_SCALAR_IMM-SRI_SCALAR#0,SHIFT_SCALAR_IMM-SLI_SCALAR#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#6,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#7,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#6,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#7,MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#0
pub const fn classify_impl_107(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_107_1(inst), // SHR_SCALAR_IMM-USHR_SCALAR#0,SHR_SCALAR_IMM-USRA_SCALAR#0,SHR_SCALAR_IMM-URSHR_SCALAR#0,SHR_SCALAR_IMM-URSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#9,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#9,SHIFT_SCALAR_IMM-SRI_SCALAR#0,SHIFT_SCALAR_IMM-SLI_SCALAR#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#6,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#6,MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#0
    0x2 => return classify_impl_107_2(inst), // SHR_SCALAR_IMM-USHR_SCALAR#0,SHR_SCALAR_IMM-USRA_SCALAR#0,SHR_SCALAR_IMM-URSHR_SCALAR#0,SHR_SCALAR_IMM-URSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#10,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#10,SHIFT_SCALAR_IMM-SRI_SCALAR#0,SHIFT_SCALAR_IMM-SLI_SCALAR#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#7,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#7,MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#0
    _ => idx
  };
  return idx;
}


// SHR_SCALAR_IMM-USHR_SCALAR#0,SHR_SCALAR_IMM-USRA_SCALAR#0,SHR_SCALAR_IMM-URSHR_SCALAR#0,SHR_SCALAR_IMM-URSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#11,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#11,SHIFT_SCALAR_IMM-SRI_SCALAR#0,SHIFT_SCALAR_IMM-SLI_SCALAR#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#8,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#8,MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#0
pub const fn classify_impl_108_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4884,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4885,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4886,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4887,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x4c81,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4c82,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4981,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4982,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x5502,
    0x35 => 0x0,
    0x36 => 0x5502,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d86,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5503,
    0x3d => 0x0,
    0x3e => 0x5503,
    0x3f => 0x4d87,
    _ => 0,
  };
  return idx;
}


// SHR_SCALAR_IMM-USHR_SCALAR#0,SHR_SCALAR_IMM-USRA_SCALAR#0,SHR_SCALAR_IMM-URSHR_SCALAR#0,SHR_SCALAR_IMM-URSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#12,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#12,SHIFT_SCALAR_IMM-SRI_SCALAR#0,SHIFT_SCALAR_IMM-SLI_SCALAR#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#9,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#9,MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#0
pub const fn classify_impl_108_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4884,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4885,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4886,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4887,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x4c81,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4c82,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4981,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4982,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x5502,
    0x35 => 0x0,
    0x36 => 0x5502,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d86,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5503,
    0x3d => 0x0,
    0x3e => 0x5503,
    0x3f => 0x4d87,
    _ => 0,
  };
  return idx;
}

// SHR_SCALAR_IMM-USHR_SCALAR#0,SHR_SCALAR_IMM-USRA_SCALAR#0,SHR_SCALAR_IMM-URSHR_SCALAR#0,SHR_SCALAR_IMM-URSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#11,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#12,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#11,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#12,SHIFT_SCALAR_IMM-SRI_SCALAR#0,SHIFT_SCALAR_IMM-SLI_SCALAR#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#8,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#9,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#8,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#9,MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#0
pub const fn classify_impl_108(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_108_1(inst), // SHR_SCALAR_IMM-USHR_SCALAR#0,SHR_SCALAR_IMM-USRA_SCALAR#0,SHR_SCALAR_IMM-URSHR_SCALAR#0,SHR_SCALAR_IMM-URSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#11,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#11,SHIFT_SCALAR_IMM-SRI_SCALAR#0,SHIFT_SCALAR_IMM-SLI_SCALAR#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#8,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#8,MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#0
    0x2 => return classify_impl_108_2(inst), // SHR_SCALAR_IMM-USHR_SCALAR#0,SHR_SCALAR_IMM-USRA_SCALAR#0,SHR_SCALAR_IMM-URSHR_SCALAR#0,SHR_SCALAR_IMM-URSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#12,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#12,SHIFT_SCALAR_IMM-SRI_SCALAR#0,SHIFT_SCALAR_IMM-SLI_SCALAR#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#9,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#9,MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#0
    _ => idx
  };
  return idx;
}


// SHR_SCALAR_IMM-USHR_SCALAR#0,SHR_SCALAR_IMM-USRA_SCALAR#0,SHR_SCALAR_IMM-URSHR_SCALAR#0,SHR_SCALAR_IMM-URSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#13,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#13,SHIFT_SCALAR_IMM-SRI_SCALAR#0,SHIFT_SCALAR_IMM-SLI_SCALAR#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#10,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#10,MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#0
pub const fn classify_impl_109_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4884,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4885,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4886,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4887,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x4c81,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4c82,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4981,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4982,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x5502,
    0x35 => 0x0,
    0x36 => 0x5502,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d86,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5503,
    0x3d => 0x0,
    0x3e => 0x5503,
    0x3f => 0x4d87,
    _ => 0,
  };
  return idx;
}


// SHR_SCALAR_IMM-USHR_SCALAR#0,SHR_SCALAR_IMM-USRA_SCALAR#0,SHR_SCALAR_IMM-URSHR_SCALAR#0,SHR_SCALAR_IMM-URSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#14,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#14,SHIFT_SCALAR_IMM-SRI_SCALAR#0,SHIFT_SCALAR_IMM-SLI_SCALAR#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#11,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#11,MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#0
pub const fn classify_impl_109_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x4884,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x4885,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x4886,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x4887,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x4c81,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x4c82,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x4981,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x4982,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x5502,
    0x35 => 0x0,
    0x36 => 0x5502,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x4d86,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x5503,
    0x3d => 0x0,
    0x3e => 0x5503,
    0x3f => 0x4d87,
    _ => 0,
  };
  return idx;
}

// SHR_SCALAR_IMM-USHR_SCALAR#0,SHR_SCALAR_IMM-USRA_SCALAR#0,SHR_SCALAR_IMM-URSHR_SCALAR#0,SHR_SCALAR_IMM-URSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#13,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#14,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#13,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#14,SHIFT_SCALAR_IMM-SRI_SCALAR#0,SHIFT_SCALAR_IMM-SLI_SCALAR#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#10,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#11,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#10,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#11,MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#0
pub const fn classify_impl_109(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_109_1(inst), // SHR_SCALAR_IMM-USHR_SCALAR#0,SHR_SCALAR_IMM-USRA_SCALAR#0,SHR_SCALAR_IMM-URSHR_SCALAR#0,SHR_SCALAR_IMM-URSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#13,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#13,SHIFT_SCALAR_IMM-SRI_SCALAR#0,SHIFT_SCALAR_IMM-SLI_SCALAR#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#10,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#10,MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#0
    0x2 => return classify_impl_109_2(inst), // SHR_SCALAR_IMM-USHR_SCALAR#0,SHR_SCALAR_IMM-USRA_SCALAR#0,SHR_SCALAR_IMM-URSHR_SCALAR#0,SHR_SCALAR_IMM-URSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#14,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#14,SHIFT_SCALAR_IMM-SRI_SCALAR#0,SHIFT_SCALAR_IMM-SLI_SCALAR#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#11,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#11,MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#0
    _ => idx
  };
  return idx;
}


// MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#1,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#1,FMUL_ELEM_SCALAR-FMULX_ELEM_SCALAR#0
pub const fn classify_impl_10a(inst: u32) -> u32 {
  if (inst&0x9400) != 0x9000 { return 0; }
  let idx = match (inst >> 13) & 0x3 {
    0x0 => 0x5703,
    0x1 => 0x0,
    0x2 => 0x5502,
    0x3 => 0x5503,
    _ => 0,
  };
  return idx;
}


// MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#1,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#1,FMUL_ELEM_SCALAR-FMULX_ELEM_SCALAR#1
pub const fn classify_impl_10b(inst: u32) -> u32 {
  if (inst&0x9400) != 0x9000 { return 0; }
  let idx = match (inst >> 13) & 0x3 {
    0x0 => 0x5703,
    0x1 => 0x0,
    0x2 => 0x5502,
    0x3 => 0x5503,
    _ => 0,
  };
  return idx;
}


// FMUL_ELEM_SCALAR-FMULX_ELEM_SCALAR#2
pub const fn classify_impl_10c(inst: u32) -> u32 {
  if (inst&0xf400) != 0x9000 { return 0; }
  return 0x5703;
}


// MEMX-STXRW#0,MEMX-STLXRW#0
pub const fn classify_impl_10d(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x1688,
    0x1 => 0x1689,
    _ => 0,
  };
  return idx;
}


// MEMX-STXPW#0,MEMX-STLXPW#0
pub const fn classify_impl_10e(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x168a,
    0x1 => 0x168b,
    _ => 0,
  };
  return idx;
}


// MEMX-LDXRW#0,MEMX-LDAXRW#0
pub const fn classify_impl_10f(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x168c,
    0x1 => 0x168d,
    _ => 0,
  };
  return idx;
}


// MEMX-LDXPW#0,MEMX-LDAXPW#0
pub const fn classify_impl_110(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x168e,
    0x1 => 0x168f,
    _ => 0,
  };
  return idx;
}


// MEMOR-STLLRW#0,MEMOR-STLRW#0
pub const fn classify_impl_111(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x1608,
    0x1 => 0x1609,
    _ => 0,
  };
  return idx;
}


// CAS-CAS#0,CAS-CASL#0
pub const fn classify_impl_112(inst: u32) -> u32 {
  if (inst&0x7c00) != 0x7c00 { return 0; }
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x5f88,
    0x1 => 0x5f89,
    _ => 0,
  };
  return idx;
}


// MEMOR-LDLARW#0,MEMOR-LDARW#0
pub const fn classify_impl_113(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x160a,
    0x1 => 0x160b,
    _ => 0,
  };
  return idx;
}


// CAS-CASA#0,CAS-CASAL#0
pub const fn classify_impl_114(inst: u32) -> u32 {
  if (inst&0x7c00) != 0x7c00 { return 0; }
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x5f8a,
    0x1 => 0x5f8b,
    _ => 0,
  };
  return idx;
}


// ADDSUBG-ADDG#0
pub const fn classify_impl_115(inst: u32) -> u32 {
  if (inst&0xc000) != 0x0 { return 0; }
  return 0x6300;
}


// ANDOREOR_IMM-AND_IMM#57,ANDOREOR_IMM-AND_IMM#58,ANDOREOR_IMM-AND_IMM#59,ANDOREOR_IMM-AND_IMM#60,ANDOREOR_IMM-AND_IMM#61,ANDOREOR_IMM-AND_IMM#62,ANDOREOR_IMM-AND_IMM#63,ANDOREOR_IMM-AND_IMM#64,ANDOREOR_IMM-AND_IMM#65,ANDOREOR_IMM-AND_IMM#66,ANDOREOR_IMM-AND_IMM#67,ANDOREOR_IMM-AND_IMM#68,ANDOREOR_IMM-AND_IMM#69,ANDOREOR_IMM-AND_IMM#70,ANDOREOR_IMM-AND_IMM#71,ANDOREOR_IMM-AND_IMM#72,ANDOREOR_IMM-AND_IMM#73,ANDOREOR_IMM-AND_IMM#74,ANDOREOR_IMM-AND_IMM#75,ANDOREOR_IMM-AND_IMM#76,ANDOREOR_IMM-AND_IMM#77,ANDOREOR_IMM-AND_IMM#78,ANDOREOR_IMM-AND_IMM#79,ANDOREOR_IMM-AND_IMM#80,ANDOREOR_IMM-AND_IMM#81,ANDOREOR_IMM-AND_IMM#82,ANDOREOR_IMM-AND_IMM#83,ANDOREOR_IMM-AND_IMM#84,ANDOREOR_IMM-AND_IMM#85,ANDOREOR_IMM-AND_IMM#86,ANDOREOR_IMM-AND_IMM#87,ANDOREOR_IMM-AND_IMM#88,ANDOREOR_IMM-AND_IMM#89,ANDOREOR_IMM-AND_IMM#90,ANDOREOR_IMM-AND_IMM#91,ANDOREOR_IMM-AND_IMM#92,ANDOREOR_IMM-AND_IMM#93,ANDOREOR_IMM-AND_IMM#94,ANDOREOR_IMM-AND_IMM#95,ANDOREOR_IMM-AND_IMM#96,ANDOREOR_IMM-AND_IMM#97,ANDOREOR_IMM-AND_IMM#98,ANDOREOR_IMM-AND_IMM#99,ANDOREOR_IMM-AND_IMM#100,ANDOREOR_IMM-AND_IMM#101,ANDOREOR_IMM-AND_IMM#102,ANDOREOR_IMM-AND_IMM#103,ANDOREOR_IMM-AND_IMM#104,ANDOREOR_IMM-AND_IMM#105,ANDOREOR_IMM-AND_IMM#106,ANDOREOR_IMM-AND_IMM#107,ANDOREOR_IMM-AND_IMM#108,ANDOREOR_IMM-AND_IMM#109,ANDOREOR_IMM-AND_IMM#110,ANDOREOR_IMM-AND_IMM#111,ANDOREOR_IMM-AND_IMM#112,ANDOREOR_IMM-AND_IMM#113
pub const fn classify_impl_116(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x500,
    0x1 => 0x500,
    0x2 => 0x500,
    0x3 => 0x500,
    0x4 => 0x500,
    0x5 => 0x500,
    0x6 => 0x500,
    0x7 => 0x500,
    0x8 => 0x500,
    0x9 => 0x500,
    0xa => 0x500,
    0xb => 0x500,
    0xc => 0x500,
    0xd => 0x500,
    0xe => 0x500,
    0xf => 0x500,
    0x10 => 0x500,
    0x11 => 0x500,
    0x12 => 0x500,
    0x13 => 0x500,
    0x14 => 0x500,
    0x15 => 0x500,
    0x16 => 0x500,
    0x17 => 0x500,
    0x18 => 0x500,
    0x19 => 0x500,
    0x1a => 0x500,
    0x1b => 0x500,
    0x1c => 0x500,
    0x1d => 0x500,
    0x1e => 0x500,
    0x1f => 0x0,
    0x20 => 0x500,
    0x21 => 0x500,
    0x22 => 0x500,
    0x23 => 0x500,
    0x24 => 0x500,
    0x25 => 0x500,
    0x26 => 0x500,
    0x27 => 0x500,
    0x28 => 0x500,
    0x29 => 0x500,
    0x2a => 0x500,
    0x2b => 0x500,
    0x2c => 0x500,
    0x2d => 0x500,
    0x2e => 0x500,
    0x2f => 0x0,
    0x30 => 0x500,
    0x31 => 0x500,
    0x32 => 0x500,
    0x33 => 0x500,
    0x34 => 0x500,
    0x35 => 0x500,
    0x36 => 0x500,
    0x37 => 0x0,
    0x38 => 0x500,
    0x39 => 0x500,
    0x3a => 0x500,
    0x3b => 0x0,
    0x3c => 0x500,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// ANDOREOR_IMM-AND_IMM#114,ANDOREOR_IMM-AND_IMM#115,ANDOREOR_IMM-AND_IMM#116,ANDOREOR_IMM-AND_IMM#117,ANDOREOR_IMM-AND_IMM#118,ANDOREOR_IMM-AND_IMM#119,ANDOREOR_IMM-AND_IMM#120,ANDOREOR_IMM-AND_IMM#121,ANDOREOR_IMM-AND_IMM#122,ANDOREOR_IMM-AND_IMM#123,ANDOREOR_IMM-AND_IMM#124,ANDOREOR_IMM-AND_IMM#125,ANDOREOR_IMM-AND_IMM#126,ANDOREOR_IMM-AND_IMM#127,ANDOREOR_IMM-AND_IMM#128,ANDOREOR_IMM-AND_IMM#129,ANDOREOR_IMM-AND_IMM#130,ANDOREOR_IMM-AND_IMM#131,ANDOREOR_IMM-AND_IMM#132,ANDOREOR_IMM-AND_IMM#133,ANDOREOR_IMM-AND_IMM#134,ANDOREOR_IMM-AND_IMM#135,ANDOREOR_IMM-AND_IMM#136,ANDOREOR_IMM-AND_IMM#137,ANDOREOR_IMM-AND_IMM#138,ANDOREOR_IMM-AND_IMM#139,ANDOREOR_IMM-AND_IMM#140,ANDOREOR_IMM-AND_IMM#141,ANDOREOR_IMM-AND_IMM#142,ANDOREOR_IMM-AND_IMM#143,ANDOREOR_IMM-AND_IMM#144,ANDOREOR_IMM-AND_IMM#145,ANDOREOR_IMM-AND_IMM#146,ANDOREOR_IMM-AND_IMM#147,ANDOREOR_IMM-AND_IMM#148,ANDOREOR_IMM-AND_IMM#149,ANDOREOR_IMM-AND_IMM#150,ANDOREOR_IMM-AND_IMM#151,ANDOREOR_IMM-AND_IMM#152,ANDOREOR_IMM-AND_IMM#153,ANDOREOR_IMM-AND_IMM#154,ANDOREOR_IMM-AND_IMM#155,ANDOREOR_IMM-AND_IMM#156,ANDOREOR_IMM-AND_IMM#157,ANDOREOR_IMM-AND_IMM#158,ANDOREOR_IMM-AND_IMM#159,ANDOREOR_IMM-AND_IMM#160,ANDOREOR_IMM-AND_IMM#161,ANDOREOR_IMM-AND_IMM#162,ANDOREOR_IMM-AND_IMM#163,ANDOREOR_IMM-AND_IMM#164,ANDOREOR_IMM-AND_IMM#165,ANDOREOR_IMM-AND_IMM#166,ANDOREOR_IMM-AND_IMM#167,ANDOREOR_IMM-AND_IMM#168,ANDOREOR_IMM-AND_IMM#169,ANDOREOR_IMM-AND_IMM#170,ANDOREOR_IMM-AND_IMM#171,ANDOREOR_IMM-AND_IMM#172,ANDOREOR_IMM-AND_IMM#173,ANDOREOR_IMM-AND_IMM#174,ANDOREOR_IMM-AND_IMM#175,ANDOREOR_IMM-AND_IMM#176
pub const fn classify_impl_117(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x500,
    0x1 => 0x500,
    0x2 => 0x500,
    0x3 => 0x500,
    0x4 => 0x500,
    0x5 => 0x500,
    0x6 => 0x500,
    0x7 => 0x500,
    0x8 => 0x500,
    0x9 => 0x500,
    0xa => 0x500,
    0xb => 0x500,
    0xc => 0x500,
    0xd => 0x500,
    0xe => 0x500,
    0xf => 0x500,
    0x10 => 0x500,
    0x11 => 0x500,
    0x12 => 0x500,
    0x13 => 0x500,
    0x14 => 0x500,
    0x15 => 0x500,
    0x16 => 0x500,
    0x17 => 0x500,
    0x18 => 0x500,
    0x19 => 0x500,
    0x1a => 0x500,
    0x1b => 0x500,
    0x1c => 0x500,
    0x1d => 0x500,
    0x1e => 0x500,
    0x1f => 0x500,
    0x20 => 0x500,
    0x21 => 0x500,
    0x22 => 0x500,
    0x23 => 0x500,
    0x24 => 0x500,
    0x25 => 0x500,
    0x26 => 0x500,
    0x27 => 0x500,
    0x28 => 0x500,
    0x29 => 0x500,
    0x2a => 0x500,
    0x2b => 0x500,
    0x2c => 0x500,
    0x2d => 0x500,
    0x2e => 0x500,
    0x2f => 0x500,
    0x30 => 0x500,
    0x31 => 0x500,
    0x32 => 0x500,
    0x33 => 0x500,
    0x34 => 0x500,
    0x35 => 0x500,
    0x36 => 0x500,
    0x37 => 0x500,
    0x38 => 0x500,
    0x39 => 0x500,
    0x3a => 0x500,
    0x3b => 0x500,
    0x3c => 0x500,
    0x3d => 0x500,
    0x3e => 0x500,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// RCPCU-STLURW#0
pub const fn classify_impl_118(inst: u32) -> u32 {
  if (inst&0xc00) != 0x0 { return 0; }
  return 0x6188;
}


// RCPCU-LDAPURW#0
pub const fn classify_impl_119(inst: u32) -> u32 {
  if (inst&0xc00) != 0x0 { return 0; }
  return 0x6189;
}


// RCPCU-LDAPURSW#0
pub const fn classify_impl_11a(inst: u32) -> u32 {
  if (inst&0xc00) != 0x0 { return 0; }
  return 0x618a;
}


// SHIFTV-LSLV#0,SHIFTV-LSRV#0,SHIFTV-ASRV#0,SHIFTV-RORV#0,MINMAX_REG-SMAX_GP#0,MINMAX_REG-UMAX_GP#0,MINMAX_REG-SMIN_GP#0,MINMAX_REG-UMIN_GP#0,DIV-UDIV#0,DIV-SDIV#0,PACGA-PACGA#0,CRC32-CRC32X#0,CRC32-CRC32CX#0,TAGINSERT-IRG#0,TAGINSERT-GMI#0,SUBP-SUBP#0
pub const fn classify_impl_11b(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  let idx = match (inst >> 10) & 0x1f {
    0x0 => 0x6400,
    0x1 => 0x0,
    0x2 => 0x1580,
    0x3 => 0x1581,
    0x4 => 0x6380,
    0x5 => 0x6381,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x600,
    0x9 => 0x601,
    0xa => 0x602,
    0xb => 0x603,
    0xc => 0x5f00,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x6286,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x6287,
    0x18 => 0x1180,
    0x19 => 0x1181,
    0x1a => 0x1182,
    0x1b => 0x1183,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x0,
    0x1f => 0x0,
    _ => 0,
  };
  return idx;
}


// MULL-SMADDL#0,MULL-SMSUBL#0
pub const fn classify_impl_11c(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x700,
    0x1 => 0x701,
    _ => 0,
  };
  return idx;
}


// MULH-SMULH#0
pub const fn classify_impl_11d(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x780;
}


// MULL-UMADDL#0,MULL-UMSUBL#0
pub const fn classify_impl_11e(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x702,
    0x1 => 0x703,
    _ => 0,
  };
  return idx;
}


// MULH-UMULH#0
pub const fn classify_impl_11f(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x781;
}


// FCVT_FROMFIXED-SCVTF_FIX#2,FCVT_FROMFIXED-SCVTF_FIX#3,FCVT_FROMFIXED-UCVTF_FIX#2,FCVT_FROMFIXED-UCVTF_FIX#3
pub const fn classify_impl_120(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x20000 { return 0; }
  let idx = match (inst >> 15) & 0x3 {
    0x0 => 0x2000,
    0x1 => 0x2000,
    0x2 => 0x2001,
    0x3 => 0x2001,
    _ => 0,
  };
  return idx;
}


// FCVT_TOFIXED-FCVTZS_FIX#2,FCVT_TOFIXED-FCVTZS_FIX#3,FCVT_TOFIXED-FCVTZU_FIX#2,FCVT_TOFIXED-FCVTZU_FIX#3
pub const fn classify_impl_121(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  let idx = match (inst >> 15) & 0x3 {
    0x0 => 0x1f80,
    0x1 => 0x1f80,
    0x2 => 0x1f81,
    0x3 => 0x1f81,
    _ => 0,
  };
  return idx;
}


// FCVT_TOINT-FCVTNS#0,FCVT_TOINT-FCVTNU#0,FCVT_TOINT-FCVTAS#0,FCVT_TOINT-FCVTAU#0,FCVT_TOINT-FCVTPS#0,FCVT_TOINT-FCVTPU#0,FCVT_FROMINT-SCVTF#0,FCVT_FROMINT-UCVTF#0
pub const fn classify_impl_122(inst: u32) -> u32 {
  if (inst&0xfc00) != 0x0 { return 0; }
  let idx = match (inst >> 16) & 0xf {
    0x0 => 0x2080,
    0x1 => 0x2081,
    0x2 => 0x2100,
    0x3 => 0x2101,
    0x4 => 0x2082,
    0x5 => 0x2083,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x2084,
    0x9 => 0x2085,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    _ => 0,
  };
  return idx;
}


// FCVT_TOINT-FCVTMS#0,FCVT_TOINT-FCVTMU#0
pub const fn classify_impl_123_1(inst: u32) -> u32 {
  let idx = match (inst >> 16) & 0x1 {
    0x0 => 0x2086,
    0x1 => 0x2087,
    _ => 0,
  };
  return idx;
}


// FCVT_TOINT-FCVTZS#0,FCVT_TOINT-FCVTZU#0
pub const fn classify_impl_123_2(inst: u32) -> u32 {
  let idx = match (inst >> 16) & 0x1 {
    0x0 => 0x2088,
    0x1 => 0x2089,
    _ => 0,
  };
  return idx;
}

// FCVT_TOINT-FCVTMS#0,FCVT_TOINT-FCVTMU#0,FCVT_TOINT-FCVTZS#0,FCVT_TOINT-FCVTZU#0
pub const fn classify_impl_123(inst: u32) -> u32 {
  if (inst&0x6fc00) != 0x0 { return 0; }
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_123_1(inst), // FCVT_TOINT-FCVTMS#0,FCVT_TOINT-FCVTMU#0
    0x2 => return classify_impl_123_2(inst), // FCVT_TOINT-FCVTZS#0,FCVT_TOINT-FCVTZU#0
    _ => idx
  };
  return idx;
}


// FCVT_FROMFIXED-SCVTF_FIX#4,FCVT_FROMFIXED-SCVTF_FIX#5,FCVT_FROMFIXED-UCVTF_FIX#4,FCVT_FROMFIXED-UCVTF_FIX#5
pub const fn classify_impl_124(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x20000 { return 0; }
  let idx = match (inst >> 15) & 0x3 {
    0x0 => 0x2000,
    0x1 => 0x2000,
    0x2 => 0x2001,
    0x3 => 0x2001,
    _ => 0,
  };
  return idx;
}


// FCVT_TOFIXED-FCVTZS_FIX#4,FCVT_TOFIXED-FCVTZS_FIX#5,FCVT_TOFIXED-FCVTZU_FIX#4,FCVT_TOFIXED-FCVTZU_FIX#5
pub const fn classify_impl_125(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  let idx = match (inst >> 15) & 0x3 {
    0x0 => 0x1f80,
    0x1 => 0x1f80,
    0x2 => 0x1f81,
    0x3 => 0x1f81,
    _ => 0,
  };
  return idx;
}


// FCVT_TOINT-FCVTNS#1,FCVT_TOINT-FCVTNU#1,FCVT_TOINT-FCVTAS#1,FCVT_TOINT-FCVTAU#1,FCVT_TOINT-FCVTPS#1,FCVT_TOINT-FCVTPU#1,FCVT_FROMINT-SCVTF#1,FCVT_FROMINT-UCVTF#1,FMOV_TOGP-FMOV_TOGP#1,FMOV_FROMGP-FMOV_FROM#1
pub const fn classify_impl_126(inst: u32) -> u32 {
  if (inst&0xfc00) != 0x0 { return 0; }
  let idx = match (inst >> 16) & 0xf {
    0x0 => 0x2080,
    0x1 => 0x2081,
    0x2 => 0x2100,
    0x3 => 0x2101,
    0x4 => 0x2082,
    0x5 => 0x2083,
    0x6 => 0x2180,
    0x7 => 0x2200,
    0x8 => 0x2084,
    0x9 => 0x2085,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    _ => 0,
  };
  return idx;
}


// FCVT_TOINT-FCVTMS#1,FCVT_TOINT-FCVTMU#1
pub const fn classify_impl_127_1(inst: u32) -> u32 {
  let idx = match (inst >> 16) & 0x1 {
    0x0 => 0x2086,
    0x1 => 0x2087,
    _ => 0,
  };
  return idx;
}


// FCVT_TOINT-FCVTZS#1,FCVT_TOINT-FCVTZU#1
pub const fn classify_impl_127_2(inst: u32) -> u32 {
  let idx = match (inst >> 16) & 0x1 {
    0x0 => 0x2088,
    0x1 => 0x2089,
    _ => 0,
  };
  return idx;
}

// FCVT_TOINT-FCVTMS#1,FCVT_TOINT-FCVTMU#1,FCVT_TOINT-FCVTZS#1,FCVT_TOINT-FCVTZU#1
pub const fn classify_impl_127(inst: u32) -> u32 {
  if (inst&0x6fc00) != 0x0 { return 0; }
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_127_1(inst), // FCVT_TOINT-FCVTMS#1,FCVT_TOINT-FCVTMU#1
    0x2 => return classify_impl_127_2(inst), // FCVT_TOINT-FCVTZS#1,FCVT_TOINT-FCVTZU#1
    _ => idx
  };
  return idx;
}


// FMOV_TOGP-FMOV_TOGP_HIGH#0,FMOV_FROMGP-FMOV_FROM_HIGH#0
pub const fn classify_impl_128(inst: u32) -> u32 {
  if (inst&0xefc00) != 0xe0000 { return 0; }
  let idx = match (inst >> 16) & 0x1 {
    0x0 => 0x2182,
    0x1 => 0x2202,
    _ => 0,
  };
  return idx;
}


// FCVT_FROMFIXED-SCVTF_FIX_FP16#1,FCVT_FROMFIXED-SCVTF_FIX_FP16#2,FCVT_FROMFIXED-UCVTF_FIX_FP16#1,FCVT_FROMFIXED-UCVTF_FIX_FP16#2
pub const fn classify_impl_129(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x20000 { return 0; }
  let idx = match (inst >> 15) & 0x3 {
    0x0 => 0x2002,
    0x1 => 0x2002,
    0x2 => 0x2003,
    0x3 => 0x2003,
    _ => 0,
  };
  return idx;
}


// FCVT_TOFIXED-FCVTZS_FIX_FP16#1,FCVT_TOFIXED-FCVTZS_FIX_FP16#2,FCVT_TOFIXED-FCVTZU_FIX_FP16#1,FCVT_TOFIXED-FCVTZU_FIX_FP16#2
pub const fn classify_impl_12a(inst: u32) -> u32 {
  if (inst&0xe0000) != 0x80000 { return 0; }
  let idx = match (inst >> 15) & 0x3 {
    0x0 => 0x1f82,
    0x1 => 0x1f82,
    0x2 => 0x1f83,
    0x3 => 0x1f83,
    _ => 0,
  };
  return idx;
}


// FCVT_TOINT-FCVTNS_FP16#0,FCVT_TOINT-FCVTNU_FP16#0,FCVT_TOINT-FCVTAS_FP16#0,FCVT_TOINT-FCVTAU_FP16#0,FCVT_TOINT-FCVTPS_FP16#0,FCVT_TOINT-FCVTPU_FP16#0,FCVT_FROMINT-SCVTF_FP16#0,FCVT_FROMINT-UCVTF_FP16#0,FMOV_TOGP-FMOV_TOGP_FP16#1,FMOV_FROMGP-FMOV_FROM_FP16#1
pub const fn classify_impl_12b(inst: u32) -> u32 {
  if (inst&0xfc00) != 0x0 { return 0; }
  let idx = match (inst >> 16) & 0xf {
    0x0 => 0x208a,
    0x1 => 0x208b,
    0x2 => 0x2102,
    0x3 => 0x2103,
    0x4 => 0x208c,
    0x5 => 0x208d,
    0x6 => 0x2181,
    0x7 => 0x2201,
    0x8 => 0x208e,
    0x9 => 0x208f,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    _ => 0,
  };
  return idx;
}


// FCVT_TOINT-FCVTMS_FP16#0,FCVT_TOINT-FCVTMU_FP16#0
pub const fn classify_impl_12c_1(inst: u32) -> u32 {
  let idx = match (inst >> 16) & 0x1 {
    0x0 => 0x2090,
    0x1 => 0x2091,
    _ => 0,
  };
  return idx;
}


// FCVT_TOINT-FCVTZS_FP16#0,FCVT_TOINT-FCVTZU_FP16#0
pub const fn classify_impl_12c_2(inst: u32) -> u32 {
  let idx = match (inst >> 16) & 0x1 {
    0x0 => 0x2092,
    0x1 => 0x2093,
    _ => 0,
  };
  return idx;
}

// FCVT_TOINT-FCVTMS_FP16#0,FCVT_TOINT-FCVTMU_FP16#0,FCVT_TOINT-FCVTZS_FP16#0,FCVT_TOINT-FCVTZU_FP16#0
pub const fn classify_impl_12c(inst: u32) -> u32 {
  if (inst&0x6fc00) != 0x0 { return 0; }
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_12c_1(inst), // FCVT_TOINT-FCVTMS_FP16#0,FCVT_TOINT-FCVTMU_FP16#0
    0x2 => return classify_impl_12c_2(inst), // FCVT_TOINT-FCVTZS_FP16#0,FCVT_TOINT-FCVTZU_FP16#0
    _ => idx
  };
  return idx;
}


// ANDOREOR_IMM-ORR_IMM#57,ANDOREOR_IMM-ORR_IMM#58,ANDOREOR_IMM-ORR_IMM#59,ANDOREOR_IMM-ORR_IMM#60,ANDOREOR_IMM-ORR_IMM#61,ANDOREOR_IMM-ORR_IMM#62,ANDOREOR_IMM-ORR_IMM#63,ANDOREOR_IMM-ORR_IMM#64,ANDOREOR_IMM-ORR_IMM#65,ANDOREOR_IMM-ORR_IMM#66,ANDOREOR_IMM-ORR_IMM#67,ANDOREOR_IMM-ORR_IMM#68,ANDOREOR_IMM-ORR_IMM#69,ANDOREOR_IMM-ORR_IMM#70,ANDOREOR_IMM-ORR_IMM#71,ANDOREOR_IMM-ORR_IMM#72,ANDOREOR_IMM-ORR_IMM#73,ANDOREOR_IMM-ORR_IMM#74,ANDOREOR_IMM-ORR_IMM#75,ANDOREOR_IMM-ORR_IMM#76,ANDOREOR_IMM-ORR_IMM#77,ANDOREOR_IMM-ORR_IMM#78,ANDOREOR_IMM-ORR_IMM#79,ANDOREOR_IMM-ORR_IMM#80,ANDOREOR_IMM-ORR_IMM#81,ANDOREOR_IMM-ORR_IMM#82,ANDOREOR_IMM-ORR_IMM#83,ANDOREOR_IMM-ORR_IMM#84,ANDOREOR_IMM-ORR_IMM#85,ANDOREOR_IMM-ORR_IMM#86,ANDOREOR_IMM-ORR_IMM#87,ANDOREOR_IMM-ORR_IMM#88,ANDOREOR_IMM-ORR_IMM#89,ANDOREOR_IMM-ORR_IMM#90,ANDOREOR_IMM-ORR_IMM#91,ANDOREOR_IMM-ORR_IMM#92,ANDOREOR_IMM-ORR_IMM#93,ANDOREOR_IMM-ORR_IMM#94,ANDOREOR_IMM-ORR_IMM#95,ANDOREOR_IMM-ORR_IMM#96,ANDOREOR_IMM-ORR_IMM#97,ANDOREOR_IMM-ORR_IMM#98,ANDOREOR_IMM-ORR_IMM#99,ANDOREOR_IMM-ORR_IMM#100,ANDOREOR_IMM-ORR_IMM#101,ANDOREOR_IMM-ORR_IMM#102,ANDOREOR_IMM-ORR_IMM#103,ANDOREOR_IMM-ORR_IMM#104,ANDOREOR_IMM-ORR_IMM#105,ANDOREOR_IMM-ORR_IMM#106,ANDOREOR_IMM-ORR_IMM#107,ANDOREOR_IMM-ORR_IMM#108,ANDOREOR_IMM-ORR_IMM#109,ANDOREOR_IMM-ORR_IMM#110,ANDOREOR_IMM-ORR_IMM#111,ANDOREOR_IMM-ORR_IMM#112,ANDOREOR_IMM-ORR_IMM#113
pub const fn classify_impl_12d(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x501,
    0x1 => 0x501,
    0x2 => 0x501,
    0x3 => 0x501,
    0x4 => 0x501,
    0x5 => 0x501,
    0x6 => 0x501,
    0x7 => 0x501,
    0x8 => 0x501,
    0x9 => 0x501,
    0xa => 0x501,
    0xb => 0x501,
    0xc => 0x501,
    0xd => 0x501,
    0xe => 0x501,
    0xf => 0x501,
    0x10 => 0x501,
    0x11 => 0x501,
    0x12 => 0x501,
    0x13 => 0x501,
    0x14 => 0x501,
    0x15 => 0x501,
    0x16 => 0x501,
    0x17 => 0x501,
    0x18 => 0x501,
    0x19 => 0x501,
    0x1a => 0x501,
    0x1b => 0x501,
    0x1c => 0x501,
    0x1d => 0x501,
    0x1e => 0x501,
    0x1f => 0x0,
    0x20 => 0x501,
    0x21 => 0x501,
    0x22 => 0x501,
    0x23 => 0x501,
    0x24 => 0x501,
    0x25 => 0x501,
    0x26 => 0x501,
    0x27 => 0x501,
    0x28 => 0x501,
    0x29 => 0x501,
    0x2a => 0x501,
    0x2b => 0x501,
    0x2c => 0x501,
    0x2d => 0x501,
    0x2e => 0x501,
    0x2f => 0x0,
    0x30 => 0x501,
    0x31 => 0x501,
    0x32 => 0x501,
    0x33 => 0x501,
    0x34 => 0x501,
    0x35 => 0x501,
    0x36 => 0x501,
    0x37 => 0x0,
    0x38 => 0x501,
    0x39 => 0x501,
    0x3a => 0x501,
    0x3b => 0x0,
    0x3c => 0x501,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// ANDOREOR_IMM-ORR_IMM#114,ANDOREOR_IMM-ORR_IMM#115,ANDOREOR_IMM-ORR_IMM#116,ANDOREOR_IMM-ORR_IMM#117,ANDOREOR_IMM-ORR_IMM#118,ANDOREOR_IMM-ORR_IMM#119,ANDOREOR_IMM-ORR_IMM#120,ANDOREOR_IMM-ORR_IMM#121,ANDOREOR_IMM-ORR_IMM#122,ANDOREOR_IMM-ORR_IMM#123,ANDOREOR_IMM-ORR_IMM#124,ANDOREOR_IMM-ORR_IMM#125,ANDOREOR_IMM-ORR_IMM#126,ANDOREOR_IMM-ORR_IMM#127,ANDOREOR_IMM-ORR_IMM#128,ANDOREOR_IMM-ORR_IMM#129,ANDOREOR_IMM-ORR_IMM#130,ANDOREOR_IMM-ORR_IMM#131,ANDOREOR_IMM-ORR_IMM#132,ANDOREOR_IMM-ORR_IMM#133,ANDOREOR_IMM-ORR_IMM#134,ANDOREOR_IMM-ORR_IMM#135,ANDOREOR_IMM-ORR_IMM#136,ANDOREOR_IMM-ORR_IMM#137,ANDOREOR_IMM-ORR_IMM#138,ANDOREOR_IMM-ORR_IMM#139,ANDOREOR_IMM-ORR_IMM#140,ANDOREOR_IMM-ORR_IMM#141,ANDOREOR_IMM-ORR_IMM#142,ANDOREOR_IMM-ORR_IMM#143,ANDOREOR_IMM-ORR_IMM#144,ANDOREOR_IMM-ORR_IMM#145,ANDOREOR_IMM-ORR_IMM#146,ANDOREOR_IMM-ORR_IMM#147,ANDOREOR_IMM-ORR_IMM#148,ANDOREOR_IMM-ORR_IMM#149,ANDOREOR_IMM-ORR_IMM#150,ANDOREOR_IMM-ORR_IMM#151,ANDOREOR_IMM-ORR_IMM#152,ANDOREOR_IMM-ORR_IMM#153,ANDOREOR_IMM-ORR_IMM#154,ANDOREOR_IMM-ORR_IMM#155,ANDOREOR_IMM-ORR_IMM#156,ANDOREOR_IMM-ORR_IMM#157,ANDOREOR_IMM-ORR_IMM#158,ANDOREOR_IMM-ORR_IMM#159,ANDOREOR_IMM-ORR_IMM#160,ANDOREOR_IMM-ORR_IMM#161,ANDOREOR_IMM-ORR_IMM#162,ANDOREOR_IMM-ORR_IMM#163,ANDOREOR_IMM-ORR_IMM#164,ANDOREOR_IMM-ORR_IMM#165,ANDOREOR_IMM-ORR_IMM#166,ANDOREOR_IMM-ORR_IMM#167,ANDOREOR_IMM-ORR_IMM#168,ANDOREOR_IMM-ORR_IMM#169,ANDOREOR_IMM-ORR_IMM#170,ANDOREOR_IMM-ORR_IMM#171,ANDOREOR_IMM-ORR_IMM#172,ANDOREOR_IMM-ORR_IMM#173,ANDOREOR_IMM-ORR_IMM#174,ANDOREOR_IMM-ORR_IMM#175,ANDOREOR_IMM-ORR_IMM#176
pub const fn classify_impl_12e(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x501,
    0x1 => 0x501,
    0x2 => 0x501,
    0x3 => 0x501,
    0x4 => 0x501,
    0x5 => 0x501,
    0x6 => 0x501,
    0x7 => 0x501,
    0x8 => 0x501,
    0x9 => 0x501,
    0xa => 0x501,
    0xb => 0x501,
    0xc => 0x501,
    0xd => 0x501,
    0xe => 0x501,
    0xf => 0x501,
    0x10 => 0x501,
    0x11 => 0x501,
    0x12 => 0x501,
    0x13 => 0x501,
    0x14 => 0x501,
    0x15 => 0x501,
    0x16 => 0x501,
    0x17 => 0x501,
    0x18 => 0x501,
    0x19 => 0x501,
    0x1a => 0x501,
    0x1b => 0x501,
    0x1c => 0x501,
    0x1d => 0x501,
    0x1e => 0x501,
    0x1f => 0x501,
    0x20 => 0x501,
    0x21 => 0x501,
    0x22 => 0x501,
    0x23 => 0x501,
    0x24 => 0x501,
    0x25 => 0x501,
    0x26 => 0x501,
    0x27 => 0x501,
    0x28 => 0x501,
    0x29 => 0x501,
    0x2a => 0x501,
    0x2b => 0x501,
    0x2c => 0x501,
    0x2d => 0x501,
    0x2e => 0x501,
    0x2f => 0x501,
    0x30 => 0x501,
    0x31 => 0x501,
    0x32 => 0x501,
    0x33 => 0x501,
    0x34 => 0x501,
    0x35 => 0x501,
    0x36 => 0x501,
    0x37 => 0x501,
    0x38 => 0x501,
    0x39 => 0x501,
    0x3a => 0x501,
    0x3b => 0x501,
    0x3c => 0x501,
    0x3d => 0x501,
    0x3e => 0x501,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// MEMU-STURW#0,MEMU-STRW_POST#0,MEMU-STTRW#0,MEMU-STRW_PRE#0
pub const fn classify_impl_12f(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x1820,
    0x1 => 0x1821,
    0x2 => 0x1822,
    0x3 => 0x1823,
    _ => 0,
  };
  return idx;
}


// MEM_REG-STRW_REG#0,SWP-SWP#0,LDATOMIC-LDADDW#0,LDATOMIC-LDCLRW#0,LDATOMIC-LDEORW#0,LDATOMIC-LDSETW#0,LDATOMIC-LDSMAXW#0,LDATOMIC-LDSMINW#0,LDATOMIC-LDUMAXW#0,LDATOMIC-LDUMINW#0
pub const fn classify_impl_130(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 11) & 0x1f {
    0x0 => 0x6140,
    0x1 => 0x0,
    0x2 => 0x6141,
    0x3 => 0x0,
    0x4 => 0x6142,
    0x5 => 0x0,
    0x6 => 0x6143,
    0x7 => 0x0,
    0x8 => 0x6144,
    0x9 => 0x1908,
    0xa => 0x6145,
    0xb => 0x1908,
    0xc => 0x6146,
    0xd => 0x1908,
    0xe => 0x6147,
    0xf => 0x1908,
    0x10 => 0x6088,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x1908,
    0x1a => 0x0,
    0x1b => 0x1908,
    0x1c => 0x0,
    0x1d => 0x1908,
    0x1e => 0x0,
    0x1f => 0x1908,
    _ => 0,
  };
  return idx;
}


// MEMU-LDURW#0,MEMU-LDRW_POST#0,MEMU-LDTRW#0,MEMU-LDRW_PRE#0
pub const fn classify_impl_131(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x1824,
    0x1 => 0x1825,
    0x2 => 0x1826,
    0x3 => 0x1827,
    _ => 0,
  };
  return idx;
}


// MEM_REG-LDRW_REG#0,SWP-SWPL#0,LDATOMIC-LDADDLW#0,LDATOMIC-LDCLRLW#0,LDATOMIC-LDEORLW#0,LDATOMIC-LDSETLW#0,LDATOMIC-LDSMAXLW#0,LDATOMIC-LDSMINLW#0,LDATOMIC-LDUMAXLW#0,LDATOMIC-LDUMINLW#0
pub const fn classify_impl_132(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 11) & 0x1f {
    0x0 => 0x6148,
    0x1 => 0x0,
    0x2 => 0x6149,
    0x3 => 0x0,
    0x4 => 0x614a,
    0x5 => 0x0,
    0x6 => 0x614b,
    0x7 => 0x0,
    0x8 => 0x614c,
    0x9 => 0x1909,
    0xa => 0x614d,
    0xb => 0x1909,
    0xc => 0x614e,
    0xd => 0x1909,
    0xe => 0x614f,
    0xf => 0x1909,
    0x10 => 0x6089,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x1909,
    0x1a => 0x0,
    0x1b => 0x1909,
    0x1c => 0x0,
    0x1d => 0x1909,
    0x1e => 0x0,
    0x1f => 0x1909,
    _ => 0,
  };
  return idx;
}


// MEMU-LDURSW#0,MEMU-LDRSW_POST#0,MEMU-LDTRSW#0,MEMU-LDRSW_PRE#0
pub const fn classify_impl_133(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x1828,
    0x1 => 0x1829,
    0x2 => 0x182a,
    0x3 => 0x182b,
    _ => 0,
  };
  return idx;
}


// MEM_REG-LDRSW_REG#0,SWP-SWPA#0,LDATOMIC-LDADDAW#0,LDATOMIC-LDCLRAW#0,LDATOMIC-LDEORAW#0,LDATOMIC-LDSETAW#0,LDATOMIC-LDSMAXAW#0,LDATOMIC-LDSMINAW#0,LDATOMIC-LDUMAXAW#0,LDATOMIC-LDUMINAW#0
pub const fn classify_impl_134(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 11) & 0x1f {
    0x0 => 0x6150,
    0x1 => 0x0,
    0x2 => 0x6151,
    0x3 => 0x0,
    0x4 => 0x6152,
    0x5 => 0x0,
    0x6 => 0x6153,
    0x7 => 0x0,
    0x8 => 0x6154,
    0x9 => 0x190a,
    0xa => 0x6155,
    0xb => 0x190a,
    0xc => 0x6156,
    0xd => 0x190a,
    0xe => 0x6157,
    0xf => 0x190a,
    0x10 => 0x608a,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x190a,
    0x1a => 0x0,
    0x1b => 0x190a,
    0x1c => 0x0,
    0x1d => 0x190a,
    0x1e => 0x0,
    0x1f => 0x190a,
    _ => 0,
  };
  return idx;
}


// RCPC-LDAPRW#0
pub const fn classify_impl_135_1(inst: u32) -> u32 {
  if (inst&0xf0000) != 0xf0000 { return 0; }
  return 0x6202;
}

// MEM_REG-LDRSW_REG#0,SWP-SWPA#0,LDATOMIC-LDADDAW#0,LDATOMIC-LDCLRAW#0,LDATOMIC-LDEORAW#0,LDATOMIC-LDSETAW#0,LDATOMIC-LDSMAXAW#0,LDATOMIC-LDSMINAW#0,LDATOMIC-LDUMAXAW#0,LDATOMIC-LDUMINAW#0,RCPC-LDAPRW#0
pub const fn classify_impl_135(inst: u32) -> u32 {
  if (inst&0x400) != 0x0 { return 0; }
  let idx = match (inst >> 11) & 0x1f {
    0x0 => 0x6150,
    0x1 => 0x0,
    0x2 => 0x6151,
    0x3 => 0x0,
    0x4 => 0x6152,
    0x5 => 0x0,
    0x6 => 0x6153,
    0x7 => 0x0,
    0x8 => 0x6154,
    0x9 => 0x190a,
    0xa => 0x6155,
    0xb => 0x190a,
    0xc => 0x6156,
    0xd => 0x190a,
    0xe => 0x6157,
    0xf => 0x190a,
    0x10 => 0x608a,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x1,
    0x19 => 0x190a,
    0x1a => 0x0,
    0x1b => 0x190a,
    0x1c => 0x0,
    0x1d => 0x190a,
    0x1e => 0x0,
    0x1f => 0x190a,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_135_1(inst), // RCPC-LDAPRW#0
    _ => idx
  };
  return idx;
}


// SWP-SWPAL#0,LDATOMIC-LDADDALW#0,LDATOMIC-LDCLRALW#0,LDATOMIC-LDEORALW#0,LDATOMIC-LDSETALW#0,LDATOMIC-LDSMAXALW#0,LDATOMIC-LDSMINALW#0,LDATOMIC-LDUMAXALW#0,LDATOMIC-LDUMINALW#0
pub const fn classify_impl_136(inst: u32) -> u32 {
  if (inst&0xc00) != 0x0 { return 0; }
  let idx = match (inst >> 12) & 0xf {
    0x0 => 0x6158,
    0x1 => 0x6159,
    0x2 => 0x615a,
    0x3 => 0x615b,
    0x4 => 0x615c,
    0x5 => 0x615d,
    0x6 => 0x615e,
    0x7 => 0x615f,
    0x8 => 0x608b,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    _ => 0,
  };
  return idx;
}


// ADCSBC-ADCS#0
pub const fn classify_impl_137_1(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x281;
}


// RMIF-RMIF#0
pub const fn classify_impl_137_2(inst: u32) -> u32 {
  if (inst&0x10) != 0x0 { return 0; }
  return 0x6680;
}

// ADCSBC-ADCS#0,RMIF-RMIF#0
pub const fn classify_impl_137(inst: u32) -> u32 {
  if (inst&0x7800) != 0x0 { return 0; }
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_137_1(inst), // ADCSBC-ADCS#0
    0x2 => return classify_impl_137_2(inst), // RMIF-RMIF#0
    _ => idx
  };
  return idx;
}


// SUBP-SUBPS#0
pub const fn classify_impl_138(inst: u32) -> u32 {
  if (inst&0xfc00) != 0x0 { return 0; }
  return 0x6401;
}


// MEMU_FP-STUR_FP#3,MEMU_FP-STR_FP_POST#3,MEMU_FP-STR_FP_PRE#3
pub const fn classify_impl_139(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x1a80,
    0x1 => 0x1a81,
    0x2 => 0x0,
    0x3 => 0x1a82,
    _ => 0,
  };
  return idx;
}


// MEM_REG_FP-STR_REG_FP#3
pub const fn classify_impl_13a(inst: u32) -> u32 {
  if (inst&0x4c00) != 0x4800 { return 0; }
  return 0x1b80;
}


// MEMU_FP-LDUR_FP#3,MEMU_FP-LDR_FP_POST#3,MEMU_FP-LDR_FP_PRE#3
pub const fn classify_impl_13b(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x1a83,
    0x1 => 0x1a84,
    0x2 => 0x0,
    0x3 => 0x1a85,
    _ => 0,
  };
  return idx;
}


// MEM_REG_FP-LDR_REG_FP#3
pub const fn classify_impl_13c(inst: u32) -> u32 {
  if (inst&0x4c00) != 0x4800 { return 0; }
  return 0x1b81;
}


// MEMX-STXRX#0,MEMX-STLXRX#0
pub const fn classify_impl_13d(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x1690,
    0x1 => 0x1691,
    _ => 0,
  };
  return idx;
}


// MEMX-STXPX#0,MEMX-STLXPX#0
pub const fn classify_impl_13e(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x1692,
    0x1 => 0x1693,
    _ => 0,
  };
  return idx;
}


// MEMX-LDXRX#0,MEMX-LDAXRX#0
pub const fn classify_impl_13f(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x1694,
    0x1 => 0x1695,
    _ => 0,
  };
  return idx;
}


// MEMX-LDXPX#0,MEMX-LDAXPX#0
pub const fn classify_impl_140(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x1696,
    0x1 => 0x1697,
    _ => 0,
  };
  return idx;
}


// MEMOR-STLLR#0,MEMOR-STLR#0
pub const fn classify_impl_141(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x160c,
    0x1 => 0x160d,
    _ => 0,
  };
  return idx;
}


// CAS-CAS#1,CAS-CASL#1
pub const fn classify_impl_142(inst: u32) -> u32 {
  if (inst&0x7c00) != 0x7c00 { return 0; }
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x5f88,
    0x1 => 0x5f89,
    _ => 0,
  };
  return idx;
}


// MEMOR-LDLAR#0,MEMOR-LDAR#0
pub const fn classify_impl_143(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x160e,
    0x1 => 0x160f,
    _ => 0,
  };
  return idx;
}


// CAS-CASA#1,CAS-CASAL#1
pub const fn classify_impl_144(inst: u32) -> u32 {
  if (inst&0x7c00) != 0x7c00 { return 0; }
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x5f8a,
    0x1 => 0x5f8b,
    _ => 0,
  };
  return idx;
}


// SHA3_4REG-EOR3#0
pub const fn classify_impl_145(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x6e80;
}


// SHA3_4REG-BCAX#0
pub const fn classify_impl_146(inst: u32) -> u32 {
  if (inst&0x8000) != 0x0 { return 0; }
  return 0x6e81;
}


// SM3TT-SM3TT1A#0,SM3TT-SM3TT1B#0,SM3TT-SM3TT2A#0,SM3TT-SM3TT2B#0
pub const fn classify_impl_147_1(inst: u32) -> u32 {
  if (inst&0x4000) != 0x0 { return 0; }
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x6e00,
    0x1 => 0x6e01,
    0x2 => 0x6e02,
    0x3 => 0x6e03,
    _ => 0,
  };
  return idx;
}

// SM3TT-SM3TT1A#0,SM3TT-SM3TT1B#0,SM3TT-SM3TT2A#0,SM3TT-SM3TT2B#0,SHA3_4REG-SM3SS1#0
pub const fn classify_impl_147(inst: u32) -> u32 {
  let idx = match (inst >> 15) & 0x1 {
    0x0 => 0x6e82,
    0x1 => 0x1,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_147_1(inst), // SM3TT-SM3TT1A#0,SM3TT-SM3TT1B#0,SM3TT-SM3TT2A#0,SM3TT-SM3TT2B#0
    _ => idx
  };
  return idx;
}


// SHA512_3REG-SHA512H#0,SHA512_3REG-SHA512H2#0,SHA512_3REG-SHA512SU1#0,SHA512_3REG-RAX1#0
pub const fn classify_impl_148_1(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x6f80,
    0x1 => 0x6f81,
    0x2 => 0x6f82,
    0x3 => 0x6f83,
    _ => 0,
  };
  return idx;
}


// SM3_3REG-SM3PARTW1#0,SM3_3REG-SM3PARTW2#0,SM3_3REG-SM4EKEY#0
pub const fn classify_impl_148_2(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x7000,
    0x1 => 0x7001,
    0x2 => 0x7002,
    0x3 => 0x0,
    _ => 0,
  };
  return idx;
}

// SHA512_3REG-SHA512H#0,SHA512_3REG-SHA512H2#0,SHA512_3REG-SHA512SU1#0,SHA512_3REG-RAX1#0,SM3_3REG-SM3PARTW1#0,SM3_3REG-SM3PARTW2#0,SM3_3REG-SM4EKEY#0
pub const fn classify_impl_148(inst: u32) -> u32 {
  if (inst&0xb000) != 0x8000 { return 0; }
  let idx = match (inst >> 14) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_148_1(inst), // SHA512_3REG-SHA512H#0,SHA512_3REG-SHA512H2#0,SHA512_3REG-SHA512SU1#0,SHA512_3REG-RAX1#0
    0x2 => return classify_impl_148_2(inst), // SM3_3REG-SM3PARTW1#0,SM3_3REG-SM3PARTW2#0,SM3_3REG-SM4EKEY#0
    _ => idx
  };
  return idx;
}


// SHA512_2REG-SHA512SU0#0,SHA512_2REG-SM4E#0
pub const fn classify_impl_149(inst: u32) -> u32 {
  if (inst&0xff800) != 0x8000 { return 0; }
  let idx = match (inst >> 10) & 0x1 {
    0x0 => 0x6f00,
    0x1 => 0x6f01,
    _ => 0,
  };
  return idx;
}


// ADDSUBG-SUBG#0
pub const fn classify_impl_14a(inst: u32) -> u32 {
  if (inst&0xc000) != 0x0 { return 0; }
  return 0x6301;
}


// ANDOREOR_IMM-EOR_IMM#57,ANDOREOR_IMM-EOR_IMM#58,ANDOREOR_IMM-EOR_IMM#59,ANDOREOR_IMM-EOR_IMM#60,ANDOREOR_IMM-EOR_IMM#61,ANDOREOR_IMM-EOR_IMM#62,ANDOREOR_IMM-EOR_IMM#63,ANDOREOR_IMM-EOR_IMM#64,ANDOREOR_IMM-EOR_IMM#65,ANDOREOR_IMM-EOR_IMM#66,ANDOREOR_IMM-EOR_IMM#67,ANDOREOR_IMM-EOR_IMM#68,ANDOREOR_IMM-EOR_IMM#69,ANDOREOR_IMM-EOR_IMM#70,ANDOREOR_IMM-EOR_IMM#71,ANDOREOR_IMM-EOR_IMM#72,ANDOREOR_IMM-EOR_IMM#73,ANDOREOR_IMM-EOR_IMM#74,ANDOREOR_IMM-EOR_IMM#75,ANDOREOR_IMM-EOR_IMM#76,ANDOREOR_IMM-EOR_IMM#77,ANDOREOR_IMM-EOR_IMM#78,ANDOREOR_IMM-EOR_IMM#79,ANDOREOR_IMM-EOR_IMM#80,ANDOREOR_IMM-EOR_IMM#81,ANDOREOR_IMM-EOR_IMM#82,ANDOREOR_IMM-EOR_IMM#83,ANDOREOR_IMM-EOR_IMM#84,ANDOREOR_IMM-EOR_IMM#85,ANDOREOR_IMM-EOR_IMM#86,ANDOREOR_IMM-EOR_IMM#87,ANDOREOR_IMM-EOR_IMM#88,ANDOREOR_IMM-EOR_IMM#89,ANDOREOR_IMM-EOR_IMM#90,ANDOREOR_IMM-EOR_IMM#91,ANDOREOR_IMM-EOR_IMM#92,ANDOREOR_IMM-EOR_IMM#93,ANDOREOR_IMM-EOR_IMM#94,ANDOREOR_IMM-EOR_IMM#95,ANDOREOR_IMM-EOR_IMM#96,ANDOREOR_IMM-EOR_IMM#97,ANDOREOR_IMM-EOR_IMM#98,ANDOREOR_IMM-EOR_IMM#99,ANDOREOR_IMM-EOR_IMM#100,ANDOREOR_IMM-EOR_IMM#101,ANDOREOR_IMM-EOR_IMM#102,ANDOREOR_IMM-EOR_IMM#103,ANDOREOR_IMM-EOR_IMM#104,ANDOREOR_IMM-EOR_IMM#105,ANDOREOR_IMM-EOR_IMM#106,ANDOREOR_IMM-EOR_IMM#107,ANDOREOR_IMM-EOR_IMM#108,ANDOREOR_IMM-EOR_IMM#109,ANDOREOR_IMM-EOR_IMM#110,ANDOREOR_IMM-EOR_IMM#111,ANDOREOR_IMM-EOR_IMM#112,ANDOREOR_IMM-EOR_IMM#113
pub const fn classify_impl_14b(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x502,
    0x1 => 0x502,
    0x2 => 0x502,
    0x3 => 0x502,
    0x4 => 0x502,
    0x5 => 0x502,
    0x6 => 0x502,
    0x7 => 0x502,
    0x8 => 0x502,
    0x9 => 0x502,
    0xa => 0x502,
    0xb => 0x502,
    0xc => 0x502,
    0xd => 0x502,
    0xe => 0x502,
    0xf => 0x502,
    0x10 => 0x502,
    0x11 => 0x502,
    0x12 => 0x502,
    0x13 => 0x502,
    0x14 => 0x502,
    0x15 => 0x502,
    0x16 => 0x502,
    0x17 => 0x502,
    0x18 => 0x502,
    0x19 => 0x502,
    0x1a => 0x502,
    0x1b => 0x502,
    0x1c => 0x502,
    0x1d => 0x502,
    0x1e => 0x502,
    0x1f => 0x0,
    0x20 => 0x502,
    0x21 => 0x502,
    0x22 => 0x502,
    0x23 => 0x502,
    0x24 => 0x502,
    0x25 => 0x502,
    0x26 => 0x502,
    0x27 => 0x502,
    0x28 => 0x502,
    0x29 => 0x502,
    0x2a => 0x502,
    0x2b => 0x502,
    0x2c => 0x502,
    0x2d => 0x502,
    0x2e => 0x502,
    0x2f => 0x0,
    0x30 => 0x502,
    0x31 => 0x502,
    0x32 => 0x502,
    0x33 => 0x502,
    0x34 => 0x502,
    0x35 => 0x502,
    0x36 => 0x502,
    0x37 => 0x0,
    0x38 => 0x502,
    0x39 => 0x502,
    0x3a => 0x502,
    0x3b => 0x0,
    0x3c => 0x502,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// ANDOREOR_IMM-EOR_IMM#114,ANDOREOR_IMM-EOR_IMM#115,ANDOREOR_IMM-EOR_IMM#116,ANDOREOR_IMM-EOR_IMM#117,ANDOREOR_IMM-EOR_IMM#118,ANDOREOR_IMM-EOR_IMM#119,ANDOREOR_IMM-EOR_IMM#120,ANDOREOR_IMM-EOR_IMM#121,ANDOREOR_IMM-EOR_IMM#122,ANDOREOR_IMM-EOR_IMM#123,ANDOREOR_IMM-EOR_IMM#124,ANDOREOR_IMM-EOR_IMM#125,ANDOREOR_IMM-EOR_IMM#126,ANDOREOR_IMM-EOR_IMM#127,ANDOREOR_IMM-EOR_IMM#128,ANDOREOR_IMM-EOR_IMM#129,ANDOREOR_IMM-EOR_IMM#130,ANDOREOR_IMM-EOR_IMM#131,ANDOREOR_IMM-EOR_IMM#132,ANDOREOR_IMM-EOR_IMM#133,ANDOREOR_IMM-EOR_IMM#134,ANDOREOR_IMM-EOR_IMM#135,ANDOREOR_IMM-EOR_IMM#136,ANDOREOR_IMM-EOR_IMM#137,ANDOREOR_IMM-EOR_IMM#138,ANDOREOR_IMM-EOR_IMM#139,ANDOREOR_IMM-EOR_IMM#140,ANDOREOR_IMM-EOR_IMM#141,ANDOREOR_IMM-EOR_IMM#142,ANDOREOR_IMM-EOR_IMM#143,ANDOREOR_IMM-EOR_IMM#144,ANDOREOR_IMM-EOR_IMM#145,ANDOREOR_IMM-EOR_IMM#146,ANDOREOR_IMM-EOR_IMM#147,ANDOREOR_IMM-EOR_IMM#148,ANDOREOR_IMM-EOR_IMM#149,ANDOREOR_IMM-EOR_IMM#150,ANDOREOR_IMM-EOR_IMM#151,ANDOREOR_IMM-EOR_IMM#152,ANDOREOR_IMM-EOR_IMM#153,ANDOREOR_IMM-EOR_IMM#154,ANDOREOR_IMM-EOR_IMM#155,ANDOREOR_IMM-EOR_IMM#156,ANDOREOR_IMM-EOR_IMM#157,ANDOREOR_IMM-EOR_IMM#158,ANDOREOR_IMM-EOR_IMM#159,ANDOREOR_IMM-EOR_IMM#160,ANDOREOR_IMM-EOR_IMM#161,ANDOREOR_IMM-EOR_IMM#162,ANDOREOR_IMM-EOR_IMM#163,ANDOREOR_IMM-EOR_IMM#164,ANDOREOR_IMM-EOR_IMM#165,ANDOREOR_IMM-EOR_IMM#166,ANDOREOR_IMM-EOR_IMM#167,ANDOREOR_IMM-EOR_IMM#168,ANDOREOR_IMM-EOR_IMM#169,ANDOREOR_IMM-EOR_IMM#170,ANDOREOR_IMM-EOR_IMM#171,ANDOREOR_IMM-EOR_IMM#172,ANDOREOR_IMM-EOR_IMM#173,ANDOREOR_IMM-EOR_IMM#174,ANDOREOR_IMM-EOR_IMM#175,ANDOREOR_IMM-EOR_IMM#176
pub const fn classify_impl_14c(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x502,
    0x1 => 0x502,
    0x2 => 0x502,
    0x3 => 0x502,
    0x4 => 0x502,
    0x5 => 0x502,
    0x6 => 0x502,
    0x7 => 0x502,
    0x8 => 0x502,
    0x9 => 0x502,
    0xa => 0x502,
    0xb => 0x502,
    0xc => 0x502,
    0xd => 0x502,
    0xe => 0x502,
    0xf => 0x502,
    0x10 => 0x502,
    0x11 => 0x502,
    0x12 => 0x502,
    0x13 => 0x502,
    0x14 => 0x502,
    0x15 => 0x502,
    0x16 => 0x502,
    0x17 => 0x502,
    0x18 => 0x502,
    0x19 => 0x502,
    0x1a => 0x502,
    0x1b => 0x502,
    0x1c => 0x502,
    0x1d => 0x502,
    0x1e => 0x502,
    0x1f => 0x502,
    0x20 => 0x502,
    0x21 => 0x502,
    0x22 => 0x502,
    0x23 => 0x502,
    0x24 => 0x502,
    0x25 => 0x502,
    0x26 => 0x502,
    0x27 => 0x502,
    0x28 => 0x502,
    0x29 => 0x502,
    0x2a => 0x502,
    0x2b => 0x502,
    0x2c => 0x502,
    0x2d => 0x502,
    0x2e => 0x502,
    0x2f => 0x502,
    0x30 => 0x502,
    0x31 => 0x502,
    0x32 => 0x502,
    0x33 => 0x502,
    0x34 => 0x502,
    0x35 => 0x502,
    0x36 => 0x502,
    0x37 => 0x502,
    0x38 => 0x502,
    0x39 => 0x502,
    0x3a => 0x502,
    0x3b => 0x502,
    0x3c => 0x502,
    0x3d => 0x502,
    0x3e => 0x502,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// SVC-SVC#0,SVC-HVC#0,SVC-SMC#0
pub const fn classify_impl_14d(inst: u32) -> u32 {
  if (inst&0x1c) != 0x0 { return 0; }
  let idx = match (inst >> 0) & 0x3 {
    0x0 => 0x0,
    0x1 => 0xe80,
    0x2 => 0xe81,
    0x3 => 0xe82,
    _ => 0,
  };
  return idx;
}


// BRK-BRK#0
pub const fn classify_impl_14e(inst: u32) -> u32 {
  if (inst&0x1f) != 0x0 { return 0; }
  return 0xa00;
}


// HLT-HLT#0
pub const fn classify_impl_14f(inst: u32) -> u32 {
  if (inst&0x1f) != 0x0 { return 0; }
  return 0xe00;
}


// TCANCEL-TCANCEL#0
pub const fn classify_impl_150(inst: u32) -> u32 {
  if (inst&0x1f) != 0x0 { return 0; }
  return 0x6800;
}


// DCPS-DCPS1#0,DCPS-DCPS2#0,DCPS-DCPS3#0
pub const fn classify_impl_151(inst: u32) -> u32 {
  if (inst&0x1c) != 0x0 { return 0; }
  let idx = match (inst >> 0) & 0x3 {
    0x0 => 0x0,
    0x1 => 0xf00,
    0x2 => 0xf01,
    0x3 => 0xf02,
    _ => 0,
  };
  return idx;
}


// MSR_IMM-MSR_UAO#0,MSR_IMM-MSR_PAN#0,MSR_IMM-MSR_SPSel#0,MSR_FLAGM-CFINV#0,MSR_FLAGM-XAFLAG#0,MSR_FLAGM-AXFLAG#0
pub const fn classify_impl_152_1_1_1(inst: u32) -> u32 {
  let idx = match (inst >> 5) & 0x7 {
    0x0 => 0x6600,
    0x1 => 0x6601,
    0x2 => 0x6602,
    0x3 => 0x1480,
    0x4 => 0x1481,
    0x5 => 0x1482,
    0x6 => 0x0,
    0x7 => 0x0,
    _ => 0,
  };
  return idx;
}


// MSR_IMM-MSR_UAO#1,MSR_IMM-MSR_PAN#1,MSR_IMM-MSR_SPSel#1,MSR_FLAGM-CFINV#0,MSR_FLAGM-XAFLAG#0,MSR_FLAGM-AXFLAG#0
pub const fn classify_impl_152_1_1_2(inst: u32) -> u32 {
  let idx = match (inst >> 5) & 0x7 {
    0x0 => 0x6600,
    0x1 => 0x6601,
    0x2 => 0x6602,
    0x3 => 0x1480,
    0x4 => 0x1481,
    0x5 => 0x1482,
    0x6 => 0x0,
    0x7 => 0x0,
    _ => 0,
  };
  return idx;
}


// MSR_IMM-MSR_UAO#2,MSR_IMM-MSR_PAN#2,MSR_IMM-MSR_SPSel#2,MSR_FLAGM-CFINV#0,MSR_FLAGM-XAFLAG#0,MSR_FLAGM-AXFLAG#0
pub const fn classify_impl_152_1_1_3(inst: u32) -> u32 {
  let idx = match (inst >> 5) & 0x7 {
    0x0 => 0x6600,
    0x1 => 0x6601,
    0x2 => 0x6602,
    0x3 => 0x1480,
    0x4 => 0x1481,
    0x5 => 0x1482,
    0x6 => 0x0,
    0x7 => 0x0,
    _ => 0,
  };
  return idx;
}


// MSR_IMM-MSR_UAO#3,MSR_IMM-MSR_PAN#3,MSR_IMM-MSR_SPSel#3,MSR_FLAGM-CFINV#0,MSR_FLAGM-XAFLAG#0,MSR_FLAGM-AXFLAG#0
pub const fn classify_impl_152_1_1_4(inst: u32) -> u32 {
  let idx = match (inst >> 5) & 0x7 {
    0x0 => 0x6600,
    0x1 => 0x6601,
    0x2 => 0x6602,
    0x3 => 0x1480,
    0x4 => 0x1481,
    0x5 => 0x1482,
    0x6 => 0x0,
    0x7 => 0x0,
    _ => 0,
  };
  return idx;
}


// MSR_IMM-MSR_UAO#4,MSR_IMM-MSR_PAN#4,MSR_IMM-MSR_SPSel#4,MSR_FLAGM-CFINV#0,MSR_FLAGM-XAFLAG#0,MSR_FLAGM-AXFLAG#0
pub const fn classify_impl_152_1_1_5(inst: u32) -> u32 {
  let idx = match (inst >> 5) & 0x7 {
    0x0 => 0x6600,
    0x1 => 0x6601,
    0x2 => 0x6602,
    0x3 => 0x1480,
    0x4 => 0x1481,
    0x5 => 0x1482,
    0x6 => 0x0,
    0x7 => 0x0,
    _ => 0,
  };
  return idx;
}


// MSR_IMM-MSR_UAO#5,MSR_IMM-MSR_PAN#5,MSR_IMM-MSR_SPSel#5,MSR_FLAGM-CFINV#0,MSR_FLAGM-XAFLAG#0,MSR_FLAGM-AXFLAG#0
pub const fn classify_impl_152_1_1_6(inst: u32) -> u32 {
  let idx = match (inst >> 5) & 0x7 {
    0x0 => 0x6600,
    0x1 => 0x6601,
    0x2 => 0x6602,
    0x3 => 0x1480,
    0x4 => 0x1481,
    0x5 => 0x1482,
    0x6 => 0x0,
    0x7 => 0x0,
    _ => 0,
  };
  return idx;
}


// MSR_IMM-MSR_UAO#6,MSR_IMM-MSR_PAN#6,MSR_IMM-MSR_SPSel#6,MSR_FLAGM-CFINV#0,MSR_FLAGM-XAFLAG#0,MSR_FLAGM-AXFLAG#0
pub const fn classify_impl_152_1_1_7(inst: u32) -> u32 {
  let idx = match (inst >> 5) & 0x7 {
    0x0 => 0x6600,
    0x1 => 0x6601,
    0x2 => 0x6602,
    0x3 => 0x1480,
    0x4 => 0x1481,
    0x5 => 0x1482,
    0x6 => 0x0,
    0x7 => 0x0,
    _ => 0,
  };
  return idx;
}


// MSR_IMM-MSR_UAO#7,MSR_IMM-MSR_PAN#7,MSR_IMM-MSR_SPSel#7,MSR_FLAGM-CFINV#0,MSR_FLAGM-XAFLAG#0,MSR_FLAGM-AXFLAG#0
pub const fn classify_impl_152_1_1_8(inst: u32) -> u32 {
  let idx = match (inst >> 5) & 0x7 {
    0x0 => 0x6600,
    0x1 => 0x6601,
    0x2 => 0x6602,
    0x3 => 0x1480,
    0x4 => 0x1481,
    0x5 => 0x1482,
    0x6 => 0x0,
    0x7 => 0x0,
    _ => 0,
  };
  return idx;
}

// MSR_IMM-MSR_UAO#0,MSR_IMM-MSR_UAO#1,MSR_IMM-MSR_UAO#2,MSR_IMM-MSR_UAO#3,MSR_IMM-MSR_UAO#4,MSR_IMM-MSR_UAO#5,MSR_IMM-MSR_UAO#6,MSR_IMM-MSR_UAO#7,MSR_IMM-MSR_PAN#0,MSR_IMM-MSR_PAN#1,MSR_IMM-MSR_PAN#2,MSR_IMM-MSR_PAN#3,MSR_IMM-MSR_PAN#4,MSR_IMM-MSR_PAN#5,MSR_IMM-MSR_PAN#6,MSR_IMM-MSR_PAN#7,MSR_IMM-MSR_SPSel#0,MSR_IMM-MSR_SPSel#1,MSR_IMM-MSR_SPSel#2,MSR_IMM-MSR_SPSel#3,MSR_IMM-MSR_SPSel#4,MSR_IMM-MSR_SPSel#5,MSR_IMM-MSR_SPSel#6,MSR_IMM-MSR_SPSel#7,MSR_FLAGM-CFINV#0,MSR_FLAGM-XAFLAG#0,MSR_FLAGM-AXFLAG#0
pub const fn classify_impl_152_1_1(inst: u32) -> u32 {
  if (inst&0x701f) != 0x401f { return 0; }
  let idx = match (inst >> 9) & 0x7 {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x3,
    0x3 => 0x4,
    0x4 => 0x5,
    0x5 => 0x6,
    0x6 => 0x7,
    0x7 => 0x8,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_152_1_1_1(inst), // MSR_IMM-MSR_UAO#0,MSR_IMM-MSR_PAN#0,MSR_IMM-MSR_SPSel#0,MSR_FLAGM-CFINV#0,MSR_FLAGM-XAFLAG#0,MSR_FLAGM-AXFLAG#0
    0x2 => return classify_impl_152_1_1_2(inst), // MSR_IMM-MSR_UAO#1,MSR_IMM-MSR_PAN#1,MSR_IMM-MSR_SPSel#1,MSR_FLAGM-CFINV#0,MSR_FLAGM-XAFLAG#0,MSR_FLAGM-AXFLAG#0
    0x3 => return classify_impl_152_1_1_3(inst), // MSR_IMM-MSR_UAO#2,MSR_IMM-MSR_PAN#2,MSR_IMM-MSR_SPSel#2,MSR_FLAGM-CFINV#0,MSR_FLAGM-XAFLAG#0,MSR_FLAGM-AXFLAG#0
    0x4 => return classify_impl_152_1_1_4(inst), // MSR_IMM-MSR_UAO#3,MSR_IMM-MSR_PAN#3,MSR_IMM-MSR_SPSel#3,MSR_FLAGM-CFINV#0,MSR_FLAGM-XAFLAG#0,MSR_FLAGM-AXFLAG#0
    0x5 => return classify_impl_152_1_1_5(inst), // MSR_IMM-MSR_UAO#4,MSR_IMM-MSR_PAN#4,MSR_IMM-MSR_SPSel#4,MSR_FLAGM-CFINV#0,MSR_FLAGM-XAFLAG#0,MSR_FLAGM-AXFLAG#0
    0x6 => return classify_impl_152_1_1_6(inst), // MSR_IMM-MSR_UAO#5,MSR_IMM-MSR_PAN#5,MSR_IMM-MSR_SPSel#5,MSR_FLAGM-CFINV#0,MSR_FLAGM-XAFLAG#0,MSR_FLAGM-AXFLAG#0
    0x7 => return classify_impl_152_1_1_7(inst), // MSR_IMM-MSR_UAO#6,MSR_IMM-MSR_PAN#6,MSR_IMM-MSR_SPSel#6,MSR_FLAGM-CFINV#0,MSR_FLAGM-XAFLAG#0,MSR_FLAGM-AXFLAG#0
    0x8 => return classify_impl_152_1_1_8(inst), // MSR_IMM-MSR_UAO#7,MSR_IMM-MSR_PAN#7,MSR_IMM-MSR_SPSel#7,MSR_FLAGM-CFINV#0,MSR_FLAGM-XAFLAG#0,MSR_FLAGM-AXFLAG#0
    _ => idx
  };
  return idx;
}


// MSR_IMM-MSR_ALLINT#0,MSR_IMM-MSR_PM#0
pub const fn classify_impl_152_1_2(inst: u32) -> u32 {
  if (inst&0x7cff) != 0x401f { return 0; }
  let idx = match (inst >> 9) & 0x1 {
    0x0 => 0x1483,
    0x1 => 0x1484,
    _ => 0,
  };
  return idx;
}


// WFXT-WFET#0,WFXT-WFIT#0
pub const fn classify_impl_152_1_3_1(inst: u32) -> u32 {
  if (inst&0x1c0) != 0x0 { return 0; }
  let idx = match (inst >> 5) & 0x1 {
    0x0 => 0x6a00,
    0x1 => 0x6a01,
    _ => 0,
  };
  return idx;
}


// HINT-HINT#0
pub const fn classify_impl_152_1_3_2(inst: u32) -> u32 {
  if (inst&0x1f) != 0x1f { return 0; }
  return 0xd80;
}


// TCOMMIT-TCOMMIT#0
pub const fn classify_impl_152_1_3_3_1(inst: u32) -> u32 {
  if (inst&0x100) != 0x0 { return 0; }
  return 0x6880;
}


// SB-SB#0
pub const fn classify_impl_152_1_3_3_2(inst: u32) -> u32 {
  if (inst&0x100) != 0x0 { return 0; }
  return 0x6780;
}

// CLREX-CLREX#0,DSB-DSB#0,DSB-DMB#0,DSB-ISB#0,SB-SB#0,TCOMMIT-TCOMMIT#0
pub const fn classify_impl_152_1_3_3(inst: u32) -> u32 {
  if (inst&0x1f) != 0x1f { return 0; }
  let idx = match (inst >> 5) & 0x7 {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0xc80,
    0x3 => 0x1,
    0x4 => 0xd00,
    0x5 => 0xd01,
    0x6 => 0xd02,
    0x7 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_152_1_3_3_1(inst), // TCOMMIT-TCOMMIT#0
    0x2 => return classify_impl_152_1_3_3_2(inst), // SB-SB#0
    _ => idx
  };
  return idx;
}


// CLREX-CLREX#0,DSB-DSB#0,DSB-DMB#0,DSB-ISB#0
pub const fn classify_impl_152_1_3_4(inst: u32) -> u32 {
  if (inst&0x1f) != 0x1f { return 0; }
  let idx = match (inst >> 5) & 0x7 {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0xc80,
    0x3 => 0x0,
    0x4 => 0xd00,
    0x5 => 0xd01,
    0x6 => 0xd02,
    0x7 => 0x0,
    _ => 0,
  };
  return idx;
}


// MSR_IMM-MSR_SSBS#0,MSR_IMM-MSR_DIT#0,MSR_IMM-MSR_TCO#0,MSR_IMM-MSR_DAIFSet#0,MSR_IMM-MSR_DAIFClr#0
pub const fn classify_impl_152_1_3_5(inst: u32) -> u32 {
  if (inst&0x1f) != 0x1f { return 0; }
  let idx = match (inst >> 5) & 0x7 {
    0x0 => 0x0,
    0x1 => 0x1485,
    0x2 => 0x1486,
    0x3 => 0x0,
    0x4 => 0x1487,
    0x5 => 0x0,
    0x6 => 0x1488,
    0x7 => 0x1489,
    _ => 0,
  };
  return idx;
}


// MSR_IMM-MSR_SSBS#1,MSR_IMM-MSR_DIT#1,MSR_IMM-MSR_TCO#1,MSR_IMM-MSR_DAIFSet#1,MSR_IMM-MSR_DAIFClr#1
pub const fn classify_impl_152_1_3_6(inst: u32) -> u32 {
  if (inst&0x1f) != 0x1f { return 0; }
  let idx = match (inst >> 5) & 0x7 {
    0x0 => 0x0,
    0x1 => 0x1485,
    0x2 => 0x1486,
    0x3 => 0x0,
    0x4 => 0x1487,
    0x5 => 0x0,
    0x6 => 0x1488,
    0x7 => 0x1489,
    _ => 0,
  };
  return idx;
}


// MSR_IMM-MSR_SSBS#2,MSR_IMM-MSR_DIT#2,MSR_IMM-MSR_TCO#2,MSR_IMM-MSR_DAIFSet#2,MSR_IMM-MSR_DAIFClr#2
pub const fn classify_impl_152_1_3_7(inst: u32) -> u32 {
  if (inst&0x1f) != 0x1f { return 0; }
  let idx = match (inst >> 5) & 0x7 {
    0x0 => 0x0,
    0x1 => 0x1485,
    0x2 => 0x1486,
    0x3 => 0x0,
    0x4 => 0x1487,
    0x5 => 0x0,
    0x6 => 0x1488,
    0x7 => 0x1489,
    _ => 0,
  };
  return idx;
}


// MSR_IMM-MSR_SSBS#3,MSR_IMM-MSR_DIT#3,MSR_IMM-MSR_TCO#3,MSR_IMM-MSR_DAIFSet#3,MSR_IMM-MSR_DAIFClr#3
pub const fn classify_impl_152_1_3_8(inst: u32) -> u32 {
  if (inst&0x1f) != 0x1f { return 0; }
  let idx = match (inst >> 5) & 0x7 {
    0x0 => 0x0,
    0x1 => 0x1485,
    0x2 => 0x1486,
    0x3 => 0x0,
    0x4 => 0x1487,
    0x5 => 0x0,
    0x6 => 0x1488,
    0x7 => 0x1489,
    _ => 0,
  };
  return idx;
}


// MSR_IMM-MSR_SSBS#4,MSR_IMM-MSR_DIT#4,MSR_IMM-MSR_TCO#4,MSR_IMM-MSR_DAIFSet#4,MSR_IMM-MSR_DAIFClr#4
pub const fn classify_impl_152_1_3_9(inst: u32) -> u32 {
  if (inst&0x1f) != 0x1f { return 0; }
  let idx = match (inst >> 5) & 0x7 {
    0x0 => 0x0,
    0x1 => 0x1485,
    0x2 => 0x1486,
    0x3 => 0x0,
    0x4 => 0x1487,
    0x5 => 0x0,
    0x6 => 0x1488,
    0x7 => 0x1489,
    _ => 0,
  };
  return idx;
}


// MSR_IMM-MSR_SSBS#5,MSR_IMM-MSR_DIT#5,MSR_IMM-MSR_TCO#5,MSR_IMM-MSR_DAIFSet#5,MSR_IMM-MSR_DAIFClr#5
pub const fn classify_impl_152_1_3_a(inst: u32) -> u32 {
  if (inst&0x1f) != 0x1f { return 0; }
  let idx = match (inst >> 5) & 0x7 {
    0x0 => 0x0,
    0x1 => 0x1485,
    0x2 => 0x1486,
    0x3 => 0x0,
    0x4 => 0x1487,
    0x5 => 0x0,
    0x6 => 0x1488,
    0x7 => 0x1489,
    _ => 0,
  };
  return idx;
}


// MSR_IMM-MSR_SSBS#6,MSR_IMM-MSR_DIT#6,MSR_IMM-MSR_TCO#6,MSR_IMM-MSR_DAIFSet#6,MSR_IMM-MSR_DAIFClr#6
pub const fn classify_impl_152_1_3_b(inst: u32) -> u32 {
  if (inst&0x1f) != 0x1f { return 0; }
  let idx = match (inst >> 5) & 0x7 {
    0x0 => 0x0,
    0x1 => 0x1485,
    0x2 => 0x1486,
    0x3 => 0x0,
    0x4 => 0x1487,
    0x5 => 0x0,
    0x6 => 0x1488,
    0x7 => 0x1489,
    _ => 0,
  };
  return idx;
}


// MSR_IMM-MSR_SSBS#7,MSR_IMM-MSR_DIT#7,MSR_IMM-MSR_TCO#7,MSR_IMM-MSR_DAIFSet#7,MSR_IMM-MSR_DAIFClr#7
pub const fn classify_impl_152_1_3_c(inst: u32) -> u32 {
  if (inst&0x1f) != 0x1f { return 0; }
  let idx = match (inst >> 5) & 0x7 {
    0x0 => 0x0,
    0x1 => 0x1485,
    0x2 => 0x1486,
    0x3 => 0x0,
    0x4 => 0x1487,
    0x5 => 0x0,
    0x6 => 0x1488,
    0x7 => 0x1489,
    _ => 0,
  };
  return idx;
}

// CLREX-CLREX#0,DSB-DSB#0,DSB-DMB#0,DSB-ISB#0,HINT-HINT#0,MSR_IMM-MSR_SSBS#0,MSR_IMM-MSR_SSBS#1,MSR_IMM-MSR_SSBS#2,MSR_IMM-MSR_SSBS#3,MSR_IMM-MSR_SSBS#4,MSR_IMM-MSR_SSBS#5,MSR_IMM-MSR_SSBS#6,MSR_IMM-MSR_SSBS#7,MSR_IMM-MSR_DIT#0,MSR_IMM-MSR_DIT#1,MSR_IMM-MSR_DIT#2,MSR_IMM-MSR_DIT#3,MSR_IMM-MSR_DIT#4,MSR_IMM-MSR_DIT#5,MSR_IMM-MSR_DIT#6,MSR_IMM-MSR_DIT#7,MSR_IMM-MSR_TCO#0,MSR_IMM-MSR_TCO#1,MSR_IMM-MSR_TCO#2,MSR_IMM-MSR_TCO#3,MSR_IMM-MSR_TCO#4,MSR_IMM-MSR_TCO#5,MSR_IMM-MSR_TCO#6,MSR_IMM-MSR_TCO#7,MSR_IMM-MSR_DAIFSet#0,MSR_IMM-MSR_DAIFSet#1,MSR_IMM-MSR_DAIFSet#2,MSR_IMM-MSR_DAIFSet#3,MSR_IMM-MSR_DAIFSet#4,MSR_IMM-MSR_DAIFSet#5,MSR_IMM-MSR_DAIFSet#6,MSR_IMM-MSR_DAIFSet#7,MSR_IMM-MSR_DAIFClr#0,MSR_IMM-MSR_DAIFClr#1,MSR_IMM-MSR_DAIFClr#2,MSR_IMM-MSR_DAIFClr#3,MSR_IMM-MSR_DAIFClr#4,MSR_IMM-MSR_DAIFClr#5,MSR_IMM-MSR_DAIFClr#6,MSR_IMM-MSR_DAIFClr#7,SB-SB#0,TCOMMIT-TCOMMIT#0,WFXT-WFET#0,WFXT-WFIT#0
pub const fn classify_impl_152_1_3(inst: u32) -> u32 {
  let idx = match (inst >> 9) & 0x3f {
    0x0 => 0x0,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x1,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x2,
    0x11 => 0x2,
    0x12 => 0x2,
    0x13 => 0x2,
    0x14 => 0x2,
    0x15 => 0x2,
    0x16 => 0x2,
    0x17 => 0x2,
    0x18 => 0x3,
    0x19 => 0x4,
    0x1a => 0x4,
    0x1b => 0x4,
    0x1c => 0x4,
    0x1d => 0x4,
    0x1e => 0x4,
    0x1f => 0x4,
    0x20 => 0x5,
    0x21 => 0x6,
    0x22 => 0x7,
    0x23 => 0x8,
    0x24 => 0x9,
    0x25 => 0xa,
    0x26 => 0xb,
    0x27 => 0xc,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_152_1_3_1(inst), // WFXT-WFET#0,WFXT-WFIT#0
    0x2 => return classify_impl_152_1_3_2(inst), // HINT-HINT#0
    0x3 => return classify_impl_152_1_3_3(inst), // CLREX-CLREX#0,DSB-DSB#0,DSB-DMB#0,DSB-ISB#0,SB-SB#0,TCOMMIT-TCOMMIT#0
    0x4 => return classify_impl_152_1_3_4(inst), // CLREX-CLREX#0,DSB-DSB#0,DSB-DMB#0,DSB-ISB#0
    0x5 => return classify_impl_152_1_3_5(inst), // MSR_IMM-MSR_SSBS#0,MSR_IMM-MSR_DIT#0,MSR_IMM-MSR_TCO#0,MSR_IMM-MSR_DAIFSet#0,MSR_IMM-MSR_DAIFClr#0
    0x6 => return classify_impl_152_1_3_6(inst), // MSR_IMM-MSR_SSBS#1,MSR_IMM-MSR_DIT#1,MSR_IMM-MSR_TCO#1,MSR_IMM-MSR_DAIFSet#1,MSR_IMM-MSR_DAIFClr#1
    0x7 => return classify_impl_152_1_3_7(inst), // MSR_IMM-MSR_SSBS#2,MSR_IMM-MSR_DIT#2,MSR_IMM-MSR_TCO#2,MSR_IMM-MSR_DAIFSet#2,MSR_IMM-MSR_DAIFClr#2
    0x8 => return classify_impl_152_1_3_8(inst), // MSR_IMM-MSR_SSBS#3,MSR_IMM-MSR_DIT#3,MSR_IMM-MSR_TCO#3,MSR_IMM-MSR_DAIFSet#3,MSR_IMM-MSR_DAIFClr#3
    0x9 => return classify_impl_152_1_3_9(inst), // MSR_IMM-MSR_SSBS#4,MSR_IMM-MSR_DIT#4,MSR_IMM-MSR_TCO#4,MSR_IMM-MSR_DAIFSet#4,MSR_IMM-MSR_DAIFClr#4
    0xa => return classify_impl_152_1_3_a(inst), // MSR_IMM-MSR_SSBS#5,MSR_IMM-MSR_DIT#5,MSR_IMM-MSR_TCO#5,MSR_IMM-MSR_DAIFSet#5,MSR_IMM-MSR_DAIFClr#5
    0xb => return classify_impl_152_1_3_b(inst), // MSR_IMM-MSR_SSBS#6,MSR_IMM-MSR_DIT#6,MSR_IMM-MSR_TCO#6,MSR_IMM-MSR_DAIFSet#6,MSR_IMM-MSR_DAIFClr#6
    0xc => return classify_impl_152_1_3_c(inst), // MSR_IMM-MSR_SSBS#7,MSR_IMM-MSR_DIT#7,MSR_IMM-MSR_TCO#7,MSR_IMM-MSR_DAIFSet#7,MSR_IMM-MSR_DAIFClr#7
    _ => idx
  };
  return idx;
}

// CLREX-CLREX#0,DSB-DSB#0,DSB-DMB#0,DSB-ISB#0,HINT-HINT#0,MSR_IMM-MSR_UAO#0,MSR_IMM-MSR_UAO#1,MSR_IMM-MSR_UAO#2,MSR_IMM-MSR_UAO#3,MSR_IMM-MSR_UAO#4,MSR_IMM-MSR_UAO#5,MSR_IMM-MSR_UAO#6,MSR_IMM-MSR_UAO#7,MSR_IMM-MSR_PAN#0,MSR_IMM-MSR_PAN#1,MSR_IMM-MSR_PAN#2,MSR_IMM-MSR_PAN#3,MSR_IMM-MSR_PAN#4,MSR_IMM-MSR_PAN#5,MSR_IMM-MSR_PAN#6,MSR_IMM-MSR_PAN#7,MSR_IMM-MSR_SPSel#0,MSR_IMM-MSR_SPSel#1,MSR_IMM-MSR_SPSel#2,MSR_IMM-MSR_SPSel#3,MSR_IMM-MSR_SPSel#4,MSR_IMM-MSR_SPSel#5,MSR_IMM-MSR_SPSel#6,MSR_IMM-MSR_SPSel#7,MSR_IMM-MSR_ALLINT#0,MSR_IMM-MSR_PM#0,MSR_IMM-MSR_SSBS#0,MSR_IMM-MSR_SSBS#1,MSR_IMM-MSR_SSBS#2,MSR_IMM-MSR_SSBS#3,MSR_IMM-MSR_SSBS#4,MSR_IMM-MSR_SSBS#5,MSR_IMM-MSR_SSBS#6,MSR_IMM-MSR_SSBS#7,MSR_IMM-MSR_DIT#0,MSR_IMM-MSR_DIT#1,MSR_IMM-MSR_DIT#2,MSR_IMM-MSR_DIT#3,MSR_IMM-MSR_DIT#4,MSR_IMM-MSR_DIT#5,MSR_IMM-MSR_DIT#6,MSR_IMM-MSR_DIT#7,MSR_IMM-MSR_TCO#0,MSR_IMM-MSR_TCO#1,MSR_IMM-MSR_TCO#2,MSR_IMM-MSR_TCO#3,MSR_IMM-MSR_TCO#4,MSR_IMM-MSR_TCO#5,MSR_IMM-MSR_TCO#6,MSR_IMM-MSR_TCO#7,MSR_IMM-MSR_DAIFSet#0,MSR_IMM-MSR_DAIFSet#1,MSR_IMM-MSR_DAIFSet#2,MSR_IMM-MSR_DAIFSet#3,MSR_IMM-MSR_DAIFSet#4,MSR_IMM-MSR_DAIFSet#5,MSR_IMM-MSR_DAIFSet#6,MSR_IMM-MSR_DAIFSet#7,MSR_IMM-MSR_DAIFClr#0,MSR_IMM-MSR_DAIFClr#1,MSR_IMM-MSR_DAIFClr#2,MSR_IMM-MSR_DAIFClr#3,MSR_IMM-MSR_DAIFClr#4,MSR_IMM-MSR_DAIFClr#5,MSR_IMM-MSR_DAIFClr#6,MSR_IMM-MSR_DAIFClr#7,MSR_FLAGM-CFINV#0,MSR_FLAGM-XAFLAG#0,MSR_FLAGM-AXFLAG#0,SB-SB#0,TCOMMIT-TCOMMIT#0,WFXT-WFET#0,WFXT-WFIT#0
pub const fn classify_impl_152_1(inst: u32) -> u32 {
  if (inst&0x48000) != 0x0 { return 0; }
  let idx = match (inst >> 16) & 0x3 {
    0x0 => 0x1,
    0x1 => 0x2,
    0x2 => 0x0,
    0x3 => 0x3,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_152_1_1(inst), // MSR_IMM-MSR_UAO#0,MSR_IMM-MSR_UAO#1,MSR_IMM-MSR_UAO#2,MSR_IMM-MSR_UAO#3,MSR_IMM-MSR_UAO#4,MSR_IMM-MSR_UAO#5,MSR_IMM-MSR_UAO#6,MSR_IMM-MSR_UAO#7,MSR_IMM-MSR_PAN#0,MSR_IMM-MSR_PAN#1,MSR_IMM-MSR_PAN#2,MSR_IMM-MSR_PAN#3,MSR_IMM-MSR_PAN#4,MSR_IMM-MSR_PAN#5,MSR_IMM-MSR_PAN#6,MSR_IMM-MSR_PAN#7,MSR_IMM-MSR_SPSel#0,MSR_IMM-MSR_SPSel#1,MSR_IMM-MSR_SPSel#2,MSR_IMM-MSR_SPSel#3,MSR_IMM-MSR_SPSel#4,MSR_IMM-MSR_SPSel#5,MSR_IMM-MSR_SPSel#6,MSR_IMM-MSR_SPSel#7,MSR_FLAGM-CFINV#0,MSR_FLAGM-XAFLAG#0,MSR_FLAGM-AXFLAG#0
    0x2 => return classify_impl_152_1_2(inst), // MSR_IMM-MSR_ALLINT#0,MSR_IMM-MSR_PM#0
    0x3 => return classify_impl_152_1_3(inst), // CLREX-CLREX#0,DSB-DSB#0,DSB-DMB#0,DSB-ISB#0,HINT-HINT#0,MSR_IMM-MSR_SSBS#0,MSR_IMM-MSR_SSBS#1,MSR_IMM-MSR_SSBS#2,MSR_IMM-MSR_SSBS#3,MSR_IMM-MSR_SSBS#4,MSR_IMM-MSR_SSBS#5,MSR_IMM-MSR_SSBS#6,MSR_IMM-MSR_SSBS#7,MSR_IMM-MSR_DIT#0,MSR_IMM-MSR_DIT#1,MSR_IMM-MSR_DIT#2,MSR_IMM-MSR_DIT#3,MSR_IMM-MSR_DIT#4,MSR_IMM-MSR_DIT#5,MSR_IMM-MSR_DIT#6,MSR_IMM-MSR_DIT#7,MSR_IMM-MSR_TCO#0,MSR_IMM-MSR_TCO#1,MSR_IMM-MSR_TCO#2,MSR_IMM-MSR_TCO#3,MSR_IMM-MSR_TCO#4,MSR_IMM-MSR_TCO#5,MSR_IMM-MSR_TCO#6,MSR_IMM-MSR_TCO#7,MSR_IMM-MSR_DAIFSet#0,MSR_IMM-MSR_DAIFSet#1,MSR_IMM-MSR_DAIFSet#2,MSR_IMM-MSR_DAIFSet#3,MSR_IMM-MSR_DAIFSet#4,MSR_IMM-MSR_DAIFSet#5,MSR_IMM-MSR_DAIFSet#6,MSR_IMM-MSR_DAIFSet#7,MSR_IMM-MSR_DAIFClr#0,MSR_IMM-MSR_DAIFClr#1,MSR_IMM-MSR_DAIFClr#2,MSR_IMM-MSR_DAIFClr#3,MSR_IMM-MSR_DAIFClr#4,MSR_IMM-MSR_DAIFClr#5,MSR_IMM-MSR_DAIFClr#6,MSR_IMM-MSR_DAIFClr#7,SB-SB#0,TCOMMIT-TCOMMIT#0,WFXT-WFET#0,WFXT-WFIT#0
    _ => idx
  };
  return idx;
}

// CLREX-CLREX#0,DSB-DSB#0,DSB-DMB#0,DSB-ISB#0,HINT-HINT#0,SYS-SYS#0,MSR_IMM-MSR_UAO#0,MSR_IMM-MSR_UAO#1,MSR_IMM-MSR_UAO#2,MSR_IMM-MSR_UAO#3,MSR_IMM-MSR_UAO#4,MSR_IMM-MSR_UAO#5,MSR_IMM-MSR_UAO#6,MSR_IMM-MSR_UAO#7,MSR_IMM-MSR_PAN#0,MSR_IMM-MSR_PAN#1,MSR_IMM-MSR_PAN#2,MSR_IMM-MSR_PAN#3,MSR_IMM-MSR_PAN#4,MSR_IMM-MSR_PAN#5,MSR_IMM-MSR_PAN#6,MSR_IMM-MSR_PAN#7,MSR_IMM-MSR_SPSel#0,MSR_IMM-MSR_SPSel#1,MSR_IMM-MSR_SPSel#2,MSR_IMM-MSR_SPSel#3,MSR_IMM-MSR_SPSel#4,MSR_IMM-MSR_SPSel#5,MSR_IMM-MSR_SPSel#6,MSR_IMM-MSR_SPSel#7,MSR_IMM-MSR_ALLINT#0,MSR_IMM-MSR_PM#0,MSR_IMM-MSR_SSBS#0,MSR_IMM-MSR_SSBS#1,MSR_IMM-MSR_SSBS#2,MSR_IMM-MSR_SSBS#3,MSR_IMM-MSR_SSBS#4,MSR_IMM-MSR_SSBS#5,MSR_IMM-MSR_SSBS#6,MSR_IMM-MSR_SSBS#7,MSR_IMM-MSR_DIT#0,MSR_IMM-MSR_DIT#1,MSR_IMM-MSR_DIT#2,MSR_IMM-MSR_DIT#3,MSR_IMM-MSR_DIT#4,MSR_IMM-MSR_DIT#5,MSR_IMM-MSR_DIT#6,MSR_IMM-MSR_DIT#7,MSR_IMM-MSR_TCO#0,MSR_IMM-MSR_TCO#1,MSR_IMM-MSR_TCO#2,MSR_IMM-MSR_TCO#3,MSR_IMM-MSR_TCO#4,MSR_IMM-MSR_TCO#5,MSR_IMM-MSR_TCO#6,MSR_IMM-MSR_TCO#7,MSR_IMM-MSR_DAIFSet#0,MSR_IMM-MSR_DAIFSet#1,MSR_IMM-MSR_DAIFSet#2,MSR_IMM-MSR_DAIFSet#3,MSR_IMM-MSR_DAIFSet#4,MSR_IMM-MSR_DAIFSet#5,MSR_IMM-MSR_DAIFSet#6,MSR_IMM-MSR_DAIFSet#7,MSR_IMM-MSR_DAIFClr#0,MSR_IMM-MSR_DAIFClr#1,MSR_IMM-MSR_DAIFClr#2,MSR_IMM-MSR_DAIFClr#3,MSR_IMM-MSR_DAIFClr#4,MSR_IMM-MSR_DAIFClr#5,MSR_IMM-MSR_DAIFClr#6,MSR_IMM-MSR_DAIFClr#7,MSR_FLAGM-CFINV#0,MSR_FLAGM-XAFLAG#0,MSR_FLAGM-AXFLAG#0,SB-SB#0,TCOMMIT-TCOMMIT#0,WFXT-WFET#0,WFXT-WFIT#0
pub const fn classify_impl_152(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x1380,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_152_1(inst), // CLREX-CLREX#0,DSB-DSB#0,DSB-DMB#0,DSB-ISB#0,HINT-HINT#0,MSR_IMM-MSR_UAO#0,MSR_IMM-MSR_UAO#1,MSR_IMM-MSR_UAO#2,MSR_IMM-MSR_UAO#3,MSR_IMM-MSR_UAO#4,MSR_IMM-MSR_UAO#5,MSR_IMM-MSR_UAO#6,MSR_IMM-MSR_UAO#7,MSR_IMM-MSR_PAN#0,MSR_IMM-MSR_PAN#1,MSR_IMM-MSR_PAN#2,MSR_IMM-MSR_PAN#3,MSR_IMM-MSR_PAN#4,MSR_IMM-MSR_PAN#5,MSR_IMM-MSR_PAN#6,MSR_IMM-MSR_PAN#7,MSR_IMM-MSR_SPSel#0,MSR_IMM-MSR_SPSel#1,MSR_IMM-MSR_SPSel#2,MSR_IMM-MSR_SPSel#3,MSR_IMM-MSR_SPSel#4,MSR_IMM-MSR_SPSel#5,MSR_IMM-MSR_SPSel#6,MSR_IMM-MSR_SPSel#7,MSR_IMM-MSR_ALLINT#0,MSR_IMM-MSR_PM#0,MSR_IMM-MSR_SSBS#0,MSR_IMM-MSR_SSBS#1,MSR_IMM-MSR_SSBS#2,MSR_IMM-MSR_SSBS#3,MSR_IMM-MSR_SSBS#4,MSR_IMM-MSR_SSBS#5,MSR_IMM-MSR_SSBS#6,MSR_IMM-MSR_SSBS#7,MSR_IMM-MSR_DIT#0,MSR_IMM-MSR_DIT#1,MSR_IMM-MSR_DIT#2,MSR_IMM-MSR_DIT#3,MSR_IMM-MSR_DIT#4,MSR_IMM-MSR_DIT#5,MSR_IMM-MSR_DIT#6,MSR_IMM-MSR_DIT#7,MSR_IMM-MSR_TCO#0,MSR_IMM-MSR_TCO#1,MSR_IMM-MSR_TCO#2,MSR_IMM-MSR_TCO#3,MSR_IMM-MSR_TCO#4,MSR_IMM-MSR_TCO#5,MSR_IMM-MSR_TCO#6,MSR_IMM-MSR_TCO#7,MSR_IMM-MSR_DAIFSet#0,MSR_IMM-MSR_DAIFSet#1,MSR_IMM-MSR_DAIFSet#2,MSR_IMM-MSR_DAIFSet#3,MSR_IMM-MSR_DAIFSet#4,MSR_IMM-MSR_DAIFSet#5,MSR_IMM-MSR_DAIFSet#6,MSR_IMM-MSR_DAIFSet#7,MSR_IMM-MSR_DAIFClr#0,MSR_IMM-MSR_DAIFClr#1,MSR_IMM-MSR_DAIFClr#2,MSR_IMM-MSR_DAIFClr#3,MSR_IMM-MSR_DAIFClr#4,MSR_IMM-MSR_DAIFClr#5,MSR_IMM-MSR_DAIFClr#6,MSR_IMM-MSR_DAIFClr#7,MSR_FLAGM-CFINV#0,MSR_FLAGM-XAFLAG#0,MSR_FLAGM-AXFLAG#0,SB-SB#0,TCOMMIT-TCOMMIT#0,WFXT-WFET#0,WFXT-WFIT#0
    _ => idx
  };
  return idx;
}


// TSTART-TSTART#0,TTEST-TTEST#0
pub const fn classify_impl_153_1(inst: u32) -> u32 {
  if (inst&0x7fee0) != 0x33060 { return 0; }
  let idx = match (inst >> 8) & 0x1 {
    0x0 => 0x6900,
    0x1 => 0x6980,
    _ => 0,
  };
  return idx;
}

// SYS-SYSL#0,TSTART-TSTART#0,TTEST-TTEST#0
pub const fn classify_impl_153(inst: u32) -> u32 {
  let idx = match (inst >> 19) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x1381,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_153_1(inst), // TSTART-TSTART#0,TTEST-TTEST#0
    _ => idx
  };
  return idx;
}


// BRANCHREG-BR#0,BRANCHREG-BR#1,BRANCHREG-BR#2,BRANCHREG-BR#3,BRANCHREG-BR#4,BRANCHREG-BR#5,BRANCHREG-BR#6,BRANCHREG-BR#7,BRANCHREG-BR#8,BRANCHREG-BR#9,BRANCHREG-BR#10,BRANCHREG-BR#11,BRANCHREG-BR#12,BRANCHREG-BR#13,BRANCHREG-BR#14,BRANCHREG-BR#15,BRANCHREG-BR#16,BRANCHREG-BR#17,BRANCHREG-BR#18,BRANCHREG-BR#19,BRANCHREG-BR#20,BRANCHREG-BR#21,BRANCHREG-BR#22,BRANCHREG-BR#23,BRANCHREG-BR#24,BRANCHREG-BR#25,BRANCHREG-BR#26,BRANCHREG-BR#27,BRANCHREG-BR#28,BRANCHREG-BR#29,BRANCHREG-BR#30,BRANCHREG-BR#31,BRANCHREG-BRAAZ#0,BRANCHREG-BRAAZ#1,BRANCHREG-BRAAZ#2,BRANCHREG-BRAAZ#3,BRANCHREG-BRAAZ#4,BRANCHREG-BRAAZ#5,BRANCHREG-BRAAZ#6,BRANCHREG-BRAAZ#7,BRANCHREG-BRAAZ#8,BRANCHREG-BRAAZ#9,BRANCHREG-BRAAZ#10,BRANCHREG-BRAAZ#11,BRANCHREG-BRAAZ#12,BRANCHREG-BRAAZ#13,BRANCHREG-BRAAZ#14,BRANCHREG-BRAAZ#15,BRANCHREG-BRAAZ#16,BRANCHREG-BRAAZ#17,BRANCHREG-BRAAZ#18,BRANCHREG-BRAAZ#19,BRANCHREG-BRAAZ#20,BRANCHREG-BRAAZ#21,BRANCHREG-BRAAZ#22,BRANCHREG-BRAAZ#23,BRANCHREG-BRAAZ#24,BRANCHREG-BRAAZ#25,BRANCHREG-BRAAZ#26,BRANCHREG-BRAAZ#27,BRANCHREG-BRAAZ#28,BRANCHREG-BRAAZ#29,BRANCHREG-BRAAZ#30,BRANCHREG-BRAAZ#31,BRANCHREG-BRABZ#0,BRANCHREG-BRABZ#1,BRANCHREG-BRABZ#2,BRANCHREG-BRABZ#3,BRANCHREG-BRABZ#4,BRANCHREG-BRABZ#5,BRANCHREG-BRABZ#6,BRANCHREG-BRABZ#7,BRANCHREG-BRABZ#8,BRANCHREG-BRABZ#9,BRANCHREG-BRABZ#10,BRANCHREG-BRABZ#11,BRANCHREG-BRABZ#12,BRANCHREG-BRABZ#13,BRANCHREG-BRABZ#14,BRANCHREG-BRABZ#15,BRANCHREG-BRABZ#16,BRANCHREG-BRABZ#17,BRANCHREG-BRABZ#18,BRANCHREG-BRABZ#19,BRANCHREG-BRABZ#20,BRANCHREG-BRABZ#21,BRANCHREG-BRABZ#22,BRANCHREG-BRABZ#23,BRANCHREG-BRABZ#24,BRANCHREG-BRABZ#25,BRANCHREG-BRABZ#26,BRANCHREG-BRABZ#27,BRANCHREG-BRABZ#28,BRANCHREG-BRABZ#29,BRANCHREG-BRABZ#30,BRANCHREG-BRABZ#31
pub const fn classify_impl_154(inst: u32) -> u32 {
  if (inst&0xff000) != 0xf0000 { return 0; }
  let idx = match (inst >> 0) & 0xfff {
    0x0 => 0x980,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x980,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    0x40 => 0x980,
    0x41 => 0x0,
    0x42 => 0x0,
    0x43 => 0x0,
    0x44 => 0x0,
    0x45 => 0x0,
    0x46 => 0x0,
    0x47 => 0x0,
    0x48 => 0x0,
    0x49 => 0x0,
    0x4a => 0x0,
    0x4b => 0x0,
    0x4c => 0x0,
    0x4d => 0x0,
    0x4e => 0x0,
    0x4f => 0x0,
    0x50 => 0x0,
    0x51 => 0x0,
    0x52 => 0x0,
    0x53 => 0x0,
    0x54 => 0x0,
    0x55 => 0x0,
    0x56 => 0x0,
    0x57 => 0x0,
    0x58 => 0x0,
    0x59 => 0x0,
    0x5a => 0x0,
    0x5b => 0x0,
    0x5c => 0x0,
    0x5d => 0x0,
    0x5e => 0x0,
    0x5f => 0x0,
    0x60 => 0x980,
    0x61 => 0x0,
    0x62 => 0x0,
    0x63 => 0x0,
    0x64 => 0x0,
    0x65 => 0x0,
    0x66 => 0x0,
    0x67 => 0x0,
    0x68 => 0x0,
    0x69 => 0x0,
    0x6a => 0x0,
    0x6b => 0x0,
    0x6c => 0x0,
    0x6d => 0x0,
    0x6e => 0x0,
    0x6f => 0x0,
    0x70 => 0x0,
    0x71 => 0x0,
    0x72 => 0x0,
    0x73 => 0x0,
    0x74 => 0x0,
    0x75 => 0x0,
    0x76 => 0x0,
    0x77 => 0x0,
    0x78 => 0x0,
    0x79 => 0x0,
    0x7a => 0x0,
    0x7b => 0x0,
    0x7c => 0x0,
    0x7d => 0x0,
    0x7e => 0x0,
    0x7f => 0x0,
    0x80 => 0x980,
    0x81 => 0x0,
    0x82 => 0x0,
    0x83 => 0x0,
    0x84 => 0x0,
    0x85 => 0x0,
    0x86 => 0x0,
    0x87 => 0x0,
    0x88 => 0x0,
    0x89 => 0x0,
    0x8a => 0x0,
    0x8b => 0x0,
    0x8c => 0x0,
    0x8d => 0x0,
    0x8e => 0x0,
    0x8f => 0x0,
    0x90 => 0x0,
    0x91 => 0x0,
    0x92 => 0x0,
    0x93 => 0x0,
    0x94 => 0x0,
    0x95 => 0x0,
    0x96 => 0x0,
    0x97 => 0x0,
    0x98 => 0x0,
    0x99 => 0x0,
    0x9a => 0x0,
    0x9b => 0x0,
    0x9c => 0x0,
    0x9d => 0x0,
    0x9e => 0x0,
    0x9f => 0x0,
    0xa0 => 0x980,
    0xa1 => 0x0,
    0xa2 => 0x0,
    0xa3 => 0x0,
    0xa4 => 0x0,
    0xa5 => 0x0,
    0xa6 => 0x0,
    0xa7 => 0x0,
    0xa8 => 0x0,
    0xa9 => 0x0,
    0xaa => 0x0,
    0xab => 0x0,
    0xac => 0x0,
    0xad => 0x0,
    0xae => 0x0,
    0xaf => 0x0,
    0xb0 => 0x0,
    0xb1 => 0x0,
    0xb2 => 0x0,
    0xb3 => 0x0,
    0xb4 => 0x0,
    0xb5 => 0x0,
    0xb6 => 0x0,
    0xb7 => 0x0,
    0xb8 => 0x0,
    0xb9 => 0x0,
    0xba => 0x0,
    0xbb => 0x0,
    0xbc => 0x0,
    0xbd => 0x0,
    0xbe => 0x0,
    0xbf => 0x0,
    0xc0 => 0x980,
    0xc1 => 0x0,
    0xc2 => 0x0,
    0xc3 => 0x0,
    0xc4 => 0x0,
    0xc5 => 0x0,
    0xc6 => 0x0,
    0xc7 => 0x0,
    0xc8 => 0x0,
    0xc9 => 0x0,
    0xca => 0x0,
    0xcb => 0x0,
    0xcc => 0x0,
    0xcd => 0x0,
    0xce => 0x0,
    0xcf => 0x0,
    0xd0 => 0x0,
    0xd1 => 0x0,
    0xd2 => 0x0,
    0xd3 => 0x0,
    0xd4 => 0x0,
    0xd5 => 0x0,
    0xd6 => 0x0,
    0xd7 => 0x0,
    0xd8 => 0x0,
    0xd9 => 0x0,
    0xda => 0x0,
    0xdb => 0x0,
    0xdc => 0x0,
    0xdd => 0x0,
    0xde => 0x0,
    0xdf => 0x0,
    0xe0 => 0x980,
    0xe1 => 0x0,
    0xe2 => 0x0,
    0xe3 => 0x0,
    0xe4 => 0x0,
    0xe5 => 0x0,
    0xe6 => 0x0,
    0xe7 => 0x0,
    0xe8 => 0x0,
    0xe9 => 0x0,
    0xea => 0x0,
    0xeb => 0x0,
    0xec => 0x0,
    0xed => 0x0,
    0xee => 0x0,
    0xef => 0x0,
    0xf0 => 0x0,
    0xf1 => 0x0,
    0xf2 => 0x0,
    0xf3 => 0x0,
    0xf4 => 0x0,
    0xf5 => 0x0,
    0xf6 => 0x0,
    0xf7 => 0x0,
    0xf8 => 0x0,
    0xf9 => 0x0,
    0xfa => 0x0,
    0xfb => 0x0,
    0xfc => 0x0,
    0xfd => 0x0,
    0xfe => 0x0,
    0xff => 0x0,
    0x100 => 0x980,
    0x101 => 0x0,
    0x102 => 0x0,
    0x103 => 0x0,
    0x104 => 0x0,
    0x105 => 0x0,
    0x106 => 0x0,
    0x107 => 0x0,
    0x108 => 0x0,
    0x109 => 0x0,
    0x10a => 0x0,
    0x10b => 0x0,
    0x10c => 0x0,
    0x10d => 0x0,
    0x10e => 0x0,
    0x10f => 0x0,
    0x110 => 0x0,
    0x111 => 0x0,
    0x112 => 0x0,
    0x113 => 0x0,
    0x114 => 0x0,
    0x115 => 0x0,
    0x116 => 0x0,
    0x117 => 0x0,
    0x118 => 0x0,
    0x119 => 0x0,
    0x11a => 0x0,
    0x11b => 0x0,
    0x11c => 0x0,
    0x11d => 0x0,
    0x11e => 0x0,
    0x11f => 0x0,
    0x120 => 0x980,
    0x121 => 0x0,
    0x122 => 0x0,
    0x123 => 0x0,
    0x124 => 0x0,
    0x125 => 0x0,
    0x126 => 0x0,
    0x127 => 0x0,
    0x128 => 0x0,
    0x129 => 0x0,
    0x12a => 0x0,
    0x12b => 0x0,
    0x12c => 0x0,
    0x12d => 0x0,
    0x12e => 0x0,
    0x12f => 0x0,
    0x130 => 0x0,
    0x131 => 0x0,
    0x132 => 0x0,
    0x133 => 0x0,
    0x134 => 0x0,
    0x135 => 0x0,
    0x136 => 0x0,
    0x137 => 0x0,
    0x138 => 0x0,
    0x139 => 0x0,
    0x13a => 0x0,
    0x13b => 0x0,
    0x13c => 0x0,
    0x13d => 0x0,
    0x13e => 0x0,
    0x13f => 0x0,
    0x140 => 0x980,
    0x141 => 0x0,
    0x142 => 0x0,
    0x143 => 0x0,
    0x144 => 0x0,
    0x145 => 0x0,
    0x146 => 0x0,
    0x147 => 0x0,
    0x148 => 0x0,
    0x149 => 0x0,
    0x14a => 0x0,
    0x14b => 0x0,
    0x14c => 0x0,
    0x14d => 0x0,
    0x14e => 0x0,
    0x14f => 0x0,
    0x150 => 0x0,
    0x151 => 0x0,
    0x152 => 0x0,
    0x153 => 0x0,
    0x154 => 0x0,
    0x155 => 0x0,
    0x156 => 0x0,
    0x157 => 0x0,
    0x158 => 0x0,
    0x159 => 0x0,
    0x15a => 0x0,
    0x15b => 0x0,
    0x15c => 0x0,
    0x15d => 0x0,
    0x15e => 0x0,
    0x15f => 0x0,
    0x160 => 0x980,
    0x161 => 0x0,
    0x162 => 0x0,
    0x163 => 0x0,
    0x164 => 0x0,
    0x165 => 0x0,
    0x166 => 0x0,
    0x167 => 0x0,
    0x168 => 0x0,
    0x169 => 0x0,
    0x16a => 0x0,
    0x16b => 0x0,
    0x16c => 0x0,
    0x16d => 0x0,
    0x16e => 0x0,
    0x16f => 0x0,
    0x170 => 0x0,
    0x171 => 0x0,
    0x172 => 0x0,
    0x173 => 0x0,
    0x174 => 0x0,
    0x175 => 0x0,
    0x176 => 0x0,
    0x177 => 0x0,
    0x178 => 0x0,
    0x179 => 0x0,
    0x17a => 0x0,
    0x17b => 0x0,
    0x17c => 0x0,
    0x17d => 0x0,
    0x17e => 0x0,
    0x17f => 0x0,
    0x180 => 0x980,
    0x181 => 0x0,
    0x182 => 0x0,
    0x183 => 0x0,
    0x184 => 0x0,
    0x185 => 0x0,
    0x186 => 0x0,
    0x187 => 0x0,
    0x188 => 0x0,
    0x189 => 0x0,
    0x18a => 0x0,
    0x18b => 0x0,
    0x18c => 0x0,
    0x18d => 0x0,
    0x18e => 0x0,
    0x18f => 0x0,
    0x190 => 0x0,
    0x191 => 0x0,
    0x192 => 0x0,
    0x193 => 0x0,
    0x194 => 0x0,
    0x195 => 0x0,
    0x196 => 0x0,
    0x197 => 0x0,
    0x198 => 0x0,
    0x199 => 0x0,
    0x19a => 0x0,
    0x19b => 0x0,
    0x19c => 0x0,
    0x19d => 0x0,
    0x19e => 0x0,
    0x19f => 0x0,
    0x1a0 => 0x980,
    0x1a1 => 0x0,
    0x1a2 => 0x0,
    0x1a3 => 0x0,
    0x1a4 => 0x0,
    0x1a5 => 0x0,
    0x1a6 => 0x0,
    0x1a7 => 0x0,
    0x1a8 => 0x0,
    0x1a9 => 0x0,
    0x1aa => 0x0,
    0x1ab => 0x0,
    0x1ac => 0x0,
    0x1ad => 0x0,
    0x1ae => 0x0,
    0x1af => 0x0,
    0x1b0 => 0x0,
    0x1b1 => 0x0,
    0x1b2 => 0x0,
    0x1b3 => 0x0,
    0x1b4 => 0x0,
    0x1b5 => 0x0,
    0x1b6 => 0x0,
    0x1b7 => 0x0,
    0x1b8 => 0x0,
    0x1b9 => 0x0,
    0x1ba => 0x0,
    0x1bb => 0x0,
    0x1bc => 0x0,
    0x1bd => 0x0,
    0x1be => 0x0,
    0x1bf => 0x0,
    0x1c0 => 0x980,
    0x1c1 => 0x0,
    0x1c2 => 0x0,
    0x1c3 => 0x0,
    0x1c4 => 0x0,
    0x1c5 => 0x0,
    0x1c6 => 0x0,
    0x1c7 => 0x0,
    0x1c8 => 0x0,
    0x1c9 => 0x0,
    0x1ca => 0x0,
    0x1cb => 0x0,
    0x1cc => 0x0,
    0x1cd => 0x0,
    0x1ce => 0x0,
    0x1cf => 0x0,
    0x1d0 => 0x0,
    0x1d1 => 0x0,
    0x1d2 => 0x0,
    0x1d3 => 0x0,
    0x1d4 => 0x0,
    0x1d5 => 0x0,
    0x1d6 => 0x0,
    0x1d7 => 0x0,
    0x1d8 => 0x0,
    0x1d9 => 0x0,
    0x1da => 0x0,
    0x1db => 0x0,
    0x1dc => 0x0,
    0x1dd => 0x0,
    0x1de => 0x0,
    0x1df => 0x0,
    0x1e0 => 0x980,
    0x1e1 => 0x0,
    0x1e2 => 0x0,
    0x1e3 => 0x0,
    0x1e4 => 0x0,
    0x1e5 => 0x0,
    0x1e6 => 0x0,
    0x1e7 => 0x0,
    0x1e8 => 0x0,
    0x1e9 => 0x0,
    0x1ea => 0x0,
    0x1eb => 0x0,
    0x1ec => 0x0,
    0x1ed => 0x0,
    0x1ee => 0x0,
    0x1ef => 0x0,
    0x1f0 => 0x0,
    0x1f1 => 0x0,
    0x1f2 => 0x0,
    0x1f3 => 0x0,
    0x1f4 => 0x0,
    0x1f5 => 0x0,
    0x1f6 => 0x0,
    0x1f7 => 0x0,
    0x1f8 => 0x0,
    0x1f9 => 0x0,
    0x1fa => 0x0,
    0x1fb => 0x0,
    0x1fc => 0x0,
    0x1fd => 0x0,
    0x1fe => 0x0,
    0x1ff => 0x0,
    0x200 => 0x980,
    0x201 => 0x0,
    0x202 => 0x0,
    0x203 => 0x0,
    0x204 => 0x0,
    0x205 => 0x0,
    0x206 => 0x0,
    0x207 => 0x0,
    0x208 => 0x0,
    0x209 => 0x0,
    0x20a => 0x0,
    0x20b => 0x0,
    0x20c => 0x0,
    0x20d => 0x0,
    0x20e => 0x0,
    0x20f => 0x0,
    0x210 => 0x0,
    0x211 => 0x0,
    0x212 => 0x0,
    0x213 => 0x0,
    0x214 => 0x0,
    0x215 => 0x0,
    0x216 => 0x0,
    0x217 => 0x0,
    0x218 => 0x0,
    0x219 => 0x0,
    0x21a => 0x0,
    0x21b => 0x0,
    0x21c => 0x0,
    0x21d => 0x0,
    0x21e => 0x0,
    0x21f => 0x0,
    0x220 => 0x980,
    0x221 => 0x0,
    0x222 => 0x0,
    0x223 => 0x0,
    0x224 => 0x0,
    0x225 => 0x0,
    0x226 => 0x0,
    0x227 => 0x0,
    0x228 => 0x0,
    0x229 => 0x0,
    0x22a => 0x0,
    0x22b => 0x0,
    0x22c => 0x0,
    0x22d => 0x0,
    0x22e => 0x0,
    0x22f => 0x0,
    0x230 => 0x0,
    0x231 => 0x0,
    0x232 => 0x0,
    0x233 => 0x0,
    0x234 => 0x0,
    0x235 => 0x0,
    0x236 => 0x0,
    0x237 => 0x0,
    0x238 => 0x0,
    0x239 => 0x0,
    0x23a => 0x0,
    0x23b => 0x0,
    0x23c => 0x0,
    0x23d => 0x0,
    0x23e => 0x0,
    0x23f => 0x0,
    0x240 => 0x980,
    0x241 => 0x0,
    0x242 => 0x0,
    0x243 => 0x0,
    0x244 => 0x0,
    0x245 => 0x0,
    0x246 => 0x0,
    0x247 => 0x0,
    0x248 => 0x0,
    0x249 => 0x0,
    0x24a => 0x0,
    0x24b => 0x0,
    0x24c => 0x0,
    0x24d => 0x0,
    0x24e => 0x0,
    0x24f => 0x0,
    0x250 => 0x0,
    0x251 => 0x0,
    0x252 => 0x0,
    0x253 => 0x0,
    0x254 => 0x0,
    0x255 => 0x0,
    0x256 => 0x0,
    0x257 => 0x0,
    0x258 => 0x0,
    0x259 => 0x0,
    0x25a => 0x0,
    0x25b => 0x0,
    0x25c => 0x0,
    0x25d => 0x0,
    0x25e => 0x0,
    0x25f => 0x0,
    0x260 => 0x980,
    0x261 => 0x0,
    0x262 => 0x0,
    0x263 => 0x0,
    0x264 => 0x0,
    0x265 => 0x0,
    0x266 => 0x0,
    0x267 => 0x0,
    0x268 => 0x0,
    0x269 => 0x0,
    0x26a => 0x0,
    0x26b => 0x0,
    0x26c => 0x0,
    0x26d => 0x0,
    0x26e => 0x0,
    0x26f => 0x0,
    0x270 => 0x0,
    0x271 => 0x0,
    0x272 => 0x0,
    0x273 => 0x0,
    0x274 => 0x0,
    0x275 => 0x0,
    0x276 => 0x0,
    0x277 => 0x0,
    0x278 => 0x0,
    0x279 => 0x0,
    0x27a => 0x0,
    0x27b => 0x0,
    0x27c => 0x0,
    0x27d => 0x0,
    0x27e => 0x0,
    0x27f => 0x0,
    0x280 => 0x980,
    0x281 => 0x0,
    0x282 => 0x0,
    0x283 => 0x0,
    0x284 => 0x0,
    0x285 => 0x0,
    0x286 => 0x0,
    0x287 => 0x0,
    0x288 => 0x0,
    0x289 => 0x0,
    0x28a => 0x0,
    0x28b => 0x0,
    0x28c => 0x0,
    0x28d => 0x0,
    0x28e => 0x0,
    0x28f => 0x0,
    0x290 => 0x0,
    0x291 => 0x0,
    0x292 => 0x0,
    0x293 => 0x0,
    0x294 => 0x0,
    0x295 => 0x0,
    0x296 => 0x0,
    0x297 => 0x0,
    0x298 => 0x0,
    0x299 => 0x0,
    0x29a => 0x0,
    0x29b => 0x0,
    0x29c => 0x0,
    0x29d => 0x0,
    0x29e => 0x0,
    0x29f => 0x0,
    0x2a0 => 0x980,
    0x2a1 => 0x0,
    0x2a2 => 0x0,
    0x2a3 => 0x0,
    0x2a4 => 0x0,
    0x2a5 => 0x0,
    0x2a6 => 0x0,
    0x2a7 => 0x0,
    0x2a8 => 0x0,
    0x2a9 => 0x0,
    0x2aa => 0x0,
    0x2ab => 0x0,
    0x2ac => 0x0,
    0x2ad => 0x0,
    0x2ae => 0x0,
    0x2af => 0x0,
    0x2b0 => 0x0,
    0x2b1 => 0x0,
    0x2b2 => 0x0,
    0x2b3 => 0x0,
    0x2b4 => 0x0,
    0x2b5 => 0x0,
    0x2b6 => 0x0,
    0x2b7 => 0x0,
    0x2b8 => 0x0,
    0x2b9 => 0x0,
    0x2ba => 0x0,
    0x2bb => 0x0,
    0x2bc => 0x0,
    0x2bd => 0x0,
    0x2be => 0x0,
    0x2bf => 0x0,
    0x2c0 => 0x980,
    0x2c1 => 0x0,
    0x2c2 => 0x0,
    0x2c3 => 0x0,
    0x2c4 => 0x0,
    0x2c5 => 0x0,
    0x2c6 => 0x0,
    0x2c7 => 0x0,
    0x2c8 => 0x0,
    0x2c9 => 0x0,
    0x2ca => 0x0,
    0x2cb => 0x0,
    0x2cc => 0x0,
    0x2cd => 0x0,
    0x2ce => 0x0,
    0x2cf => 0x0,
    0x2d0 => 0x0,
    0x2d1 => 0x0,
    0x2d2 => 0x0,
    0x2d3 => 0x0,
    0x2d4 => 0x0,
    0x2d5 => 0x0,
    0x2d6 => 0x0,
    0x2d7 => 0x0,
    0x2d8 => 0x0,
    0x2d9 => 0x0,
    0x2da => 0x0,
    0x2db => 0x0,
    0x2dc => 0x0,
    0x2dd => 0x0,
    0x2de => 0x0,
    0x2df => 0x0,
    0x2e0 => 0x980,
    0x2e1 => 0x0,
    0x2e2 => 0x0,
    0x2e3 => 0x0,
    0x2e4 => 0x0,
    0x2e5 => 0x0,
    0x2e6 => 0x0,
    0x2e7 => 0x0,
    0x2e8 => 0x0,
    0x2e9 => 0x0,
    0x2ea => 0x0,
    0x2eb => 0x0,
    0x2ec => 0x0,
    0x2ed => 0x0,
    0x2ee => 0x0,
    0x2ef => 0x0,
    0x2f0 => 0x0,
    0x2f1 => 0x0,
    0x2f2 => 0x0,
    0x2f3 => 0x0,
    0x2f4 => 0x0,
    0x2f5 => 0x0,
    0x2f6 => 0x0,
    0x2f7 => 0x0,
    0x2f8 => 0x0,
    0x2f9 => 0x0,
    0x2fa => 0x0,
    0x2fb => 0x0,
    0x2fc => 0x0,
    0x2fd => 0x0,
    0x2fe => 0x0,
    0x2ff => 0x0,
    0x300 => 0x980,
    0x301 => 0x0,
    0x302 => 0x0,
    0x303 => 0x0,
    0x304 => 0x0,
    0x305 => 0x0,
    0x306 => 0x0,
    0x307 => 0x0,
    0x308 => 0x0,
    0x309 => 0x0,
    0x30a => 0x0,
    0x30b => 0x0,
    0x30c => 0x0,
    0x30d => 0x0,
    0x30e => 0x0,
    0x30f => 0x0,
    0x310 => 0x0,
    0x311 => 0x0,
    0x312 => 0x0,
    0x313 => 0x0,
    0x314 => 0x0,
    0x315 => 0x0,
    0x316 => 0x0,
    0x317 => 0x0,
    0x318 => 0x0,
    0x319 => 0x0,
    0x31a => 0x0,
    0x31b => 0x0,
    0x31c => 0x0,
    0x31d => 0x0,
    0x31e => 0x0,
    0x31f => 0x0,
    0x320 => 0x980,
    0x321 => 0x0,
    0x322 => 0x0,
    0x323 => 0x0,
    0x324 => 0x0,
    0x325 => 0x0,
    0x326 => 0x0,
    0x327 => 0x0,
    0x328 => 0x0,
    0x329 => 0x0,
    0x32a => 0x0,
    0x32b => 0x0,
    0x32c => 0x0,
    0x32d => 0x0,
    0x32e => 0x0,
    0x32f => 0x0,
    0x330 => 0x0,
    0x331 => 0x0,
    0x332 => 0x0,
    0x333 => 0x0,
    0x334 => 0x0,
    0x335 => 0x0,
    0x336 => 0x0,
    0x337 => 0x0,
    0x338 => 0x0,
    0x339 => 0x0,
    0x33a => 0x0,
    0x33b => 0x0,
    0x33c => 0x0,
    0x33d => 0x0,
    0x33e => 0x0,
    0x33f => 0x0,
    0x340 => 0x980,
    0x341 => 0x0,
    0x342 => 0x0,
    0x343 => 0x0,
    0x344 => 0x0,
    0x345 => 0x0,
    0x346 => 0x0,
    0x347 => 0x0,
    0x348 => 0x0,
    0x349 => 0x0,
    0x34a => 0x0,
    0x34b => 0x0,
    0x34c => 0x0,
    0x34d => 0x0,
    0x34e => 0x0,
    0x34f => 0x0,
    0x350 => 0x0,
    0x351 => 0x0,
    0x352 => 0x0,
    0x353 => 0x0,
    0x354 => 0x0,
    0x355 => 0x0,
    0x356 => 0x0,
    0x357 => 0x0,
    0x358 => 0x0,
    0x359 => 0x0,
    0x35a => 0x0,
    0x35b => 0x0,
    0x35c => 0x0,
    0x35d => 0x0,
    0x35e => 0x0,
    0x35f => 0x0,
    0x360 => 0x980,
    0x361 => 0x0,
    0x362 => 0x0,
    0x363 => 0x0,
    0x364 => 0x0,
    0x365 => 0x0,
    0x366 => 0x0,
    0x367 => 0x0,
    0x368 => 0x0,
    0x369 => 0x0,
    0x36a => 0x0,
    0x36b => 0x0,
    0x36c => 0x0,
    0x36d => 0x0,
    0x36e => 0x0,
    0x36f => 0x0,
    0x370 => 0x0,
    0x371 => 0x0,
    0x372 => 0x0,
    0x373 => 0x0,
    0x374 => 0x0,
    0x375 => 0x0,
    0x376 => 0x0,
    0x377 => 0x0,
    0x378 => 0x0,
    0x379 => 0x0,
    0x37a => 0x0,
    0x37b => 0x0,
    0x37c => 0x0,
    0x37d => 0x0,
    0x37e => 0x0,
    0x37f => 0x0,
    0x380 => 0x980,
    0x381 => 0x0,
    0x382 => 0x0,
    0x383 => 0x0,
    0x384 => 0x0,
    0x385 => 0x0,
    0x386 => 0x0,
    0x387 => 0x0,
    0x388 => 0x0,
    0x389 => 0x0,
    0x38a => 0x0,
    0x38b => 0x0,
    0x38c => 0x0,
    0x38d => 0x0,
    0x38e => 0x0,
    0x38f => 0x0,
    0x390 => 0x0,
    0x391 => 0x0,
    0x392 => 0x0,
    0x393 => 0x0,
    0x394 => 0x0,
    0x395 => 0x0,
    0x396 => 0x0,
    0x397 => 0x0,
    0x398 => 0x0,
    0x399 => 0x0,
    0x39a => 0x0,
    0x39b => 0x0,
    0x39c => 0x0,
    0x39d => 0x0,
    0x39e => 0x0,
    0x39f => 0x0,
    0x3a0 => 0x980,
    0x3a1 => 0x0,
    0x3a2 => 0x0,
    0x3a3 => 0x0,
    0x3a4 => 0x0,
    0x3a5 => 0x0,
    0x3a6 => 0x0,
    0x3a7 => 0x0,
    0x3a8 => 0x0,
    0x3a9 => 0x0,
    0x3aa => 0x0,
    0x3ab => 0x0,
    0x3ac => 0x0,
    0x3ad => 0x0,
    0x3ae => 0x0,
    0x3af => 0x0,
    0x3b0 => 0x0,
    0x3b1 => 0x0,
    0x3b2 => 0x0,
    0x3b3 => 0x0,
    0x3b4 => 0x0,
    0x3b5 => 0x0,
    0x3b6 => 0x0,
    0x3b7 => 0x0,
    0x3b8 => 0x0,
    0x3b9 => 0x0,
    0x3ba => 0x0,
    0x3bb => 0x0,
    0x3bc => 0x0,
    0x3bd => 0x0,
    0x3be => 0x0,
    0x3bf => 0x0,
    0x3c0 => 0x980,
    0x3c1 => 0x0,
    0x3c2 => 0x0,
    0x3c3 => 0x0,
    0x3c4 => 0x0,
    0x3c5 => 0x0,
    0x3c6 => 0x0,
    0x3c7 => 0x0,
    0x3c8 => 0x0,
    0x3c9 => 0x0,
    0x3ca => 0x0,
    0x3cb => 0x0,
    0x3cc => 0x0,
    0x3cd => 0x0,
    0x3ce => 0x0,
    0x3cf => 0x0,
    0x3d0 => 0x0,
    0x3d1 => 0x0,
    0x3d2 => 0x0,
    0x3d3 => 0x0,
    0x3d4 => 0x0,
    0x3d5 => 0x0,
    0x3d6 => 0x0,
    0x3d7 => 0x0,
    0x3d8 => 0x0,
    0x3d9 => 0x0,
    0x3da => 0x0,
    0x3db => 0x0,
    0x3dc => 0x0,
    0x3dd => 0x0,
    0x3de => 0x0,
    0x3df => 0x0,
    0x3e0 => 0x980,
    0x3e1 => 0x0,
    0x3e2 => 0x0,
    0x3e3 => 0x0,
    0x3e4 => 0x0,
    0x3e5 => 0x0,
    0x3e6 => 0x0,
    0x3e7 => 0x0,
    0x3e8 => 0x0,
    0x3e9 => 0x0,
    0x3ea => 0x0,
    0x3eb => 0x0,
    0x3ec => 0x0,
    0x3ed => 0x0,
    0x3ee => 0x0,
    0x3ef => 0x0,
    0x3f0 => 0x0,
    0x3f1 => 0x0,
    0x3f2 => 0x0,
    0x3f3 => 0x0,
    0x3f4 => 0x0,
    0x3f5 => 0x0,
    0x3f6 => 0x0,
    0x3f7 => 0x0,
    0x3f8 => 0x0,
    0x3f9 => 0x0,
    0x3fa => 0x0,
    0x3fb => 0x0,
    0x3fc => 0x0,
    0x3fd => 0x0,
    0x3fe => 0x0,
    0x3ff => 0x0,
    0x400 => 0x0,
    0x401 => 0x0,
    0x402 => 0x0,
    0x403 => 0x0,
    0x404 => 0x0,
    0x405 => 0x0,
    0x406 => 0x0,
    0x407 => 0x0,
    0x408 => 0x0,
    0x409 => 0x0,
    0x40a => 0x0,
    0x40b => 0x0,
    0x40c => 0x0,
    0x40d => 0x0,
    0x40e => 0x0,
    0x40f => 0x0,
    0x410 => 0x0,
    0x411 => 0x0,
    0x412 => 0x0,
    0x413 => 0x0,
    0x414 => 0x0,
    0x415 => 0x0,
    0x416 => 0x0,
    0x417 => 0x0,
    0x418 => 0x0,
    0x419 => 0x0,
    0x41a => 0x0,
    0x41b => 0x0,
    0x41c => 0x0,
    0x41d => 0x0,
    0x41e => 0x0,
    0x41f => 0x0,
    0x420 => 0x0,
    0x421 => 0x0,
    0x422 => 0x0,
    0x423 => 0x0,
    0x424 => 0x0,
    0x425 => 0x0,
    0x426 => 0x0,
    0x427 => 0x0,
    0x428 => 0x0,
    0x429 => 0x0,
    0x42a => 0x0,
    0x42b => 0x0,
    0x42c => 0x0,
    0x42d => 0x0,
    0x42e => 0x0,
    0x42f => 0x0,
    0x430 => 0x0,
    0x431 => 0x0,
    0x432 => 0x0,
    0x433 => 0x0,
    0x434 => 0x0,
    0x435 => 0x0,
    0x436 => 0x0,
    0x437 => 0x0,
    0x438 => 0x0,
    0x439 => 0x0,
    0x43a => 0x0,
    0x43b => 0x0,
    0x43c => 0x0,
    0x43d => 0x0,
    0x43e => 0x0,
    0x43f => 0x0,
    0x440 => 0x0,
    0x441 => 0x0,
    0x442 => 0x0,
    0x443 => 0x0,
    0x444 => 0x0,
    0x445 => 0x0,
    0x446 => 0x0,
    0x447 => 0x0,
    0x448 => 0x0,
    0x449 => 0x0,
    0x44a => 0x0,
    0x44b => 0x0,
    0x44c => 0x0,
    0x44d => 0x0,
    0x44e => 0x0,
    0x44f => 0x0,
    0x450 => 0x0,
    0x451 => 0x0,
    0x452 => 0x0,
    0x453 => 0x0,
    0x454 => 0x0,
    0x455 => 0x0,
    0x456 => 0x0,
    0x457 => 0x0,
    0x458 => 0x0,
    0x459 => 0x0,
    0x45a => 0x0,
    0x45b => 0x0,
    0x45c => 0x0,
    0x45d => 0x0,
    0x45e => 0x0,
    0x45f => 0x0,
    0x460 => 0x0,
    0x461 => 0x0,
    0x462 => 0x0,
    0x463 => 0x0,
    0x464 => 0x0,
    0x465 => 0x0,
    0x466 => 0x0,
    0x467 => 0x0,
    0x468 => 0x0,
    0x469 => 0x0,
    0x46a => 0x0,
    0x46b => 0x0,
    0x46c => 0x0,
    0x46d => 0x0,
    0x46e => 0x0,
    0x46f => 0x0,
    0x470 => 0x0,
    0x471 => 0x0,
    0x472 => 0x0,
    0x473 => 0x0,
    0x474 => 0x0,
    0x475 => 0x0,
    0x476 => 0x0,
    0x477 => 0x0,
    0x478 => 0x0,
    0x479 => 0x0,
    0x47a => 0x0,
    0x47b => 0x0,
    0x47c => 0x0,
    0x47d => 0x0,
    0x47e => 0x0,
    0x47f => 0x0,
    0x480 => 0x0,
    0x481 => 0x0,
    0x482 => 0x0,
    0x483 => 0x0,
    0x484 => 0x0,
    0x485 => 0x0,
    0x486 => 0x0,
    0x487 => 0x0,
    0x488 => 0x0,
    0x489 => 0x0,
    0x48a => 0x0,
    0x48b => 0x0,
    0x48c => 0x0,
    0x48d => 0x0,
    0x48e => 0x0,
    0x48f => 0x0,
    0x490 => 0x0,
    0x491 => 0x0,
    0x492 => 0x0,
    0x493 => 0x0,
    0x494 => 0x0,
    0x495 => 0x0,
    0x496 => 0x0,
    0x497 => 0x0,
    0x498 => 0x0,
    0x499 => 0x0,
    0x49a => 0x0,
    0x49b => 0x0,
    0x49c => 0x0,
    0x49d => 0x0,
    0x49e => 0x0,
    0x49f => 0x0,
    0x4a0 => 0x0,
    0x4a1 => 0x0,
    0x4a2 => 0x0,
    0x4a3 => 0x0,
    0x4a4 => 0x0,
    0x4a5 => 0x0,
    0x4a6 => 0x0,
    0x4a7 => 0x0,
    0x4a8 => 0x0,
    0x4a9 => 0x0,
    0x4aa => 0x0,
    0x4ab => 0x0,
    0x4ac => 0x0,
    0x4ad => 0x0,
    0x4ae => 0x0,
    0x4af => 0x0,
    0x4b0 => 0x0,
    0x4b1 => 0x0,
    0x4b2 => 0x0,
    0x4b3 => 0x0,
    0x4b4 => 0x0,
    0x4b5 => 0x0,
    0x4b6 => 0x0,
    0x4b7 => 0x0,
    0x4b8 => 0x0,
    0x4b9 => 0x0,
    0x4ba => 0x0,
    0x4bb => 0x0,
    0x4bc => 0x0,
    0x4bd => 0x0,
    0x4be => 0x0,
    0x4bf => 0x0,
    0x4c0 => 0x0,
    0x4c1 => 0x0,
    0x4c2 => 0x0,
    0x4c3 => 0x0,
    0x4c4 => 0x0,
    0x4c5 => 0x0,
    0x4c6 => 0x0,
    0x4c7 => 0x0,
    0x4c8 => 0x0,
    0x4c9 => 0x0,
    0x4ca => 0x0,
    0x4cb => 0x0,
    0x4cc => 0x0,
    0x4cd => 0x0,
    0x4ce => 0x0,
    0x4cf => 0x0,
    0x4d0 => 0x0,
    0x4d1 => 0x0,
    0x4d2 => 0x0,
    0x4d3 => 0x0,
    0x4d4 => 0x0,
    0x4d5 => 0x0,
    0x4d6 => 0x0,
    0x4d7 => 0x0,
    0x4d8 => 0x0,
    0x4d9 => 0x0,
    0x4da => 0x0,
    0x4db => 0x0,
    0x4dc => 0x0,
    0x4dd => 0x0,
    0x4de => 0x0,
    0x4df => 0x0,
    0x4e0 => 0x0,
    0x4e1 => 0x0,
    0x4e2 => 0x0,
    0x4e3 => 0x0,
    0x4e4 => 0x0,
    0x4e5 => 0x0,
    0x4e6 => 0x0,
    0x4e7 => 0x0,
    0x4e8 => 0x0,
    0x4e9 => 0x0,
    0x4ea => 0x0,
    0x4eb => 0x0,
    0x4ec => 0x0,
    0x4ed => 0x0,
    0x4ee => 0x0,
    0x4ef => 0x0,
    0x4f0 => 0x0,
    0x4f1 => 0x0,
    0x4f2 => 0x0,
    0x4f3 => 0x0,
    0x4f4 => 0x0,
    0x4f5 => 0x0,
    0x4f6 => 0x0,
    0x4f7 => 0x0,
    0x4f8 => 0x0,
    0x4f9 => 0x0,
    0x4fa => 0x0,
    0x4fb => 0x0,
    0x4fc => 0x0,
    0x4fd => 0x0,
    0x4fe => 0x0,
    0x4ff => 0x0,
    0x500 => 0x0,
    0x501 => 0x0,
    0x502 => 0x0,
    0x503 => 0x0,
    0x504 => 0x0,
    0x505 => 0x0,
    0x506 => 0x0,
    0x507 => 0x0,
    0x508 => 0x0,
    0x509 => 0x0,
    0x50a => 0x0,
    0x50b => 0x0,
    0x50c => 0x0,
    0x50d => 0x0,
    0x50e => 0x0,
    0x50f => 0x0,
    0x510 => 0x0,
    0x511 => 0x0,
    0x512 => 0x0,
    0x513 => 0x0,
    0x514 => 0x0,
    0x515 => 0x0,
    0x516 => 0x0,
    0x517 => 0x0,
    0x518 => 0x0,
    0x519 => 0x0,
    0x51a => 0x0,
    0x51b => 0x0,
    0x51c => 0x0,
    0x51d => 0x0,
    0x51e => 0x0,
    0x51f => 0x0,
    0x520 => 0x0,
    0x521 => 0x0,
    0x522 => 0x0,
    0x523 => 0x0,
    0x524 => 0x0,
    0x525 => 0x0,
    0x526 => 0x0,
    0x527 => 0x0,
    0x528 => 0x0,
    0x529 => 0x0,
    0x52a => 0x0,
    0x52b => 0x0,
    0x52c => 0x0,
    0x52d => 0x0,
    0x52e => 0x0,
    0x52f => 0x0,
    0x530 => 0x0,
    0x531 => 0x0,
    0x532 => 0x0,
    0x533 => 0x0,
    0x534 => 0x0,
    0x535 => 0x0,
    0x536 => 0x0,
    0x537 => 0x0,
    0x538 => 0x0,
    0x539 => 0x0,
    0x53a => 0x0,
    0x53b => 0x0,
    0x53c => 0x0,
    0x53d => 0x0,
    0x53e => 0x0,
    0x53f => 0x0,
    0x540 => 0x0,
    0x541 => 0x0,
    0x542 => 0x0,
    0x543 => 0x0,
    0x544 => 0x0,
    0x545 => 0x0,
    0x546 => 0x0,
    0x547 => 0x0,
    0x548 => 0x0,
    0x549 => 0x0,
    0x54a => 0x0,
    0x54b => 0x0,
    0x54c => 0x0,
    0x54d => 0x0,
    0x54e => 0x0,
    0x54f => 0x0,
    0x550 => 0x0,
    0x551 => 0x0,
    0x552 => 0x0,
    0x553 => 0x0,
    0x554 => 0x0,
    0x555 => 0x0,
    0x556 => 0x0,
    0x557 => 0x0,
    0x558 => 0x0,
    0x559 => 0x0,
    0x55a => 0x0,
    0x55b => 0x0,
    0x55c => 0x0,
    0x55d => 0x0,
    0x55e => 0x0,
    0x55f => 0x0,
    0x560 => 0x0,
    0x561 => 0x0,
    0x562 => 0x0,
    0x563 => 0x0,
    0x564 => 0x0,
    0x565 => 0x0,
    0x566 => 0x0,
    0x567 => 0x0,
    0x568 => 0x0,
    0x569 => 0x0,
    0x56a => 0x0,
    0x56b => 0x0,
    0x56c => 0x0,
    0x56d => 0x0,
    0x56e => 0x0,
    0x56f => 0x0,
    0x570 => 0x0,
    0x571 => 0x0,
    0x572 => 0x0,
    0x573 => 0x0,
    0x574 => 0x0,
    0x575 => 0x0,
    0x576 => 0x0,
    0x577 => 0x0,
    0x578 => 0x0,
    0x579 => 0x0,
    0x57a => 0x0,
    0x57b => 0x0,
    0x57c => 0x0,
    0x57d => 0x0,
    0x57e => 0x0,
    0x57f => 0x0,
    0x580 => 0x0,
    0x581 => 0x0,
    0x582 => 0x0,
    0x583 => 0x0,
    0x584 => 0x0,
    0x585 => 0x0,
    0x586 => 0x0,
    0x587 => 0x0,
    0x588 => 0x0,
    0x589 => 0x0,
    0x58a => 0x0,
    0x58b => 0x0,
    0x58c => 0x0,
    0x58d => 0x0,
    0x58e => 0x0,
    0x58f => 0x0,
    0x590 => 0x0,
    0x591 => 0x0,
    0x592 => 0x0,
    0x593 => 0x0,
    0x594 => 0x0,
    0x595 => 0x0,
    0x596 => 0x0,
    0x597 => 0x0,
    0x598 => 0x0,
    0x599 => 0x0,
    0x59a => 0x0,
    0x59b => 0x0,
    0x59c => 0x0,
    0x59d => 0x0,
    0x59e => 0x0,
    0x59f => 0x0,
    0x5a0 => 0x0,
    0x5a1 => 0x0,
    0x5a2 => 0x0,
    0x5a3 => 0x0,
    0x5a4 => 0x0,
    0x5a5 => 0x0,
    0x5a6 => 0x0,
    0x5a7 => 0x0,
    0x5a8 => 0x0,
    0x5a9 => 0x0,
    0x5aa => 0x0,
    0x5ab => 0x0,
    0x5ac => 0x0,
    0x5ad => 0x0,
    0x5ae => 0x0,
    0x5af => 0x0,
    0x5b0 => 0x0,
    0x5b1 => 0x0,
    0x5b2 => 0x0,
    0x5b3 => 0x0,
    0x5b4 => 0x0,
    0x5b5 => 0x0,
    0x5b6 => 0x0,
    0x5b7 => 0x0,
    0x5b8 => 0x0,
    0x5b9 => 0x0,
    0x5ba => 0x0,
    0x5bb => 0x0,
    0x5bc => 0x0,
    0x5bd => 0x0,
    0x5be => 0x0,
    0x5bf => 0x0,
    0x5c0 => 0x0,
    0x5c1 => 0x0,
    0x5c2 => 0x0,
    0x5c3 => 0x0,
    0x5c4 => 0x0,
    0x5c5 => 0x0,
    0x5c6 => 0x0,
    0x5c7 => 0x0,
    0x5c8 => 0x0,
    0x5c9 => 0x0,
    0x5ca => 0x0,
    0x5cb => 0x0,
    0x5cc => 0x0,
    0x5cd => 0x0,
    0x5ce => 0x0,
    0x5cf => 0x0,
    0x5d0 => 0x0,
    0x5d1 => 0x0,
    0x5d2 => 0x0,
    0x5d3 => 0x0,
    0x5d4 => 0x0,
    0x5d5 => 0x0,
    0x5d6 => 0x0,
    0x5d7 => 0x0,
    0x5d8 => 0x0,
    0x5d9 => 0x0,
    0x5da => 0x0,
    0x5db => 0x0,
    0x5dc => 0x0,
    0x5dd => 0x0,
    0x5de => 0x0,
    0x5df => 0x0,
    0x5e0 => 0x0,
    0x5e1 => 0x0,
    0x5e2 => 0x0,
    0x5e3 => 0x0,
    0x5e4 => 0x0,
    0x5e5 => 0x0,
    0x5e6 => 0x0,
    0x5e7 => 0x0,
    0x5e8 => 0x0,
    0x5e9 => 0x0,
    0x5ea => 0x0,
    0x5eb => 0x0,
    0x5ec => 0x0,
    0x5ed => 0x0,
    0x5ee => 0x0,
    0x5ef => 0x0,
    0x5f0 => 0x0,
    0x5f1 => 0x0,
    0x5f2 => 0x0,
    0x5f3 => 0x0,
    0x5f4 => 0x0,
    0x5f5 => 0x0,
    0x5f6 => 0x0,
    0x5f7 => 0x0,
    0x5f8 => 0x0,
    0x5f9 => 0x0,
    0x5fa => 0x0,
    0x5fb => 0x0,
    0x5fc => 0x0,
    0x5fd => 0x0,
    0x5fe => 0x0,
    0x5ff => 0x0,
    0x600 => 0x0,
    0x601 => 0x0,
    0x602 => 0x0,
    0x603 => 0x0,
    0x604 => 0x0,
    0x605 => 0x0,
    0x606 => 0x0,
    0x607 => 0x0,
    0x608 => 0x0,
    0x609 => 0x0,
    0x60a => 0x0,
    0x60b => 0x0,
    0x60c => 0x0,
    0x60d => 0x0,
    0x60e => 0x0,
    0x60f => 0x0,
    0x610 => 0x0,
    0x611 => 0x0,
    0x612 => 0x0,
    0x613 => 0x0,
    0x614 => 0x0,
    0x615 => 0x0,
    0x616 => 0x0,
    0x617 => 0x0,
    0x618 => 0x0,
    0x619 => 0x0,
    0x61a => 0x0,
    0x61b => 0x0,
    0x61c => 0x0,
    0x61d => 0x0,
    0x61e => 0x0,
    0x61f => 0x0,
    0x620 => 0x0,
    0x621 => 0x0,
    0x622 => 0x0,
    0x623 => 0x0,
    0x624 => 0x0,
    0x625 => 0x0,
    0x626 => 0x0,
    0x627 => 0x0,
    0x628 => 0x0,
    0x629 => 0x0,
    0x62a => 0x0,
    0x62b => 0x0,
    0x62c => 0x0,
    0x62d => 0x0,
    0x62e => 0x0,
    0x62f => 0x0,
    0x630 => 0x0,
    0x631 => 0x0,
    0x632 => 0x0,
    0x633 => 0x0,
    0x634 => 0x0,
    0x635 => 0x0,
    0x636 => 0x0,
    0x637 => 0x0,
    0x638 => 0x0,
    0x639 => 0x0,
    0x63a => 0x0,
    0x63b => 0x0,
    0x63c => 0x0,
    0x63d => 0x0,
    0x63e => 0x0,
    0x63f => 0x0,
    0x640 => 0x0,
    0x641 => 0x0,
    0x642 => 0x0,
    0x643 => 0x0,
    0x644 => 0x0,
    0x645 => 0x0,
    0x646 => 0x0,
    0x647 => 0x0,
    0x648 => 0x0,
    0x649 => 0x0,
    0x64a => 0x0,
    0x64b => 0x0,
    0x64c => 0x0,
    0x64d => 0x0,
    0x64e => 0x0,
    0x64f => 0x0,
    0x650 => 0x0,
    0x651 => 0x0,
    0x652 => 0x0,
    0x653 => 0x0,
    0x654 => 0x0,
    0x655 => 0x0,
    0x656 => 0x0,
    0x657 => 0x0,
    0x658 => 0x0,
    0x659 => 0x0,
    0x65a => 0x0,
    0x65b => 0x0,
    0x65c => 0x0,
    0x65d => 0x0,
    0x65e => 0x0,
    0x65f => 0x0,
    0x660 => 0x0,
    0x661 => 0x0,
    0x662 => 0x0,
    0x663 => 0x0,
    0x664 => 0x0,
    0x665 => 0x0,
    0x666 => 0x0,
    0x667 => 0x0,
    0x668 => 0x0,
    0x669 => 0x0,
    0x66a => 0x0,
    0x66b => 0x0,
    0x66c => 0x0,
    0x66d => 0x0,
    0x66e => 0x0,
    0x66f => 0x0,
    0x670 => 0x0,
    0x671 => 0x0,
    0x672 => 0x0,
    0x673 => 0x0,
    0x674 => 0x0,
    0x675 => 0x0,
    0x676 => 0x0,
    0x677 => 0x0,
    0x678 => 0x0,
    0x679 => 0x0,
    0x67a => 0x0,
    0x67b => 0x0,
    0x67c => 0x0,
    0x67d => 0x0,
    0x67e => 0x0,
    0x67f => 0x0,
    0x680 => 0x0,
    0x681 => 0x0,
    0x682 => 0x0,
    0x683 => 0x0,
    0x684 => 0x0,
    0x685 => 0x0,
    0x686 => 0x0,
    0x687 => 0x0,
    0x688 => 0x0,
    0x689 => 0x0,
    0x68a => 0x0,
    0x68b => 0x0,
    0x68c => 0x0,
    0x68d => 0x0,
    0x68e => 0x0,
    0x68f => 0x0,
    0x690 => 0x0,
    0x691 => 0x0,
    0x692 => 0x0,
    0x693 => 0x0,
    0x694 => 0x0,
    0x695 => 0x0,
    0x696 => 0x0,
    0x697 => 0x0,
    0x698 => 0x0,
    0x699 => 0x0,
    0x69a => 0x0,
    0x69b => 0x0,
    0x69c => 0x0,
    0x69d => 0x0,
    0x69e => 0x0,
    0x69f => 0x0,
    0x6a0 => 0x0,
    0x6a1 => 0x0,
    0x6a2 => 0x0,
    0x6a3 => 0x0,
    0x6a4 => 0x0,
    0x6a5 => 0x0,
    0x6a6 => 0x0,
    0x6a7 => 0x0,
    0x6a8 => 0x0,
    0x6a9 => 0x0,
    0x6aa => 0x0,
    0x6ab => 0x0,
    0x6ac => 0x0,
    0x6ad => 0x0,
    0x6ae => 0x0,
    0x6af => 0x0,
    0x6b0 => 0x0,
    0x6b1 => 0x0,
    0x6b2 => 0x0,
    0x6b3 => 0x0,
    0x6b4 => 0x0,
    0x6b5 => 0x0,
    0x6b6 => 0x0,
    0x6b7 => 0x0,
    0x6b8 => 0x0,
    0x6b9 => 0x0,
    0x6ba => 0x0,
    0x6bb => 0x0,
    0x6bc => 0x0,
    0x6bd => 0x0,
    0x6be => 0x0,
    0x6bf => 0x0,
    0x6c0 => 0x0,
    0x6c1 => 0x0,
    0x6c2 => 0x0,
    0x6c3 => 0x0,
    0x6c4 => 0x0,
    0x6c5 => 0x0,
    0x6c6 => 0x0,
    0x6c7 => 0x0,
    0x6c8 => 0x0,
    0x6c9 => 0x0,
    0x6ca => 0x0,
    0x6cb => 0x0,
    0x6cc => 0x0,
    0x6cd => 0x0,
    0x6ce => 0x0,
    0x6cf => 0x0,
    0x6d0 => 0x0,
    0x6d1 => 0x0,
    0x6d2 => 0x0,
    0x6d3 => 0x0,
    0x6d4 => 0x0,
    0x6d5 => 0x0,
    0x6d6 => 0x0,
    0x6d7 => 0x0,
    0x6d8 => 0x0,
    0x6d9 => 0x0,
    0x6da => 0x0,
    0x6db => 0x0,
    0x6dc => 0x0,
    0x6dd => 0x0,
    0x6de => 0x0,
    0x6df => 0x0,
    0x6e0 => 0x0,
    0x6e1 => 0x0,
    0x6e2 => 0x0,
    0x6e3 => 0x0,
    0x6e4 => 0x0,
    0x6e5 => 0x0,
    0x6e6 => 0x0,
    0x6e7 => 0x0,
    0x6e8 => 0x0,
    0x6e9 => 0x0,
    0x6ea => 0x0,
    0x6eb => 0x0,
    0x6ec => 0x0,
    0x6ed => 0x0,
    0x6ee => 0x0,
    0x6ef => 0x0,
    0x6f0 => 0x0,
    0x6f1 => 0x0,
    0x6f2 => 0x0,
    0x6f3 => 0x0,
    0x6f4 => 0x0,
    0x6f5 => 0x0,
    0x6f6 => 0x0,
    0x6f7 => 0x0,
    0x6f8 => 0x0,
    0x6f9 => 0x0,
    0x6fa => 0x0,
    0x6fb => 0x0,
    0x6fc => 0x0,
    0x6fd => 0x0,
    0x6fe => 0x0,
    0x6ff => 0x0,
    0x700 => 0x0,
    0x701 => 0x0,
    0x702 => 0x0,
    0x703 => 0x0,
    0x704 => 0x0,
    0x705 => 0x0,
    0x706 => 0x0,
    0x707 => 0x0,
    0x708 => 0x0,
    0x709 => 0x0,
    0x70a => 0x0,
    0x70b => 0x0,
    0x70c => 0x0,
    0x70d => 0x0,
    0x70e => 0x0,
    0x70f => 0x0,
    0x710 => 0x0,
    0x711 => 0x0,
    0x712 => 0x0,
    0x713 => 0x0,
    0x714 => 0x0,
    0x715 => 0x0,
    0x716 => 0x0,
    0x717 => 0x0,
    0x718 => 0x0,
    0x719 => 0x0,
    0x71a => 0x0,
    0x71b => 0x0,
    0x71c => 0x0,
    0x71d => 0x0,
    0x71e => 0x0,
    0x71f => 0x0,
    0x720 => 0x0,
    0x721 => 0x0,
    0x722 => 0x0,
    0x723 => 0x0,
    0x724 => 0x0,
    0x725 => 0x0,
    0x726 => 0x0,
    0x727 => 0x0,
    0x728 => 0x0,
    0x729 => 0x0,
    0x72a => 0x0,
    0x72b => 0x0,
    0x72c => 0x0,
    0x72d => 0x0,
    0x72e => 0x0,
    0x72f => 0x0,
    0x730 => 0x0,
    0x731 => 0x0,
    0x732 => 0x0,
    0x733 => 0x0,
    0x734 => 0x0,
    0x735 => 0x0,
    0x736 => 0x0,
    0x737 => 0x0,
    0x738 => 0x0,
    0x739 => 0x0,
    0x73a => 0x0,
    0x73b => 0x0,
    0x73c => 0x0,
    0x73d => 0x0,
    0x73e => 0x0,
    0x73f => 0x0,
    0x740 => 0x0,
    0x741 => 0x0,
    0x742 => 0x0,
    0x743 => 0x0,
    0x744 => 0x0,
    0x745 => 0x0,
    0x746 => 0x0,
    0x747 => 0x0,
    0x748 => 0x0,
    0x749 => 0x0,
    0x74a => 0x0,
    0x74b => 0x0,
    0x74c => 0x0,
    0x74d => 0x0,
    0x74e => 0x0,
    0x74f => 0x0,
    0x750 => 0x0,
    0x751 => 0x0,
    0x752 => 0x0,
    0x753 => 0x0,
    0x754 => 0x0,
    0x755 => 0x0,
    0x756 => 0x0,
    0x757 => 0x0,
    0x758 => 0x0,
    0x759 => 0x0,
    0x75a => 0x0,
    0x75b => 0x0,
    0x75c => 0x0,
    0x75d => 0x0,
    0x75e => 0x0,
    0x75f => 0x0,
    0x760 => 0x0,
    0x761 => 0x0,
    0x762 => 0x0,
    0x763 => 0x0,
    0x764 => 0x0,
    0x765 => 0x0,
    0x766 => 0x0,
    0x767 => 0x0,
    0x768 => 0x0,
    0x769 => 0x0,
    0x76a => 0x0,
    0x76b => 0x0,
    0x76c => 0x0,
    0x76d => 0x0,
    0x76e => 0x0,
    0x76f => 0x0,
    0x770 => 0x0,
    0x771 => 0x0,
    0x772 => 0x0,
    0x773 => 0x0,
    0x774 => 0x0,
    0x775 => 0x0,
    0x776 => 0x0,
    0x777 => 0x0,
    0x778 => 0x0,
    0x779 => 0x0,
    0x77a => 0x0,
    0x77b => 0x0,
    0x77c => 0x0,
    0x77d => 0x0,
    0x77e => 0x0,
    0x77f => 0x0,
    0x780 => 0x0,
    0x781 => 0x0,
    0x782 => 0x0,
    0x783 => 0x0,
    0x784 => 0x0,
    0x785 => 0x0,
    0x786 => 0x0,
    0x787 => 0x0,
    0x788 => 0x0,
    0x789 => 0x0,
    0x78a => 0x0,
    0x78b => 0x0,
    0x78c => 0x0,
    0x78d => 0x0,
    0x78e => 0x0,
    0x78f => 0x0,
    0x790 => 0x0,
    0x791 => 0x0,
    0x792 => 0x0,
    0x793 => 0x0,
    0x794 => 0x0,
    0x795 => 0x0,
    0x796 => 0x0,
    0x797 => 0x0,
    0x798 => 0x0,
    0x799 => 0x0,
    0x79a => 0x0,
    0x79b => 0x0,
    0x79c => 0x0,
    0x79d => 0x0,
    0x79e => 0x0,
    0x79f => 0x0,
    0x7a0 => 0x0,
    0x7a1 => 0x0,
    0x7a2 => 0x0,
    0x7a3 => 0x0,
    0x7a4 => 0x0,
    0x7a5 => 0x0,
    0x7a6 => 0x0,
    0x7a7 => 0x0,
    0x7a8 => 0x0,
    0x7a9 => 0x0,
    0x7aa => 0x0,
    0x7ab => 0x0,
    0x7ac => 0x0,
    0x7ad => 0x0,
    0x7ae => 0x0,
    0x7af => 0x0,
    0x7b0 => 0x0,
    0x7b1 => 0x0,
    0x7b2 => 0x0,
    0x7b3 => 0x0,
    0x7b4 => 0x0,
    0x7b5 => 0x0,
    0x7b6 => 0x0,
    0x7b7 => 0x0,
    0x7b8 => 0x0,
    0x7b9 => 0x0,
    0x7ba => 0x0,
    0x7bb => 0x0,
    0x7bc => 0x0,
    0x7bd => 0x0,
    0x7be => 0x0,
    0x7bf => 0x0,
    0x7c0 => 0x0,
    0x7c1 => 0x0,
    0x7c2 => 0x0,
    0x7c3 => 0x0,
    0x7c4 => 0x0,
    0x7c5 => 0x0,
    0x7c6 => 0x0,
    0x7c7 => 0x0,
    0x7c8 => 0x0,
    0x7c9 => 0x0,
    0x7ca => 0x0,
    0x7cb => 0x0,
    0x7cc => 0x0,
    0x7cd => 0x0,
    0x7ce => 0x0,
    0x7cf => 0x0,
    0x7d0 => 0x0,
    0x7d1 => 0x0,
    0x7d2 => 0x0,
    0x7d3 => 0x0,
    0x7d4 => 0x0,
    0x7d5 => 0x0,
    0x7d6 => 0x0,
    0x7d7 => 0x0,
    0x7d8 => 0x0,
    0x7d9 => 0x0,
    0x7da => 0x0,
    0x7db => 0x0,
    0x7dc => 0x0,
    0x7dd => 0x0,
    0x7de => 0x0,
    0x7df => 0x0,
    0x7e0 => 0x0,
    0x7e1 => 0x0,
    0x7e2 => 0x0,
    0x7e3 => 0x0,
    0x7e4 => 0x0,
    0x7e5 => 0x0,
    0x7e6 => 0x0,
    0x7e7 => 0x0,
    0x7e8 => 0x0,
    0x7e9 => 0x0,
    0x7ea => 0x0,
    0x7eb => 0x0,
    0x7ec => 0x0,
    0x7ed => 0x0,
    0x7ee => 0x0,
    0x7ef => 0x0,
    0x7f0 => 0x0,
    0x7f1 => 0x0,
    0x7f2 => 0x0,
    0x7f3 => 0x0,
    0x7f4 => 0x0,
    0x7f5 => 0x0,
    0x7f6 => 0x0,
    0x7f7 => 0x0,
    0x7f8 => 0x0,
    0x7f9 => 0x0,
    0x7fa => 0x0,
    0x7fb => 0x0,
    0x7fc => 0x0,
    0x7fd => 0x0,
    0x7fe => 0x0,
    0x7ff => 0x0,
    0x800 => 0x0,
    0x801 => 0x0,
    0x802 => 0x0,
    0x803 => 0x0,
    0x804 => 0x0,
    0x805 => 0x0,
    0x806 => 0x0,
    0x807 => 0x0,
    0x808 => 0x0,
    0x809 => 0x0,
    0x80a => 0x0,
    0x80b => 0x0,
    0x80c => 0x0,
    0x80d => 0x0,
    0x80e => 0x0,
    0x80f => 0x0,
    0x810 => 0x0,
    0x811 => 0x0,
    0x812 => 0x0,
    0x813 => 0x0,
    0x814 => 0x0,
    0x815 => 0x0,
    0x816 => 0x0,
    0x817 => 0x0,
    0x818 => 0x0,
    0x819 => 0x0,
    0x81a => 0x0,
    0x81b => 0x0,
    0x81c => 0x0,
    0x81d => 0x0,
    0x81e => 0x0,
    0x81f => 0x981,
    0x820 => 0x0,
    0x821 => 0x0,
    0x822 => 0x0,
    0x823 => 0x0,
    0x824 => 0x0,
    0x825 => 0x0,
    0x826 => 0x0,
    0x827 => 0x0,
    0x828 => 0x0,
    0x829 => 0x0,
    0x82a => 0x0,
    0x82b => 0x0,
    0x82c => 0x0,
    0x82d => 0x0,
    0x82e => 0x0,
    0x82f => 0x0,
    0x830 => 0x0,
    0x831 => 0x0,
    0x832 => 0x0,
    0x833 => 0x0,
    0x834 => 0x0,
    0x835 => 0x0,
    0x836 => 0x0,
    0x837 => 0x0,
    0x838 => 0x0,
    0x839 => 0x0,
    0x83a => 0x0,
    0x83b => 0x0,
    0x83c => 0x0,
    0x83d => 0x0,
    0x83e => 0x0,
    0x83f => 0x981,
    0x840 => 0x0,
    0x841 => 0x0,
    0x842 => 0x0,
    0x843 => 0x0,
    0x844 => 0x0,
    0x845 => 0x0,
    0x846 => 0x0,
    0x847 => 0x0,
    0x848 => 0x0,
    0x849 => 0x0,
    0x84a => 0x0,
    0x84b => 0x0,
    0x84c => 0x0,
    0x84d => 0x0,
    0x84e => 0x0,
    0x84f => 0x0,
    0x850 => 0x0,
    0x851 => 0x0,
    0x852 => 0x0,
    0x853 => 0x0,
    0x854 => 0x0,
    0x855 => 0x0,
    0x856 => 0x0,
    0x857 => 0x0,
    0x858 => 0x0,
    0x859 => 0x0,
    0x85a => 0x0,
    0x85b => 0x0,
    0x85c => 0x0,
    0x85d => 0x0,
    0x85e => 0x0,
    0x85f => 0x981,
    0x860 => 0x0,
    0x861 => 0x0,
    0x862 => 0x0,
    0x863 => 0x0,
    0x864 => 0x0,
    0x865 => 0x0,
    0x866 => 0x0,
    0x867 => 0x0,
    0x868 => 0x0,
    0x869 => 0x0,
    0x86a => 0x0,
    0x86b => 0x0,
    0x86c => 0x0,
    0x86d => 0x0,
    0x86e => 0x0,
    0x86f => 0x0,
    0x870 => 0x0,
    0x871 => 0x0,
    0x872 => 0x0,
    0x873 => 0x0,
    0x874 => 0x0,
    0x875 => 0x0,
    0x876 => 0x0,
    0x877 => 0x0,
    0x878 => 0x0,
    0x879 => 0x0,
    0x87a => 0x0,
    0x87b => 0x0,
    0x87c => 0x0,
    0x87d => 0x0,
    0x87e => 0x0,
    0x87f => 0x981,
    0x880 => 0x0,
    0x881 => 0x0,
    0x882 => 0x0,
    0x883 => 0x0,
    0x884 => 0x0,
    0x885 => 0x0,
    0x886 => 0x0,
    0x887 => 0x0,
    0x888 => 0x0,
    0x889 => 0x0,
    0x88a => 0x0,
    0x88b => 0x0,
    0x88c => 0x0,
    0x88d => 0x0,
    0x88e => 0x0,
    0x88f => 0x0,
    0x890 => 0x0,
    0x891 => 0x0,
    0x892 => 0x0,
    0x893 => 0x0,
    0x894 => 0x0,
    0x895 => 0x0,
    0x896 => 0x0,
    0x897 => 0x0,
    0x898 => 0x0,
    0x899 => 0x0,
    0x89a => 0x0,
    0x89b => 0x0,
    0x89c => 0x0,
    0x89d => 0x0,
    0x89e => 0x0,
    0x89f => 0x981,
    0x8a0 => 0x0,
    0x8a1 => 0x0,
    0x8a2 => 0x0,
    0x8a3 => 0x0,
    0x8a4 => 0x0,
    0x8a5 => 0x0,
    0x8a6 => 0x0,
    0x8a7 => 0x0,
    0x8a8 => 0x0,
    0x8a9 => 0x0,
    0x8aa => 0x0,
    0x8ab => 0x0,
    0x8ac => 0x0,
    0x8ad => 0x0,
    0x8ae => 0x0,
    0x8af => 0x0,
    0x8b0 => 0x0,
    0x8b1 => 0x0,
    0x8b2 => 0x0,
    0x8b3 => 0x0,
    0x8b4 => 0x0,
    0x8b5 => 0x0,
    0x8b6 => 0x0,
    0x8b7 => 0x0,
    0x8b8 => 0x0,
    0x8b9 => 0x0,
    0x8ba => 0x0,
    0x8bb => 0x0,
    0x8bc => 0x0,
    0x8bd => 0x0,
    0x8be => 0x0,
    0x8bf => 0x981,
    0x8c0 => 0x0,
    0x8c1 => 0x0,
    0x8c2 => 0x0,
    0x8c3 => 0x0,
    0x8c4 => 0x0,
    0x8c5 => 0x0,
    0x8c6 => 0x0,
    0x8c7 => 0x0,
    0x8c8 => 0x0,
    0x8c9 => 0x0,
    0x8ca => 0x0,
    0x8cb => 0x0,
    0x8cc => 0x0,
    0x8cd => 0x0,
    0x8ce => 0x0,
    0x8cf => 0x0,
    0x8d0 => 0x0,
    0x8d1 => 0x0,
    0x8d2 => 0x0,
    0x8d3 => 0x0,
    0x8d4 => 0x0,
    0x8d5 => 0x0,
    0x8d6 => 0x0,
    0x8d7 => 0x0,
    0x8d8 => 0x0,
    0x8d9 => 0x0,
    0x8da => 0x0,
    0x8db => 0x0,
    0x8dc => 0x0,
    0x8dd => 0x0,
    0x8de => 0x0,
    0x8df => 0x981,
    0x8e0 => 0x0,
    0x8e1 => 0x0,
    0x8e2 => 0x0,
    0x8e3 => 0x0,
    0x8e4 => 0x0,
    0x8e5 => 0x0,
    0x8e6 => 0x0,
    0x8e7 => 0x0,
    0x8e8 => 0x0,
    0x8e9 => 0x0,
    0x8ea => 0x0,
    0x8eb => 0x0,
    0x8ec => 0x0,
    0x8ed => 0x0,
    0x8ee => 0x0,
    0x8ef => 0x0,
    0x8f0 => 0x0,
    0x8f1 => 0x0,
    0x8f2 => 0x0,
    0x8f3 => 0x0,
    0x8f4 => 0x0,
    0x8f5 => 0x0,
    0x8f6 => 0x0,
    0x8f7 => 0x0,
    0x8f8 => 0x0,
    0x8f9 => 0x0,
    0x8fa => 0x0,
    0x8fb => 0x0,
    0x8fc => 0x0,
    0x8fd => 0x0,
    0x8fe => 0x0,
    0x8ff => 0x981,
    0x900 => 0x0,
    0x901 => 0x0,
    0x902 => 0x0,
    0x903 => 0x0,
    0x904 => 0x0,
    0x905 => 0x0,
    0x906 => 0x0,
    0x907 => 0x0,
    0x908 => 0x0,
    0x909 => 0x0,
    0x90a => 0x0,
    0x90b => 0x0,
    0x90c => 0x0,
    0x90d => 0x0,
    0x90e => 0x0,
    0x90f => 0x0,
    0x910 => 0x0,
    0x911 => 0x0,
    0x912 => 0x0,
    0x913 => 0x0,
    0x914 => 0x0,
    0x915 => 0x0,
    0x916 => 0x0,
    0x917 => 0x0,
    0x918 => 0x0,
    0x919 => 0x0,
    0x91a => 0x0,
    0x91b => 0x0,
    0x91c => 0x0,
    0x91d => 0x0,
    0x91e => 0x0,
    0x91f => 0x981,
    0x920 => 0x0,
    0x921 => 0x0,
    0x922 => 0x0,
    0x923 => 0x0,
    0x924 => 0x0,
    0x925 => 0x0,
    0x926 => 0x0,
    0x927 => 0x0,
    0x928 => 0x0,
    0x929 => 0x0,
    0x92a => 0x0,
    0x92b => 0x0,
    0x92c => 0x0,
    0x92d => 0x0,
    0x92e => 0x0,
    0x92f => 0x0,
    0x930 => 0x0,
    0x931 => 0x0,
    0x932 => 0x0,
    0x933 => 0x0,
    0x934 => 0x0,
    0x935 => 0x0,
    0x936 => 0x0,
    0x937 => 0x0,
    0x938 => 0x0,
    0x939 => 0x0,
    0x93a => 0x0,
    0x93b => 0x0,
    0x93c => 0x0,
    0x93d => 0x0,
    0x93e => 0x0,
    0x93f => 0x981,
    0x940 => 0x0,
    0x941 => 0x0,
    0x942 => 0x0,
    0x943 => 0x0,
    0x944 => 0x0,
    0x945 => 0x0,
    0x946 => 0x0,
    0x947 => 0x0,
    0x948 => 0x0,
    0x949 => 0x0,
    0x94a => 0x0,
    0x94b => 0x0,
    0x94c => 0x0,
    0x94d => 0x0,
    0x94e => 0x0,
    0x94f => 0x0,
    0x950 => 0x0,
    0x951 => 0x0,
    0x952 => 0x0,
    0x953 => 0x0,
    0x954 => 0x0,
    0x955 => 0x0,
    0x956 => 0x0,
    0x957 => 0x0,
    0x958 => 0x0,
    0x959 => 0x0,
    0x95a => 0x0,
    0x95b => 0x0,
    0x95c => 0x0,
    0x95d => 0x0,
    0x95e => 0x0,
    0x95f => 0x981,
    0x960 => 0x0,
    0x961 => 0x0,
    0x962 => 0x0,
    0x963 => 0x0,
    0x964 => 0x0,
    0x965 => 0x0,
    0x966 => 0x0,
    0x967 => 0x0,
    0x968 => 0x0,
    0x969 => 0x0,
    0x96a => 0x0,
    0x96b => 0x0,
    0x96c => 0x0,
    0x96d => 0x0,
    0x96e => 0x0,
    0x96f => 0x0,
    0x970 => 0x0,
    0x971 => 0x0,
    0x972 => 0x0,
    0x973 => 0x0,
    0x974 => 0x0,
    0x975 => 0x0,
    0x976 => 0x0,
    0x977 => 0x0,
    0x978 => 0x0,
    0x979 => 0x0,
    0x97a => 0x0,
    0x97b => 0x0,
    0x97c => 0x0,
    0x97d => 0x0,
    0x97e => 0x0,
    0x97f => 0x981,
    0x980 => 0x0,
    0x981 => 0x0,
    0x982 => 0x0,
    0x983 => 0x0,
    0x984 => 0x0,
    0x985 => 0x0,
    0x986 => 0x0,
    0x987 => 0x0,
    0x988 => 0x0,
    0x989 => 0x0,
    0x98a => 0x0,
    0x98b => 0x0,
    0x98c => 0x0,
    0x98d => 0x0,
    0x98e => 0x0,
    0x98f => 0x0,
    0x990 => 0x0,
    0x991 => 0x0,
    0x992 => 0x0,
    0x993 => 0x0,
    0x994 => 0x0,
    0x995 => 0x0,
    0x996 => 0x0,
    0x997 => 0x0,
    0x998 => 0x0,
    0x999 => 0x0,
    0x99a => 0x0,
    0x99b => 0x0,
    0x99c => 0x0,
    0x99d => 0x0,
    0x99e => 0x0,
    0x99f => 0x981,
    0x9a0 => 0x0,
    0x9a1 => 0x0,
    0x9a2 => 0x0,
    0x9a3 => 0x0,
    0x9a4 => 0x0,
    0x9a5 => 0x0,
    0x9a6 => 0x0,
    0x9a7 => 0x0,
    0x9a8 => 0x0,
    0x9a9 => 0x0,
    0x9aa => 0x0,
    0x9ab => 0x0,
    0x9ac => 0x0,
    0x9ad => 0x0,
    0x9ae => 0x0,
    0x9af => 0x0,
    0x9b0 => 0x0,
    0x9b1 => 0x0,
    0x9b2 => 0x0,
    0x9b3 => 0x0,
    0x9b4 => 0x0,
    0x9b5 => 0x0,
    0x9b6 => 0x0,
    0x9b7 => 0x0,
    0x9b8 => 0x0,
    0x9b9 => 0x0,
    0x9ba => 0x0,
    0x9bb => 0x0,
    0x9bc => 0x0,
    0x9bd => 0x0,
    0x9be => 0x0,
    0x9bf => 0x981,
    0x9c0 => 0x0,
    0x9c1 => 0x0,
    0x9c2 => 0x0,
    0x9c3 => 0x0,
    0x9c4 => 0x0,
    0x9c5 => 0x0,
    0x9c6 => 0x0,
    0x9c7 => 0x0,
    0x9c8 => 0x0,
    0x9c9 => 0x0,
    0x9ca => 0x0,
    0x9cb => 0x0,
    0x9cc => 0x0,
    0x9cd => 0x0,
    0x9ce => 0x0,
    0x9cf => 0x0,
    0x9d0 => 0x0,
    0x9d1 => 0x0,
    0x9d2 => 0x0,
    0x9d3 => 0x0,
    0x9d4 => 0x0,
    0x9d5 => 0x0,
    0x9d6 => 0x0,
    0x9d7 => 0x0,
    0x9d8 => 0x0,
    0x9d9 => 0x0,
    0x9da => 0x0,
    0x9db => 0x0,
    0x9dc => 0x0,
    0x9dd => 0x0,
    0x9de => 0x0,
    0x9df => 0x981,
    0x9e0 => 0x0,
    0x9e1 => 0x0,
    0x9e2 => 0x0,
    0x9e3 => 0x0,
    0x9e4 => 0x0,
    0x9e5 => 0x0,
    0x9e6 => 0x0,
    0x9e7 => 0x0,
    0x9e8 => 0x0,
    0x9e9 => 0x0,
    0x9ea => 0x0,
    0x9eb => 0x0,
    0x9ec => 0x0,
    0x9ed => 0x0,
    0x9ee => 0x0,
    0x9ef => 0x0,
    0x9f0 => 0x0,
    0x9f1 => 0x0,
    0x9f2 => 0x0,
    0x9f3 => 0x0,
    0x9f4 => 0x0,
    0x9f5 => 0x0,
    0x9f6 => 0x0,
    0x9f7 => 0x0,
    0x9f8 => 0x0,
    0x9f9 => 0x0,
    0x9fa => 0x0,
    0x9fb => 0x0,
    0x9fc => 0x0,
    0x9fd => 0x0,
    0x9fe => 0x0,
    0x9ff => 0x981,
    0xa00 => 0x0,
    0xa01 => 0x0,
    0xa02 => 0x0,
    0xa03 => 0x0,
    0xa04 => 0x0,
    0xa05 => 0x0,
    0xa06 => 0x0,
    0xa07 => 0x0,
    0xa08 => 0x0,
    0xa09 => 0x0,
    0xa0a => 0x0,
    0xa0b => 0x0,
    0xa0c => 0x0,
    0xa0d => 0x0,
    0xa0e => 0x0,
    0xa0f => 0x0,
    0xa10 => 0x0,
    0xa11 => 0x0,
    0xa12 => 0x0,
    0xa13 => 0x0,
    0xa14 => 0x0,
    0xa15 => 0x0,
    0xa16 => 0x0,
    0xa17 => 0x0,
    0xa18 => 0x0,
    0xa19 => 0x0,
    0xa1a => 0x0,
    0xa1b => 0x0,
    0xa1c => 0x0,
    0xa1d => 0x0,
    0xa1e => 0x0,
    0xa1f => 0x981,
    0xa20 => 0x0,
    0xa21 => 0x0,
    0xa22 => 0x0,
    0xa23 => 0x0,
    0xa24 => 0x0,
    0xa25 => 0x0,
    0xa26 => 0x0,
    0xa27 => 0x0,
    0xa28 => 0x0,
    0xa29 => 0x0,
    0xa2a => 0x0,
    0xa2b => 0x0,
    0xa2c => 0x0,
    0xa2d => 0x0,
    0xa2e => 0x0,
    0xa2f => 0x0,
    0xa30 => 0x0,
    0xa31 => 0x0,
    0xa32 => 0x0,
    0xa33 => 0x0,
    0xa34 => 0x0,
    0xa35 => 0x0,
    0xa36 => 0x0,
    0xa37 => 0x0,
    0xa38 => 0x0,
    0xa39 => 0x0,
    0xa3a => 0x0,
    0xa3b => 0x0,
    0xa3c => 0x0,
    0xa3d => 0x0,
    0xa3e => 0x0,
    0xa3f => 0x981,
    0xa40 => 0x0,
    0xa41 => 0x0,
    0xa42 => 0x0,
    0xa43 => 0x0,
    0xa44 => 0x0,
    0xa45 => 0x0,
    0xa46 => 0x0,
    0xa47 => 0x0,
    0xa48 => 0x0,
    0xa49 => 0x0,
    0xa4a => 0x0,
    0xa4b => 0x0,
    0xa4c => 0x0,
    0xa4d => 0x0,
    0xa4e => 0x0,
    0xa4f => 0x0,
    0xa50 => 0x0,
    0xa51 => 0x0,
    0xa52 => 0x0,
    0xa53 => 0x0,
    0xa54 => 0x0,
    0xa55 => 0x0,
    0xa56 => 0x0,
    0xa57 => 0x0,
    0xa58 => 0x0,
    0xa59 => 0x0,
    0xa5a => 0x0,
    0xa5b => 0x0,
    0xa5c => 0x0,
    0xa5d => 0x0,
    0xa5e => 0x0,
    0xa5f => 0x981,
    0xa60 => 0x0,
    0xa61 => 0x0,
    0xa62 => 0x0,
    0xa63 => 0x0,
    0xa64 => 0x0,
    0xa65 => 0x0,
    0xa66 => 0x0,
    0xa67 => 0x0,
    0xa68 => 0x0,
    0xa69 => 0x0,
    0xa6a => 0x0,
    0xa6b => 0x0,
    0xa6c => 0x0,
    0xa6d => 0x0,
    0xa6e => 0x0,
    0xa6f => 0x0,
    0xa70 => 0x0,
    0xa71 => 0x0,
    0xa72 => 0x0,
    0xa73 => 0x0,
    0xa74 => 0x0,
    0xa75 => 0x0,
    0xa76 => 0x0,
    0xa77 => 0x0,
    0xa78 => 0x0,
    0xa79 => 0x0,
    0xa7a => 0x0,
    0xa7b => 0x0,
    0xa7c => 0x0,
    0xa7d => 0x0,
    0xa7e => 0x0,
    0xa7f => 0x981,
    0xa80 => 0x0,
    0xa81 => 0x0,
    0xa82 => 0x0,
    0xa83 => 0x0,
    0xa84 => 0x0,
    0xa85 => 0x0,
    0xa86 => 0x0,
    0xa87 => 0x0,
    0xa88 => 0x0,
    0xa89 => 0x0,
    0xa8a => 0x0,
    0xa8b => 0x0,
    0xa8c => 0x0,
    0xa8d => 0x0,
    0xa8e => 0x0,
    0xa8f => 0x0,
    0xa90 => 0x0,
    0xa91 => 0x0,
    0xa92 => 0x0,
    0xa93 => 0x0,
    0xa94 => 0x0,
    0xa95 => 0x0,
    0xa96 => 0x0,
    0xa97 => 0x0,
    0xa98 => 0x0,
    0xa99 => 0x0,
    0xa9a => 0x0,
    0xa9b => 0x0,
    0xa9c => 0x0,
    0xa9d => 0x0,
    0xa9e => 0x0,
    0xa9f => 0x981,
    0xaa0 => 0x0,
    0xaa1 => 0x0,
    0xaa2 => 0x0,
    0xaa3 => 0x0,
    0xaa4 => 0x0,
    0xaa5 => 0x0,
    0xaa6 => 0x0,
    0xaa7 => 0x0,
    0xaa8 => 0x0,
    0xaa9 => 0x0,
    0xaaa => 0x0,
    0xaab => 0x0,
    0xaac => 0x0,
    0xaad => 0x0,
    0xaae => 0x0,
    0xaaf => 0x0,
    0xab0 => 0x0,
    0xab1 => 0x0,
    0xab2 => 0x0,
    0xab3 => 0x0,
    0xab4 => 0x0,
    0xab5 => 0x0,
    0xab6 => 0x0,
    0xab7 => 0x0,
    0xab8 => 0x0,
    0xab9 => 0x0,
    0xaba => 0x0,
    0xabb => 0x0,
    0xabc => 0x0,
    0xabd => 0x0,
    0xabe => 0x0,
    0xabf => 0x981,
    0xac0 => 0x0,
    0xac1 => 0x0,
    0xac2 => 0x0,
    0xac3 => 0x0,
    0xac4 => 0x0,
    0xac5 => 0x0,
    0xac6 => 0x0,
    0xac7 => 0x0,
    0xac8 => 0x0,
    0xac9 => 0x0,
    0xaca => 0x0,
    0xacb => 0x0,
    0xacc => 0x0,
    0xacd => 0x0,
    0xace => 0x0,
    0xacf => 0x0,
    0xad0 => 0x0,
    0xad1 => 0x0,
    0xad2 => 0x0,
    0xad3 => 0x0,
    0xad4 => 0x0,
    0xad5 => 0x0,
    0xad6 => 0x0,
    0xad7 => 0x0,
    0xad8 => 0x0,
    0xad9 => 0x0,
    0xada => 0x0,
    0xadb => 0x0,
    0xadc => 0x0,
    0xadd => 0x0,
    0xade => 0x0,
    0xadf => 0x981,
    0xae0 => 0x0,
    0xae1 => 0x0,
    0xae2 => 0x0,
    0xae3 => 0x0,
    0xae4 => 0x0,
    0xae5 => 0x0,
    0xae6 => 0x0,
    0xae7 => 0x0,
    0xae8 => 0x0,
    0xae9 => 0x0,
    0xaea => 0x0,
    0xaeb => 0x0,
    0xaec => 0x0,
    0xaed => 0x0,
    0xaee => 0x0,
    0xaef => 0x0,
    0xaf0 => 0x0,
    0xaf1 => 0x0,
    0xaf2 => 0x0,
    0xaf3 => 0x0,
    0xaf4 => 0x0,
    0xaf5 => 0x0,
    0xaf6 => 0x0,
    0xaf7 => 0x0,
    0xaf8 => 0x0,
    0xaf9 => 0x0,
    0xafa => 0x0,
    0xafb => 0x0,
    0xafc => 0x0,
    0xafd => 0x0,
    0xafe => 0x0,
    0xaff => 0x981,
    0xb00 => 0x0,
    0xb01 => 0x0,
    0xb02 => 0x0,
    0xb03 => 0x0,
    0xb04 => 0x0,
    0xb05 => 0x0,
    0xb06 => 0x0,
    0xb07 => 0x0,
    0xb08 => 0x0,
    0xb09 => 0x0,
    0xb0a => 0x0,
    0xb0b => 0x0,
    0xb0c => 0x0,
    0xb0d => 0x0,
    0xb0e => 0x0,
    0xb0f => 0x0,
    0xb10 => 0x0,
    0xb11 => 0x0,
    0xb12 => 0x0,
    0xb13 => 0x0,
    0xb14 => 0x0,
    0xb15 => 0x0,
    0xb16 => 0x0,
    0xb17 => 0x0,
    0xb18 => 0x0,
    0xb19 => 0x0,
    0xb1a => 0x0,
    0xb1b => 0x0,
    0xb1c => 0x0,
    0xb1d => 0x0,
    0xb1e => 0x0,
    0xb1f => 0x981,
    0xb20 => 0x0,
    0xb21 => 0x0,
    0xb22 => 0x0,
    0xb23 => 0x0,
    0xb24 => 0x0,
    0xb25 => 0x0,
    0xb26 => 0x0,
    0xb27 => 0x0,
    0xb28 => 0x0,
    0xb29 => 0x0,
    0xb2a => 0x0,
    0xb2b => 0x0,
    0xb2c => 0x0,
    0xb2d => 0x0,
    0xb2e => 0x0,
    0xb2f => 0x0,
    0xb30 => 0x0,
    0xb31 => 0x0,
    0xb32 => 0x0,
    0xb33 => 0x0,
    0xb34 => 0x0,
    0xb35 => 0x0,
    0xb36 => 0x0,
    0xb37 => 0x0,
    0xb38 => 0x0,
    0xb39 => 0x0,
    0xb3a => 0x0,
    0xb3b => 0x0,
    0xb3c => 0x0,
    0xb3d => 0x0,
    0xb3e => 0x0,
    0xb3f => 0x981,
    0xb40 => 0x0,
    0xb41 => 0x0,
    0xb42 => 0x0,
    0xb43 => 0x0,
    0xb44 => 0x0,
    0xb45 => 0x0,
    0xb46 => 0x0,
    0xb47 => 0x0,
    0xb48 => 0x0,
    0xb49 => 0x0,
    0xb4a => 0x0,
    0xb4b => 0x0,
    0xb4c => 0x0,
    0xb4d => 0x0,
    0xb4e => 0x0,
    0xb4f => 0x0,
    0xb50 => 0x0,
    0xb51 => 0x0,
    0xb52 => 0x0,
    0xb53 => 0x0,
    0xb54 => 0x0,
    0xb55 => 0x0,
    0xb56 => 0x0,
    0xb57 => 0x0,
    0xb58 => 0x0,
    0xb59 => 0x0,
    0xb5a => 0x0,
    0xb5b => 0x0,
    0xb5c => 0x0,
    0xb5d => 0x0,
    0xb5e => 0x0,
    0xb5f => 0x981,
    0xb60 => 0x0,
    0xb61 => 0x0,
    0xb62 => 0x0,
    0xb63 => 0x0,
    0xb64 => 0x0,
    0xb65 => 0x0,
    0xb66 => 0x0,
    0xb67 => 0x0,
    0xb68 => 0x0,
    0xb69 => 0x0,
    0xb6a => 0x0,
    0xb6b => 0x0,
    0xb6c => 0x0,
    0xb6d => 0x0,
    0xb6e => 0x0,
    0xb6f => 0x0,
    0xb70 => 0x0,
    0xb71 => 0x0,
    0xb72 => 0x0,
    0xb73 => 0x0,
    0xb74 => 0x0,
    0xb75 => 0x0,
    0xb76 => 0x0,
    0xb77 => 0x0,
    0xb78 => 0x0,
    0xb79 => 0x0,
    0xb7a => 0x0,
    0xb7b => 0x0,
    0xb7c => 0x0,
    0xb7d => 0x0,
    0xb7e => 0x0,
    0xb7f => 0x981,
    0xb80 => 0x0,
    0xb81 => 0x0,
    0xb82 => 0x0,
    0xb83 => 0x0,
    0xb84 => 0x0,
    0xb85 => 0x0,
    0xb86 => 0x0,
    0xb87 => 0x0,
    0xb88 => 0x0,
    0xb89 => 0x0,
    0xb8a => 0x0,
    0xb8b => 0x0,
    0xb8c => 0x0,
    0xb8d => 0x0,
    0xb8e => 0x0,
    0xb8f => 0x0,
    0xb90 => 0x0,
    0xb91 => 0x0,
    0xb92 => 0x0,
    0xb93 => 0x0,
    0xb94 => 0x0,
    0xb95 => 0x0,
    0xb96 => 0x0,
    0xb97 => 0x0,
    0xb98 => 0x0,
    0xb99 => 0x0,
    0xb9a => 0x0,
    0xb9b => 0x0,
    0xb9c => 0x0,
    0xb9d => 0x0,
    0xb9e => 0x0,
    0xb9f => 0x981,
    0xba0 => 0x0,
    0xba1 => 0x0,
    0xba2 => 0x0,
    0xba3 => 0x0,
    0xba4 => 0x0,
    0xba5 => 0x0,
    0xba6 => 0x0,
    0xba7 => 0x0,
    0xba8 => 0x0,
    0xba9 => 0x0,
    0xbaa => 0x0,
    0xbab => 0x0,
    0xbac => 0x0,
    0xbad => 0x0,
    0xbae => 0x0,
    0xbaf => 0x0,
    0xbb0 => 0x0,
    0xbb1 => 0x0,
    0xbb2 => 0x0,
    0xbb3 => 0x0,
    0xbb4 => 0x0,
    0xbb5 => 0x0,
    0xbb6 => 0x0,
    0xbb7 => 0x0,
    0xbb8 => 0x0,
    0xbb9 => 0x0,
    0xbba => 0x0,
    0xbbb => 0x0,
    0xbbc => 0x0,
    0xbbd => 0x0,
    0xbbe => 0x0,
    0xbbf => 0x981,
    0xbc0 => 0x0,
    0xbc1 => 0x0,
    0xbc2 => 0x0,
    0xbc3 => 0x0,
    0xbc4 => 0x0,
    0xbc5 => 0x0,
    0xbc6 => 0x0,
    0xbc7 => 0x0,
    0xbc8 => 0x0,
    0xbc9 => 0x0,
    0xbca => 0x0,
    0xbcb => 0x0,
    0xbcc => 0x0,
    0xbcd => 0x0,
    0xbce => 0x0,
    0xbcf => 0x0,
    0xbd0 => 0x0,
    0xbd1 => 0x0,
    0xbd2 => 0x0,
    0xbd3 => 0x0,
    0xbd4 => 0x0,
    0xbd5 => 0x0,
    0xbd6 => 0x0,
    0xbd7 => 0x0,
    0xbd8 => 0x0,
    0xbd9 => 0x0,
    0xbda => 0x0,
    0xbdb => 0x0,
    0xbdc => 0x0,
    0xbdd => 0x0,
    0xbde => 0x0,
    0xbdf => 0x981,
    0xbe0 => 0x0,
    0xbe1 => 0x0,
    0xbe2 => 0x0,
    0xbe3 => 0x0,
    0xbe4 => 0x0,
    0xbe5 => 0x0,
    0xbe6 => 0x0,
    0xbe7 => 0x0,
    0xbe8 => 0x0,
    0xbe9 => 0x0,
    0xbea => 0x0,
    0xbeb => 0x0,
    0xbec => 0x0,
    0xbed => 0x0,
    0xbee => 0x0,
    0xbef => 0x0,
    0xbf0 => 0x0,
    0xbf1 => 0x0,
    0xbf2 => 0x0,
    0xbf3 => 0x0,
    0xbf4 => 0x0,
    0xbf5 => 0x0,
    0xbf6 => 0x0,
    0xbf7 => 0x0,
    0xbf8 => 0x0,
    0xbf9 => 0x0,
    0xbfa => 0x0,
    0xbfb => 0x0,
    0xbfc => 0x0,
    0xbfd => 0x0,
    0xbfe => 0x0,
    0xbff => 0x981,
    0xc00 => 0x0,
    0xc01 => 0x0,
    0xc02 => 0x0,
    0xc03 => 0x0,
    0xc04 => 0x0,
    0xc05 => 0x0,
    0xc06 => 0x0,
    0xc07 => 0x0,
    0xc08 => 0x0,
    0xc09 => 0x0,
    0xc0a => 0x0,
    0xc0b => 0x0,
    0xc0c => 0x0,
    0xc0d => 0x0,
    0xc0e => 0x0,
    0xc0f => 0x0,
    0xc10 => 0x0,
    0xc11 => 0x0,
    0xc12 => 0x0,
    0xc13 => 0x0,
    0xc14 => 0x0,
    0xc15 => 0x0,
    0xc16 => 0x0,
    0xc17 => 0x0,
    0xc18 => 0x0,
    0xc19 => 0x0,
    0xc1a => 0x0,
    0xc1b => 0x0,
    0xc1c => 0x0,
    0xc1d => 0x0,
    0xc1e => 0x0,
    0xc1f => 0x982,
    0xc20 => 0x0,
    0xc21 => 0x0,
    0xc22 => 0x0,
    0xc23 => 0x0,
    0xc24 => 0x0,
    0xc25 => 0x0,
    0xc26 => 0x0,
    0xc27 => 0x0,
    0xc28 => 0x0,
    0xc29 => 0x0,
    0xc2a => 0x0,
    0xc2b => 0x0,
    0xc2c => 0x0,
    0xc2d => 0x0,
    0xc2e => 0x0,
    0xc2f => 0x0,
    0xc30 => 0x0,
    0xc31 => 0x0,
    0xc32 => 0x0,
    0xc33 => 0x0,
    0xc34 => 0x0,
    0xc35 => 0x0,
    0xc36 => 0x0,
    0xc37 => 0x0,
    0xc38 => 0x0,
    0xc39 => 0x0,
    0xc3a => 0x0,
    0xc3b => 0x0,
    0xc3c => 0x0,
    0xc3d => 0x0,
    0xc3e => 0x0,
    0xc3f => 0x982,
    0xc40 => 0x0,
    0xc41 => 0x0,
    0xc42 => 0x0,
    0xc43 => 0x0,
    0xc44 => 0x0,
    0xc45 => 0x0,
    0xc46 => 0x0,
    0xc47 => 0x0,
    0xc48 => 0x0,
    0xc49 => 0x0,
    0xc4a => 0x0,
    0xc4b => 0x0,
    0xc4c => 0x0,
    0xc4d => 0x0,
    0xc4e => 0x0,
    0xc4f => 0x0,
    0xc50 => 0x0,
    0xc51 => 0x0,
    0xc52 => 0x0,
    0xc53 => 0x0,
    0xc54 => 0x0,
    0xc55 => 0x0,
    0xc56 => 0x0,
    0xc57 => 0x0,
    0xc58 => 0x0,
    0xc59 => 0x0,
    0xc5a => 0x0,
    0xc5b => 0x0,
    0xc5c => 0x0,
    0xc5d => 0x0,
    0xc5e => 0x0,
    0xc5f => 0x982,
    0xc60 => 0x0,
    0xc61 => 0x0,
    0xc62 => 0x0,
    0xc63 => 0x0,
    0xc64 => 0x0,
    0xc65 => 0x0,
    0xc66 => 0x0,
    0xc67 => 0x0,
    0xc68 => 0x0,
    0xc69 => 0x0,
    0xc6a => 0x0,
    0xc6b => 0x0,
    0xc6c => 0x0,
    0xc6d => 0x0,
    0xc6e => 0x0,
    0xc6f => 0x0,
    0xc70 => 0x0,
    0xc71 => 0x0,
    0xc72 => 0x0,
    0xc73 => 0x0,
    0xc74 => 0x0,
    0xc75 => 0x0,
    0xc76 => 0x0,
    0xc77 => 0x0,
    0xc78 => 0x0,
    0xc79 => 0x0,
    0xc7a => 0x0,
    0xc7b => 0x0,
    0xc7c => 0x0,
    0xc7d => 0x0,
    0xc7e => 0x0,
    0xc7f => 0x982,
    0xc80 => 0x0,
    0xc81 => 0x0,
    0xc82 => 0x0,
    0xc83 => 0x0,
    0xc84 => 0x0,
    0xc85 => 0x0,
    0xc86 => 0x0,
    0xc87 => 0x0,
    0xc88 => 0x0,
    0xc89 => 0x0,
    0xc8a => 0x0,
    0xc8b => 0x0,
    0xc8c => 0x0,
    0xc8d => 0x0,
    0xc8e => 0x0,
    0xc8f => 0x0,
    0xc90 => 0x0,
    0xc91 => 0x0,
    0xc92 => 0x0,
    0xc93 => 0x0,
    0xc94 => 0x0,
    0xc95 => 0x0,
    0xc96 => 0x0,
    0xc97 => 0x0,
    0xc98 => 0x0,
    0xc99 => 0x0,
    0xc9a => 0x0,
    0xc9b => 0x0,
    0xc9c => 0x0,
    0xc9d => 0x0,
    0xc9e => 0x0,
    0xc9f => 0x982,
    0xca0 => 0x0,
    0xca1 => 0x0,
    0xca2 => 0x0,
    0xca3 => 0x0,
    0xca4 => 0x0,
    0xca5 => 0x0,
    0xca6 => 0x0,
    0xca7 => 0x0,
    0xca8 => 0x0,
    0xca9 => 0x0,
    0xcaa => 0x0,
    0xcab => 0x0,
    0xcac => 0x0,
    0xcad => 0x0,
    0xcae => 0x0,
    0xcaf => 0x0,
    0xcb0 => 0x0,
    0xcb1 => 0x0,
    0xcb2 => 0x0,
    0xcb3 => 0x0,
    0xcb4 => 0x0,
    0xcb5 => 0x0,
    0xcb6 => 0x0,
    0xcb7 => 0x0,
    0xcb8 => 0x0,
    0xcb9 => 0x0,
    0xcba => 0x0,
    0xcbb => 0x0,
    0xcbc => 0x0,
    0xcbd => 0x0,
    0xcbe => 0x0,
    0xcbf => 0x982,
    0xcc0 => 0x0,
    0xcc1 => 0x0,
    0xcc2 => 0x0,
    0xcc3 => 0x0,
    0xcc4 => 0x0,
    0xcc5 => 0x0,
    0xcc6 => 0x0,
    0xcc7 => 0x0,
    0xcc8 => 0x0,
    0xcc9 => 0x0,
    0xcca => 0x0,
    0xccb => 0x0,
    0xccc => 0x0,
    0xccd => 0x0,
    0xcce => 0x0,
    0xccf => 0x0,
    0xcd0 => 0x0,
    0xcd1 => 0x0,
    0xcd2 => 0x0,
    0xcd3 => 0x0,
    0xcd4 => 0x0,
    0xcd5 => 0x0,
    0xcd6 => 0x0,
    0xcd7 => 0x0,
    0xcd8 => 0x0,
    0xcd9 => 0x0,
    0xcda => 0x0,
    0xcdb => 0x0,
    0xcdc => 0x0,
    0xcdd => 0x0,
    0xcde => 0x0,
    0xcdf => 0x982,
    0xce0 => 0x0,
    0xce1 => 0x0,
    0xce2 => 0x0,
    0xce3 => 0x0,
    0xce4 => 0x0,
    0xce5 => 0x0,
    0xce6 => 0x0,
    0xce7 => 0x0,
    0xce8 => 0x0,
    0xce9 => 0x0,
    0xcea => 0x0,
    0xceb => 0x0,
    0xcec => 0x0,
    0xced => 0x0,
    0xcee => 0x0,
    0xcef => 0x0,
    0xcf0 => 0x0,
    0xcf1 => 0x0,
    0xcf2 => 0x0,
    0xcf3 => 0x0,
    0xcf4 => 0x0,
    0xcf5 => 0x0,
    0xcf6 => 0x0,
    0xcf7 => 0x0,
    0xcf8 => 0x0,
    0xcf9 => 0x0,
    0xcfa => 0x0,
    0xcfb => 0x0,
    0xcfc => 0x0,
    0xcfd => 0x0,
    0xcfe => 0x0,
    0xcff => 0x982,
    0xd00 => 0x0,
    0xd01 => 0x0,
    0xd02 => 0x0,
    0xd03 => 0x0,
    0xd04 => 0x0,
    0xd05 => 0x0,
    0xd06 => 0x0,
    0xd07 => 0x0,
    0xd08 => 0x0,
    0xd09 => 0x0,
    0xd0a => 0x0,
    0xd0b => 0x0,
    0xd0c => 0x0,
    0xd0d => 0x0,
    0xd0e => 0x0,
    0xd0f => 0x0,
    0xd10 => 0x0,
    0xd11 => 0x0,
    0xd12 => 0x0,
    0xd13 => 0x0,
    0xd14 => 0x0,
    0xd15 => 0x0,
    0xd16 => 0x0,
    0xd17 => 0x0,
    0xd18 => 0x0,
    0xd19 => 0x0,
    0xd1a => 0x0,
    0xd1b => 0x0,
    0xd1c => 0x0,
    0xd1d => 0x0,
    0xd1e => 0x0,
    0xd1f => 0x982,
    0xd20 => 0x0,
    0xd21 => 0x0,
    0xd22 => 0x0,
    0xd23 => 0x0,
    0xd24 => 0x0,
    0xd25 => 0x0,
    0xd26 => 0x0,
    0xd27 => 0x0,
    0xd28 => 0x0,
    0xd29 => 0x0,
    0xd2a => 0x0,
    0xd2b => 0x0,
    0xd2c => 0x0,
    0xd2d => 0x0,
    0xd2e => 0x0,
    0xd2f => 0x0,
    0xd30 => 0x0,
    0xd31 => 0x0,
    0xd32 => 0x0,
    0xd33 => 0x0,
    0xd34 => 0x0,
    0xd35 => 0x0,
    0xd36 => 0x0,
    0xd37 => 0x0,
    0xd38 => 0x0,
    0xd39 => 0x0,
    0xd3a => 0x0,
    0xd3b => 0x0,
    0xd3c => 0x0,
    0xd3d => 0x0,
    0xd3e => 0x0,
    0xd3f => 0x982,
    0xd40 => 0x0,
    0xd41 => 0x0,
    0xd42 => 0x0,
    0xd43 => 0x0,
    0xd44 => 0x0,
    0xd45 => 0x0,
    0xd46 => 0x0,
    0xd47 => 0x0,
    0xd48 => 0x0,
    0xd49 => 0x0,
    0xd4a => 0x0,
    0xd4b => 0x0,
    0xd4c => 0x0,
    0xd4d => 0x0,
    0xd4e => 0x0,
    0xd4f => 0x0,
    0xd50 => 0x0,
    0xd51 => 0x0,
    0xd52 => 0x0,
    0xd53 => 0x0,
    0xd54 => 0x0,
    0xd55 => 0x0,
    0xd56 => 0x0,
    0xd57 => 0x0,
    0xd58 => 0x0,
    0xd59 => 0x0,
    0xd5a => 0x0,
    0xd5b => 0x0,
    0xd5c => 0x0,
    0xd5d => 0x0,
    0xd5e => 0x0,
    0xd5f => 0x982,
    0xd60 => 0x0,
    0xd61 => 0x0,
    0xd62 => 0x0,
    0xd63 => 0x0,
    0xd64 => 0x0,
    0xd65 => 0x0,
    0xd66 => 0x0,
    0xd67 => 0x0,
    0xd68 => 0x0,
    0xd69 => 0x0,
    0xd6a => 0x0,
    0xd6b => 0x0,
    0xd6c => 0x0,
    0xd6d => 0x0,
    0xd6e => 0x0,
    0xd6f => 0x0,
    0xd70 => 0x0,
    0xd71 => 0x0,
    0xd72 => 0x0,
    0xd73 => 0x0,
    0xd74 => 0x0,
    0xd75 => 0x0,
    0xd76 => 0x0,
    0xd77 => 0x0,
    0xd78 => 0x0,
    0xd79 => 0x0,
    0xd7a => 0x0,
    0xd7b => 0x0,
    0xd7c => 0x0,
    0xd7d => 0x0,
    0xd7e => 0x0,
    0xd7f => 0x982,
    0xd80 => 0x0,
    0xd81 => 0x0,
    0xd82 => 0x0,
    0xd83 => 0x0,
    0xd84 => 0x0,
    0xd85 => 0x0,
    0xd86 => 0x0,
    0xd87 => 0x0,
    0xd88 => 0x0,
    0xd89 => 0x0,
    0xd8a => 0x0,
    0xd8b => 0x0,
    0xd8c => 0x0,
    0xd8d => 0x0,
    0xd8e => 0x0,
    0xd8f => 0x0,
    0xd90 => 0x0,
    0xd91 => 0x0,
    0xd92 => 0x0,
    0xd93 => 0x0,
    0xd94 => 0x0,
    0xd95 => 0x0,
    0xd96 => 0x0,
    0xd97 => 0x0,
    0xd98 => 0x0,
    0xd99 => 0x0,
    0xd9a => 0x0,
    0xd9b => 0x0,
    0xd9c => 0x0,
    0xd9d => 0x0,
    0xd9e => 0x0,
    0xd9f => 0x982,
    0xda0 => 0x0,
    0xda1 => 0x0,
    0xda2 => 0x0,
    0xda3 => 0x0,
    0xda4 => 0x0,
    0xda5 => 0x0,
    0xda6 => 0x0,
    0xda7 => 0x0,
    0xda8 => 0x0,
    0xda9 => 0x0,
    0xdaa => 0x0,
    0xdab => 0x0,
    0xdac => 0x0,
    0xdad => 0x0,
    0xdae => 0x0,
    0xdaf => 0x0,
    0xdb0 => 0x0,
    0xdb1 => 0x0,
    0xdb2 => 0x0,
    0xdb3 => 0x0,
    0xdb4 => 0x0,
    0xdb5 => 0x0,
    0xdb6 => 0x0,
    0xdb7 => 0x0,
    0xdb8 => 0x0,
    0xdb9 => 0x0,
    0xdba => 0x0,
    0xdbb => 0x0,
    0xdbc => 0x0,
    0xdbd => 0x0,
    0xdbe => 0x0,
    0xdbf => 0x982,
    0xdc0 => 0x0,
    0xdc1 => 0x0,
    0xdc2 => 0x0,
    0xdc3 => 0x0,
    0xdc4 => 0x0,
    0xdc5 => 0x0,
    0xdc6 => 0x0,
    0xdc7 => 0x0,
    0xdc8 => 0x0,
    0xdc9 => 0x0,
    0xdca => 0x0,
    0xdcb => 0x0,
    0xdcc => 0x0,
    0xdcd => 0x0,
    0xdce => 0x0,
    0xdcf => 0x0,
    0xdd0 => 0x0,
    0xdd1 => 0x0,
    0xdd2 => 0x0,
    0xdd3 => 0x0,
    0xdd4 => 0x0,
    0xdd5 => 0x0,
    0xdd6 => 0x0,
    0xdd7 => 0x0,
    0xdd8 => 0x0,
    0xdd9 => 0x0,
    0xdda => 0x0,
    0xddb => 0x0,
    0xddc => 0x0,
    0xddd => 0x0,
    0xdde => 0x0,
    0xddf => 0x982,
    0xde0 => 0x0,
    0xde1 => 0x0,
    0xde2 => 0x0,
    0xde3 => 0x0,
    0xde4 => 0x0,
    0xde5 => 0x0,
    0xde6 => 0x0,
    0xde7 => 0x0,
    0xde8 => 0x0,
    0xde9 => 0x0,
    0xdea => 0x0,
    0xdeb => 0x0,
    0xdec => 0x0,
    0xded => 0x0,
    0xdee => 0x0,
    0xdef => 0x0,
    0xdf0 => 0x0,
    0xdf1 => 0x0,
    0xdf2 => 0x0,
    0xdf3 => 0x0,
    0xdf4 => 0x0,
    0xdf5 => 0x0,
    0xdf6 => 0x0,
    0xdf7 => 0x0,
    0xdf8 => 0x0,
    0xdf9 => 0x0,
    0xdfa => 0x0,
    0xdfb => 0x0,
    0xdfc => 0x0,
    0xdfd => 0x0,
    0xdfe => 0x0,
    0xdff => 0x982,
    0xe00 => 0x0,
    0xe01 => 0x0,
    0xe02 => 0x0,
    0xe03 => 0x0,
    0xe04 => 0x0,
    0xe05 => 0x0,
    0xe06 => 0x0,
    0xe07 => 0x0,
    0xe08 => 0x0,
    0xe09 => 0x0,
    0xe0a => 0x0,
    0xe0b => 0x0,
    0xe0c => 0x0,
    0xe0d => 0x0,
    0xe0e => 0x0,
    0xe0f => 0x0,
    0xe10 => 0x0,
    0xe11 => 0x0,
    0xe12 => 0x0,
    0xe13 => 0x0,
    0xe14 => 0x0,
    0xe15 => 0x0,
    0xe16 => 0x0,
    0xe17 => 0x0,
    0xe18 => 0x0,
    0xe19 => 0x0,
    0xe1a => 0x0,
    0xe1b => 0x0,
    0xe1c => 0x0,
    0xe1d => 0x0,
    0xe1e => 0x0,
    0xe1f => 0x982,
    0xe20 => 0x0,
    0xe21 => 0x0,
    0xe22 => 0x0,
    0xe23 => 0x0,
    0xe24 => 0x0,
    0xe25 => 0x0,
    0xe26 => 0x0,
    0xe27 => 0x0,
    0xe28 => 0x0,
    0xe29 => 0x0,
    0xe2a => 0x0,
    0xe2b => 0x0,
    0xe2c => 0x0,
    0xe2d => 0x0,
    0xe2e => 0x0,
    0xe2f => 0x0,
    0xe30 => 0x0,
    0xe31 => 0x0,
    0xe32 => 0x0,
    0xe33 => 0x0,
    0xe34 => 0x0,
    0xe35 => 0x0,
    0xe36 => 0x0,
    0xe37 => 0x0,
    0xe38 => 0x0,
    0xe39 => 0x0,
    0xe3a => 0x0,
    0xe3b => 0x0,
    0xe3c => 0x0,
    0xe3d => 0x0,
    0xe3e => 0x0,
    0xe3f => 0x982,
    0xe40 => 0x0,
    0xe41 => 0x0,
    0xe42 => 0x0,
    0xe43 => 0x0,
    0xe44 => 0x0,
    0xe45 => 0x0,
    0xe46 => 0x0,
    0xe47 => 0x0,
    0xe48 => 0x0,
    0xe49 => 0x0,
    0xe4a => 0x0,
    0xe4b => 0x0,
    0xe4c => 0x0,
    0xe4d => 0x0,
    0xe4e => 0x0,
    0xe4f => 0x0,
    0xe50 => 0x0,
    0xe51 => 0x0,
    0xe52 => 0x0,
    0xe53 => 0x0,
    0xe54 => 0x0,
    0xe55 => 0x0,
    0xe56 => 0x0,
    0xe57 => 0x0,
    0xe58 => 0x0,
    0xe59 => 0x0,
    0xe5a => 0x0,
    0xe5b => 0x0,
    0xe5c => 0x0,
    0xe5d => 0x0,
    0xe5e => 0x0,
    0xe5f => 0x982,
    0xe60 => 0x0,
    0xe61 => 0x0,
    0xe62 => 0x0,
    0xe63 => 0x0,
    0xe64 => 0x0,
    0xe65 => 0x0,
    0xe66 => 0x0,
    0xe67 => 0x0,
    0xe68 => 0x0,
    0xe69 => 0x0,
    0xe6a => 0x0,
    0xe6b => 0x0,
    0xe6c => 0x0,
    0xe6d => 0x0,
    0xe6e => 0x0,
    0xe6f => 0x0,
    0xe70 => 0x0,
    0xe71 => 0x0,
    0xe72 => 0x0,
    0xe73 => 0x0,
    0xe74 => 0x0,
    0xe75 => 0x0,
    0xe76 => 0x0,
    0xe77 => 0x0,
    0xe78 => 0x0,
    0xe79 => 0x0,
    0xe7a => 0x0,
    0xe7b => 0x0,
    0xe7c => 0x0,
    0xe7d => 0x0,
    0xe7e => 0x0,
    0xe7f => 0x982,
    0xe80 => 0x0,
    0xe81 => 0x0,
    0xe82 => 0x0,
    0xe83 => 0x0,
    0xe84 => 0x0,
    0xe85 => 0x0,
    0xe86 => 0x0,
    0xe87 => 0x0,
    0xe88 => 0x0,
    0xe89 => 0x0,
    0xe8a => 0x0,
    0xe8b => 0x0,
    0xe8c => 0x0,
    0xe8d => 0x0,
    0xe8e => 0x0,
    0xe8f => 0x0,
    0xe90 => 0x0,
    0xe91 => 0x0,
    0xe92 => 0x0,
    0xe93 => 0x0,
    0xe94 => 0x0,
    0xe95 => 0x0,
    0xe96 => 0x0,
    0xe97 => 0x0,
    0xe98 => 0x0,
    0xe99 => 0x0,
    0xe9a => 0x0,
    0xe9b => 0x0,
    0xe9c => 0x0,
    0xe9d => 0x0,
    0xe9e => 0x0,
    0xe9f => 0x982,
    0xea0 => 0x0,
    0xea1 => 0x0,
    0xea2 => 0x0,
    0xea3 => 0x0,
    0xea4 => 0x0,
    0xea5 => 0x0,
    0xea6 => 0x0,
    0xea7 => 0x0,
    0xea8 => 0x0,
    0xea9 => 0x0,
    0xeaa => 0x0,
    0xeab => 0x0,
    0xeac => 0x0,
    0xead => 0x0,
    0xeae => 0x0,
    0xeaf => 0x0,
    0xeb0 => 0x0,
    0xeb1 => 0x0,
    0xeb2 => 0x0,
    0xeb3 => 0x0,
    0xeb4 => 0x0,
    0xeb5 => 0x0,
    0xeb6 => 0x0,
    0xeb7 => 0x0,
    0xeb8 => 0x0,
    0xeb9 => 0x0,
    0xeba => 0x0,
    0xebb => 0x0,
    0xebc => 0x0,
    0xebd => 0x0,
    0xebe => 0x0,
    0xebf => 0x982,
    0xec0 => 0x0,
    0xec1 => 0x0,
    0xec2 => 0x0,
    0xec3 => 0x0,
    0xec4 => 0x0,
    0xec5 => 0x0,
    0xec6 => 0x0,
    0xec7 => 0x0,
    0xec8 => 0x0,
    0xec9 => 0x0,
    0xeca => 0x0,
    0xecb => 0x0,
    0xecc => 0x0,
    0xecd => 0x0,
    0xece => 0x0,
    0xecf => 0x0,
    0xed0 => 0x0,
    0xed1 => 0x0,
    0xed2 => 0x0,
    0xed3 => 0x0,
    0xed4 => 0x0,
    0xed5 => 0x0,
    0xed6 => 0x0,
    0xed7 => 0x0,
    0xed8 => 0x0,
    0xed9 => 0x0,
    0xeda => 0x0,
    0xedb => 0x0,
    0xedc => 0x0,
    0xedd => 0x0,
    0xede => 0x0,
    0xedf => 0x982,
    0xee0 => 0x0,
    0xee1 => 0x0,
    0xee2 => 0x0,
    0xee3 => 0x0,
    0xee4 => 0x0,
    0xee5 => 0x0,
    0xee6 => 0x0,
    0xee7 => 0x0,
    0xee8 => 0x0,
    0xee9 => 0x0,
    0xeea => 0x0,
    0xeeb => 0x0,
    0xeec => 0x0,
    0xeed => 0x0,
    0xeee => 0x0,
    0xeef => 0x0,
    0xef0 => 0x0,
    0xef1 => 0x0,
    0xef2 => 0x0,
    0xef3 => 0x0,
    0xef4 => 0x0,
    0xef5 => 0x0,
    0xef6 => 0x0,
    0xef7 => 0x0,
    0xef8 => 0x0,
    0xef9 => 0x0,
    0xefa => 0x0,
    0xefb => 0x0,
    0xefc => 0x0,
    0xefd => 0x0,
    0xefe => 0x0,
    0xeff => 0x982,
    0xf00 => 0x0,
    0xf01 => 0x0,
    0xf02 => 0x0,
    0xf03 => 0x0,
    0xf04 => 0x0,
    0xf05 => 0x0,
    0xf06 => 0x0,
    0xf07 => 0x0,
    0xf08 => 0x0,
    0xf09 => 0x0,
    0xf0a => 0x0,
    0xf0b => 0x0,
    0xf0c => 0x0,
    0xf0d => 0x0,
    0xf0e => 0x0,
    0xf0f => 0x0,
    0xf10 => 0x0,
    0xf11 => 0x0,
    0xf12 => 0x0,
    0xf13 => 0x0,
    0xf14 => 0x0,
    0xf15 => 0x0,
    0xf16 => 0x0,
    0xf17 => 0x0,
    0xf18 => 0x0,
    0xf19 => 0x0,
    0xf1a => 0x0,
    0xf1b => 0x0,
    0xf1c => 0x0,
    0xf1d => 0x0,
    0xf1e => 0x0,
    0xf1f => 0x982,
    0xf20 => 0x0,
    0xf21 => 0x0,
    0xf22 => 0x0,
    0xf23 => 0x0,
    0xf24 => 0x0,
    0xf25 => 0x0,
    0xf26 => 0x0,
    0xf27 => 0x0,
    0xf28 => 0x0,
    0xf29 => 0x0,
    0xf2a => 0x0,
    0xf2b => 0x0,
    0xf2c => 0x0,
    0xf2d => 0x0,
    0xf2e => 0x0,
    0xf2f => 0x0,
    0xf30 => 0x0,
    0xf31 => 0x0,
    0xf32 => 0x0,
    0xf33 => 0x0,
    0xf34 => 0x0,
    0xf35 => 0x0,
    0xf36 => 0x0,
    0xf37 => 0x0,
    0xf38 => 0x0,
    0xf39 => 0x0,
    0xf3a => 0x0,
    0xf3b => 0x0,
    0xf3c => 0x0,
    0xf3d => 0x0,
    0xf3e => 0x0,
    0xf3f => 0x982,
    0xf40 => 0x0,
    0xf41 => 0x0,
    0xf42 => 0x0,
    0xf43 => 0x0,
    0xf44 => 0x0,
    0xf45 => 0x0,
    0xf46 => 0x0,
    0xf47 => 0x0,
    0xf48 => 0x0,
    0xf49 => 0x0,
    0xf4a => 0x0,
    0xf4b => 0x0,
    0xf4c => 0x0,
    0xf4d => 0x0,
    0xf4e => 0x0,
    0xf4f => 0x0,
    0xf50 => 0x0,
    0xf51 => 0x0,
    0xf52 => 0x0,
    0xf53 => 0x0,
    0xf54 => 0x0,
    0xf55 => 0x0,
    0xf56 => 0x0,
    0xf57 => 0x0,
    0xf58 => 0x0,
    0xf59 => 0x0,
    0xf5a => 0x0,
    0xf5b => 0x0,
    0xf5c => 0x0,
    0xf5d => 0x0,
    0xf5e => 0x0,
    0xf5f => 0x982,
    0xf60 => 0x0,
    0xf61 => 0x0,
    0xf62 => 0x0,
    0xf63 => 0x0,
    0xf64 => 0x0,
    0xf65 => 0x0,
    0xf66 => 0x0,
    0xf67 => 0x0,
    0xf68 => 0x0,
    0xf69 => 0x0,
    0xf6a => 0x0,
    0xf6b => 0x0,
    0xf6c => 0x0,
    0xf6d => 0x0,
    0xf6e => 0x0,
    0xf6f => 0x0,
    0xf70 => 0x0,
    0xf71 => 0x0,
    0xf72 => 0x0,
    0xf73 => 0x0,
    0xf74 => 0x0,
    0xf75 => 0x0,
    0xf76 => 0x0,
    0xf77 => 0x0,
    0xf78 => 0x0,
    0xf79 => 0x0,
    0xf7a => 0x0,
    0xf7b => 0x0,
    0xf7c => 0x0,
    0xf7d => 0x0,
    0xf7e => 0x0,
    0xf7f => 0x982,
    0xf80 => 0x0,
    0xf81 => 0x0,
    0xf82 => 0x0,
    0xf83 => 0x0,
    0xf84 => 0x0,
    0xf85 => 0x0,
    0xf86 => 0x0,
    0xf87 => 0x0,
    0xf88 => 0x0,
    0xf89 => 0x0,
    0xf8a => 0x0,
    0xf8b => 0x0,
    0xf8c => 0x0,
    0xf8d => 0x0,
    0xf8e => 0x0,
    0xf8f => 0x0,
    0xf90 => 0x0,
    0xf91 => 0x0,
    0xf92 => 0x0,
    0xf93 => 0x0,
    0xf94 => 0x0,
    0xf95 => 0x0,
    0xf96 => 0x0,
    0xf97 => 0x0,
    0xf98 => 0x0,
    0xf99 => 0x0,
    0xf9a => 0x0,
    0xf9b => 0x0,
    0xf9c => 0x0,
    0xf9d => 0x0,
    0xf9e => 0x0,
    0xf9f => 0x982,
    0xfa0 => 0x0,
    0xfa1 => 0x0,
    0xfa2 => 0x0,
    0xfa3 => 0x0,
    0xfa4 => 0x0,
    0xfa5 => 0x0,
    0xfa6 => 0x0,
    0xfa7 => 0x0,
    0xfa8 => 0x0,
    0xfa9 => 0x0,
    0xfaa => 0x0,
    0xfab => 0x0,
    0xfac => 0x0,
    0xfad => 0x0,
    0xfae => 0x0,
    0xfaf => 0x0,
    0xfb0 => 0x0,
    0xfb1 => 0x0,
    0xfb2 => 0x0,
    0xfb3 => 0x0,
    0xfb4 => 0x0,
    0xfb5 => 0x0,
    0xfb6 => 0x0,
    0xfb7 => 0x0,
    0xfb8 => 0x0,
    0xfb9 => 0x0,
    0xfba => 0x0,
    0xfbb => 0x0,
    0xfbc => 0x0,
    0xfbd => 0x0,
    0xfbe => 0x0,
    0xfbf => 0x982,
    0xfc0 => 0x0,
    0xfc1 => 0x0,
    0xfc2 => 0x0,
    0xfc3 => 0x0,
    0xfc4 => 0x0,
    0xfc5 => 0x0,
    0xfc6 => 0x0,
    0xfc7 => 0x0,
    0xfc8 => 0x0,
    0xfc9 => 0x0,
    0xfca => 0x0,
    0xfcb => 0x0,
    0xfcc => 0x0,
    0xfcd => 0x0,
    0xfce => 0x0,
    0xfcf => 0x0,
    0xfd0 => 0x0,
    0xfd1 => 0x0,
    0xfd2 => 0x0,
    0xfd3 => 0x0,
    0xfd4 => 0x0,
    0xfd5 => 0x0,
    0xfd6 => 0x0,
    0xfd7 => 0x0,
    0xfd8 => 0x0,
    0xfd9 => 0x0,
    0xfda => 0x0,
    0xfdb => 0x0,
    0xfdc => 0x0,
    0xfdd => 0x0,
    0xfde => 0x0,
    0xfdf => 0x982,
    0xfe0 => 0x0,
    0xfe1 => 0x0,
    0xfe2 => 0x0,
    0xfe3 => 0x0,
    0xfe4 => 0x0,
    0xfe5 => 0x0,
    0xfe6 => 0x0,
    0xfe7 => 0x0,
    0xfe8 => 0x0,
    0xfe9 => 0x0,
    0xfea => 0x0,
    0xfeb => 0x0,
    0xfec => 0x0,
    0xfed => 0x0,
    0xfee => 0x0,
    0xfef => 0x0,
    0xff0 => 0x0,
    0xff1 => 0x0,
    0xff2 => 0x0,
    0xff3 => 0x0,
    0xff4 => 0x0,
    0xff5 => 0x0,
    0xff6 => 0x0,
    0xff7 => 0x0,
    0xff8 => 0x0,
    0xff9 => 0x0,
    0xffa => 0x0,
    0xffb => 0x0,
    0xffc => 0x0,
    0xffd => 0x0,
    0xffe => 0x0,
    0xfff => 0x982,
    _ => 0,
  };
  return idx;
}


// BRANCHREG-BLR#0,BRANCHREG-BLR#1,BRANCHREG-BLR#2,BRANCHREG-BLR#3,BRANCHREG-BLR#4,BRANCHREG-BLR#5,BRANCHREG-BLR#6,BRANCHREG-BLR#7,BRANCHREG-BLR#8,BRANCHREG-BLR#9,BRANCHREG-BLR#10,BRANCHREG-BLR#11,BRANCHREG-BLR#12,BRANCHREG-BLR#13,BRANCHREG-BLR#14,BRANCHREG-BLR#15,BRANCHREG-BLR#16,BRANCHREG-BLR#17,BRANCHREG-BLR#18,BRANCHREG-BLR#19,BRANCHREG-BLR#20,BRANCHREG-BLR#21,BRANCHREG-BLR#22,BRANCHREG-BLR#23,BRANCHREG-BLR#24,BRANCHREG-BLR#25,BRANCHREG-BLR#26,BRANCHREG-BLR#27,BRANCHREG-BLR#28,BRANCHREG-BLR#29,BRANCHREG-BLR#30,BRANCHREG-BLR#31,BRANCHREG-BLRAAZ#0,BRANCHREG-BLRAAZ#1,BRANCHREG-BLRAAZ#2,BRANCHREG-BLRAAZ#3,BRANCHREG-BLRAAZ#4,BRANCHREG-BLRAAZ#5,BRANCHREG-BLRAAZ#6,BRANCHREG-BLRAAZ#7,BRANCHREG-BLRAAZ#8,BRANCHREG-BLRAAZ#9,BRANCHREG-BLRAAZ#10,BRANCHREG-BLRAAZ#11,BRANCHREG-BLRAAZ#12,BRANCHREG-BLRAAZ#13,BRANCHREG-BLRAAZ#14,BRANCHREG-BLRAAZ#15,BRANCHREG-BLRAAZ#16,BRANCHREG-BLRAAZ#17,BRANCHREG-BLRAAZ#18,BRANCHREG-BLRAAZ#19,BRANCHREG-BLRAAZ#20,BRANCHREG-BLRAAZ#21,BRANCHREG-BLRAAZ#22,BRANCHREG-BLRAAZ#23,BRANCHREG-BLRAAZ#24,BRANCHREG-BLRAAZ#25,BRANCHREG-BLRAAZ#26,BRANCHREG-BLRAAZ#27,BRANCHREG-BLRAAZ#28,BRANCHREG-BLRAAZ#29,BRANCHREG-BLRAAZ#30,BRANCHREG-BLRAAZ#31,BRANCHREG-BLRABZ#0,BRANCHREG-BLRABZ#1,BRANCHREG-BLRABZ#2,BRANCHREG-BLRABZ#3,BRANCHREG-BLRABZ#4,BRANCHREG-BLRABZ#5,BRANCHREG-BLRABZ#6,BRANCHREG-BLRABZ#7,BRANCHREG-BLRABZ#8,BRANCHREG-BLRABZ#9,BRANCHREG-BLRABZ#10,BRANCHREG-BLRABZ#11,BRANCHREG-BLRABZ#12,BRANCHREG-BLRABZ#13,BRANCHREG-BLRABZ#14,BRANCHREG-BLRABZ#15,BRANCHREG-BLRABZ#16,BRANCHREG-BLRABZ#17,BRANCHREG-BLRABZ#18,BRANCHREG-BLRABZ#19,BRANCHREG-BLRABZ#20,BRANCHREG-BLRABZ#21,BRANCHREG-BLRABZ#22,BRANCHREG-BLRABZ#23,BRANCHREG-BLRABZ#24,BRANCHREG-BLRABZ#25,BRANCHREG-BLRABZ#26,BRANCHREG-BLRABZ#27,BRANCHREG-BLRABZ#28,BRANCHREG-BLRABZ#29,BRANCHREG-BLRABZ#30,BRANCHREG-BLRABZ#31
pub const fn classify_impl_155(inst: u32) -> u32 {
  if (inst&0xff000) != 0xf0000 { return 0; }
  let idx = match (inst >> 0) & 0xfff {
    0x0 => 0x983,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x983,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    0x40 => 0x983,
    0x41 => 0x0,
    0x42 => 0x0,
    0x43 => 0x0,
    0x44 => 0x0,
    0x45 => 0x0,
    0x46 => 0x0,
    0x47 => 0x0,
    0x48 => 0x0,
    0x49 => 0x0,
    0x4a => 0x0,
    0x4b => 0x0,
    0x4c => 0x0,
    0x4d => 0x0,
    0x4e => 0x0,
    0x4f => 0x0,
    0x50 => 0x0,
    0x51 => 0x0,
    0x52 => 0x0,
    0x53 => 0x0,
    0x54 => 0x0,
    0x55 => 0x0,
    0x56 => 0x0,
    0x57 => 0x0,
    0x58 => 0x0,
    0x59 => 0x0,
    0x5a => 0x0,
    0x5b => 0x0,
    0x5c => 0x0,
    0x5d => 0x0,
    0x5e => 0x0,
    0x5f => 0x0,
    0x60 => 0x983,
    0x61 => 0x0,
    0x62 => 0x0,
    0x63 => 0x0,
    0x64 => 0x0,
    0x65 => 0x0,
    0x66 => 0x0,
    0x67 => 0x0,
    0x68 => 0x0,
    0x69 => 0x0,
    0x6a => 0x0,
    0x6b => 0x0,
    0x6c => 0x0,
    0x6d => 0x0,
    0x6e => 0x0,
    0x6f => 0x0,
    0x70 => 0x0,
    0x71 => 0x0,
    0x72 => 0x0,
    0x73 => 0x0,
    0x74 => 0x0,
    0x75 => 0x0,
    0x76 => 0x0,
    0x77 => 0x0,
    0x78 => 0x0,
    0x79 => 0x0,
    0x7a => 0x0,
    0x7b => 0x0,
    0x7c => 0x0,
    0x7d => 0x0,
    0x7e => 0x0,
    0x7f => 0x0,
    0x80 => 0x983,
    0x81 => 0x0,
    0x82 => 0x0,
    0x83 => 0x0,
    0x84 => 0x0,
    0x85 => 0x0,
    0x86 => 0x0,
    0x87 => 0x0,
    0x88 => 0x0,
    0x89 => 0x0,
    0x8a => 0x0,
    0x8b => 0x0,
    0x8c => 0x0,
    0x8d => 0x0,
    0x8e => 0x0,
    0x8f => 0x0,
    0x90 => 0x0,
    0x91 => 0x0,
    0x92 => 0x0,
    0x93 => 0x0,
    0x94 => 0x0,
    0x95 => 0x0,
    0x96 => 0x0,
    0x97 => 0x0,
    0x98 => 0x0,
    0x99 => 0x0,
    0x9a => 0x0,
    0x9b => 0x0,
    0x9c => 0x0,
    0x9d => 0x0,
    0x9e => 0x0,
    0x9f => 0x0,
    0xa0 => 0x983,
    0xa1 => 0x0,
    0xa2 => 0x0,
    0xa3 => 0x0,
    0xa4 => 0x0,
    0xa5 => 0x0,
    0xa6 => 0x0,
    0xa7 => 0x0,
    0xa8 => 0x0,
    0xa9 => 0x0,
    0xaa => 0x0,
    0xab => 0x0,
    0xac => 0x0,
    0xad => 0x0,
    0xae => 0x0,
    0xaf => 0x0,
    0xb0 => 0x0,
    0xb1 => 0x0,
    0xb2 => 0x0,
    0xb3 => 0x0,
    0xb4 => 0x0,
    0xb5 => 0x0,
    0xb6 => 0x0,
    0xb7 => 0x0,
    0xb8 => 0x0,
    0xb9 => 0x0,
    0xba => 0x0,
    0xbb => 0x0,
    0xbc => 0x0,
    0xbd => 0x0,
    0xbe => 0x0,
    0xbf => 0x0,
    0xc0 => 0x983,
    0xc1 => 0x0,
    0xc2 => 0x0,
    0xc3 => 0x0,
    0xc4 => 0x0,
    0xc5 => 0x0,
    0xc6 => 0x0,
    0xc7 => 0x0,
    0xc8 => 0x0,
    0xc9 => 0x0,
    0xca => 0x0,
    0xcb => 0x0,
    0xcc => 0x0,
    0xcd => 0x0,
    0xce => 0x0,
    0xcf => 0x0,
    0xd0 => 0x0,
    0xd1 => 0x0,
    0xd2 => 0x0,
    0xd3 => 0x0,
    0xd4 => 0x0,
    0xd5 => 0x0,
    0xd6 => 0x0,
    0xd7 => 0x0,
    0xd8 => 0x0,
    0xd9 => 0x0,
    0xda => 0x0,
    0xdb => 0x0,
    0xdc => 0x0,
    0xdd => 0x0,
    0xde => 0x0,
    0xdf => 0x0,
    0xe0 => 0x983,
    0xe1 => 0x0,
    0xe2 => 0x0,
    0xe3 => 0x0,
    0xe4 => 0x0,
    0xe5 => 0x0,
    0xe6 => 0x0,
    0xe7 => 0x0,
    0xe8 => 0x0,
    0xe9 => 0x0,
    0xea => 0x0,
    0xeb => 0x0,
    0xec => 0x0,
    0xed => 0x0,
    0xee => 0x0,
    0xef => 0x0,
    0xf0 => 0x0,
    0xf1 => 0x0,
    0xf2 => 0x0,
    0xf3 => 0x0,
    0xf4 => 0x0,
    0xf5 => 0x0,
    0xf6 => 0x0,
    0xf7 => 0x0,
    0xf8 => 0x0,
    0xf9 => 0x0,
    0xfa => 0x0,
    0xfb => 0x0,
    0xfc => 0x0,
    0xfd => 0x0,
    0xfe => 0x0,
    0xff => 0x0,
    0x100 => 0x983,
    0x101 => 0x0,
    0x102 => 0x0,
    0x103 => 0x0,
    0x104 => 0x0,
    0x105 => 0x0,
    0x106 => 0x0,
    0x107 => 0x0,
    0x108 => 0x0,
    0x109 => 0x0,
    0x10a => 0x0,
    0x10b => 0x0,
    0x10c => 0x0,
    0x10d => 0x0,
    0x10e => 0x0,
    0x10f => 0x0,
    0x110 => 0x0,
    0x111 => 0x0,
    0x112 => 0x0,
    0x113 => 0x0,
    0x114 => 0x0,
    0x115 => 0x0,
    0x116 => 0x0,
    0x117 => 0x0,
    0x118 => 0x0,
    0x119 => 0x0,
    0x11a => 0x0,
    0x11b => 0x0,
    0x11c => 0x0,
    0x11d => 0x0,
    0x11e => 0x0,
    0x11f => 0x0,
    0x120 => 0x983,
    0x121 => 0x0,
    0x122 => 0x0,
    0x123 => 0x0,
    0x124 => 0x0,
    0x125 => 0x0,
    0x126 => 0x0,
    0x127 => 0x0,
    0x128 => 0x0,
    0x129 => 0x0,
    0x12a => 0x0,
    0x12b => 0x0,
    0x12c => 0x0,
    0x12d => 0x0,
    0x12e => 0x0,
    0x12f => 0x0,
    0x130 => 0x0,
    0x131 => 0x0,
    0x132 => 0x0,
    0x133 => 0x0,
    0x134 => 0x0,
    0x135 => 0x0,
    0x136 => 0x0,
    0x137 => 0x0,
    0x138 => 0x0,
    0x139 => 0x0,
    0x13a => 0x0,
    0x13b => 0x0,
    0x13c => 0x0,
    0x13d => 0x0,
    0x13e => 0x0,
    0x13f => 0x0,
    0x140 => 0x983,
    0x141 => 0x0,
    0x142 => 0x0,
    0x143 => 0x0,
    0x144 => 0x0,
    0x145 => 0x0,
    0x146 => 0x0,
    0x147 => 0x0,
    0x148 => 0x0,
    0x149 => 0x0,
    0x14a => 0x0,
    0x14b => 0x0,
    0x14c => 0x0,
    0x14d => 0x0,
    0x14e => 0x0,
    0x14f => 0x0,
    0x150 => 0x0,
    0x151 => 0x0,
    0x152 => 0x0,
    0x153 => 0x0,
    0x154 => 0x0,
    0x155 => 0x0,
    0x156 => 0x0,
    0x157 => 0x0,
    0x158 => 0x0,
    0x159 => 0x0,
    0x15a => 0x0,
    0x15b => 0x0,
    0x15c => 0x0,
    0x15d => 0x0,
    0x15e => 0x0,
    0x15f => 0x0,
    0x160 => 0x983,
    0x161 => 0x0,
    0x162 => 0x0,
    0x163 => 0x0,
    0x164 => 0x0,
    0x165 => 0x0,
    0x166 => 0x0,
    0x167 => 0x0,
    0x168 => 0x0,
    0x169 => 0x0,
    0x16a => 0x0,
    0x16b => 0x0,
    0x16c => 0x0,
    0x16d => 0x0,
    0x16e => 0x0,
    0x16f => 0x0,
    0x170 => 0x0,
    0x171 => 0x0,
    0x172 => 0x0,
    0x173 => 0x0,
    0x174 => 0x0,
    0x175 => 0x0,
    0x176 => 0x0,
    0x177 => 0x0,
    0x178 => 0x0,
    0x179 => 0x0,
    0x17a => 0x0,
    0x17b => 0x0,
    0x17c => 0x0,
    0x17d => 0x0,
    0x17e => 0x0,
    0x17f => 0x0,
    0x180 => 0x983,
    0x181 => 0x0,
    0x182 => 0x0,
    0x183 => 0x0,
    0x184 => 0x0,
    0x185 => 0x0,
    0x186 => 0x0,
    0x187 => 0x0,
    0x188 => 0x0,
    0x189 => 0x0,
    0x18a => 0x0,
    0x18b => 0x0,
    0x18c => 0x0,
    0x18d => 0x0,
    0x18e => 0x0,
    0x18f => 0x0,
    0x190 => 0x0,
    0x191 => 0x0,
    0x192 => 0x0,
    0x193 => 0x0,
    0x194 => 0x0,
    0x195 => 0x0,
    0x196 => 0x0,
    0x197 => 0x0,
    0x198 => 0x0,
    0x199 => 0x0,
    0x19a => 0x0,
    0x19b => 0x0,
    0x19c => 0x0,
    0x19d => 0x0,
    0x19e => 0x0,
    0x19f => 0x0,
    0x1a0 => 0x983,
    0x1a1 => 0x0,
    0x1a2 => 0x0,
    0x1a3 => 0x0,
    0x1a4 => 0x0,
    0x1a5 => 0x0,
    0x1a6 => 0x0,
    0x1a7 => 0x0,
    0x1a8 => 0x0,
    0x1a9 => 0x0,
    0x1aa => 0x0,
    0x1ab => 0x0,
    0x1ac => 0x0,
    0x1ad => 0x0,
    0x1ae => 0x0,
    0x1af => 0x0,
    0x1b0 => 0x0,
    0x1b1 => 0x0,
    0x1b2 => 0x0,
    0x1b3 => 0x0,
    0x1b4 => 0x0,
    0x1b5 => 0x0,
    0x1b6 => 0x0,
    0x1b7 => 0x0,
    0x1b8 => 0x0,
    0x1b9 => 0x0,
    0x1ba => 0x0,
    0x1bb => 0x0,
    0x1bc => 0x0,
    0x1bd => 0x0,
    0x1be => 0x0,
    0x1bf => 0x0,
    0x1c0 => 0x983,
    0x1c1 => 0x0,
    0x1c2 => 0x0,
    0x1c3 => 0x0,
    0x1c4 => 0x0,
    0x1c5 => 0x0,
    0x1c6 => 0x0,
    0x1c7 => 0x0,
    0x1c8 => 0x0,
    0x1c9 => 0x0,
    0x1ca => 0x0,
    0x1cb => 0x0,
    0x1cc => 0x0,
    0x1cd => 0x0,
    0x1ce => 0x0,
    0x1cf => 0x0,
    0x1d0 => 0x0,
    0x1d1 => 0x0,
    0x1d2 => 0x0,
    0x1d3 => 0x0,
    0x1d4 => 0x0,
    0x1d5 => 0x0,
    0x1d6 => 0x0,
    0x1d7 => 0x0,
    0x1d8 => 0x0,
    0x1d9 => 0x0,
    0x1da => 0x0,
    0x1db => 0x0,
    0x1dc => 0x0,
    0x1dd => 0x0,
    0x1de => 0x0,
    0x1df => 0x0,
    0x1e0 => 0x983,
    0x1e1 => 0x0,
    0x1e2 => 0x0,
    0x1e3 => 0x0,
    0x1e4 => 0x0,
    0x1e5 => 0x0,
    0x1e6 => 0x0,
    0x1e7 => 0x0,
    0x1e8 => 0x0,
    0x1e9 => 0x0,
    0x1ea => 0x0,
    0x1eb => 0x0,
    0x1ec => 0x0,
    0x1ed => 0x0,
    0x1ee => 0x0,
    0x1ef => 0x0,
    0x1f0 => 0x0,
    0x1f1 => 0x0,
    0x1f2 => 0x0,
    0x1f3 => 0x0,
    0x1f4 => 0x0,
    0x1f5 => 0x0,
    0x1f6 => 0x0,
    0x1f7 => 0x0,
    0x1f8 => 0x0,
    0x1f9 => 0x0,
    0x1fa => 0x0,
    0x1fb => 0x0,
    0x1fc => 0x0,
    0x1fd => 0x0,
    0x1fe => 0x0,
    0x1ff => 0x0,
    0x200 => 0x983,
    0x201 => 0x0,
    0x202 => 0x0,
    0x203 => 0x0,
    0x204 => 0x0,
    0x205 => 0x0,
    0x206 => 0x0,
    0x207 => 0x0,
    0x208 => 0x0,
    0x209 => 0x0,
    0x20a => 0x0,
    0x20b => 0x0,
    0x20c => 0x0,
    0x20d => 0x0,
    0x20e => 0x0,
    0x20f => 0x0,
    0x210 => 0x0,
    0x211 => 0x0,
    0x212 => 0x0,
    0x213 => 0x0,
    0x214 => 0x0,
    0x215 => 0x0,
    0x216 => 0x0,
    0x217 => 0x0,
    0x218 => 0x0,
    0x219 => 0x0,
    0x21a => 0x0,
    0x21b => 0x0,
    0x21c => 0x0,
    0x21d => 0x0,
    0x21e => 0x0,
    0x21f => 0x0,
    0x220 => 0x983,
    0x221 => 0x0,
    0x222 => 0x0,
    0x223 => 0x0,
    0x224 => 0x0,
    0x225 => 0x0,
    0x226 => 0x0,
    0x227 => 0x0,
    0x228 => 0x0,
    0x229 => 0x0,
    0x22a => 0x0,
    0x22b => 0x0,
    0x22c => 0x0,
    0x22d => 0x0,
    0x22e => 0x0,
    0x22f => 0x0,
    0x230 => 0x0,
    0x231 => 0x0,
    0x232 => 0x0,
    0x233 => 0x0,
    0x234 => 0x0,
    0x235 => 0x0,
    0x236 => 0x0,
    0x237 => 0x0,
    0x238 => 0x0,
    0x239 => 0x0,
    0x23a => 0x0,
    0x23b => 0x0,
    0x23c => 0x0,
    0x23d => 0x0,
    0x23e => 0x0,
    0x23f => 0x0,
    0x240 => 0x983,
    0x241 => 0x0,
    0x242 => 0x0,
    0x243 => 0x0,
    0x244 => 0x0,
    0x245 => 0x0,
    0x246 => 0x0,
    0x247 => 0x0,
    0x248 => 0x0,
    0x249 => 0x0,
    0x24a => 0x0,
    0x24b => 0x0,
    0x24c => 0x0,
    0x24d => 0x0,
    0x24e => 0x0,
    0x24f => 0x0,
    0x250 => 0x0,
    0x251 => 0x0,
    0x252 => 0x0,
    0x253 => 0x0,
    0x254 => 0x0,
    0x255 => 0x0,
    0x256 => 0x0,
    0x257 => 0x0,
    0x258 => 0x0,
    0x259 => 0x0,
    0x25a => 0x0,
    0x25b => 0x0,
    0x25c => 0x0,
    0x25d => 0x0,
    0x25e => 0x0,
    0x25f => 0x0,
    0x260 => 0x983,
    0x261 => 0x0,
    0x262 => 0x0,
    0x263 => 0x0,
    0x264 => 0x0,
    0x265 => 0x0,
    0x266 => 0x0,
    0x267 => 0x0,
    0x268 => 0x0,
    0x269 => 0x0,
    0x26a => 0x0,
    0x26b => 0x0,
    0x26c => 0x0,
    0x26d => 0x0,
    0x26e => 0x0,
    0x26f => 0x0,
    0x270 => 0x0,
    0x271 => 0x0,
    0x272 => 0x0,
    0x273 => 0x0,
    0x274 => 0x0,
    0x275 => 0x0,
    0x276 => 0x0,
    0x277 => 0x0,
    0x278 => 0x0,
    0x279 => 0x0,
    0x27a => 0x0,
    0x27b => 0x0,
    0x27c => 0x0,
    0x27d => 0x0,
    0x27e => 0x0,
    0x27f => 0x0,
    0x280 => 0x983,
    0x281 => 0x0,
    0x282 => 0x0,
    0x283 => 0x0,
    0x284 => 0x0,
    0x285 => 0x0,
    0x286 => 0x0,
    0x287 => 0x0,
    0x288 => 0x0,
    0x289 => 0x0,
    0x28a => 0x0,
    0x28b => 0x0,
    0x28c => 0x0,
    0x28d => 0x0,
    0x28e => 0x0,
    0x28f => 0x0,
    0x290 => 0x0,
    0x291 => 0x0,
    0x292 => 0x0,
    0x293 => 0x0,
    0x294 => 0x0,
    0x295 => 0x0,
    0x296 => 0x0,
    0x297 => 0x0,
    0x298 => 0x0,
    0x299 => 0x0,
    0x29a => 0x0,
    0x29b => 0x0,
    0x29c => 0x0,
    0x29d => 0x0,
    0x29e => 0x0,
    0x29f => 0x0,
    0x2a0 => 0x983,
    0x2a1 => 0x0,
    0x2a2 => 0x0,
    0x2a3 => 0x0,
    0x2a4 => 0x0,
    0x2a5 => 0x0,
    0x2a6 => 0x0,
    0x2a7 => 0x0,
    0x2a8 => 0x0,
    0x2a9 => 0x0,
    0x2aa => 0x0,
    0x2ab => 0x0,
    0x2ac => 0x0,
    0x2ad => 0x0,
    0x2ae => 0x0,
    0x2af => 0x0,
    0x2b0 => 0x0,
    0x2b1 => 0x0,
    0x2b2 => 0x0,
    0x2b3 => 0x0,
    0x2b4 => 0x0,
    0x2b5 => 0x0,
    0x2b6 => 0x0,
    0x2b7 => 0x0,
    0x2b8 => 0x0,
    0x2b9 => 0x0,
    0x2ba => 0x0,
    0x2bb => 0x0,
    0x2bc => 0x0,
    0x2bd => 0x0,
    0x2be => 0x0,
    0x2bf => 0x0,
    0x2c0 => 0x983,
    0x2c1 => 0x0,
    0x2c2 => 0x0,
    0x2c3 => 0x0,
    0x2c4 => 0x0,
    0x2c5 => 0x0,
    0x2c6 => 0x0,
    0x2c7 => 0x0,
    0x2c8 => 0x0,
    0x2c9 => 0x0,
    0x2ca => 0x0,
    0x2cb => 0x0,
    0x2cc => 0x0,
    0x2cd => 0x0,
    0x2ce => 0x0,
    0x2cf => 0x0,
    0x2d0 => 0x0,
    0x2d1 => 0x0,
    0x2d2 => 0x0,
    0x2d3 => 0x0,
    0x2d4 => 0x0,
    0x2d5 => 0x0,
    0x2d6 => 0x0,
    0x2d7 => 0x0,
    0x2d8 => 0x0,
    0x2d9 => 0x0,
    0x2da => 0x0,
    0x2db => 0x0,
    0x2dc => 0x0,
    0x2dd => 0x0,
    0x2de => 0x0,
    0x2df => 0x0,
    0x2e0 => 0x983,
    0x2e1 => 0x0,
    0x2e2 => 0x0,
    0x2e3 => 0x0,
    0x2e4 => 0x0,
    0x2e5 => 0x0,
    0x2e6 => 0x0,
    0x2e7 => 0x0,
    0x2e8 => 0x0,
    0x2e9 => 0x0,
    0x2ea => 0x0,
    0x2eb => 0x0,
    0x2ec => 0x0,
    0x2ed => 0x0,
    0x2ee => 0x0,
    0x2ef => 0x0,
    0x2f0 => 0x0,
    0x2f1 => 0x0,
    0x2f2 => 0x0,
    0x2f3 => 0x0,
    0x2f4 => 0x0,
    0x2f5 => 0x0,
    0x2f6 => 0x0,
    0x2f7 => 0x0,
    0x2f8 => 0x0,
    0x2f9 => 0x0,
    0x2fa => 0x0,
    0x2fb => 0x0,
    0x2fc => 0x0,
    0x2fd => 0x0,
    0x2fe => 0x0,
    0x2ff => 0x0,
    0x300 => 0x983,
    0x301 => 0x0,
    0x302 => 0x0,
    0x303 => 0x0,
    0x304 => 0x0,
    0x305 => 0x0,
    0x306 => 0x0,
    0x307 => 0x0,
    0x308 => 0x0,
    0x309 => 0x0,
    0x30a => 0x0,
    0x30b => 0x0,
    0x30c => 0x0,
    0x30d => 0x0,
    0x30e => 0x0,
    0x30f => 0x0,
    0x310 => 0x0,
    0x311 => 0x0,
    0x312 => 0x0,
    0x313 => 0x0,
    0x314 => 0x0,
    0x315 => 0x0,
    0x316 => 0x0,
    0x317 => 0x0,
    0x318 => 0x0,
    0x319 => 0x0,
    0x31a => 0x0,
    0x31b => 0x0,
    0x31c => 0x0,
    0x31d => 0x0,
    0x31e => 0x0,
    0x31f => 0x0,
    0x320 => 0x983,
    0x321 => 0x0,
    0x322 => 0x0,
    0x323 => 0x0,
    0x324 => 0x0,
    0x325 => 0x0,
    0x326 => 0x0,
    0x327 => 0x0,
    0x328 => 0x0,
    0x329 => 0x0,
    0x32a => 0x0,
    0x32b => 0x0,
    0x32c => 0x0,
    0x32d => 0x0,
    0x32e => 0x0,
    0x32f => 0x0,
    0x330 => 0x0,
    0x331 => 0x0,
    0x332 => 0x0,
    0x333 => 0x0,
    0x334 => 0x0,
    0x335 => 0x0,
    0x336 => 0x0,
    0x337 => 0x0,
    0x338 => 0x0,
    0x339 => 0x0,
    0x33a => 0x0,
    0x33b => 0x0,
    0x33c => 0x0,
    0x33d => 0x0,
    0x33e => 0x0,
    0x33f => 0x0,
    0x340 => 0x983,
    0x341 => 0x0,
    0x342 => 0x0,
    0x343 => 0x0,
    0x344 => 0x0,
    0x345 => 0x0,
    0x346 => 0x0,
    0x347 => 0x0,
    0x348 => 0x0,
    0x349 => 0x0,
    0x34a => 0x0,
    0x34b => 0x0,
    0x34c => 0x0,
    0x34d => 0x0,
    0x34e => 0x0,
    0x34f => 0x0,
    0x350 => 0x0,
    0x351 => 0x0,
    0x352 => 0x0,
    0x353 => 0x0,
    0x354 => 0x0,
    0x355 => 0x0,
    0x356 => 0x0,
    0x357 => 0x0,
    0x358 => 0x0,
    0x359 => 0x0,
    0x35a => 0x0,
    0x35b => 0x0,
    0x35c => 0x0,
    0x35d => 0x0,
    0x35e => 0x0,
    0x35f => 0x0,
    0x360 => 0x983,
    0x361 => 0x0,
    0x362 => 0x0,
    0x363 => 0x0,
    0x364 => 0x0,
    0x365 => 0x0,
    0x366 => 0x0,
    0x367 => 0x0,
    0x368 => 0x0,
    0x369 => 0x0,
    0x36a => 0x0,
    0x36b => 0x0,
    0x36c => 0x0,
    0x36d => 0x0,
    0x36e => 0x0,
    0x36f => 0x0,
    0x370 => 0x0,
    0x371 => 0x0,
    0x372 => 0x0,
    0x373 => 0x0,
    0x374 => 0x0,
    0x375 => 0x0,
    0x376 => 0x0,
    0x377 => 0x0,
    0x378 => 0x0,
    0x379 => 0x0,
    0x37a => 0x0,
    0x37b => 0x0,
    0x37c => 0x0,
    0x37d => 0x0,
    0x37e => 0x0,
    0x37f => 0x0,
    0x380 => 0x983,
    0x381 => 0x0,
    0x382 => 0x0,
    0x383 => 0x0,
    0x384 => 0x0,
    0x385 => 0x0,
    0x386 => 0x0,
    0x387 => 0x0,
    0x388 => 0x0,
    0x389 => 0x0,
    0x38a => 0x0,
    0x38b => 0x0,
    0x38c => 0x0,
    0x38d => 0x0,
    0x38e => 0x0,
    0x38f => 0x0,
    0x390 => 0x0,
    0x391 => 0x0,
    0x392 => 0x0,
    0x393 => 0x0,
    0x394 => 0x0,
    0x395 => 0x0,
    0x396 => 0x0,
    0x397 => 0x0,
    0x398 => 0x0,
    0x399 => 0x0,
    0x39a => 0x0,
    0x39b => 0x0,
    0x39c => 0x0,
    0x39d => 0x0,
    0x39e => 0x0,
    0x39f => 0x0,
    0x3a0 => 0x983,
    0x3a1 => 0x0,
    0x3a2 => 0x0,
    0x3a3 => 0x0,
    0x3a4 => 0x0,
    0x3a5 => 0x0,
    0x3a6 => 0x0,
    0x3a7 => 0x0,
    0x3a8 => 0x0,
    0x3a9 => 0x0,
    0x3aa => 0x0,
    0x3ab => 0x0,
    0x3ac => 0x0,
    0x3ad => 0x0,
    0x3ae => 0x0,
    0x3af => 0x0,
    0x3b0 => 0x0,
    0x3b1 => 0x0,
    0x3b2 => 0x0,
    0x3b3 => 0x0,
    0x3b4 => 0x0,
    0x3b5 => 0x0,
    0x3b6 => 0x0,
    0x3b7 => 0x0,
    0x3b8 => 0x0,
    0x3b9 => 0x0,
    0x3ba => 0x0,
    0x3bb => 0x0,
    0x3bc => 0x0,
    0x3bd => 0x0,
    0x3be => 0x0,
    0x3bf => 0x0,
    0x3c0 => 0x983,
    0x3c1 => 0x0,
    0x3c2 => 0x0,
    0x3c3 => 0x0,
    0x3c4 => 0x0,
    0x3c5 => 0x0,
    0x3c6 => 0x0,
    0x3c7 => 0x0,
    0x3c8 => 0x0,
    0x3c9 => 0x0,
    0x3ca => 0x0,
    0x3cb => 0x0,
    0x3cc => 0x0,
    0x3cd => 0x0,
    0x3ce => 0x0,
    0x3cf => 0x0,
    0x3d0 => 0x0,
    0x3d1 => 0x0,
    0x3d2 => 0x0,
    0x3d3 => 0x0,
    0x3d4 => 0x0,
    0x3d5 => 0x0,
    0x3d6 => 0x0,
    0x3d7 => 0x0,
    0x3d8 => 0x0,
    0x3d9 => 0x0,
    0x3da => 0x0,
    0x3db => 0x0,
    0x3dc => 0x0,
    0x3dd => 0x0,
    0x3de => 0x0,
    0x3df => 0x0,
    0x3e0 => 0x983,
    0x3e1 => 0x0,
    0x3e2 => 0x0,
    0x3e3 => 0x0,
    0x3e4 => 0x0,
    0x3e5 => 0x0,
    0x3e6 => 0x0,
    0x3e7 => 0x0,
    0x3e8 => 0x0,
    0x3e9 => 0x0,
    0x3ea => 0x0,
    0x3eb => 0x0,
    0x3ec => 0x0,
    0x3ed => 0x0,
    0x3ee => 0x0,
    0x3ef => 0x0,
    0x3f0 => 0x0,
    0x3f1 => 0x0,
    0x3f2 => 0x0,
    0x3f3 => 0x0,
    0x3f4 => 0x0,
    0x3f5 => 0x0,
    0x3f6 => 0x0,
    0x3f7 => 0x0,
    0x3f8 => 0x0,
    0x3f9 => 0x0,
    0x3fa => 0x0,
    0x3fb => 0x0,
    0x3fc => 0x0,
    0x3fd => 0x0,
    0x3fe => 0x0,
    0x3ff => 0x0,
    0x400 => 0x0,
    0x401 => 0x0,
    0x402 => 0x0,
    0x403 => 0x0,
    0x404 => 0x0,
    0x405 => 0x0,
    0x406 => 0x0,
    0x407 => 0x0,
    0x408 => 0x0,
    0x409 => 0x0,
    0x40a => 0x0,
    0x40b => 0x0,
    0x40c => 0x0,
    0x40d => 0x0,
    0x40e => 0x0,
    0x40f => 0x0,
    0x410 => 0x0,
    0x411 => 0x0,
    0x412 => 0x0,
    0x413 => 0x0,
    0x414 => 0x0,
    0x415 => 0x0,
    0x416 => 0x0,
    0x417 => 0x0,
    0x418 => 0x0,
    0x419 => 0x0,
    0x41a => 0x0,
    0x41b => 0x0,
    0x41c => 0x0,
    0x41d => 0x0,
    0x41e => 0x0,
    0x41f => 0x0,
    0x420 => 0x0,
    0x421 => 0x0,
    0x422 => 0x0,
    0x423 => 0x0,
    0x424 => 0x0,
    0x425 => 0x0,
    0x426 => 0x0,
    0x427 => 0x0,
    0x428 => 0x0,
    0x429 => 0x0,
    0x42a => 0x0,
    0x42b => 0x0,
    0x42c => 0x0,
    0x42d => 0x0,
    0x42e => 0x0,
    0x42f => 0x0,
    0x430 => 0x0,
    0x431 => 0x0,
    0x432 => 0x0,
    0x433 => 0x0,
    0x434 => 0x0,
    0x435 => 0x0,
    0x436 => 0x0,
    0x437 => 0x0,
    0x438 => 0x0,
    0x439 => 0x0,
    0x43a => 0x0,
    0x43b => 0x0,
    0x43c => 0x0,
    0x43d => 0x0,
    0x43e => 0x0,
    0x43f => 0x0,
    0x440 => 0x0,
    0x441 => 0x0,
    0x442 => 0x0,
    0x443 => 0x0,
    0x444 => 0x0,
    0x445 => 0x0,
    0x446 => 0x0,
    0x447 => 0x0,
    0x448 => 0x0,
    0x449 => 0x0,
    0x44a => 0x0,
    0x44b => 0x0,
    0x44c => 0x0,
    0x44d => 0x0,
    0x44e => 0x0,
    0x44f => 0x0,
    0x450 => 0x0,
    0x451 => 0x0,
    0x452 => 0x0,
    0x453 => 0x0,
    0x454 => 0x0,
    0x455 => 0x0,
    0x456 => 0x0,
    0x457 => 0x0,
    0x458 => 0x0,
    0x459 => 0x0,
    0x45a => 0x0,
    0x45b => 0x0,
    0x45c => 0x0,
    0x45d => 0x0,
    0x45e => 0x0,
    0x45f => 0x0,
    0x460 => 0x0,
    0x461 => 0x0,
    0x462 => 0x0,
    0x463 => 0x0,
    0x464 => 0x0,
    0x465 => 0x0,
    0x466 => 0x0,
    0x467 => 0x0,
    0x468 => 0x0,
    0x469 => 0x0,
    0x46a => 0x0,
    0x46b => 0x0,
    0x46c => 0x0,
    0x46d => 0x0,
    0x46e => 0x0,
    0x46f => 0x0,
    0x470 => 0x0,
    0x471 => 0x0,
    0x472 => 0x0,
    0x473 => 0x0,
    0x474 => 0x0,
    0x475 => 0x0,
    0x476 => 0x0,
    0x477 => 0x0,
    0x478 => 0x0,
    0x479 => 0x0,
    0x47a => 0x0,
    0x47b => 0x0,
    0x47c => 0x0,
    0x47d => 0x0,
    0x47e => 0x0,
    0x47f => 0x0,
    0x480 => 0x0,
    0x481 => 0x0,
    0x482 => 0x0,
    0x483 => 0x0,
    0x484 => 0x0,
    0x485 => 0x0,
    0x486 => 0x0,
    0x487 => 0x0,
    0x488 => 0x0,
    0x489 => 0x0,
    0x48a => 0x0,
    0x48b => 0x0,
    0x48c => 0x0,
    0x48d => 0x0,
    0x48e => 0x0,
    0x48f => 0x0,
    0x490 => 0x0,
    0x491 => 0x0,
    0x492 => 0x0,
    0x493 => 0x0,
    0x494 => 0x0,
    0x495 => 0x0,
    0x496 => 0x0,
    0x497 => 0x0,
    0x498 => 0x0,
    0x499 => 0x0,
    0x49a => 0x0,
    0x49b => 0x0,
    0x49c => 0x0,
    0x49d => 0x0,
    0x49e => 0x0,
    0x49f => 0x0,
    0x4a0 => 0x0,
    0x4a1 => 0x0,
    0x4a2 => 0x0,
    0x4a3 => 0x0,
    0x4a4 => 0x0,
    0x4a5 => 0x0,
    0x4a6 => 0x0,
    0x4a7 => 0x0,
    0x4a8 => 0x0,
    0x4a9 => 0x0,
    0x4aa => 0x0,
    0x4ab => 0x0,
    0x4ac => 0x0,
    0x4ad => 0x0,
    0x4ae => 0x0,
    0x4af => 0x0,
    0x4b0 => 0x0,
    0x4b1 => 0x0,
    0x4b2 => 0x0,
    0x4b3 => 0x0,
    0x4b4 => 0x0,
    0x4b5 => 0x0,
    0x4b6 => 0x0,
    0x4b7 => 0x0,
    0x4b8 => 0x0,
    0x4b9 => 0x0,
    0x4ba => 0x0,
    0x4bb => 0x0,
    0x4bc => 0x0,
    0x4bd => 0x0,
    0x4be => 0x0,
    0x4bf => 0x0,
    0x4c0 => 0x0,
    0x4c1 => 0x0,
    0x4c2 => 0x0,
    0x4c3 => 0x0,
    0x4c4 => 0x0,
    0x4c5 => 0x0,
    0x4c6 => 0x0,
    0x4c7 => 0x0,
    0x4c8 => 0x0,
    0x4c9 => 0x0,
    0x4ca => 0x0,
    0x4cb => 0x0,
    0x4cc => 0x0,
    0x4cd => 0x0,
    0x4ce => 0x0,
    0x4cf => 0x0,
    0x4d0 => 0x0,
    0x4d1 => 0x0,
    0x4d2 => 0x0,
    0x4d3 => 0x0,
    0x4d4 => 0x0,
    0x4d5 => 0x0,
    0x4d6 => 0x0,
    0x4d7 => 0x0,
    0x4d8 => 0x0,
    0x4d9 => 0x0,
    0x4da => 0x0,
    0x4db => 0x0,
    0x4dc => 0x0,
    0x4dd => 0x0,
    0x4de => 0x0,
    0x4df => 0x0,
    0x4e0 => 0x0,
    0x4e1 => 0x0,
    0x4e2 => 0x0,
    0x4e3 => 0x0,
    0x4e4 => 0x0,
    0x4e5 => 0x0,
    0x4e6 => 0x0,
    0x4e7 => 0x0,
    0x4e8 => 0x0,
    0x4e9 => 0x0,
    0x4ea => 0x0,
    0x4eb => 0x0,
    0x4ec => 0x0,
    0x4ed => 0x0,
    0x4ee => 0x0,
    0x4ef => 0x0,
    0x4f0 => 0x0,
    0x4f1 => 0x0,
    0x4f2 => 0x0,
    0x4f3 => 0x0,
    0x4f4 => 0x0,
    0x4f5 => 0x0,
    0x4f6 => 0x0,
    0x4f7 => 0x0,
    0x4f8 => 0x0,
    0x4f9 => 0x0,
    0x4fa => 0x0,
    0x4fb => 0x0,
    0x4fc => 0x0,
    0x4fd => 0x0,
    0x4fe => 0x0,
    0x4ff => 0x0,
    0x500 => 0x0,
    0x501 => 0x0,
    0x502 => 0x0,
    0x503 => 0x0,
    0x504 => 0x0,
    0x505 => 0x0,
    0x506 => 0x0,
    0x507 => 0x0,
    0x508 => 0x0,
    0x509 => 0x0,
    0x50a => 0x0,
    0x50b => 0x0,
    0x50c => 0x0,
    0x50d => 0x0,
    0x50e => 0x0,
    0x50f => 0x0,
    0x510 => 0x0,
    0x511 => 0x0,
    0x512 => 0x0,
    0x513 => 0x0,
    0x514 => 0x0,
    0x515 => 0x0,
    0x516 => 0x0,
    0x517 => 0x0,
    0x518 => 0x0,
    0x519 => 0x0,
    0x51a => 0x0,
    0x51b => 0x0,
    0x51c => 0x0,
    0x51d => 0x0,
    0x51e => 0x0,
    0x51f => 0x0,
    0x520 => 0x0,
    0x521 => 0x0,
    0x522 => 0x0,
    0x523 => 0x0,
    0x524 => 0x0,
    0x525 => 0x0,
    0x526 => 0x0,
    0x527 => 0x0,
    0x528 => 0x0,
    0x529 => 0x0,
    0x52a => 0x0,
    0x52b => 0x0,
    0x52c => 0x0,
    0x52d => 0x0,
    0x52e => 0x0,
    0x52f => 0x0,
    0x530 => 0x0,
    0x531 => 0x0,
    0x532 => 0x0,
    0x533 => 0x0,
    0x534 => 0x0,
    0x535 => 0x0,
    0x536 => 0x0,
    0x537 => 0x0,
    0x538 => 0x0,
    0x539 => 0x0,
    0x53a => 0x0,
    0x53b => 0x0,
    0x53c => 0x0,
    0x53d => 0x0,
    0x53e => 0x0,
    0x53f => 0x0,
    0x540 => 0x0,
    0x541 => 0x0,
    0x542 => 0x0,
    0x543 => 0x0,
    0x544 => 0x0,
    0x545 => 0x0,
    0x546 => 0x0,
    0x547 => 0x0,
    0x548 => 0x0,
    0x549 => 0x0,
    0x54a => 0x0,
    0x54b => 0x0,
    0x54c => 0x0,
    0x54d => 0x0,
    0x54e => 0x0,
    0x54f => 0x0,
    0x550 => 0x0,
    0x551 => 0x0,
    0x552 => 0x0,
    0x553 => 0x0,
    0x554 => 0x0,
    0x555 => 0x0,
    0x556 => 0x0,
    0x557 => 0x0,
    0x558 => 0x0,
    0x559 => 0x0,
    0x55a => 0x0,
    0x55b => 0x0,
    0x55c => 0x0,
    0x55d => 0x0,
    0x55e => 0x0,
    0x55f => 0x0,
    0x560 => 0x0,
    0x561 => 0x0,
    0x562 => 0x0,
    0x563 => 0x0,
    0x564 => 0x0,
    0x565 => 0x0,
    0x566 => 0x0,
    0x567 => 0x0,
    0x568 => 0x0,
    0x569 => 0x0,
    0x56a => 0x0,
    0x56b => 0x0,
    0x56c => 0x0,
    0x56d => 0x0,
    0x56e => 0x0,
    0x56f => 0x0,
    0x570 => 0x0,
    0x571 => 0x0,
    0x572 => 0x0,
    0x573 => 0x0,
    0x574 => 0x0,
    0x575 => 0x0,
    0x576 => 0x0,
    0x577 => 0x0,
    0x578 => 0x0,
    0x579 => 0x0,
    0x57a => 0x0,
    0x57b => 0x0,
    0x57c => 0x0,
    0x57d => 0x0,
    0x57e => 0x0,
    0x57f => 0x0,
    0x580 => 0x0,
    0x581 => 0x0,
    0x582 => 0x0,
    0x583 => 0x0,
    0x584 => 0x0,
    0x585 => 0x0,
    0x586 => 0x0,
    0x587 => 0x0,
    0x588 => 0x0,
    0x589 => 0x0,
    0x58a => 0x0,
    0x58b => 0x0,
    0x58c => 0x0,
    0x58d => 0x0,
    0x58e => 0x0,
    0x58f => 0x0,
    0x590 => 0x0,
    0x591 => 0x0,
    0x592 => 0x0,
    0x593 => 0x0,
    0x594 => 0x0,
    0x595 => 0x0,
    0x596 => 0x0,
    0x597 => 0x0,
    0x598 => 0x0,
    0x599 => 0x0,
    0x59a => 0x0,
    0x59b => 0x0,
    0x59c => 0x0,
    0x59d => 0x0,
    0x59e => 0x0,
    0x59f => 0x0,
    0x5a0 => 0x0,
    0x5a1 => 0x0,
    0x5a2 => 0x0,
    0x5a3 => 0x0,
    0x5a4 => 0x0,
    0x5a5 => 0x0,
    0x5a6 => 0x0,
    0x5a7 => 0x0,
    0x5a8 => 0x0,
    0x5a9 => 0x0,
    0x5aa => 0x0,
    0x5ab => 0x0,
    0x5ac => 0x0,
    0x5ad => 0x0,
    0x5ae => 0x0,
    0x5af => 0x0,
    0x5b0 => 0x0,
    0x5b1 => 0x0,
    0x5b2 => 0x0,
    0x5b3 => 0x0,
    0x5b4 => 0x0,
    0x5b5 => 0x0,
    0x5b6 => 0x0,
    0x5b7 => 0x0,
    0x5b8 => 0x0,
    0x5b9 => 0x0,
    0x5ba => 0x0,
    0x5bb => 0x0,
    0x5bc => 0x0,
    0x5bd => 0x0,
    0x5be => 0x0,
    0x5bf => 0x0,
    0x5c0 => 0x0,
    0x5c1 => 0x0,
    0x5c2 => 0x0,
    0x5c3 => 0x0,
    0x5c4 => 0x0,
    0x5c5 => 0x0,
    0x5c6 => 0x0,
    0x5c7 => 0x0,
    0x5c8 => 0x0,
    0x5c9 => 0x0,
    0x5ca => 0x0,
    0x5cb => 0x0,
    0x5cc => 0x0,
    0x5cd => 0x0,
    0x5ce => 0x0,
    0x5cf => 0x0,
    0x5d0 => 0x0,
    0x5d1 => 0x0,
    0x5d2 => 0x0,
    0x5d3 => 0x0,
    0x5d4 => 0x0,
    0x5d5 => 0x0,
    0x5d6 => 0x0,
    0x5d7 => 0x0,
    0x5d8 => 0x0,
    0x5d9 => 0x0,
    0x5da => 0x0,
    0x5db => 0x0,
    0x5dc => 0x0,
    0x5dd => 0x0,
    0x5de => 0x0,
    0x5df => 0x0,
    0x5e0 => 0x0,
    0x5e1 => 0x0,
    0x5e2 => 0x0,
    0x5e3 => 0x0,
    0x5e4 => 0x0,
    0x5e5 => 0x0,
    0x5e6 => 0x0,
    0x5e7 => 0x0,
    0x5e8 => 0x0,
    0x5e9 => 0x0,
    0x5ea => 0x0,
    0x5eb => 0x0,
    0x5ec => 0x0,
    0x5ed => 0x0,
    0x5ee => 0x0,
    0x5ef => 0x0,
    0x5f0 => 0x0,
    0x5f1 => 0x0,
    0x5f2 => 0x0,
    0x5f3 => 0x0,
    0x5f4 => 0x0,
    0x5f5 => 0x0,
    0x5f6 => 0x0,
    0x5f7 => 0x0,
    0x5f8 => 0x0,
    0x5f9 => 0x0,
    0x5fa => 0x0,
    0x5fb => 0x0,
    0x5fc => 0x0,
    0x5fd => 0x0,
    0x5fe => 0x0,
    0x5ff => 0x0,
    0x600 => 0x0,
    0x601 => 0x0,
    0x602 => 0x0,
    0x603 => 0x0,
    0x604 => 0x0,
    0x605 => 0x0,
    0x606 => 0x0,
    0x607 => 0x0,
    0x608 => 0x0,
    0x609 => 0x0,
    0x60a => 0x0,
    0x60b => 0x0,
    0x60c => 0x0,
    0x60d => 0x0,
    0x60e => 0x0,
    0x60f => 0x0,
    0x610 => 0x0,
    0x611 => 0x0,
    0x612 => 0x0,
    0x613 => 0x0,
    0x614 => 0x0,
    0x615 => 0x0,
    0x616 => 0x0,
    0x617 => 0x0,
    0x618 => 0x0,
    0x619 => 0x0,
    0x61a => 0x0,
    0x61b => 0x0,
    0x61c => 0x0,
    0x61d => 0x0,
    0x61e => 0x0,
    0x61f => 0x0,
    0x620 => 0x0,
    0x621 => 0x0,
    0x622 => 0x0,
    0x623 => 0x0,
    0x624 => 0x0,
    0x625 => 0x0,
    0x626 => 0x0,
    0x627 => 0x0,
    0x628 => 0x0,
    0x629 => 0x0,
    0x62a => 0x0,
    0x62b => 0x0,
    0x62c => 0x0,
    0x62d => 0x0,
    0x62e => 0x0,
    0x62f => 0x0,
    0x630 => 0x0,
    0x631 => 0x0,
    0x632 => 0x0,
    0x633 => 0x0,
    0x634 => 0x0,
    0x635 => 0x0,
    0x636 => 0x0,
    0x637 => 0x0,
    0x638 => 0x0,
    0x639 => 0x0,
    0x63a => 0x0,
    0x63b => 0x0,
    0x63c => 0x0,
    0x63d => 0x0,
    0x63e => 0x0,
    0x63f => 0x0,
    0x640 => 0x0,
    0x641 => 0x0,
    0x642 => 0x0,
    0x643 => 0x0,
    0x644 => 0x0,
    0x645 => 0x0,
    0x646 => 0x0,
    0x647 => 0x0,
    0x648 => 0x0,
    0x649 => 0x0,
    0x64a => 0x0,
    0x64b => 0x0,
    0x64c => 0x0,
    0x64d => 0x0,
    0x64e => 0x0,
    0x64f => 0x0,
    0x650 => 0x0,
    0x651 => 0x0,
    0x652 => 0x0,
    0x653 => 0x0,
    0x654 => 0x0,
    0x655 => 0x0,
    0x656 => 0x0,
    0x657 => 0x0,
    0x658 => 0x0,
    0x659 => 0x0,
    0x65a => 0x0,
    0x65b => 0x0,
    0x65c => 0x0,
    0x65d => 0x0,
    0x65e => 0x0,
    0x65f => 0x0,
    0x660 => 0x0,
    0x661 => 0x0,
    0x662 => 0x0,
    0x663 => 0x0,
    0x664 => 0x0,
    0x665 => 0x0,
    0x666 => 0x0,
    0x667 => 0x0,
    0x668 => 0x0,
    0x669 => 0x0,
    0x66a => 0x0,
    0x66b => 0x0,
    0x66c => 0x0,
    0x66d => 0x0,
    0x66e => 0x0,
    0x66f => 0x0,
    0x670 => 0x0,
    0x671 => 0x0,
    0x672 => 0x0,
    0x673 => 0x0,
    0x674 => 0x0,
    0x675 => 0x0,
    0x676 => 0x0,
    0x677 => 0x0,
    0x678 => 0x0,
    0x679 => 0x0,
    0x67a => 0x0,
    0x67b => 0x0,
    0x67c => 0x0,
    0x67d => 0x0,
    0x67e => 0x0,
    0x67f => 0x0,
    0x680 => 0x0,
    0x681 => 0x0,
    0x682 => 0x0,
    0x683 => 0x0,
    0x684 => 0x0,
    0x685 => 0x0,
    0x686 => 0x0,
    0x687 => 0x0,
    0x688 => 0x0,
    0x689 => 0x0,
    0x68a => 0x0,
    0x68b => 0x0,
    0x68c => 0x0,
    0x68d => 0x0,
    0x68e => 0x0,
    0x68f => 0x0,
    0x690 => 0x0,
    0x691 => 0x0,
    0x692 => 0x0,
    0x693 => 0x0,
    0x694 => 0x0,
    0x695 => 0x0,
    0x696 => 0x0,
    0x697 => 0x0,
    0x698 => 0x0,
    0x699 => 0x0,
    0x69a => 0x0,
    0x69b => 0x0,
    0x69c => 0x0,
    0x69d => 0x0,
    0x69e => 0x0,
    0x69f => 0x0,
    0x6a0 => 0x0,
    0x6a1 => 0x0,
    0x6a2 => 0x0,
    0x6a3 => 0x0,
    0x6a4 => 0x0,
    0x6a5 => 0x0,
    0x6a6 => 0x0,
    0x6a7 => 0x0,
    0x6a8 => 0x0,
    0x6a9 => 0x0,
    0x6aa => 0x0,
    0x6ab => 0x0,
    0x6ac => 0x0,
    0x6ad => 0x0,
    0x6ae => 0x0,
    0x6af => 0x0,
    0x6b0 => 0x0,
    0x6b1 => 0x0,
    0x6b2 => 0x0,
    0x6b3 => 0x0,
    0x6b4 => 0x0,
    0x6b5 => 0x0,
    0x6b6 => 0x0,
    0x6b7 => 0x0,
    0x6b8 => 0x0,
    0x6b9 => 0x0,
    0x6ba => 0x0,
    0x6bb => 0x0,
    0x6bc => 0x0,
    0x6bd => 0x0,
    0x6be => 0x0,
    0x6bf => 0x0,
    0x6c0 => 0x0,
    0x6c1 => 0x0,
    0x6c2 => 0x0,
    0x6c3 => 0x0,
    0x6c4 => 0x0,
    0x6c5 => 0x0,
    0x6c6 => 0x0,
    0x6c7 => 0x0,
    0x6c8 => 0x0,
    0x6c9 => 0x0,
    0x6ca => 0x0,
    0x6cb => 0x0,
    0x6cc => 0x0,
    0x6cd => 0x0,
    0x6ce => 0x0,
    0x6cf => 0x0,
    0x6d0 => 0x0,
    0x6d1 => 0x0,
    0x6d2 => 0x0,
    0x6d3 => 0x0,
    0x6d4 => 0x0,
    0x6d5 => 0x0,
    0x6d6 => 0x0,
    0x6d7 => 0x0,
    0x6d8 => 0x0,
    0x6d9 => 0x0,
    0x6da => 0x0,
    0x6db => 0x0,
    0x6dc => 0x0,
    0x6dd => 0x0,
    0x6de => 0x0,
    0x6df => 0x0,
    0x6e0 => 0x0,
    0x6e1 => 0x0,
    0x6e2 => 0x0,
    0x6e3 => 0x0,
    0x6e4 => 0x0,
    0x6e5 => 0x0,
    0x6e6 => 0x0,
    0x6e7 => 0x0,
    0x6e8 => 0x0,
    0x6e9 => 0x0,
    0x6ea => 0x0,
    0x6eb => 0x0,
    0x6ec => 0x0,
    0x6ed => 0x0,
    0x6ee => 0x0,
    0x6ef => 0x0,
    0x6f0 => 0x0,
    0x6f1 => 0x0,
    0x6f2 => 0x0,
    0x6f3 => 0x0,
    0x6f4 => 0x0,
    0x6f5 => 0x0,
    0x6f6 => 0x0,
    0x6f7 => 0x0,
    0x6f8 => 0x0,
    0x6f9 => 0x0,
    0x6fa => 0x0,
    0x6fb => 0x0,
    0x6fc => 0x0,
    0x6fd => 0x0,
    0x6fe => 0x0,
    0x6ff => 0x0,
    0x700 => 0x0,
    0x701 => 0x0,
    0x702 => 0x0,
    0x703 => 0x0,
    0x704 => 0x0,
    0x705 => 0x0,
    0x706 => 0x0,
    0x707 => 0x0,
    0x708 => 0x0,
    0x709 => 0x0,
    0x70a => 0x0,
    0x70b => 0x0,
    0x70c => 0x0,
    0x70d => 0x0,
    0x70e => 0x0,
    0x70f => 0x0,
    0x710 => 0x0,
    0x711 => 0x0,
    0x712 => 0x0,
    0x713 => 0x0,
    0x714 => 0x0,
    0x715 => 0x0,
    0x716 => 0x0,
    0x717 => 0x0,
    0x718 => 0x0,
    0x719 => 0x0,
    0x71a => 0x0,
    0x71b => 0x0,
    0x71c => 0x0,
    0x71d => 0x0,
    0x71e => 0x0,
    0x71f => 0x0,
    0x720 => 0x0,
    0x721 => 0x0,
    0x722 => 0x0,
    0x723 => 0x0,
    0x724 => 0x0,
    0x725 => 0x0,
    0x726 => 0x0,
    0x727 => 0x0,
    0x728 => 0x0,
    0x729 => 0x0,
    0x72a => 0x0,
    0x72b => 0x0,
    0x72c => 0x0,
    0x72d => 0x0,
    0x72e => 0x0,
    0x72f => 0x0,
    0x730 => 0x0,
    0x731 => 0x0,
    0x732 => 0x0,
    0x733 => 0x0,
    0x734 => 0x0,
    0x735 => 0x0,
    0x736 => 0x0,
    0x737 => 0x0,
    0x738 => 0x0,
    0x739 => 0x0,
    0x73a => 0x0,
    0x73b => 0x0,
    0x73c => 0x0,
    0x73d => 0x0,
    0x73e => 0x0,
    0x73f => 0x0,
    0x740 => 0x0,
    0x741 => 0x0,
    0x742 => 0x0,
    0x743 => 0x0,
    0x744 => 0x0,
    0x745 => 0x0,
    0x746 => 0x0,
    0x747 => 0x0,
    0x748 => 0x0,
    0x749 => 0x0,
    0x74a => 0x0,
    0x74b => 0x0,
    0x74c => 0x0,
    0x74d => 0x0,
    0x74e => 0x0,
    0x74f => 0x0,
    0x750 => 0x0,
    0x751 => 0x0,
    0x752 => 0x0,
    0x753 => 0x0,
    0x754 => 0x0,
    0x755 => 0x0,
    0x756 => 0x0,
    0x757 => 0x0,
    0x758 => 0x0,
    0x759 => 0x0,
    0x75a => 0x0,
    0x75b => 0x0,
    0x75c => 0x0,
    0x75d => 0x0,
    0x75e => 0x0,
    0x75f => 0x0,
    0x760 => 0x0,
    0x761 => 0x0,
    0x762 => 0x0,
    0x763 => 0x0,
    0x764 => 0x0,
    0x765 => 0x0,
    0x766 => 0x0,
    0x767 => 0x0,
    0x768 => 0x0,
    0x769 => 0x0,
    0x76a => 0x0,
    0x76b => 0x0,
    0x76c => 0x0,
    0x76d => 0x0,
    0x76e => 0x0,
    0x76f => 0x0,
    0x770 => 0x0,
    0x771 => 0x0,
    0x772 => 0x0,
    0x773 => 0x0,
    0x774 => 0x0,
    0x775 => 0x0,
    0x776 => 0x0,
    0x777 => 0x0,
    0x778 => 0x0,
    0x779 => 0x0,
    0x77a => 0x0,
    0x77b => 0x0,
    0x77c => 0x0,
    0x77d => 0x0,
    0x77e => 0x0,
    0x77f => 0x0,
    0x780 => 0x0,
    0x781 => 0x0,
    0x782 => 0x0,
    0x783 => 0x0,
    0x784 => 0x0,
    0x785 => 0x0,
    0x786 => 0x0,
    0x787 => 0x0,
    0x788 => 0x0,
    0x789 => 0x0,
    0x78a => 0x0,
    0x78b => 0x0,
    0x78c => 0x0,
    0x78d => 0x0,
    0x78e => 0x0,
    0x78f => 0x0,
    0x790 => 0x0,
    0x791 => 0x0,
    0x792 => 0x0,
    0x793 => 0x0,
    0x794 => 0x0,
    0x795 => 0x0,
    0x796 => 0x0,
    0x797 => 0x0,
    0x798 => 0x0,
    0x799 => 0x0,
    0x79a => 0x0,
    0x79b => 0x0,
    0x79c => 0x0,
    0x79d => 0x0,
    0x79e => 0x0,
    0x79f => 0x0,
    0x7a0 => 0x0,
    0x7a1 => 0x0,
    0x7a2 => 0x0,
    0x7a3 => 0x0,
    0x7a4 => 0x0,
    0x7a5 => 0x0,
    0x7a6 => 0x0,
    0x7a7 => 0x0,
    0x7a8 => 0x0,
    0x7a9 => 0x0,
    0x7aa => 0x0,
    0x7ab => 0x0,
    0x7ac => 0x0,
    0x7ad => 0x0,
    0x7ae => 0x0,
    0x7af => 0x0,
    0x7b0 => 0x0,
    0x7b1 => 0x0,
    0x7b2 => 0x0,
    0x7b3 => 0x0,
    0x7b4 => 0x0,
    0x7b5 => 0x0,
    0x7b6 => 0x0,
    0x7b7 => 0x0,
    0x7b8 => 0x0,
    0x7b9 => 0x0,
    0x7ba => 0x0,
    0x7bb => 0x0,
    0x7bc => 0x0,
    0x7bd => 0x0,
    0x7be => 0x0,
    0x7bf => 0x0,
    0x7c0 => 0x0,
    0x7c1 => 0x0,
    0x7c2 => 0x0,
    0x7c3 => 0x0,
    0x7c4 => 0x0,
    0x7c5 => 0x0,
    0x7c6 => 0x0,
    0x7c7 => 0x0,
    0x7c8 => 0x0,
    0x7c9 => 0x0,
    0x7ca => 0x0,
    0x7cb => 0x0,
    0x7cc => 0x0,
    0x7cd => 0x0,
    0x7ce => 0x0,
    0x7cf => 0x0,
    0x7d0 => 0x0,
    0x7d1 => 0x0,
    0x7d2 => 0x0,
    0x7d3 => 0x0,
    0x7d4 => 0x0,
    0x7d5 => 0x0,
    0x7d6 => 0x0,
    0x7d7 => 0x0,
    0x7d8 => 0x0,
    0x7d9 => 0x0,
    0x7da => 0x0,
    0x7db => 0x0,
    0x7dc => 0x0,
    0x7dd => 0x0,
    0x7de => 0x0,
    0x7df => 0x0,
    0x7e0 => 0x0,
    0x7e1 => 0x0,
    0x7e2 => 0x0,
    0x7e3 => 0x0,
    0x7e4 => 0x0,
    0x7e5 => 0x0,
    0x7e6 => 0x0,
    0x7e7 => 0x0,
    0x7e8 => 0x0,
    0x7e9 => 0x0,
    0x7ea => 0x0,
    0x7eb => 0x0,
    0x7ec => 0x0,
    0x7ed => 0x0,
    0x7ee => 0x0,
    0x7ef => 0x0,
    0x7f0 => 0x0,
    0x7f1 => 0x0,
    0x7f2 => 0x0,
    0x7f3 => 0x0,
    0x7f4 => 0x0,
    0x7f5 => 0x0,
    0x7f6 => 0x0,
    0x7f7 => 0x0,
    0x7f8 => 0x0,
    0x7f9 => 0x0,
    0x7fa => 0x0,
    0x7fb => 0x0,
    0x7fc => 0x0,
    0x7fd => 0x0,
    0x7fe => 0x0,
    0x7ff => 0x0,
    0x800 => 0x0,
    0x801 => 0x0,
    0x802 => 0x0,
    0x803 => 0x0,
    0x804 => 0x0,
    0x805 => 0x0,
    0x806 => 0x0,
    0x807 => 0x0,
    0x808 => 0x0,
    0x809 => 0x0,
    0x80a => 0x0,
    0x80b => 0x0,
    0x80c => 0x0,
    0x80d => 0x0,
    0x80e => 0x0,
    0x80f => 0x0,
    0x810 => 0x0,
    0x811 => 0x0,
    0x812 => 0x0,
    0x813 => 0x0,
    0x814 => 0x0,
    0x815 => 0x0,
    0x816 => 0x0,
    0x817 => 0x0,
    0x818 => 0x0,
    0x819 => 0x0,
    0x81a => 0x0,
    0x81b => 0x0,
    0x81c => 0x0,
    0x81d => 0x0,
    0x81e => 0x0,
    0x81f => 0x984,
    0x820 => 0x0,
    0x821 => 0x0,
    0x822 => 0x0,
    0x823 => 0x0,
    0x824 => 0x0,
    0x825 => 0x0,
    0x826 => 0x0,
    0x827 => 0x0,
    0x828 => 0x0,
    0x829 => 0x0,
    0x82a => 0x0,
    0x82b => 0x0,
    0x82c => 0x0,
    0x82d => 0x0,
    0x82e => 0x0,
    0x82f => 0x0,
    0x830 => 0x0,
    0x831 => 0x0,
    0x832 => 0x0,
    0x833 => 0x0,
    0x834 => 0x0,
    0x835 => 0x0,
    0x836 => 0x0,
    0x837 => 0x0,
    0x838 => 0x0,
    0x839 => 0x0,
    0x83a => 0x0,
    0x83b => 0x0,
    0x83c => 0x0,
    0x83d => 0x0,
    0x83e => 0x0,
    0x83f => 0x984,
    0x840 => 0x0,
    0x841 => 0x0,
    0x842 => 0x0,
    0x843 => 0x0,
    0x844 => 0x0,
    0x845 => 0x0,
    0x846 => 0x0,
    0x847 => 0x0,
    0x848 => 0x0,
    0x849 => 0x0,
    0x84a => 0x0,
    0x84b => 0x0,
    0x84c => 0x0,
    0x84d => 0x0,
    0x84e => 0x0,
    0x84f => 0x0,
    0x850 => 0x0,
    0x851 => 0x0,
    0x852 => 0x0,
    0x853 => 0x0,
    0x854 => 0x0,
    0x855 => 0x0,
    0x856 => 0x0,
    0x857 => 0x0,
    0x858 => 0x0,
    0x859 => 0x0,
    0x85a => 0x0,
    0x85b => 0x0,
    0x85c => 0x0,
    0x85d => 0x0,
    0x85e => 0x0,
    0x85f => 0x984,
    0x860 => 0x0,
    0x861 => 0x0,
    0x862 => 0x0,
    0x863 => 0x0,
    0x864 => 0x0,
    0x865 => 0x0,
    0x866 => 0x0,
    0x867 => 0x0,
    0x868 => 0x0,
    0x869 => 0x0,
    0x86a => 0x0,
    0x86b => 0x0,
    0x86c => 0x0,
    0x86d => 0x0,
    0x86e => 0x0,
    0x86f => 0x0,
    0x870 => 0x0,
    0x871 => 0x0,
    0x872 => 0x0,
    0x873 => 0x0,
    0x874 => 0x0,
    0x875 => 0x0,
    0x876 => 0x0,
    0x877 => 0x0,
    0x878 => 0x0,
    0x879 => 0x0,
    0x87a => 0x0,
    0x87b => 0x0,
    0x87c => 0x0,
    0x87d => 0x0,
    0x87e => 0x0,
    0x87f => 0x984,
    0x880 => 0x0,
    0x881 => 0x0,
    0x882 => 0x0,
    0x883 => 0x0,
    0x884 => 0x0,
    0x885 => 0x0,
    0x886 => 0x0,
    0x887 => 0x0,
    0x888 => 0x0,
    0x889 => 0x0,
    0x88a => 0x0,
    0x88b => 0x0,
    0x88c => 0x0,
    0x88d => 0x0,
    0x88e => 0x0,
    0x88f => 0x0,
    0x890 => 0x0,
    0x891 => 0x0,
    0x892 => 0x0,
    0x893 => 0x0,
    0x894 => 0x0,
    0x895 => 0x0,
    0x896 => 0x0,
    0x897 => 0x0,
    0x898 => 0x0,
    0x899 => 0x0,
    0x89a => 0x0,
    0x89b => 0x0,
    0x89c => 0x0,
    0x89d => 0x0,
    0x89e => 0x0,
    0x89f => 0x984,
    0x8a0 => 0x0,
    0x8a1 => 0x0,
    0x8a2 => 0x0,
    0x8a3 => 0x0,
    0x8a4 => 0x0,
    0x8a5 => 0x0,
    0x8a6 => 0x0,
    0x8a7 => 0x0,
    0x8a8 => 0x0,
    0x8a9 => 0x0,
    0x8aa => 0x0,
    0x8ab => 0x0,
    0x8ac => 0x0,
    0x8ad => 0x0,
    0x8ae => 0x0,
    0x8af => 0x0,
    0x8b0 => 0x0,
    0x8b1 => 0x0,
    0x8b2 => 0x0,
    0x8b3 => 0x0,
    0x8b4 => 0x0,
    0x8b5 => 0x0,
    0x8b6 => 0x0,
    0x8b7 => 0x0,
    0x8b8 => 0x0,
    0x8b9 => 0x0,
    0x8ba => 0x0,
    0x8bb => 0x0,
    0x8bc => 0x0,
    0x8bd => 0x0,
    0x8be => 0x0,
    0x8bf => 0x984,
    0x8c0 => 0x0,
    0x8c1 => 0x0,
    0x8c2 => 0x0,
    0x8c3 => 0x0,
    0x8c4 => 0x0,
    0x8c5 => 0x0,
    0x8c6 => 0x0,
    0x8c7 => 0x0,
    0x8c8 => 0x0,
    0x8c9 => 0x0,
    0x8ca => 0x0,
    0x8cb => 0x0,
    0x8cc => 0x0,
    0x8cd => 0x0,
    0x8ce => 0x0,
    0x8cf => 0x0,
    0x8d0 => 0x0,
    0x8d1 => 0x0,
    0x8d2 => 0x0,
    0x8d3 => 0x0,
    0x8d4 => 0x0,
    0x8d5 => 0x0,
    0x8d6 => 0x0,
    0x8d7 => 0x0,
    0x8d8 => 0x0,
    0x8d9 => 0x0,
    0x8da => 0x0,
    0x8db => 0x0,
    0x8dc => 0x0,
    0x8dd => 0x0,
    0x8de => 0x0,
    0x8df => 0x984,
    0x8e0 => 0x0,
    0x8e1 => 0x0,
    0x8e2 => 0x0,
    0x8e3 => 0x0,
    0x8e4 => 0x0,
    0x8e5 => 0x0,
    0x8e6 => 0x0,
    0x8e7 => 0x0,
    0x8e8 => 0x0,
    0x8e9 => 0x0,
    0x8ea => 0x0,
    0x8eb => 0x0,
    0x8ec => 0x0,
    0x8ed => 0x0,
    0x8ee => 0x0,
    0x8ef => 0x0,
    0x8f0 => 0x0,
    0x8f1 => 0x0,
    0x8f2 => 0x0,
    0x8f3 => 0x0,
    0x8f4 => 0x0,
    0x8f5 => 0x0,
    0x8f6 => 0x0,
    0x8f7 => 0x0,
    0x8f8 => 0x0,
    0x8f9 => 0x0,
    0x8fa => 0x0,
    0x8fb => 0x0,
    0x8fc => 0x0,
    0x8fd => 0x0,
    0x8fe => 0x0,
    0x8ff => 0x984,
    0x900 => 0x0,
    0x901 => 0x0,
    0x902 => 0x0,
    0x903 => 0x0,
    0x904 => 0x0,
    0x905 => 0x0,
    0x906 => 0x0,
    0x907 => 0x0,
    0x908 => 0x0,
    0x909 => 0x0,
    0x90a => 0x0,
    0x90b => 0x0,
    0x90c => 0x0,
    0x90d => 0x0,
    0x90e => 0x0,
    0x90f => 0x0,
    0x910 => 0x0,
    0x911 => 0x0,
    0x912 => 0x0,
    0x913 => 0x0,
    0x914 => 0x0,
    0x915 => 0x0,
    0x916 => 0x0,
    0x917 => 0x0,
    0x918 => 0x0,
    0x919 => 0x0,
    0x91a => 0x0,
    0x91b => 0x0,
    0x91c => 0x0,
    0x91d => 0x0,
    0x91e => 0x0,
    0x91f => 0x984,
    0x920 => 0x0,
    0x921 => 0x0,
    0x922 => 0x0,
    0x923 => 0x0,
    0x924 => 0x0,
    0x925 => 0x0,
    0x926 => 0x0,
    0x927 => 0x0,
    0x928 => 0x0,
    0x929 => 0x0,
    0x92a => 0x0,
    0x92b => 0x0,
    0x92c => 0x0,
    0x92d => 0x0,
    0x92e => 0x0,
    0x92f => 0x0,
    0x930 => 0x0,
    0x931 => 0x0,
    0x932 => 0x0,
    0x933 => 0x0,
    0x934 => 0x0,
    0x935 => 0x0,
    0x936 => 0x0,
    0x937 => 0x0,
    0x938 => 0x0,
    0x939 => 0x0,
    0x93a => 0x0,
    0x93b => 0x0,
    0x93c => 0x0,
    0x93d => 0x0,
    0x93e => 0x0,
    0x93f => 0x984,
    0x940 => 0x0,
    0x941 => 0x0,
    0x942 => 0x0,
    0x943 => 0x0,
    0x944 => 0x0,
    0x945 => 0x0,
    0x946 => 0x0,
    0x947 => 0x0,
    0x948 => 0x0,
    0x949 => 0x0,
    0x94a => 0x0,
    0x94b => 0x0,
    0x94c => 0x0,
    0x94d => 0x0,
    0x94e => 0x0,
    0x94f => 0x0,
    0x950 => 0x0,
    0x951 => 0x0,
    0x952 => 0x0,
    0x953 => 0x0,
    0x954 => 0x0,
    0x955 => 0x0,
    0x956 => 0x0,
    0x957 => 0x0,
    0x958 => 0x0,
    0x959 => 0x0,
    0x95a => 0x0,
    0x95b => 0x0,
    0x95c => 0x0,
    0x95d => 0x0,
    0x95e => 0x0,
    0x95f => 0x984,
    0x960 => 0x0,
    0x961 => 0x0,
    0x962 => 0x0,
    0x963 => 0x0,
    0x964 => 0x0,
    0x965 => 0x0,
    0x966 => 0x0,
    0x967 => 0x0,
    0x968 => 0x0,
    0x969 => 0x0,
    0x96a => 0x0,
    0x96b => 0x0,
    0x96c => 0x0,
    0x96d => 0x0,
    0x96e => 0x0,
    0x96f => 0x0,
    0x970 => 0x0,
    0x971 => 0x0,
    0x972 => 0x0,
    0x973 => 0x0,
    0x974 => 0x0,
    0x975 => 0x0,
    0x976 => 0x0,
    0x977 => 0x0,
    0x978 => 0x0,
    0x979 => 0x0,
    0x97a => 0x0,
    0x97b => 0x0,
    0x97c => 0x0,
    0x97d => 0x0,
    0x97e => 0x0,
    0x97f => 0x984,
    0x980 => 0x0,
    0x981 => 0x0,
    0x982 => 0x0,
    0x983 => 0x0,
    0x984 => 0x0,
    0x985 => 0x0,
    0x986 => 0x0,
    0x987 => 0x0,
    0x988 => 0x0,
    0x989 => 0x0,
    0x98a => 0x0,
    0x98b => 0x0,
    0x98c => 0x0,
    0x98d => 0x0,
    0x98e => 0x0,
    0x98f => 0x0,
    0x990 => 0x0,
    0x991 => 0x0,
    0x992 => 0x0,
    0x993 => 0x0,
    0x994 => 0x0,
    0x995 => 0x0,
    0x996 => 0x0,
    0x997 => 0x0,
    0x998 => 0x0,
    0x999 => 0x0,
    0x99a => 0x0,
    0x99b => 0x0,
    0x99c => 0x0,
    0x99d => 0x0,
    0x99e => 0x0,
    0x99f => 0x984,
    0x9a0 => 0x0,
    0x9a1 => 0x0,
    0x9a2 => 0x0,
    0x9a3 => 0x0,
    0x9a4 => 0x0,
    0x9a5 => 0x0,
    0x9a6 => 0x0,
    0x9a7 => 0x0,
    0x9a8 => 0x0,
    0x9a9 => 0x0,
    0x9aa => 0x0,
    0x9ab => 0x0,
    0x9ac => 0x0,
    0x9ad => 0x0,
    0x9ae => 0x0,
    0x9af => 0x0,
    0x9b0 => 0x0,
    0x9b1 => 0x0,
    0x9b2 => 0x0,
    0x9b3 => 0x0,
    0x9b4 => 0x0,
    0x9b5 => 0x0,
    0x9b6 => 0x0,
    0x9b7 => 0x0,
    0x9b8 => 0x0,
    0x9b9 => 0x0,
    0x9ba => 0x0,
    0x9bb => 0x0,
    0x9bc => 0x0,
    0x9bd => 0x0,
    0x9be => 0x0,
    0x9bf => 0x984,
    0x9c0 => 0x0,
    0x9c1 => 0x0,
    0x9c2 => 0x0,
    0x9c3 => 0x0,
    0x9c4 => 0x0,
    0x9c5 => 0x0,
    0x9c6 => 0x0,
    0x9c7 => 0x0,
    0x9c8 => 0x0,
    0x9c9 => 0x0,
    0x9ca => 0x0,
    0x9cb => 0x0,
    0x9cc => 0x0,
    0x9cd => 0x0,
    0x9ce => 0x0,
    0x9cf => 0x0,
    0x9d0 => 0x0,
    0x9d1 => 0x0,
    0x9d2 => 0x0,
    0x9d3 => 0x0,
    0x9d4 => 0x0,
    0x9d5 => 0x0,
    0x9d6 => 0x0,
    0x9d7 => 0x0,
    0x9d8 => 0x0,
    0x9d9 => 0x0,
    0x9da => 0x0,
    0x9db => 0x0,
    0x9dc => 0x0,
    0x9dd => 0x0,
    0x9de => 0x0,
    0x9df => 0x984,
    0x9e0 => 0x0,
    0x9e1 => 0x0,
    0x9e2 => 0x0,
    0x9e3 => 0x0,
    0x9e4 => 0x0,
    0x9e5 => 0x0,
    0x9e6 => 0x0,
    0x9e7 => 0x0,
    0x9e8 => 0x0,
    0x9e9 => 0x0,
    0x9ea => 0x0,
    0x9eb => 0x0,
    0x9ec => 0x0,
    0x9ed => 0x0,
    0x9ee => 0x0,
    0x9ef => 0x0,
    0x9f0 => 0x0,
    0x9f1 => 0x0,
    0x9f2 => 0x0,
    0x9f3 => 0x0,
    0x9f4 => 0x0,
    0x9f5 => 0x0,
    0x9f6 => 0x0,
    0x9f7 => 0x0,
    0x9f8 => 0x0,
    0x9f9 => 0x0,
    0x9fa => 0x0,
    0x9fb => 0x0,
    0x9fc => 0x0,
    0x9fd => 0x0,
    0x9fe => 0x0,
    0x9ff => 0x984,
    0xa00 => 0x0,
    0xa01 => 0x0,
    0xa02 => 0x0,
    0xa03 => 0x0,
    0xa04 => 0x0,
    0xa05 => 0x0,
    0xa06 => 0x0,
    0xa07 => 0x0,
    0xa08 => 0x0,
    0xa09 => 0x0,
    0xa0a => 0x0,
    0xa0b => 0x0,
    0xa0c => 0x0,
    0xa0d => 0x0,
    0xa0e => 0x0,
    0xa0f => 0x0,
    0xa10 => 0x0,
    0xa11 => 0x0,
    0xa12 => 0x0,
    0xa13 => 0x0,
    0xa14 => 0x0,
    0xa15 => 0x0,
    0xa16 => 0x0,
    0xa17 => 0x0,
    0xa18 => 0x0,
    0xa19 => 0x0,
    0xa1a => 0x0,
    0xa1b => 0x0,
    0xa1c => 0x0,
    0xa1d => 0x0,
    0xa1e => 0x0,
    0xa1f => 0x984,
    0xa20 => 0x0,
    0xa21 => 0x0,
    0xa22 => 0x0,
    0xa23 => 0x0,
    0xa24 => 0x0,
    0xa25 => 0x0,
    0xa26 => 0x0,
    0xa27 => 0x0,
    0xa28 => 0x0,
    0xa29 => 0x0,
    0xa2a => 0x0,
    0xa2b => 0x0,
    0xa2c => 0x0,
    0xa2d => 0x0,
    0xa2e => 0x0,
    0xa2f => 0x0,
    0xa30 => 0x0,
    0xa31 => 0x0,
    0xa32 => 0x0,
    0xa33 => 0x0,
    0xa34 => 0x0,
    0xa35 => 0x0,
    0xa36 => 0x0,
    0xa37 => 0x0,
    0xa38 => 0x0,
    0xa39 => 0x0,
    0xa3a => 0x0,
    0xa3b => 0x0,
    0xa3c => 0x0,
    0xa3d => 0x0,
    0xa3e => 0x0,
    0xa3f => 0x984,
    0xa40 => 0x0,
    0xa41 => 0x0,
    0xa42 => 0x0,
    0xa43 => 0x0,
    0xa44 => 0x0,
    0xa45 => 0x0,
    0xa46 => 0x0,
    0xa47 => 0x0,
    0xa48 => 0x0,
    0xa49 => 0x0,
    0xa4a => 0x0,
    0xa4b => 0x0,
    0xa4c => 0x0,
    0xa4d => 0x0,
    0xa4e => 0x0,
    0xa4f => 0x0,
    0xa50 => 0x0,
    0xa51 => 0x0,
    0xa52 => 0x0,
    0xa53 => 0x0,
    0xa54 => 0x0,
    0xa55 => 0x0,
    0xa56 => 0x0,
    0xa57 => 0x0,
    0xa58 => 0x0,
    0xa59 => 0x0,
    0xa5a => 0x0,
    0xa5b => 0x0,
    0xa5c => 0x0,
    0xa5d => 0x0,
    0xa5e => 0x0,
    0xa5f => 0x984,
    0xa60 => 0x0,
    0xa61 => 0x0,
    0xa62 => 0x0,
    0xa63 => 0x0,
    0xa64 => 0x0,
    0xa65 => 0x0,
    0xa66 => 0x0,
    0xa67 => 0x0,
    0xa68 => 0x0,
    0xa69 => 0x0,
    0xa6a => 0x0,
    0xa6b => 0x0,
    0xa6c => 0x0,
    0xa6d => 0x0,
    0xa6e => 0x0,
    0xa6f => 0x0,
    0xa70 => 0x0,
    0xa71 => 0x0,
    0xa72 => 0x0,
    0xa73 => 0x0,
    0xa74 => 0x0,
    0xa75 => 0x0,
    0xa76 => 0x0,
    0xa77 => 0x0,
    0xa78 => 0x0,
    0xa79 => 0x0,
    0xa7a => 0x0,
    0xa7b => 0x0,
    0xa7c => 0x0,
    0xa7d => 0x0,
    0xa7e => 0x0,
    0xa7f => 0x984,
    0xa80 => 0x0,
    0xa81 => 0x0,
    0xa82 => 0x0,
    0xa83 => 0x0,
    0xa84 => 0x0,
    0xa85 => 0x0,
    0xa86 => 0x0,
    0xa87 => 0x0,
    0xa88 => 0x0,
    0xa89 => 0x0,
    0xa8a => 0x0,
    0xa8b => 0x0,
    0xa8c => 0x0,
    0xa8d => 0x0,
    0xa8e => 0x0,
    0xa8f => 0x0,
    0xa90 => 0x0,
    0xa91 => 0x0,
    0xa92 => 0x0,
    0xa93 => 0x0,
    0xa94 => 0x0,
    0xa95 => 0x0,
    0xa96 => 0x0,
    0xa97 => 0x0,
    0xa98 => 0x0,
    0xa99 => 0x0,
    0xa9a => 0x0,
    0xa9b => 0x0,
    0xa9c => 0x0,
    0xa9d => 0x0,
    0xa9e => 0x0,
    0xa9f => 0x984,
    0xaa0 => 0x0,
    0xaa1 => 0x0,
    0xaa2 => 0x0,
    0xaa3 => 0x0,
    0xaa4 => 0x0,
    0xaa5 => 0x0,
    0xaa6 => 0x0,
    0xaa7 => 0x0,
    0xaa8 => 0x0,
    0xaa9 => 0x0,
    0xaaa => 0x0,
    0xaab => 0x0,
    0xaac => 0x0,
    0xaad => 0x0,
    0xaae => 0x0,
    0xaaf => 0x0,
    0xab0 => 0x0,
    0xab1 => 0x0,
    0xab2 => 0x0,
    0xab3 => 0x0,
    0xab4 => 0x0,
    0xab5 => 0x0,
    0xab6 => 0x0,
    0xab7 => 0x0,
    0xab8 => 0x0,
    0xab9 => 0x0,
    0xaba => 0x0,
    0xabb => 0x0,
    0xabc => 0x0,
    0xabd => 0x0,
    0xabe => 0x0,
    0xabf => 0x984,
    0xac0 => 0x0,
    0xac1 => 0x0,
    0xac2 => 0x0,
    0xac3 => 0x0,
    0xac4 => 0x0,
    0xac5 => 0x0,
    0xac6 => 0x0,
    0xac7 => 0x0,
    0xac8 => 0x0,
    0xac9 => 0x0,
    0xaca => 0x0,
    0xacb => 0x0,
    0xacc => 0x0,
    0xacd => 0x0,
    0xace => 0x0,
    0xacf => 0x0,
    0xad0 => 0x0,
    0xad1 => 0x0,
    0xad2 => 0x0,
    0xad3 => 0x0,
    0xad4 => 0x0,
    0xad5 => 0x0,
    0xad6 => 0x0,
    0xad7 => 0x0,
    0xad8 => 0x0,
    0xad9 => 0x0,
    0xada => 0x0,
    0xadb => 0x0,
    0xadc => 0x0,
    0xadd => 0x0,
    0xade => 0x0,
    0xadf => 0x984,
    0xae0 => 0x0,
    0xae1 => 0x0,
    0xae2 => 0x0,
    0xae3 => 0x0,
    0xae4 => 0x0,
    0xae5 => 0x0,
    0xae6 => 0x0,
    0xae7 => 0x0,
    0xae8 => 0x0,
    0xae9 => 0x0,
    0xaea => 0x0,
    0xaeb => 0x0,
    0xaec => 0x0,
    0xaed => 0x0,
    0xaee => 0x0,
    0xaef => 0x0,
    0xaf0 => 0x0,
    0xaf1 => 0x0,
    0xaf2 => 0x0,
    0xaf3 => 0x0,
    0xaf4 => 0x0,
    0xaf5 => 0x0,
    0xaf6 => 0x0,
    0xaf7 => 0x0,
    0xaf8 => 0x0,
    0xaf9 => 0x0,
    0xafa => 0x0,
    0xafb => 0x0,
    0xafc => 0x0,
    0xafd => 0x0,
    0xafe => 0x0,
    0xaff => 0x984,
    0xb00 => 0x0,
    0xb01 => 0x0,
    0xb02 => 0x0,
    0xb03 => 0x0,
    0xb04 => 0x0,
    0xb05 => 0x0,
    0xb06 => 0x0,
    0xb07 => 0x0,
    0xb08 => 0x0,
    0xb09 => 0x0,
    0xb0a => 0x0,
    0xb0b => 0x0,
    0xb0c => 0x0,
    0xb0d => 0x0,
    0xb0e => 0x0,
    0xb0f => 0x0,
    0xb10 => 0x0,
    0xb11 => 0x0,
    0xb12 => 0x0,
    0xb13 => 0x0,
    0xb14 => 0x0,
    0xb15 => 0x0,
    0xb16 => 0x0,
    0xb17 => 0x0,
    0xb18 => 0x0,
    0xb19 => 0x0,
    0xb1a => 0x0,
    0xb1b => 0x0,
    0xb1c => 0x0,
    0xb1d => 0x0,
    0xb1e => 0x0,
    0xb1f => 0x984,
    0xb20 => 0x0,
    0xb21 => 0x0,
    0xb22 => 0x0,
    0xb23 => 0x0,
    0xb24 => 0x0,
    0xb25 => 0x0,
    0xb26 => 0x0,
    0xb27 => 0x0,
    0xb28 => 0x0,
    0xb29 => 0x0,
    0xb2a => 0x0,
    0xb2b => 0x0,
    0xb2c => 0x0,
    0xb2d => 0x0,
    0xb2e => 0x0,
    0xb2f => 0x0,
    0xb30 => 0x0,
    0xb31 => 0x0,
    0xb32 => 0x0,
    0xb33 => 0x0,
    0xb34 => 0x0,
    0xb35 => 0x0,
    0xb36 => 0x0,
    0xb37 => 0x0,
    0xb38 => 0x0,
    0xb39 => 0x0,
    0xb3a => 0x0,
    0xb3b => 0x0,
    0xb3c => 0x0,
    0xb3d => 0x0,
    0xb3e => 0x0,
    0xb3f => 0x984,
    0xb40 => 0x0,
    0xb41 => 0x0,
    0xb42 => 0x0,
    0xb43 => 0x0,
    0xb44 => 0x0,
    0xb45 => 0x0,
    0xb46 => 0x0,
    0xb47 => 0x0,
    0xb48 => 0x0,
    0xb49 => 0x0,
    0xb4a => 0x0,
    0xb4b => 0x0,
    0xb4c => 0x0,
    0xb4d => 0x0,
    0xb4e => 0x0,
    0xb4f => 0x0,
    0xb50 => 0x0,
    0xb51 => 0x0,
    0xb52 => 0x0,
    0xb53 => 0x0,
    0xb54 => 0x0,
    0xb55 => 0x0,
    0xb56 => 0x0,
    0xb57 => 0x0,
    0xb58 => 0x0,
    0xb59 => 0x0,
    0xb5a => 0x0,
    0xb5b => 0x0,
    0xb5c => 0x0,
    0xb5d => 0x0,
    0xb5e => 0x0,
    0xb5f => 0x984,
    0xb60 => 0x0,
    0xb61 => 0x0,
    0xb62 => 0x0,
    0xb63 => 0x0,
    0xb64 => 0x0,
    0xb65 => 0x0,
    0xb66 => 0x0,
    0xb67 => 0x0,
    0xb68 => 0x0,
    0xb69 => 0x0,
    0xb6a => 0x0,
    0xb6b => 0x0,
    0xb6c => 0x0,
    0xb6d => 0x0,
    0xb6e => 0x0,
    0xb6f => 0x0,
    0xb70 => 0x0,
    0xb71 => 0x0,
    0xb72 => 0x0,
    0xb73 => 0x0,
    0xb74 => 0x0,
    0xb75 => 0x0,
    0xb76 => 0x0,
    0xb77 => 0x0,
    0xb78 => 0x0,
    0xb79 => 0x0,
    0xb7a => 0x0,
    0xb7b => 0x0,
    0xb7c => 0x0,
    0xb7d => 0x0,
    0xb7e => 0x0,
    0xb7f => 0x984,
    0xb80 => 0x0,
    0xb81 => 0x0,
    0xb82 => 0x0,
    0xb83 => 0x0,
    0xb84 => 0x0,
    0xb85 => 0x0,
    0xb86 => 0x0,
    0xb87 => 0x0,
    0xb88 => 0x0,
    0xb89 => 0x0,
    0xb8a => 0x0,
    0xb8b => 0x0,
    0xb8c => 0x0,
    0xb8d => 0x0,
    0xb8e => 0x0,
    0xb8f => 0x0,
    0xb90 => 0x0,
    0xb91 => 0x0,
    0xb92 => 0x0,
    0xb93 => 0x0,
    0xb94 => 0x0,
    0xb95 => 0x0,
    0xb96 => 0x0,
    0xb97 => 0x0,
    0xb98 => 0x0,
    0xb99 => 0x0,
    0xb9a => 0x0,
    0xb9b => 0x0,
    0xb9c => 0x0,
    0xb9d => 0x0,
    0xb9e => 0x0,
    0xb9f => 0x984,
    0xba0 => 0x0,
    0xba1 => 0x0,
    0xba2 => 0x0,
    0xba3 => 0x0,
    0xba4 => 0x0,
    0xba5 => 0x0,
    0xba6 => 0x0,
    0xba7 => 0x0,
    0xba8 => 0x0,
    0xba9 => 0x0,
    0xbaa => 0x0,
    0xbab => 0x0,
    0xbac => 0x0,
    0xbad => 0x0,
    0xbae => 0x0,
    0xbaf => 0x0,
    0xbb0 => 0x0,
    0xbb1 => 0x0,
    0xbb2 => 0x0,
    0xbb3 => 0x0,
    0xbb4 => 0x0,
    0xbb5 => 0x0,
    0xbb6 => 0x0,
    0xbb7 => 0x0,
    0xbb8 => 0x0,
    0xbb9 => 0x0,
    0xbba => 0x0,
    0xbbb => 0x0,
    0xbbc => 0x0,
    0xbbd => 0x0,
    0xbbe => 0x0,
    0xbbf => 0x984,
    0xbc0 => 0x0,
    0xbc1 => 0x0,
    0xbc2 => 0x0,
    0xbc3 => 0x0,
    0xbc4 => 0x0,
    0xbc5 => 0x0,
    0xbc6 => 0x0,
    0xbc7 => 0x0,
    0xbc8 => 0x0,
    0xbc9 => 0x0,
    0xbca => 0x0,
    0xbcb => 0x0,
    0xbcc => 0x0,
    0xbcd => 0x0,
    0xbce => 0x0,
    0xbcf => 0x0,
    0xbd0 => 0x0,
    0xbd1 => 0x0,
    0xbd2 => 0x0,
    0xbd3 => 0x0,
    0xbd4 => 0x0,
    0xbd5 => 0x0,
    0xbd6 => 0x0,
    0xbd7 => 0x0,
    0xbd8 => 0x0,
    0xbd9 => 0x0,
    0xbda => 0x0,
    0xbdb => 0x0,
    0xbdc => 0x0,
    0xbdd => 0x0,
    0xbde => 0x0,
    0xbdf => 0x984,
    0xbe0 => 0x0,
    0xbe1 => 0x0,
    0xbe2 => 0x0,
    0xbe3 => 0x0,
    0xbe4 => 0x0,
    0xbe5 => 0x0,
    0xbe6 => 0x0,
    0xbe7 => 0x0,
    0xbe8 => 0x0,
    0xbe9 => 0x0,
    0xbea => 0x0,
    0xbeb => 0x0,
    0xbec => 0x0,
    0xbed => 0x0,
    0xbee => 0x0,
    0xbef => 0x0,
    0xbf0 => 0x0,
    0xbf1 => 0x0,
    0xbf2 => 0x0,
    0xbf3 => 0x0,
    0xbf4 => 0x0,
    0xbf5 => 0x0,
    0xbf6 => 0x0,
    0xbf7 => 0x0,
    0xbf8 => 0x0,
    0xbf9 => 0x0,
    0xbfa => 0x0,
    0xbfb => 0x0,
    0xbfc => 0x0,
    0xbfd => 0x0,
    0xbfe => 0x0,
    0xbff => 0x984,
    0xc00 => 0x0,
    0xc01 => 0x0,
    0xc02 => 0x0,
    0xc03 => 0x0,
    0xc04 => 0x0,
    0xc05 => 0x0,
    0xc06 => 0x0,
    0xc07 => 0x0,
    0xc08 => 0x0,
    0xc09 => 0x0,
    0xc0a => 0x0,
    0xc0b => 0x0,
    0xc0c => 0x0,
    0xc0d => 0x0,
    0xc0e => 0x0,
    0xc0f => 0x0,
    0xc10 => 0x0,
    0xc11 => 0x0,
    0xc12 => 0x0,
    0xc13 => 0x0,
    0xc14 => 0x0,
    0xc15 => 0x0,
    0xc16 => 0x0,
    0xc17 => 0x0,
    0xc18 => 0x0,
    0xc19 => 0x0,
    0xc1a => 0x0,
    0xc1b => 0x0,
    0xc1c => 0x0,
    0xc1d => 0x0,
    0xc1e => 0x0,
    0xc1f => 0x985,
    0xc20 => 0x0,
    0xc21 => 0x0,
    0xc22 => 0x0,
    0xc23 => 0x0,
    0xc24 => 0x0,
    0xc25 => 0x0,
    0xc26 => 0x0,
    0xc27 => 0x0,
    0xc28 => 0x0,
    0xc29 => 0x0,
    0xc2a => 0x0,
    0xc2b => 0x0,
    0xc2c => 0x0,
    0xc2d => 0x0,
    0xc2e => 0x0,
    0xc2f => 0x0,
    0xc30 => 0x0,
    0xc31 => 0x0,
    0xc32 => 0x0,
    0xc33 => 0x0,
    0xc34 => 0x0,
    0xc35 => 0x0,
    0xc36 => 0x0,
    0xc37 => 0x0,
    0xc38 => 0x0,
    0xc39 => 0x0,
    0xc3a => 0x0,
    0xc3b => 0x0,
    0xc3c => 0x0,
    0xc3d => 0x0,
    0xc3e => 0x0,
    0xc3f => 0x985,
    0xc40 => 0x0,
    0xc41 => 0x0,
    0xc42 => 0x0,
    0xc43 => 0x0,
    0xc44 => 0x0,
    0xc45 => 0x0,
    0xc46 => 0x0,
    0xc47 => 0x0,
    0xc48 => 0x0,
    0xc49 => 0x0,
    0xc4a => 0x0,
    0xc4b => 0x0,
    0xc4c => 0x0,
    0xc4d => 0x0,
    0xc4e => 0x0,
    0xc4f => 0x0,
    0xc50 => 0x0,
    0xc51 => 0x0,
    0xc52 => 0x0,
    0xc53 => 0x0,
    0xc54 => 0x0,
    0xc55 => 0x0,
    0xc56 => 0x0,
    0xc57 => 0x0,
    0xc58 => 0x0,
    0xc59 => 0x0,
    0xc5a => 0x0,
    0xc5b => 0x0,
    0xc5c => 0x0,
    0xc5d => 0x0,
    0xc5e => 0x0,
    0xc5f => 0x985,
    0xc60 => 0x0,
    0xc61 => 0x0,
    0xc62 => 0x0,
    0xc63 => 0x0,
    0xc64 => 0x0,
    0xc65 => 0x0,
    0xc66 => 0x0,
    0xc67 => 0x0,
    0xc68 => 0x0,
    0xc69 => 0x0,
    0xc6a => 0x0,
    0xc6b => 0x0,
    0xc6c => 0x0,
    0xc6d => 0x0,
    0xc6e => 0x0,
    0xc6f => 0x0,
    0xc70 => 0x0,
    0xc71 => 0x0,
    0xc72 => 0x0,
    0xc73 => 0x0,
    0xc74 => 0x0,
    0xc75 => 0x0,
    0xc76 => 0x0,
    0xc77 => 0x0,
    0xc78 => 0x0,
    0xc79 => 0x0,
    0xc7a => 0x0,
    0xc7b => 0x0,
    0xc7c => 0x0,
    0xc7d => 0x0,
    0xc7e => 0x0,
    0xc7f => 0x985,
    0xc80 => 0x0,
    0xc81 => 0x0,
    0xc82 => 0x0,
    0xc83 => 0x0,
    0xc84 => 0x0,
    0xc85 => 0x0,
    0xc86 => 0x0,
    0xc87 => 0x0,
    0xc88 => 0x0,
    0xc89 => 0x0,
    0xc8a => 0x0,
    0xc8b => 0x0,
    0xc8c => 0x0,
    0xc8d => 0x0,
    0xc8e => 0x0,
    0xc8f => 0x0,
    0xc90 => 0x0,
    0xc91 => 0x0,
    0xc92 => 0x0,
    0xc93 => 0x0,
    0xc94 => 0x0,
    0xc95 => 0x0,
    0xc96 => 0x0,
    0xc97 => 0x0,
    0xc98 => 0x0,
    0xc99 => 0x0,
    0xc9a => 0x0,
    0xc9b => 0x0,
    0xc9c => 0x0,
    0xc9d => 0x0,
    0xc9e => 0x0,
    0xc9f => 0x985,
    0xca0 => 0x0,
    0xca1 => 0x0,
    0xca2 => 0x0,
    0xca3 => 0x0,
    0xca4 => 0x0,
    0xca5 => 0x0,
    0xca6 => 0x0,
    0xca7 => 0x0,
    0xca8 => 0x0,
    0xca9 => 0x0,
    0xcaa => 0x0,
    0xcab => 0x0,
    0xcac => 0x0,
    0xcad => 0x0,
    0xcae => 0x0,
    0xcaf => 0x0,
    0xcb0 => 0x0,
    0xcb1 => 0x0,
    0xcb2 => 0x0,
    0xcb3 => 0x0,
    0xcb4 => 0x0,
    0xcb5 => 0x0,
    0xcb6 => 0x0,
    0xcb7 => 0x0,
    0xcb8 => 0x0,
    0xcb9 => 0x0,
    0xcba => 0x0,
    0xcbb => 0x0,
    0xcbc => 0x0,
    0xcbd => 0x0,
    0xcbe => 0x0,
    0xcbf => 0x985,
    0xcc0 => 0x0,
    0xcc1 => 0x0,
    0xcc2 => 0x0,
    0xcc3 => 0x0,
    0xcc4 => 0x0,
    0xcc5 => 0x0,
    0xcc6 => 0x0,
    0xcc7 => 0x0,
    0xcc8 => 0x0,
    0xcc9 => 0x0,
    0xcca => 0x0,
    0xccb => 0x0,
    0xccc => 0x0,
    0xccd => 0x0,
    0xcce => 0x0,
    0xccf => 0x0,
    0xcd0 => 0x0,
    0xcd1 => 0x0,
    0xcd2 => 0x0,
    0xcd3 => 0x0,
    0xcd4 => 0x0,
    0xcd5 => 0x0,
    0xcd6 => 0x0,
    0xcd7 => 0x0,
    0xcd8 => 0x0,
    0xcd9 => 0x0,
    0xcda => 0x0,
    0xcdb => 0x0,
    0xcdc => 0x0,
    0xcdd => 0x0,
    0xcde => 0x0,
    0xcdf => 0x985,
    0xce0 => 0x0,
    0xce1 => 0x0,
    0xce2 => 0x0,
    0xce3 => 0x0,
    0xce4 => 0x0,
    0xce5 => 0x0,
    0xce6 => 0x0,
    0xce7 => 0x0,
    0xce8 => 0x0,
    0xce9 => 0x0,
    0xcea => 0x0,
    0xceb => 0x0,
    0xcec => 0x0,
    0xced => 0x0,
    0xcee => 0x0,
    0xcef => 0x0,
    0xcf0 => 0x0,
    0xcf1 => 0x0,
    0xcf2 => 0x0,
    0xcf3 => 0x0,
    0xcf4 => 0x0,
    0xcf5 => 0x0,
    0xcf6 => 0x0,
    0xcf7 => 0x0,
    0xcf8 => 0x0,
    0xcf9 => 0x0,
    0xcfa => 0x0,
    0xcfb => 0x0,
    0xcfc => 0x0,
    0xcfd => 0x0,
    0xcfe => 0x0,
    0xcff => 0x985,
    0xd00 => 0x0,
    0xd01 => 0x0,
    0xd02 => 0x0,
    0xd03 => 0x0,
    0xd04 => 0x0,
    0xd05 => 0x0,
    0xd06 => 0x0,
    0xd07 => 0x0,
    0xd08 => 0x0,
    0xd09 => 0x0,
    0xd0a => 0x0,
    0xd0b => 0x0,
    0xd0c => 0x0,
    0xd0d => 0x0,
    0xd0e => 0x0,
    0xd0f => 0x0,
    0xd10 => 0x0,
    0xd11 => 0x0,
    0xd12 => 0x0,
    0xd13 => 0x0,
    0xd14 => 0x0,
    0xd15 => 0x0,
    0xd16 => 0x0,
    0xd17 => 0x0,
    0xd18 => 0x0,
    0xd19 => 0x0,
    0xd1a => 0x0,
    0xd1b => 0x0,
    0xd1c => 0x0,
    0xd1d => 0x0,
    0xd1e => 0x0,
    0xd1f => 0x985,
    0xd20 => 0x0,
    0xd21 => 0x0,
    0xd22 => 0x0,
    0xd23 => 0x0,
    0xd24 => 0x0,
    0xd25 => 0x0,
    0xd26 => 0x0,
    0xd27 => 0x0,
    0xd28 => 0x0,
    0xd29 => 0x0,
    0xd2a => 0x0,
    0xd2b => 0x0,
    0xd2c => 0x0,
    0xd2d => 0x0,
    0xd2e => 0x0,
    0xd2f => 0x0,
    0xd30 => 0x0,
    0xd31 => 0x0,
    0xd32 => 0x0,
    0xd33 => 0x0,
    0xd34 => 0x0,
    0xd35 => 0x0,
    0xd36 => 0x0,
    0xd37 => 0x0,
    0xd38 => 0x0,
    0xd39 => 0x0,
    0xd3a => 0x0,
    0xd3b => 0x0,
    0xd3c => 0x0,
    0xd3d => 0x0,
    0xd3e => 0x0,
    0xd3f => 0x985,
    0xd40 => 0x0,
    0xd41 => 0x0,
    0xd42 => 0x0,
    0xd43 => 0x0,
    0xd44 => 0x0,
    0xd45 => 0x0,
    0xd46 => 0x0,
    0xd47 => 0x0,
    0xd48 => 0x0,
    0xd49 => 0x0,
    0xd4a => 0x0,
    0xd4b => 0x0,
    0xd4c => 0x0,
    0xd4d => 0x0,
    0xd4e => 0x0,
    0xd4f => 0x0,
    0xd50 => 0x0,
    0xd51 => 0x0,
    0xd52 => 0x0,
    0xd53 => 0x0,
    0xd54 => 0x0,
    0xd55 => 0x0,
    0xd56 => 0x0,
    0xd57 => 0x0,
    0xd58 => 0x0,
    0xd59 => 0x0,
    0xd5a => 0x0,
    0xd5b => 0x0,
    0xd5c => 0x0,
    0xd5d => 0x0,
    0xd5e => 0x0,
    0xd5f => 0x985,
    0xd60 => 0x0,
    0xd61 => 0x0,
    0xd62 => 0x0,
    0xd63 => 0x0,
    0xd64 => 0x0,
    0xd65 => 0x0,
    0xd66 => 0x0,
    0xd67 => 0x0,
    0xd68 => 0x0,
    0xd69 => 0x0,
    0xd6a => 0x0,
    0xd6b => 0x0,
    0xd6c => 0x0,
    0xd6d => 0x0,
    0xd6e => 0x0,
    0xd6f => 0x0,
    0xd70 => 0x0,
    0xd71 => 0x0,
    0xd72 => 0x0,
    0xd73 => 0x0,
    0xd74 => 0x0,
    0xd75 => 0x0,
    0xd76 => 0x0,
    0xd77 => 0x0,
    0xd78 => 0x0,
    0xd79 => 0x0,
    0xd7a => 0x0,
    0xd7b => 0x0,
    0xd7c => 0x0,
    0xd7d => 0x0,
    0xd7e => 0x0,
    0xd7f => 0x985,
    0xd80 => 0x0,
    0xd81 => 0x0,
    0xd82 => 0x0,
    0xd83 => 0x0,
    0xd84 => 0x0,
    0xd85 => 0x0,
    0xd86 => 0x0,
    0xd87 => 0x0,
    0xd88 => 0x0,
    0xd89 => 0x0,
    0xd8a => 0x0,
    0xd8b => 0x0,
    0xd8c => 0x0,
    0xd8d => 0x0,
    0xd8e => 0x0,
    0xd8f => 0x0,
    0xd90 => 0x0,
    0xd91 => 0x0,
    0xd92 => 0x0,
    0xd93 => 0x0,
    0xd94 => 0x0,
    0xd95 => 0x0,
    0xd96 => 0x0,
    0xd97 => 0x0,
    0xd98 => 0x0,
    0xd99 => 0x0,
    0xd9a => 0x0,
    0xd9b => 0x0,
    0xd9c => 0x0,
    0xd9d => 0x0,
    0xd9e => 0x0,
    0xd9f => 0x985,
    0xda0 => 0x0,
    0xda1 => 0x0,
    0xda2 => 0x0,
    0xda3 => 0x0,
    0xda4 => 0x0,
    0xda5 => 0x0,
    0xda6 => 0x0,
    0xda7 => 0x0,
    0xda8 => 0x0,
    0xda9 => 0x0,
    0xdaa => 0x0,
    0xdab => 0x0,
    0xdac => 0x0,
    0xdad => 0x0,
    0xdae => 0x0,
    0xdaf => 0x0,
    0xdb0 => 0x0,
    0xdb1 => 0x0,
    0xdb2 => 0x0,
    0xdb3 => 0x0,
    0xdb4 => 0x0,
    0xdb5 => 0x0,
    0xdb6 => 0x0,
    0xdb7 => 0x0,
    0xdb8 => 0x0,
    0xdb9 => 0x0,
    0xdba => 0x0,
    0xdbb => 0x0,
    0xdbc => 0x0,
    0xdbd => 0x0,
    0xdbe => 0x0,
    0xdbf => 0x985,
    0xdc0 => 0x0,
    0xdc1 => 0x0,
    0xdc2 => 0x0,
    0xdc3 => 0x0,
    0xdc4 => 0x0,
    0xdc5 => 0x0,
    0xdc6 => 0x0,
    0xdc7 => 0x0,
    0xdc8 => 0x0,
    0xdc9 => 0x0,
    0xdca => 0x0,
    0xdcb => 0x0,
    0xdcc => 0x0,
    0xdcd => 0x0,
    0xdce => 0x0,
    0xdcf => 0x0,
    0xdd0 => 0x0,
    0xdd1 => 0x0,
    0xdd2 => 0x0,
    0xdd3 => 0x0,
    0xdd4 => 0x0,
    0xdd5 => 0x0,
    0xdd6 => 0x0,
    0xdd7 => 0x0,
    0xdd8 => 0x0,
    0xdd9 => 0x0,
    0xdda => 0x0,
    0xddb => 0x0,
    0xddc => 0x0,
    0xddd => 0x0,
    0xdde => 0x0,
    0xddf => 0x985,
    0xde0 => 0x0,
    0xde1 => 0x0,
    0xde2 => 0x0,
    0xde3 => 0x0,
    0xde4 => 0x0,
    0xde5 => 0x0,
    0xde6 => 0x0,
    0xde7 => 0x0,
    0xde8 => 0x0,
    0xde9 => 0x0,
    0xdea => 0x0,
    0xdeb => 0x0,
    0xdec => 0x0,
    0xded => 0x0,
    0xdee => 0x0,
    0xdef => 0x0,
    0xdf0 => 0x0,
    0xdf1 => 0x0,
    0xdf2 => 0x0,
    0xdf3 => 0x0,
    0xdf4 => 0x0,
    0xdf5 => 0x0,
    0xdf6 => 0x0,
    0xdf7 => 0x0,
    0xdf8 => 0x0,
    0xdf9 => 0x0,
    0xdfa => 0x0,
    0xdfb => 0x0,
    0xdfc => 0x0,
    0xdfd => 0x0,
    0xdfe => 0x0,
    0xdff => 0x985,
    0xe00 => 0x0,
    0xe01 => 0x0,
    0xe02 => 0x0,
    0xe03 => 0x0,
    0xe04 => 0x0,
    0xe05 => 0x0,
    0xe06 => 0x0,
    0xe07 => 0x0,
    0xe08 => 0x0,
    0xe09 => 0x0,
    0xe0a => 0x0,
    0xe0b => 0x0,
    0xe0c => 0x0,
    0xe0d => 0x0,
    0xe0e => 0x0,
    0xe0f => 0x0,
    0xe10 => 0x0,
    0xe11 => 0x0,
    0xe12 => 0x0,
    0xe13 => 0x0,
    0xe14 => 0x0,
    0xe15 => 0x0,
    0xe16 => 0x0,
    0xe17 => 0x0,
    0xe18 => 0x0,
    0xe19 => 0x0,
    0xe1a => 0x0,
    0xe1b => 0x0,
    0xe1c => 0x0,
    0xe1d => 0x0,
    0xe1e => 0x0,
    0xe1f => 0x985,
    0xe20 => 0x0,
    0xe21 => 0x0,
    0xe22 => 0x0,
    0xe23 => 0x0,
    0xe24 => 0x0,
    0xe25 => 0x0,
    0xe26 => 0x0,
    0xe27 => 0x0,
    0xe28 => 0x0,
    0xe29 => 0x0,
    0xe2a => 0x0,
    0xe2b => 0x0,
    0xe2c => 0x0,
    0xe2d => 0x0,
    0xe2e => 0x0,
    0xe2f => 0x0,
    0xe30 => 0x0,
    0xe31 => 0x0,
    0xe32 => 0x0,
    0xe33 => 0x0,
    0xe34 => 0x0,
    0xe35 => 0x0,
    0xe36 => 0x0,
    0xe37 => 0x0,
    0xe38 => 0x0,
    0xe39 => 0x0,
    0xe3a => 0x0,
    0xe3b => 0x0,
    0xe3c => 0x0,
    0xe3d => 0x0,
    0xe3e => 0x0,
    0xe3f => 0x985,
    0xe40 => 0x0,
    0xe41 => 0x0,
    0xe42 => 0x0,
    0xe43 => 0x0,
    0xe44 => 0x0,
    0xe45 => 0x0,
    0xe46 => 0x0,
    0xe47 => 0x0,
    0xe48 => 0x0,
    0xe49 => 0x0,
    0xe4a => 0x0,
    0xe4b => 0x0,
    0xe4c => 0x0,
    0xe4d => 0x0,
    0xe4e => 0x0,
    0xe4f => 0x0,
    0xe50 => 0x0,
    0xe51 => 0x0,
    0xe52 => 0x0,
    0xe53 => 0x0,
    0xe54 => 0x0,
    0xe55 => 0x0,
    0xe56 => 0x0,
    0xe57 => 0x0,
    0xe58 => 0x0,
    0xe59 => 0x0,
    0xe5a => 0x0,
    0xe5b => 0x0,
    0xe5c => 0x0,
    0xe5d => 0x0,
    0xe5e => 0x0,
    0xe5f => 0x985,
    0xe60 => 0x0,
    0xe61 => 0x0,
    0xe62 => 0x0,
    0xe63 => 0x0,
    0xe64 => 0x0,
    0xe65 => 0x0,
    0xe66 => 0x0,
    0xe67 => 0x0,
    0xe68 => 0x0,
    0xe69 => 0x0,
    0xe6a => 0x0,
    0xe6b => 0x0,
    0xe6c => 0x0,
    0xe6d => 0x0,
    0xe6e => 0x0,
    0xe6f => 0x0,
    0xe70 => 0x0,
    0xe71 => 0x0,
    0xe72 => 0x0,
    0xe73 => 0x0,
    0xe74 => 0x0,
    0xe75 => 0x0,
    0xe76 => 0x0,
    0xe77 => 0x0,
    0xe78 => 0x0,
    0xe79 => 0x0,
    0xe7a => 0x0,
    0xe7b => 0x0,
    0xe7c => 0x0,
    0xe7d => 0x0,
    0xe7e => 0x0,
    0xe7f => 0x985,
    0xe80 => 0x0,
    0xe81 => 0x0,
    0xe82 => 0x0,
    0xe83 => 0x0,
    0xe84 => 0x0,
    0xe85 => 0x0,
    0xe86 => 0x0,
    0xe87 => 0x0,
    0xe88 => 0x0,
    0xe89 => 0x0,
    0xe8a => 0x0,
    0xe8b => 0x0,
    0xe8c => 0x0,
    0xe8d => 0x0,
    0xe8e => 0x0,
    0xe8f => 0x0,
    0xe90 => 0x0,
    0xe91 => 0x0,
    0xe92 => 0x0,
    0xe93 => 0x0,
    0xe94 => 0x0,
    0xe95 => 0x0,
    0xe96 => 0x0,
    0xe97 => 0x0,
    0xe98 => 0x0,
    0xe99 => 0x0,
    0xe9a => 0x0,
    0xe9b => 0x0,
    0xe9c => 0x0,
    0xe9d => 0x0,
    0xe9e => 0x0,
    0xe9f => 0x985,
    0xea0 => 0x0,
    0xea1 => 0x0,
    0xea2 => 0x0,
    0xea3 => 0x0,
    0xea4 => 0x0,
    0xea5 => 0x0,
    0xea6 => 0x0,
    0xea7 => 0x0,
    0xea8 => 0x0,
    0xea9 => 0x0,
    0xeaa => 0x0,
    0xeab => 0x0,
    0xeac => 0x0,
    0xead => 0x0,
    0xeae => 0x0,
    0xeaf => 0x0,
    0xeb0 => 0x0,
    0xeb1 => 0x0,
    0xeb2 => 0x0,
    0xeb3 => 0x0,
    0xeb4 => 0x0,
    0xeb5 => 0x0,
    0xeb6 => 0x0,
    0xeb7 => 0x0,
    0xeb8 => 0x0,
    0xeb9 => 0x0,
    0xeba => 0x0,
    0xebb => 0x0,
    0xebc => 0x0,
    0xebd => 0x0,
    0xebe => 0x0,
    0xebf => 0x985,
    0xec0 => 0x0,
    0xec1 => 0x0,
    0xec2 => 0x0,
    0xec3 => 0x0,
    0xec4 => 0x0,
    0xec5 => 0x0,
    0xec6 => 0x0,
    0xec7 => 0x0,
    0xec8 => 0x0,
    0xec9 => 0x0,
    0xeca => 0x0,
    0xecb => 0x0,
    0xecc => 0x0,
    0xecd => 0x0,
    0xece => 0x0,
    0xecf => 0x0,
    0xed0 => 0x0,
    0xed1 => 0x0,
    0xed2 => 0x0,
    0xed3 => 0x0,
    0xed4 => 0x0,
    0xed5 => 0x0,
    0xed6 => 0x0,
    0xed7 => 0x0,
    0xed8 => 0x0,
    0xed9 => 0x0,
    0xeda => 0x0,
    0xedb => 0x0,
    0xedc => 0x0,
    0xedd => 0x0,
    0xede => 0x0,
    0xedf => 0x985,
    0xee0 => 0x0,
    0xee1 => 0x0,
    0xee2 => 0x0,
    0xee3 => 0x0,
    0xee4 => 0x0,
    0xee5 => 0x0,
    0xee6 => 0x0,
    0xee7 => 0x0,
    0xee8 => 0x0,
    0xee9 => 0x0,
    0xeea => 0x0,
    0xeeb => 0x0,
    0xeec => 0x0,
    0xeed => 0x0,
    0xeee => 0x0,
    0xeef => 0x0,
    0xef0 => 0x0,
    0xef1 => 0x0,
    0xef2 => 0x0,
    0xef3 => 0x0,
    0xef4 => 0x0,
    0xef5 => 0x0,
    0xef6 => 0x0,
    0xef7 => 0x0,
    0xef8 => 0x0,
    0xef9 => 0x0,
    0xefa => 0x0,
    0xefb => 0x0,
    0xefc => 0x0,
    0xefd => 0x0,
    0xefe => 0x0,
    0xeff => 0x985,
    0xf00 => 0x0,
    0xf01 => 0x0,
    0xf02 => 0x0,
    0xf03 => 0x0,
    0xf04 => 0x0,
    0xf05 => 0x0,
    0xf06 => 0x0,
    0xf07 => 0x0,
    0xf08 => 0x0,
    0xf09 => 0x0,
    0xf0a => 0x0,
    0xf0b => 0x0,
    0xf0c => 0x0,
    0xf0d => 0x0,
    0xf0e => 0x0,
    0xf0f => 0x0,
    0xf10 => 0x0,
    0xf11 => 0x0,
    0xf12 => 0x0,
    0xf13 => 0x0,
    0xf14 => 0x0,
    0xf15 => 0x0,
    0xf16 => 0x0,
    0xf17 => 0x0,
    0xf18 => 0x0,
    0xf19 => 0x0,
    0xf1a => 0x0,
    0xf1b => 0x0,
    0xf1c => 0x0,
    0xf1d => 0x0,
    0xf1e => 0x0,
    0xf1f => 0x985,
    0xf20 => 0x0,
    0xf21 => 0x0,
    0xf22 => 0x0,
    0xf23 => 0x0,
    0xf24 => 0x0,
    0xf25 => 0x0,
    0xf26 => 0x0,
    0xf27 => 0x0,
    0xf28 => 0x0,
    0xf29 => 0x0,
    0xf2a => 0x0,
    0xf2b => 0x0,
    0xf2c => 0x0,
    0xf2d => 0x0,
    0xf2e => 0x0,
    0xf2f => 0x0,
    0xf30 => 0x0,
    0xf31 => 0x0,
    0xf32 => 0x0,
    0xf33 => 0x0,
    0xf34 => 0x0,
    0xf35 => 0x0,
    0xf36 => 0x0,
    0xf37 => 0x0,
    0xf38 => 0x0,
    0xf39 => 0x0,
    0xf3a => 0x0,
    0xf3b => 0x0,
    0xf3c => 0x0,
    0xf3d => 0x0,
    0xf3e => 0x0,
    0xf3f => 0x985,
    0xf40 => 0x0,
    0xf41 => 0x0,
    0xf42 => 0x0,
    0xf43 => 0x0,
    0xf44 => 0x0,
    0xf45 => 0x0,
    0xf46 => 0x0,
    0xf47 => 0x0,
    0xf48 => 0x0,
    0xf49 => 0x0,
    0xf4a => 0x0,
    0xf4b => 0x0,
    0xf4c => 0x0,
    0xf4d => 0x0,
    0xf4e => 0x0,
    0xf4f => 0x0,
    0xf50 => 0x0,
    0xf51 => 0x0,
    0xf52 => 0x0,
    0xf53 => 0x0,
    0xf54 => 0x0,
    0xf55 => 0x0,
    0xf56 => 0x0,
    0xf57 => 0x0,
    0xf58 => 0x0,
    0xf59 => 0x0,
    0xf5a => 0x0,
    0xf5b => 0x0,
    0xf5c => 0x0,
    0xf5d => 0x0,
    0xf5e => 0x0,
    0xf5f => 0x985,
    0xf60 => 0x0,
    0xf61 => 0x0,
    0xf62 => 0x0,
    0xf63 => 0x0,
    0xf64 => 0x0,
    0xf65 => 0x0,
    0xf66 => 0x0,
    0xf67 => 0x0,
    0xf68 => 0x0,
    0xf69 => 0x0,
    0xf6a => 0x0,
    0xf6b => 0x0,
    0xf6c => 0x0,
    0xf6d => 0x0,
    0xf6e => 0x0,
    0xf6f => 0x0,
    0xf70 => 0x0,
    0xf71 => 0x0,
    0xf72 => 0x0,
    0xf73 => 0x0,
    0xf74 => 0x0,
    0xf75 => 0x0,
    0xf76 => 0x0,
    0xf77 => 0x0,
    0xf78 => 0x0,
    0xf79 => 0x0,
    0xf7a => 0x0,
    0xf7b => 0x0,
    0xf7c => 0x0,
    0xf7d => 0x0,
    0xf7e => 0x0,
    0xf7f => 0x985,
    0xf80 => 0x0,
    0xf81 => 0x0,
    0xf82 => 0x0,
    0xf83 => 0x0,
    0xf84 => 0x0,
    0xf85 => 0x0,
    0xf86 => 0x0,
    0xf87 => 0x0,
    0xf88 => 0x0,
    0xf89 => 0x0,
    0xf8a => 0x0,
    0xf8b => 0x0,
    0xf8c => 0x0,
    0xf8d => 0x0,
    0xf8e => 0x0,
    0xf8f => 0x0,
    0xf90 => 0x0,
    0xf91 => 0x0,
    0xf92 => 0x0,
    0xf93 => 0x0,
    0xf94 => 0x0,
    0xf95 => 0x0,
    0xf96 => 0x0,
    0xf97 => 0x0,
    0xf98 => 0x0,
    0xf99 => 0x0,
    0xf9a => 0x0,
    0xf9b => 0x0,
    0xf9c => 0x0,
    0xf9d => 0x0,
    0xf9e => 0x0,
    0xf9f => 0x985,
    0xfa0 => 0x0,
    0xfa1 => 0x0,
    0xfa2 => 0x0,
    0xfa3 => 0x0,
    0xfa4 => 0x0,
    0xfa5 => 0x0,
    0xfa6 => 0x0,
    0xfa7 => 0x0,
    0xfa8 => 0x0,
    0xfa9 => 0x0,
    0xfaa => 0x0,
    0xfab => 0x0,
    0xfac => 0x0,
    0xfad => 0x0,
    0xfae => 0x0,
    0xfaf => 0x0,
    0xfb0 => 0x0,
    0xfb1 => 0x0,
    0xfb2 => 0x0,
    0xfb3 => 0x0,
    0xfb4 => 0x0,
    0xfb5 => 0x0,
    0xfb6 => 0x0,
    0xfb7 => 0x0,
    0xfb8 => 0x0,
    0xfb9 => 0x0,
    0xfba => 0x0,
    0xfbb => 0x0,
    0xfbc => 0x0,
    0xfbd => 0x0,
    0xfbe => 0x0,
    0xfbf => 0x985,
    0xfc0 => 0x0,
    0xfc1 => 0x0,
    0xfc2 => 0x0,
    0xfc3 => 0x0,
    0xfc4 => 0x0,
    0xfc5 => 0x0,
    0xfc6 => 0x0,
    0xfc7 => 0x0,
    0xfc8 => 0x0,
    0xfc9 => 0x0,
    0xfca => 0x0,
    0xfcb => 0x0,
    0xfcc => 0x0,
    0xfcd => 0x0,
    0xfce => 0x0,
    0xfcf => 0x0,
    0xfd0 => 0x0,
    0xfd1 => 0x0,
    0xfd2 => 0x0,
    0xfd3 => 0x0,
    0xfd4 => 0x0,
    0xfd5 => 0x0,
    0xfd6 => 0x0,
    0xfd7 => 0x0,
    0xfd8 => 0x0,
    0xfd9 => 0x0,
    0xfda => 0x0,
    0xfdb => 0x0,
    0xfdc => 0x0,
    0xfdd => 0x0,
    0xfde => 0x0,
    0xfdf => 0x985,
    0xfe0 => 0x0,
    0xfe1 => 0x0,
    0xfe2 => 0x0,
    0xfe3 => 0x0,
    0xfe4 => 0x0,
    0xfe5 => 0x0,
    0xfe6 => 0x0,
    0xfe7 => 0x0,
    0xfe8 => 0x0,
    0xfe9 => 0x0,
    0xfea => 0x0,
    0xfeb => 0x0,
    0xfec => 0x0,
    0xfed => 0x0,
    0xfee => 0x0,
    0xfef => 0x0,
    0xff0 => 0x0,
    0xff1 => 0x0,
    0xff2 => 0x0,
    0xff3 => 0x0,
    0xff4 => 0x0,
    0xff5 => 0x0,
    0xff6 => 0x0,
    0xff7 => 0x0,
    0xff8 => 0x0,
    0xff9 => 0x0,
    0xffa => 0x0,
    0xffb => 0x0,
    0xffc => 0x0,
    0xffd => 0x0,
    0xffe => 0x0,
    0xfff => 0x985,
    _ => 0,
  };
  return idx;
}


// BRANCHREG-RET#0,BRANCHREG-RET#1,BRANCHREG-RET#2,BRANCHREG-RET#3,BRANCHREG-RET#4,BRANCHREG-RET#5,BRANCHREG-RET#6,BRANCHREG-RET#7,BRANCHREG-RET#8,BRANCHREG-RET#9,BRANCHREG-RET#10,BRANCHREG-RET#11,BRANCHREG-RET#12,BRANCHREG-RET#13,BRANCHREG-RET#14,BRANCHREG-RET#15,BRANCHREG-RET#16,BRANCHREG-RET#17,BRANCHREG-RET#18,BRANCHREG-RET#19,BRANCHREG-RET#20,BRANCHREG-RET#21,BRANCHREG-RET#22,BRANCHREG-RET#23,BRANCHREG-RET#24,BRANCHREG-RET#25,BRANCHREG-RET#26,BRANCHREG-RET#27,BRANCHREG-RET#28,BRANCHREG-RET#29,BRANCHREG-RET#30,BRANCHREG-RET#31,BRANCHREG-RETAA#0,BRANCHREG-RETAB#0
pub const fn classify_impl_156(inst: u32) -> u32 {
  if (inst&0xff000) != 0xf0000 { return 0; }
  let idx = match (inst >> 0) & 0xfff {
    0x0 => 0x986,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x986,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    0x40 => 0x986,
    0x41 => 0x0,
    0x42 => 0x0,
    0x43 => 0x0,
    0x44 => 0x0,
    0x45 => 0x0,
    0x46 => 0x0,
    0x47 => 0x0,
    0x48 => 0x0,
    0x49 => 0x0,
    0x4a => 0x0,
    0x4b => 0x0,
    0x4c => 0x0,
    0x4d => 0x0,
    0x4e => 0x0,
    0x4f => 0x0,
    0x50 => 0x0,
    0x51 => 0x0,
    0x52 => 0x0,
    0x53 => 0x0,
    0x54 => 0x0,
    0x55 => 0x0,
    0x56 => 0x0,
    0x57 => 0x0,
    0x58 => 0x0,
    0x59 => 0x0,
    0x5a => 0x0,
    0x5b => 0x0,
    0x5c => 0x0,
    0x5d => 0x0,
    0x5e => 0x0,
    0x5f => 0x0,
    0x60 => 0x986,
    0x61 => 0x0,
    0x62 => 0x0,
    0x63 => 0x0,
    0x64 => 0x0,
    0x65 => 0x0,
    0x66 => 0x0,
    0x67 => 0x0,
    0x68 => 0x0,
    0x69 => 0x0,
    0x6a => 0x0,
    0x6b => 0x0,
    0x6c => 0x0,
    0x6d => 0x0,
    0x6e => 0x0,
    0x6f => 0x0,
    0x70 => 0x0,
    0x71 => 0x0,
    0x72 => 0x0,
    0x73 => 0x0,
    0x74 => 0x0,
    0x75 => 0x0,
    0x76 => 0x0,
    0x77 => 0x0,
    0x78 => 0x0,
    0x79 => 0x0,
    0x7a => 0x0,
    0x7b => 0x0,
    0x7c => 0x0,
    0x7d => 0x0,
    0x7e => 0x0,
    0x7f => 0x0,
    0x80 => 0x986,
    0x81 => 0x0,
    0x82 => 0x0,
    0x83 => 0x0,
    0x84 => 0x0,
    0x85 => 0x0,
    0x86 => 0x0,
    0x87 => 0x0,
    0x88 => 0x0,
    0x89 => 0x0,
    0x8a => 0x0,
    0x8b => 0x0,
    0x8c => 0x0,
    0x8d => 0x0,
    0x8e => 0x0,
    0x8f => 0x0,
    0x90 => 0x0,
    0x91 => 0x0,
    0x92 => 0x0,
    0x93 => 0x0,
    0x94 => 0x0,
    0x95 => 0x0,
    0x96 => 0x0,
    0x97 => 0x0,
    0x98 => 0x0,
    0x99 => 0x0,
    0x9a => 0x0,
    0x9b => 0x0,
    0x9c => 0x0,
    0x9d => 0x0,
    0x9e => 0x0,
    0x9f => 0x0,
    0xa0 => 0x986,
    0xa1 => 0x0,
    0xa2 => 0x0,
    0xa3 => 0x0,
    0xa4 => 0x0,
    0xa5 => 0x0,
    0xa6 => 0x0,
    0xa7 => 0x0,
    0xa8 => 0x0,
    0xa9 => 0x0,
    0xaa => 0x0,
    0xab => 0x0,
    0xac => 0x0,
    0xad => 0x0,
    0xae => 0x0,
    0xaf => 0x0,
    0xb0 => 0x0,
    0xb1 => 0x0,
    0xb2 => 0x0,
    0xb3 => 0x0,
    0xb4 => 0x0,
    0xb5 => 0x0,
    0xb6 => 0x0,
    0xb7 => 0x0,
    0xb8 => 0x0,
    0xb9 => 0x0,
    0xba => 0x0,
    0xbb => 0x0,
    0xbc => 0x0,
    0xbd => 0x0,
    0xbe => 0x0,
    0xbf => 0x0,
    0xc0 => 0x986,
    0xc1 => 0x0,
    0xc2 => 0x0,
    0xc3 => 0x0,
    0xc4 => 0x0,
    0xc5 => 0x0,
    0xc6 => 0x0,
    0xc7 => 0x0,
    0xc8 => 0x0,
    0xc9 => 0x0,
    0xca => 0x0,
    0xcb => 0x0,
    0xcc => 0x0,
    0xcd => 0x0,
    0xce => 0x0,
    0xcf => 0x0,
    0xd0 => 0x0,
    0xd1 => 0x0,
    0xd2 => 0x0,
    0xd3 => 0x0,
    0xd4 => 0x0,
    0xd5 => 0x0,
    0xd6 => 0x0,
    0xd7 => 0x0,
    0xd8 => 0x0,
    0xd9 => 0x0,
    0xda => 0x0,
    0xdb => 0x0,
    0xdc => 0x0,
    0xdd => 0x0,
    0xde => 0x0,
    0xdf => 0x0,
    0xe0 => 0x986,
    0xe1 => 0x0,
    0xe2 => 0x0,
    0xe3 => 0x0,
    0xe4 => 0x0,
    0xe5 => 0x0,
    0xe6 => 0x0,
    0xe7 => 0x0,
    0xe8 => 0x0,
    0xe9 => 0x0,
    0xea => 0x0,
    0xeb => 0x0,
    0xec => 0x0,
    0xed => 0x0,
    0xee => 0x0,
    0xef => 0x0,
    0xf0 => 0x0,
    0xf1 => 0x0,
    0xf2 => 0x0,
    0xf3 => 0x0,
    0xf4 => 0x0,
    0xf5 => 0x0,
    0xf6 => 0x0,
    0xf7 => 0x0,
    0xf8 => 0x0,
    0xf9 => 0x0,
    0xfa => 0x0,
    0xfb => 0x0,
    0xfc => 0x0,
    0xfd => 0x0,
    0xfe => 0x0,
    0xff => 0x0,
    0x100 => 0x986,
    0x101 => 0x0,
    0x102 => 0x0,
    0x103 => 0x0,
    0x104 => 0x0,
    0x105 => 0x0,
    0x106 => 0x0,
    0x107 => 0x0,
    0x108 => 0x0,
    0x109 => 0x0,
    0x10a => 0x0,
    0x10b => 0x0,
    0x10c => 0x0,
    0x10d => 0x0,
    0x10e => 0x0,
    0x10f => 0x0,
    0x110 => 0x0,
    0x111 => 0x0,
    0x112 => 0x0,
    0x113 => 0x0,
    0x114 => 0x0,
    0x115 => 0x0,
    0x116 => 0x0,
    0x117 => 0x0,
    0x118 => 0x0,
    0x119 => 0x0,
    0x11a => 0x0,
    0x11b => 0x0,
    0x11c => 0x0,
    0x11d => 0x0,
    0x11e => 0x0,
    0x11f => 0x0,
    0x120 => 0x986,
    0x121 => 0x0,
    0x122 => 0x0,
    0x123 => 0x0,
    0x124 => 0x0,
    0x125 => 0x0,
    0x126 => 0x0,
    0x127 => 0x0,
    0x128 => 0x0,
    0x129 => 0x0,
    0x12a => 0x0,
    0x12b => 0x0,
    0x12c => 0x0,
    0x12d => 0x0,
    0x12e => 0x0,
    0x12f => 0x0,
    0x130 => 0x0,
    0x131 => 0x0,
    0x132 => 0x0,
    0x133 => 0x0,
    0x134 => 0x0,
    0x135 => 0x0,
    0x136 => 0x0,
    0x137 => 0x0,
    0x138 => 0x0,
    0x139 => 0x0,
    0x13a => 0x0,
    0x13b => 0x0,
    0x13c => 0x0,
    0x13d => 0x0,
    0x13e => 0x0,
    0x13f => 0x0,
    0x140 => 0x986,
    0x141 => 0x0,
    0x142 => 0x0,
    0x143 => 0x0,
    0x144 => 0x0,
    0x145 => 0x0,
    0x146 => 0x0,
    0x147 => 0x0,
    0x148 => 0x0,
    0x149 => 0x0,
    0x14a => 0x0,
    0x14b => 0x0,
    0x14c => 0x0,
    0x14d => 0x0,
    0x14e => 0x0,
    0x14f => 0x0,
    0x150 => 0x0,
    0x151 => 0x0,
    0x152 => 0x0,
    0x153 => 0x0,
    0x154 => 0x0,
    0x155 => 0x0,
    0x156 => 0x0,
    0x157 => 0x0,
    0x158 => 0x0,
    0x159 => 0x0,
    0x15a => 0x0,
    0x15b => 0x0,
    0x15c => 0x0,
    0x15d => 0x0,
    0x15e => 0x0,
    0x15f => 0x0,
    0x160 => 0x986,
    0x161 => 0x0,
    0x162 => 0x0,
    0x163 => 0x0,
    0x164 => 0x0,
    0x165 => 0x0,
    0x166 => 0x0,
    0x167 => 0x0,
    0x168 => 0x0,
    0x169 => 0x0,
    0x16a => 0x0,
    0x16b => 0x0,
    0x16c => 0x0,
    0x16d => 0x0,
    0x16e => 0x0,
    0x16f => 0x0,
    0x170 => 0x0,
    0x171 => 0x0,
    0x172 => 0x0,
    0x173 => 0x0,
    0x174 => 0x0,
    0x175 => 0x0,
    0x176 => 0x0,
    0x177 => 0x0,
    0x178 => 0x0,
    0x179 => 0x0,
    0x17a => 0x0,
    0x17b => 0x0,
    0x17c => 0x0,
    0x17d => 0x0,
    0x17e => 0x0,
    0x17f => 0x0,
    0x180 => 0x986,
    0x181 => 0x0,
    0x182 => 0x0,
    0x183 => 0x0,
    0x184 => 0x0,
    0x185 => 0x0,
    0x186 => 0x0,
    0x187 => 0x0,
    0x188 => 0x0,
    0x189 => 0x0,
    0x18a => 0x0,
    0x18b => 0x0,
    0x18c => 0x0,
    0x18d => 0x0,
    0x18e => 0x0,
    0x18f => 0x0,
    0x190 => 0x0,
    0x191 => 0x0,
    0x192 => 0x0,
    0x193 => 0x0,
    0x194 => 0x0,
    0x195 => 0x0,
    0x196 => 0x0,
    0x197 => 0x0,
    0x198 => 0x0,
    0x199 => 0x0,
    0x19a => 0x0,
    0x19b => 0x0,
    0x19c => 0x0,
    0x19d => 0x0,
    0x19e => 0x0,
    0x19f => 0x0,
    0x1a0 => 0x986,
    0x1a1 => 0x0,
    0x1a2 => 0x0,
    0x1a3 => 0x0,
    0x1a4 => 0x0,
    0x1a5 => 0x0,
    0x1a6 => 0x0,
    0x1a7 => 0x0,
    0x1a8 => 0x0,
    0x1a9 => 0x0,
    0x1aa => 0x0,
    0x1ab => 0x0,
    0x1ac => 0x0,
    0x1ad => 0x0,
    0x1ae => 0x0,
    0x1af => 0x0,
    0x1b0 => 0x0,
    0x1b1 => 0x0,
    0x1b2 => 0x0,
    0x1b3 => 0x0,
    0x1b4 => 0x0,
    0x1b5 => 0x0,
    0x1b6 => 0x0,
    0x1b7 => 0x0,
    0x1b8 => 0x0,
    0x1b9 => 0x0,
    0x1ba => 0x0,
    0x1bb => 0x0,
    0x1bc => 0x0,
    0x1bd => 0x0,
    0x1be => 0x0,
    0x1bf => 0x0,
    0x1c0 => 0x986,
    0x1c1 => 0x0,
    0x1c2 => 0x0,
    0x1c3 => 0x0,
    0x1c4 => 0x0,
    0x1c5 => 0x0,
    0x1c6 => 0x0,
    0x1c7 => 0x0,
    0x1c8 => 0x0,
    0x1c9 => 0x0,
    0x1ca => 0x0,
    0x1cb => 0x0,
    0x1cc => 0x0,
    0x1cd => 0x0,
    0x1ce => 0x0,
    0x1cf => 0x0,
    0x1d0 => 0x0,
    0x1d1 => 0x0,
    0x1d2 => 0x0,
    0x1d3 => 0x0,
    0x1d4 => 0x0,
    0x1d5 => 0x0,
    0x1d6 => 0x0,
    0x1d7 => 0x0,
    0x1d8 => 0x0,
    0x1d9 => 0x0,
    0x1da => 0x0,
    0x1db => 0x0,
    0x1dc => 0x0,
    0x1dd => 0x0,
    0x1de => 0x0,
    0x1df => 0x0,
    0x1e0 => 0x986,
    0x1e1 => 0x0,
    0x1e2 => 0x0,
    0x1e3 => 0x0,
    0x1e4 => 0x0,
    0x1e5 => 0x0,
    0x1e6 => 0x0,
    0x1e7 => 0x0,
    0x1e8 => 0x0,
    0x1e9 => 0x0,
    0x1ea => 0x0,
    0x1eb => 0x0,
    0x1ec => 0x0,
    0x1ed => 0x0,
    0x1ee => 0x0,
    0x1ef => 0x0,
    0x1f0 => 0x0,
    0x1f1 => 0x0,
    0x1f2 => 0x0,
    0x1f3 => 0x0,
    0x1f4 => 0x0,
    0x1f5 => 0x0,
    0x1f6 => 0x0,
    0x1f7 => 0x0,
    0x1f8 => 0x0,
    0x1f9 => 0x0,
    0x1fa => 0x0,
    0x1fb => 0x0,
    0x1fc => 0x0,
    0x1fd => 0x0,
    0x1fe => 0x0,
    0x1ff => 0x0,
    0x200 => 0x986,
    0x201 => 0x0,
    0x202 => 0x0,
    0x203 => 0x0,
    0x204 => 0x0,
    0x205 => 0x0,
    0x206 => 0x0,
    0x207 => 0x0,
    0x208 => 0x0,
    0x209 => 0x0,
    0x20a => 0x0,
    0x20b => 0x0,
    0x20c => 0x0,
    0x20d => 0x0,
    0x20e => 0x0,
    0x20f => 0x0,
    0x210 => 0x0,
    0x211 => 0x0,
    0x212 => 0x0,
    0x213 => 0x0,
    0x214 => 0x0,
    0x215 => 0x0,
    0x216 => 0x0,
    0x217 => 0x0,
    0x218 => 0x0,
    0x219 => 0x0,
    0x21a => 0x0,
    0x21b => 0x0,
    0x21c => 0x0,
    0x21d => 0x0,
    0x21e => 0x0,
    0x21f => 0x0,
    0x220 => 0x986,
    0x221 => 0x0,
    0x222 => 0x0,
    0x223 => 0x0,
    0x224 => 0x0,
    0x225 => 0x0,
    0x226 => 0x0,
    0x227 => 0x0,
    0x228 => 0x0,
    0x229 => 0x0,
    0x22a => 0x0,
    0x22b => 0x0,
    0x22c => 0x0,
    0x22d => 0x0,
    0x22e => 0x0,
    0x22f => 0x0,
    0x230 => 0x0,
    0x231 => 0x0,
    0x232 => 0x0,
    0x233 => 0x0,
    0x234 => 0x0,
    0x235 => 0x0,
    0x236 => 0x0,
    0x237 => 0x0,
    0x238 => 0x0,
    0x239 => 0x0,
    0x23a => 0x0,
    0x23b => 0x0,
    0x23c => 0x0,
    0x23d => 0x0,
    0x23e => 0x0,
    0x23f => 0x0,
    0x240 => 0x986,
    0x241 => 0x0,
    0x242 => 0x0,
    0x243 => 0x0,
    0x244 => 0x0,
    0x245 => 0x0,
    0x246 => 0x0,
    0x247 => 0x0,
    0x248 => 0x0,
    0x249 => 0x0,
    0x24a => 0x0,
    0x24b => 0x0,
    0x24c => 0x0,
    0x24d => 0x0,
    0x24e => 0x0,
    0x24f => 0x0,
    0x250 => 0x0,
    0x251 => 0x0,
    0x252 => 0x0,
    0x253 => 0x0,
    0x254 => 0x0,
    0x255 => 0x0,
    0x256 => 0x0,
    0x257 => 0x0,
    0x258 => 0x0,
    0x259 => 0x0,
    0x25a => 0x0,
    0x25b => 0x0,
    0x25c => 0x0,
    0x25d => 0x0,
    0x25e => 0x0,
    0x25f => 0x0,
    0x260 => 0x986,
    0x261 => 0x0,
    0x262 => 0x0,
    0x263 => 0x0,
    0x264 => 0x0,
    0x265 => 0x0,
    0x266 => 0x0,
    0x267 => 0x0,
    0x268 => 0x0,
    0x269 => 0x0,
    0x26a => 0x0,
    0x26b => 0x0,
    0x26c => 0x0,
    0x26d => 0x0,
    0x26e => 0x0,
    0x26f => 0x0,
    0x270 => 0x0,
    0x271 => 0x0,
    0x272 => 0x0,
    0x273 => 0x0,
    0x274 => 0x0,
    0x275 => 0x0,
    0x276 => 0x0,
    0x277 => 0x0,
    0x278 => 0x0,
    0x279 => 0x0,
    0x27a => 0x0,
    0x27b => 0x0,
    0x27c => 0x0,
    0x27d => 0x0,
    0x27e => 0x0,
    0x27f => 0x0,
    0x280 => 0x986,
    0x281 => 0x0,
    0x282 => 0x0,
    0x283 => 0x0,
    0x284 => 0x0,
    0x285 => 0x0,
    0x286 => 0x0,
    0x287 => 0x0,
    0x288 => 0x0,
    0x289 => 0x0,
    0x28a => 0x0,
    0x28b => 0x0,
    0x28c => 0x0,
    0x28d => 0x0,
    0x28e => 0x0,
    0x28f => 0x0,
    0x290 => 0x0,
    0x291 => 0x0,
    0x292 => 0x0,
    0x293 => 0x0,
    0x294 => 0x0,
    0x295 => 0x0,
    0x296 => 0x0,
    0x297 => 0x0,
    0x298 => 0x0,
    0x299 => 0x0,
    0x29a => 0x0,
    0x29b => 0x0,
    0x29c => 0x0,
    0x29d => 0x0,
    0x29e => 0x0,
    0x29f => 0x0,
    0x2a0 => 0x986,
    0x2a1 => 0x0,
    0x2a2 => 0x0,
    0x2a3 => 0x0,
    0x2a4 => 0x0,
    0x2a5 => 0x0,
    0x2a6 => 0x0,
    0x2a7 => 0x0,
    0x2a8 => 0x0,
    0x2a9 => 0x0,
    0x2aa => 0x0,
    0x2ab => 0x0,
    0x2ac => 0x0,
    0x2ad => 0x0,
    0x2ae => 0x0,
    0x2af => 0x0,
    0x2b0 => 0x0,
    0x2b1 => 0x0,
    0x2b2 => 0x0,
    0x2b3 => 0x0,
    0x2b4 => 0x0,
    0x2b5 => 0x0,
    0x2b6 => 0x0,
    0x2b7 => 0x0,
    0x2b8 => 0x0,
    0x2b9 => 0x0,
    0x2ba => 0x0,
    0x2bb => 0x0,
    0x2bc => 0x0,
    0x2bd => 0x0,
    0x2be => 0x0,
    0x2bf => 0x0,
    0x2c0 => 0x986,
    0x2c1 => 0x0,
    0x2c2 => 0x0,
    0x2c3 => 0x0,
    0x2c4 => 0x0,
    0x2c5 => 0x0,
    0x2c6 => 0x0,
    0x2c7 => 0x0,
    0x2c8 => 0x0,
    0x2c9 => 0x0,
    0x2ca => 0x0,
    0x2cb => 0x0,
    0x2cc => 0x0,
    0x2cd => 0x0,
    0x2ce => 0x0,
    0x2cf => 0x0,
    0x2d0 => 0x0,
    0x2d1 => 0x0,
    0x2d2 => 0x0,
    0x2d3 => 0x0,
    0x2d4 => 0x0,
    0x2d5 => 0x0,
    0x2d6 => 0x0,
    0x2d7 => 0x0,
    0x2d8 => 0x0,
    0x2d9 => 0x0,
    0x2da => 0x0,
    0x2db => 0x0,
    0x2dc => 0x0,
    0x2dd => 0x0,
    0x2de => 0x0,
    0x2df => 0x0,
    0x2e0 => 0x986,
    0x2e1 => 0x0,
    0x2e2 => 0x0,
    0x2e3 => 0x0,
    0x2e4 => 0x0,
    0x2e5 => 0x0,
    0x2e6 => 0x0,
    0x2e7 => 0x0,
    0x2e8 => 0x0,
    0x2e9 => 0x0,
    0x2ea => 0x0,
    0x2eb => 0x0,
    0x2ec => 0x0,
    0x2ed => 0x0,
    0x2ee => 0x0,
    0x2ef => 0x0,
    0x2f0 => 0x0,
    0x2f1 => 0x0,
    0x2f2 => 0x0,
    0x2f3 => 0x0,
    0x2f4 => 0x0,
    0x2f5 => 0x0,
    0x2f6 => 0x0,
    0x2f7 => 0x0,
    0x2f8 => 0x0,
    0x2f9 => 0x0,
    0x2fa => 0x0,
    0x2fb => 0x0,
    0x2fc => 0x0,
    0x2fd => 0x0,
    0x2fe => 0x0,
    0x2ff => 0x0,
    0x300 => 0x986,
    0x301 => 0x0,
    0x302 => 0x0,
    0x303 => 0x0,
    0x304 => 0x0,
    0x305 => 0x0,
    0x306 => 0x0,
    0x307 => 0x0,
    0x308 => 0x0,
    0x309 => 0x0,
    0x30a => 0x0,
    0x30b => 0x0,
    0x30c => 0x0,
    0x30d => 0x0,
    0x30e => 0x0,
    0x30f => 0x0,
    0x310 => 0x0,
    0x311 => 0x0,
    0x312 => 0x0,
    0x313 => 0x0,
    0x314 => 0x0,
    0x315 => 0x0,
    0x316 => 0x0,
    0x317 => 0x0,
    0x318 => 0x0,
    0x319 => 0x0,
    0x31a => 0x0,
    0x31b => 0x0,
    0x31c => 0x0,
    0x31d => 0x0,
    0x31e => 0x0,
    0x31f => 0x0,
    0x320 => 0x986,
    0x321 => 0x0,
    0x322 => 0x0,
    0x323 => 0x0,
    0x324 => 0x0,
    0x325 => 0x0,
    0x326 => 0x0,
    0x327 => 0x0,
    0x328 => 0x0,
    0x329 => 0x0,
    0x32a => 0x0,
    0x32b => 0x0,
    0x32c => 0x0,
    0x32d => 0x0,
    0x32e => 0x0,
    0x32f => 0x0,
    0x330 => 0x0,
    0x331 => 0x0,
    0x332 => 0x0,
    0x333 => 0x0,
    0x334 => 0x0,
    0x335 => 0x0,
    0x336 => 0x0,
    0x337 => 0x0,
    0x338 => 0x0,
    0x339 => 0x0,
    0x33a => 0x0,
    0x33b => 0x0,
    0x33c => 0x0,
    0x33d => 0x0,
    0x33e => 0x0,
    0x33f => 0x0,
    0x340 => 0x986,
    0x341 => 0x0,
    0x342 => 0x0,
    0x343 => 0x0,
    0x344 => 0x0,
    0x345 => 0x0,
    0x346 => 0x0,
    0x347 => 0x0,
    0x348 => 0x0,
    0x349 => 0x0,
    0x34a => 0x0,
    0x34b => 0x0,
    0x34c => 0x0,
    0x34d => 0x0,
    0x34e => 0x0,
    0x34f => 0x0,
    0x350 => 0x0,
    0x351 => 0x0,
    0x352 => 0x0,
    0x353 => 0x0,
    0x354 => 0x0,
    0x355 => 0x0,
    0x356 => 0x0,
    0x357 => 0x0,
    0x358 => 0x0,
    0x359 => 0x0,
    0x35a => 0x0,
    0x35b => 0x0,
    0x35c => 0x0,
    0x35d => 0x0,
    0x35e => 0x0,
    0x35f => 0x0,
    0x360 => 0x986,
    0x361 => 0x0,
    0x362 => 0x0,
    0x363 => 0x0,
    0x364 => 0x0,
    0x365 => 0x0,
    0x366 => 0x0,
    0x367 => 0x0,
    0x368 => 0x0,
    0x369 => 0x0,
    0x36a => 0x0,
    0x36b => 0x0,
    0x36c => 0x0,
    0x36d => 0x0,
    0x36e => 0x0,
    0x36f => 0x0,
    0x370 => 0x0,
    0x371 => 0x0,
    0x372 => 0x0,
    0x373 => 0x0,
    0x374 => 0x0,
    0x375 => 0x0,
    0x376 => 0x0,
    0x377 => 0x0,
    0x378 => 0x0,
    0x379 => 0x0,
    0x37a => 0x0,
    0x37b => 0x0,
    0x37c => 0x0,
    0x37d => 0x0,
    0x37e => 0x0,
    0x37f => 0x0,
    0x380 => 0x986,
    0x381 => 0x0,
    0x382 => 0x0,
    0x383 => 0x0,
    0x384 => 0x0,
    0x385 => 0x0,
    0x386 => 0x0,
    0x387 => 0x0,
    0x388 => 0x0,
    0x389 => 0x0,
    0x38a => 0x0,
    0x38b => 0x0,
    0x38c => 0x0,
    0x38d => 0x0,
    0x38e => 0x0,
    0x38f => 0x0,
    0x390 => 0x0,
    0x391 => 0x0,
    0x392 => 0x0,
    0x393 => 0x0,
    0x394 => 0x0,
    0x395 => 0x0,
    0x396 => 0x0,
    0x397 => 0x0,
    0x398 => 0x0,
    0x399 => 0x0,
    0x39a => 0x0,
    0x39b => 0x0,
    0x39c => 0x0,
    0x39d => 0x0,
    0x39e => 0x0,
    0x39f => 0x0,
    0x3a0 => 0x986,
    0x3a1 => 0x0,
    0x3a2 => 0x0,
    0x3a3 => 0x0,
    0x3a4 => 0x0,
    0x3a5 => 0x0,
    0x3a6 => 0x0,
    0x3a7 => 0x0,
    0x3a8 => 0x0,
    0x3a9 => 0x0,
    0x3aa => 0x0,
    0x3ab => 0x0,
    0x3ac => 0x0,
    0x3ad => 0x0,
    0x3ae => 0x0,
    0x3af => 0x0,
    0x3b0 => 0x0,
    0x3b1 => 0x0,
    0x3b2 => 0x0,
    0x3b3 => 0x0,
    0x3b4 => 0x0,
    0x3b5 => 0x0,
    0x3b6 => 0x0,
    0x3b7 => 0x0,
    0x3b8 => 0x0,
    0x3b9 => 0x0,
    0x3ba => 0x0,
    0x3bb => 0x0,
    0x3bc => 0x0,
    0x3bd => 0x0,
    0x3be => 0x0,
    0x3bf => 0x0,
    0x3c0 => 0x986,
    0x3c1 => 0x0,
    0x3c2 => 0x0,
    0x3c3 => 0x0,
    0x3c4 => 0x0,
    0x3c5 => 0x0,
    0x3c6 => 0x0,
    0x3c7 => 0x0,
    0x3c8 => 0x0,
    0x3c9 => 0x0,
    0x3ca => 0x0,
    0x3cb => 0x0,
    0x3cc => 0x0,
    0x3cd => 0x0,
    0x3ce => 0x0,
    0x3cf => 0x0,
    0x3d0 => 0x0,
    0x3d1 => 0x0,
    0x3d2 => 0x0,
    0x3d3 => 0x0,
    0x3d4 => 0x0,
    0x3d5 => 0x0,
    0x3d6 => 0x0,
    0x3d7 => 0x0,
    0x3d8 => 0x0,
    0x3d9 => 0x0,
    0x3da => 0x0,
    0x3db => 0x0,
    0x3dc => 0x0,
    0x3dd => 0x0,
    0x3de => 0x0,
    0x3df => 0x0,
    0x3e0 => 0x986,
    0x3e1 => 0x0,
    0x3e2 => 0x0,
    0x3e3 => 0x0,
    0x3e4 => 0x0,
    0x3e5 => 0x0,
    0x3e6 => 0x0,
    0x3e7 => 0x0,
    0x3e8 => 0x0,
    0x3e9 => 0x0,
    0x3ea => 0x0,
    0x3eb => 0x0,
    0x3ec => 0x0,
    0x3ed => 0x0,
    0x3ee => 0x0,
    0x3ef => 0x0,
    0x3f0 => 0x0,
    0x3f1 => 0x0,
    0x3f2 => 0x0,
    0x3f3 => 0x0,
    0x3f4 => 0x0,
    0x3f5 => 0x0,
    0x3f6 => 0x0,
    0x3f7 => 0x0,
    0x3f8 => 0x0,
    0x3f9 => 0x0,
    0x3fa => 0x0,
    0x3fb => 0x0,
    0x3fc => 0x0,
    0x3fd => 0x0,
    0x3fe => 0x0,
    0x3ff => 0x0,
    0x400 => 0x0,
    0x401 => 0x0,
    0x402 => 0x0,
    0x403 => 0x0,
    0x404 => 0x0,
    0x405 => 0x0,
    0x406 => 0x0,
    0x407 => 0x0,
    0x408 => 0x0,
    0x409 => 0x0,
    0x40a => 0x0,
    0x40b => 0x0,
    0x40c => 0x0,
    0x40d => 0x0,
    0x40e => 0x0,
    0x40f => 0x0,
    0x410 => 0x0,
    0x411 => 0x0,
    0x412 => 0x0,
    0x413 => 0x0,
    0x414 => 0x0,
    0x415 => 0x0,
    0x416 => 0x0,
    0x417 => 0x0,
    0x418 => 0x0,
    0x419 => 0x0,
    0x41a => 0x0,
    0x41b => 0x0,
    0x41c => 0x0,
    0x41d => 0x0,
    0x41e => 0x0,
    0x41f => 0x0,
    0x420 => 0x0,
    0x421 => 0x0,
    0x422 => 0x0,
    0x423 => 0x0,
    0x424 => 0x0,
    0x425 => 0x0,
    0x426 => 0x0,
    0x427 => 0x0,
    0x428 => 0x0,
    0x429 => 0x0,
    0x42a => 0x0,
    0x42b => 0x0,
    0x42c => 0x0,
    0x42d => 0x0,
    0x42e => 0x0,
    0x42f => 0x0,
    0x430 => 0x0,
    0x431 => 0x0,
    0x432 => 0x0,
    0x433 => 0x0,
    0x434 => 0x0,
    0x435 => 0x0,
    0x436 => 0x0,
    0x437 => 0x0,
    0x438 => 0x0,
    0x439 => 0x0,
    0x43a => 0x0,
    0x43b => 0x0,
    0x43c => 0x0,
    0x43d => 0x0,
    0x43e => 0x0,
    0x43f => 0x0,
    0x440 => 0x0,
    0x441 => 0x0,
    0x442 => 0x0,
    0x443 => 0x0,
    0x444 => 0x0,
    0x445 => 0x0,
    0x446 => 0x0,
    0x447 => 0x0,
    0x448 => 0x0,
    0x449 => 0x0,
    0x44a => 0x0,
    0x44b => 0x0,
    0x44c => 0x0,
    0x44d => 0x0,
    0x44e => 0x0,
    0x44f => 0x0,
    0x450 => 0x0,
    0x451 => 0x0,
    0x452 => 0x0,
    0x453 => 0x0,
    0x454 => 0x0,
    0x455 => 0x0,
    0x456 => 0x0,
    0x457 => 0x0,
    0x458 => 0x0,
    0x459 => 0x0,
    0x45a => 0x0,
    0x45b => 0x0,
    0x45c => 0x0,
    0x45d => 0x0,
    0x45e => 0x0,
    0x45f => 0x0,
    0x460 => 0x0,
    0x461 => 0x0,
    0x462 => 0x0,
    0x463 => 0x0,
    0x464 => 0x0,
    0x465 => 0x0,
    0x466 => 0x0,
    0x467 => 0x0,
    0x468 => 0x0,
    0x469 => 0x0,
    0x46a => 0x0,
    0x46b => 0x0,
    0x46c => 0x0,
    0x46d => 0x0,
    0x46e => 0x0,
    0x46f => 0x0,
    0x470 => 0x0,
    0x471 => 0x0,
    0x472 => 0x0,
    0x473 => 0x0,
    0x474 => 0x0,
    0x475 => 0x0,
    0x476 => 0x0,
    0x477 => 0x0,
    0x478 => 0x0,
    0x479 => 0x0,
    0x47a => 0x0,
    0x47b => 0x0,
    0x47c => 0x0,
    0x47d => 0x0,
    0x47e => 0x0,
    0x47f => 0x0,
    0x480 => 0x0,
    0x481 => 0x0,
    0x482 => 0x0,
    0x483 => 0x0,
    0x484 => 0x0,
    0x485 => 0x0,
    0x486 => 0x0,
    0x487 => 0x0,
    0x488 => 0x0,
    0x489 => 0x0,
    0x48a => 0x0,
    0x48b => 0x0,
    0x48c => 0x0,
    0x48d => 0x0,
    0x48e => 0x0,
    0x48f => 0x0,
    0x490 => 0x0,
    0x491 => 0x0,
    0x492 => 0x0,
    0x493 => 0x0,
    0x494 => 0x0,
    0x495 => 0x0,
    0x496 => 0x0,
    0x497 => 0x0,
    0x498 => 0x0,
    0x499 => 0x0,
    0x49a => 0x0,
    0x49b => 0x0,
    0x49c => 0x0,
    0x49d => 0x0,
    0x49e => 0x0,
    0x49f => 0x0,
    0x4a0 => 0x0,
    0x4a1 => 0x0,
    0x4a2 => 0x0,
    0x4a3 => 0x0,
    0x4a4 => 0x0,
    0x4a5 => 0x0,
    0x4a6 => 0x0,
    0x4a7 => 0x0,
    0x4a8 => 0x0,
    0x4a9 => 0x0,
    0x4aa => 0x0,
    0x4ab => 0x0,
    0x4ac => 0x0,
    0x4ad => 0x0,
    0x4ae => 0x0,
    0x4af => 0x0,
    0x4b0 => 0x0,
    0x4b1 => 0x0,
    0x4b2 => 0x0,
    0x4b3 => 0x0,
    0x4b4 => 0x0,
    0x4b5 => 0x0,
    0x4b6 => 0x0,
    0x4b7 => 0x0,
    0x4b8 => 0x0,
    0x4b9 => 0x0,
    0x4ba => 0x0,
    0x4bb => 0x0,
    0x4bc => 0x0,
    0x4bd => 0x0,
    0x4be => 0x0,
    0x4bf => 0x0,
    0x4c0 => 0x0,
    0x4c1 => 0x0,
    0x4c2 => 0x0,
    0x4c3 => 0x0,
    0x4c4 => 0x0,
    0x4c5 => 0x0,
    0x4c6 => 0x0,
    0x4c7 => 0x0,
    0x4c8 => 0x0,
    0x4c9 => 0x0,
    0x4ca => 0x0,
    0x4cb => 0x0,
    0x4cc => 0x0,
    0x4cd => 0x0,
    0x4ce => 0x0,
    0x4cf => 0x0,
    0x4d0 => 0x0,
    0x4d1 => 0x0,
    0x4d2 => 0x0,
    0x4d3 => 0x0,
    0x4d4 => 0x0,
    0x4d5 => 0x0,
    0x4d6 => 0x0,
    0x4d7 => 0x0,
    0x4d8 => 0x0,
    0x4d9 => 0x0,
    0x4da => 0x0,
    0x4db => 0x0,
    0x4dc => 0x0,
    0x4dd => 0x0,
    0x4de => 0x0,
    0x4df => 0x0,
    0x4e0 => 0x0,
    0x4e1 => 0x0,
    0x4e2 => 0x0,
    0x4e3 => 0x0,
    0x4e4 => 0x0,
    0x4e5 => 0x0,
    0x4e6 => 0x0,
    0x4e7 => 0x0,
    0x4e8 => 0x0,
    0x4e9 => 0x0,
    0x4ea => 0x0,
    0x4eb => 0x0,
    0x4ec => 0x0,
    0x4ed => 0x0,
    0x4ee => 0x0,
    0x4ef => 0x0,
    0x4f0 => 0x0,
    0x4f1 => 0x0,
    0x4f2 => 0x0,
    0x4f3 => 0x0,
    0x4f4 => 0x0,
    0x4f5 => 0x0,
    0x4f6 => 0x0,
    0x4f7 => 0x0,
    0x4f8 => 0x0,
    0x4f9 => 0x0,
    0x4fa => 0x0,
    0x4fb => 0x0,
    0x4fc => 0x0,
    0x4fd => 0x0,
    0x4fe => 0x0,
    0x4ff => 0x0,
    0x500 => 0x0,
    0x501 => 0x0,
    0x502 => 0x0,
    0x503 => 0x0,
    0x504 => 0x0,
    0x505 => 0x0,
    0x506 => 0x0,
    0x507 => 0x0,
    0x508 => 0x0,
    0x509 => 0x0,
    0x50a => 0x0,
    0x50b => 0x0,
    0x50c => 0x0,
    0x50d => 0x0,
    0x50e => 0x0,
    0x50f => 0x0,
    0x510 => 0x0,
    0x511 => 0x0,
    0x512 => 0x0,
    0x513 => 0x0,
    0x514 => 0x0,
    0x515 => 0x0,
    0x516 => 0x0,
    0x517 => 0x0,
    0x518 => 0x0,
    0x519 => 0x0,
    0x51a => 0x0,
    0x51b => 0x0,
    0x51c => 0x0,
    0x51d => 0x0,
    0x51e => 0x0,
    0x51f => 0x0,
    0x520 => 0x0,
    0x521 => 0x0,
    0x522 => 0x0,
    0x523 => 0x0,
    0x524 => 0x0,
    0x525 => 0x0,
    0x526 => 0x0,
    0x527 => 0x0,
    0x528 => 0x0,
    0x529 => 0x0,
    0x52a => 0x0,
    0x52b => 0x0,
    0x52c => 0x0,
    0x52d => 0x0,
    0x52e => 0x0,
    0x52f => 0x0,
    0x530 => 0x0,
    0x531 => 0x0,
    0x532 => 0x0,
    0x533 => 0x0,
    0x534 => 0x0,
    0x535 => 0x0,
    0x536 => 0x0,
    0x537 => 0x0,
    0x538 => 0x0,
    0x539 => 0x0,
    0x53a => 0x0,
    0x53b => 0x0,
    0x53c => 0x0,
    0x53d => 0x0,
    0x53e => 0x0,
    0x53f => 0x0,
    0x540 => 0x0,
    0x541 => 0x0,
    0x542 => 0x0,
    0x543 => 0x0,
    0x544 => 0x0,
    0x545 => 0x0,
    0x546 => 0x0,
    0x547 => 0x0,
    0x548 => 0x0,
    0x549 => 0x0,
    0x54a => 0x0,
    0x54b => 0x0,
    0x54c => 0x0,
    0x54d => 0x0,
    0x54e => 0x0,
    0x54f => 0x0,
    0x550 => 0x0,
    0x551 => 0x0,
    0x552 => 0x0,
    0x553 => 0x0,
    0x554 => 0x0,
    0x555 => 0x0,
    0x556 => 0x0,
    0x557 => 0x0,
    0x558 => 0x0,
    0x559 => 0x0,
    0x55a => 0x0,
    0x55b => 0x0,
    0x55c => 0x0,
    0x55d => 0x0,
    0x55e => 0x0,
    0x55f => 0x0,
    0x560 => 0x0,
    0x561 => 0x0,
    0x562 => 0x0,
    0x563 => 0x0,
    0x564 => 0x0,
    0x565 => 0x0,
    0x566 => 0x0,
    0x567 => 0x0,
    0x568 => 0x0,
    0x569 => 0x0,
    0x56a => 0x0,
    0x56b => 0x0,
    0x56c => 0x0,
    0x56d => 0x0,
    0x56e => 0x0,
    0x56f => 0x0,
    0x570 => 0x0,
    0x571 => 0x0,
    0x572 => 0x0,
    0x573 => 0x0,
    0x574 => 0x0,
    0x575 => 0x0,
    0x576 => 0x0,
    0x577 => 0x0,
    0x578 => 0x0,
    0x579 => 0x0,
    0x57a => 0x0,
    0x57b => 0x0,
    0x57c => 0x0,
    0x57d => 0x0,
    0x57e => 0x0,
    0x57f => 0x0,
    0x580 => 0x0,
    0x581 => 0x0,
    0x582 => 0x0,
    0x583 => 0x0,
    0x584 => 0x0,
    0x585 => 0x0,
    0x586 => 0x0,
    0x587 => 0x0,
    0x588 => 0x0,
    0x589 => 0x0,
    0x58a => 0x0,
    0x58b => 0x0,
    0x58c => 0x0,
    0x58d => 0x0,
    0x58e => 0x0,
    0x58f => 0x0,
    0x590 => 0x0,
    0x591 => 0x0,
    0x592 => 0x0,
    0x593 => 0x0,
    0x594 => 0x0,
    0x595 => 0x0,
    0x596 => 0x0,
    0x597 => 0x0,
    0x598 => 0x0,
    0x599 => 0x0,
    0x59a => 0x0,
    0x59b => 0x0,
    0x59c => 0x0,
    0x59d => 0x0,
    0x59e => 0x0,
    0x59f => 0x0,
    0x5a0 => 0x0,
    0x5a1 => 0x0,
    0x5a2 => 0x0,
    0x5a3 => 0x0,
    0x5a4 => 0x0,
    0x5a5 => 0x0,
    0x5a6 => 0x0,
    0x5a7 => 0x0,
    0x5a8 => 0x0,
    0x5a9 => 0x0,
    0x5aa => 0x0,
    0x5ab => 0x0,
    0x5ac => 0x0,
    0x5ad => 0x0,
    0x5ae => 0x0,
    0x5af => 0x0,
    0x5b0 => 0x0,
    0x5b1 => 0x0,
    0x5b2 => 0x0,
    0x5b3 => 0x0,
    0x5b4 => 0x0,
    0x5b5 => 0x0,
    0x5b6 => 0x0,
    0x5b7 => 0x0,
    0x5b8 => 0x0,
    0x5b9 => 0x0,
    0x5ba => 0x0,
    0x5bb => 0x0,
    0x5bc => 0x0,
    0x5bd => 0x0,
    0x5be => 0x0,
    0x5bf => 0x0,
    0x5c0 => 0x0,
    0x5c1 => 0x0,
    0x5c2 => 0x0,
    0x5c3 => 0x0,
    0x5c4 => 0x0,
    0x5c5 => 0x0,
    0x5c6 => 0x0,
    0x5c7 => 0x0,
    0x5c8 => 0x0,
    0x5c9 => 0x0,
    0x5ca => 0x0,
    0x5cb => 0x0,
    0x5cc => 0x0,
    0x5cd => 0x0,
    0x5ce => 0x0,
    0x5cf => 0x0,
    0x5d0 => 0x0,
    0x5d1 => 0x0,
    0x5d2 => 0x0,
    0x5d3 => 0x0,
    0x5d4 => 0x0,
    0x5d5 => 0x0,
    0x5d6 => 0x0,
    0x5d7 => 0x0,
    0x5d8 => 0x0,
    0x5d9 => 0x0,
    0x5da => 0x0,
    0x5db => 0x0,
    0x5dc => 0x0,
    0x5dd => 0x0,
    0x5de => 0x0,
    0x5df => 0x0,
    0x5e0 => 0x0,
    0x5e1 => 0x0,
    0x5e2 => 0x0,
    0x5e3 => 0x0,
    0x5e4 => 0x0,
    0x5e5 => 0x0,
    0x5e6 => 0x0,
    0x5e7 => 0x0,
    0x5e8 => 0x0,
    0x5e9 => 0x0,
    0x5ea => 0x0,
    0x5eb => 0x0,
    0x5ec => 0x0,
    0x5ed => 0x0,
    0x5ee => 0x0,
    0x5ef => 0x0,
    0x5f0 => 0x0,
    0x5f1 => 0x0,
    0x5f2 => 0x0,
    0x5f3 => 0x0,
    0x5f4 => 0x0,
    0x5f5 => 0x0,
    0x5f6 => 0x0,
    0x5f7 => 0x0,
    0x5f8 => 0x0,
    0x5f9 => 0x0,
    0x5fa => 0x0,
    0x5fb => 0x0,
    0x5fc => 0x0,
    0x5fd => 0x0,
    0x5fe => 0x0,
    0x5ff => 0x0,
    0x600 => 0x0,
    0x601 => 0x0,
    0x602 => 0x0,
    0x603 => 0x0,
    0x604 => 0x0,
    0x605 => 0x0,
    0x606 => 0x0,
    0x607 => 0x0,
    0x608 => 0x0,
    0x609 => 0x0,
    0x60a => 0x0,
    0x60b => 0x0,
    0x60c => 0x0,
    0x60d => 0x0,
    0x60e => 0x0,
    0x60f => 0x0,
    0x610 => 0x0,
    0x611 => 0x0,
    0x612 => 0x0,
    0x613 => 0x0,
    0x614 => 0x0,
    0x615 => 0x0,
    0x616 => 0x0,
    0x617 => 0x0,
    0x618 => 0x0,
    0x619 => 0x0,
    0x61a => 0x0,
    0x61b => 0x0,
    0x61c => 0x0,
    0x61d => 0x0,
    0x61e => 0x0,
    0x61f => 0x0,
    0x620 => 0x0,
    0x621 => 0x0,
    0x622 => 0x0,
    0x623 => 0x0,
    0x624 => 0x0,
    0x625 => 0x0,
    0x626 => 0x0,
    0x627 => 0x0,
    0x628 => 0x0,
    0x629 => 0x0,
    0x62a => 0x0,
    0x62b => 0x0,
    0x62c => 0x0,
    0x62d => 0x0,
    0x62e => 0x0,
    0x62f => 0x0,
    0x630 => 0x0,
    0x631 => 0x0,
    0x632 => 0x0,
    0x633 => 0x0,
    0x634 => 0x0,
    0x635 => 0x0,
    0x636 => 0x0,
    0x637 => 0x0,
    0x638 => 0x0,
    0x639 => 0x0,
    0x63a => 0x0,
    0x63b => 0x0,
    0x63c => 0x0,
    0x63d => 0x0,
    0x63e => 0x0,
    0x63f => 0x0,
    0x640 => 0x0,
    0x641 => 0x0,
    0x642 => 0x0,
    0x643 => 0x0,
    0x644 => 0x0,
    0x645 => 0x0,
    0x646 => 0x0,
    0x647 => 0x0,
    0x648 => 0x0,
    0x649 => 0x0,
    0x64a => 0x0,
    0x64b => 0x0,
    0x64c => 0x0,
    0x64d => 0x0,
    0x64e => 0x0,
    0x64f => 0x0,
    0x650 => 0x0,
    0x651 => 0x0,
    0x652 => 0x0,
    0x653 => 0x0,
    0x654 => 0x0,
    0x655 => 0x0,
    0x656 => 0x0,
    0x657 => 0x0,
    0x658 => 0x0,
    0x659 => 0x0,
    0x65a => 0x0,
    0x65b => 0x0,
    0x65c => 0x0,
    0x65d => 0x0,
    0x65e => 0x0,
    0x65f => 0x0,
    0x660 => 0x0,
    0x661 => 0x0,
    0x662 => 0x0,
    0x663 => 0x0,
    0x664 => 0x0,
    0x665 => 0x0,
    0x666 => 0x0,
    0x667 => 0x0,
    0x668 => 0x0,
    0x669 => 0x0,
    0x66a => 0x0,
    0x66b => 0x0,
    0x66c => 0x0,
    0x66d => 0x0,
    0x66e => 0x0,
    0x66f => 0x0,
    0x670 => 0x0,
    0x671 => 0x0,
    0x672 => 0x0,
    0x673 => 0x0,
    0x674 => 0x0,
    0x675 => 0x0,
    0x676 => 0x0,
    0x677 => 0x0,
    0x678 => 0x0,
    0x679 => 0x0,
    0x67a => 0x0,
    0x67b => 0x0,
    0x67c => 0x0,
    0x67d => 0x0,
    0x67e => 0x0,
    0x67f => 0x0,
    0x680 => 0x0,
    0x681 => 0x0,
    0x682 => 0x0,
    0x683 => 0x0,
    0x684 => 0x0,
    0x685 => 0x0,
    0x686 => 0x0,
    0x687 => 0x0,
    0x688 => 0x0,
    0x689 => 0x0,
    0x68a => 0x0,
    0x68b => 0x0,
    0x68c => 0x0,
    0x68d => 0x0,
    0x68e => 0x0,
    0x68f => 0x0,
    0x690 => 0x0,
    0x691 => 0x0,
    0x692 => 0x0,
    0x693 => 0x0,
    0x694 => 0x0,
    0x695 => 0x0,
    0x696 => 0x0,
    0x697 => 0x0,
    0x698 => 0x0,
    0x699 => 0x0,
    0x69a => 0x0,
    0x69b => 0x0,
    0x69c => 0x0,
    0x69d => 0x0,
    0x69e => 0x0,
    0x69f => 0x0,
    0x6a0 => 0x0,
    0x6a1 => 0x0,
    0x6a2 => 0x0,
    0x6a3 => 0x0,
    0x6a4 => 0x0,
    0x6a5 => 0x0,
    0x6a6 => 0x0,
    0x6a7 => 0x0,
    0x6a8 => 0x0,
    0x6a9 => 0x0,
    0x6aa => 0x0,
    0x6ab => 0x0,
    0x6ac => 0x0,
    0x6ad => 0x0,
    0x6ae => 0x0,
    0x6af => 0x0,
    0x6b0 => 0x0,
    0x6b1 => 0x0,
    0x6b2 => 0x0,
    0x6b3 => 0x0,
    0x6b4 => 0x0,
    0x6b5 => 0x0,
    0x6b6 => 0x0,
    0x6b7 => 0x0,
    0x6b8 => 0x0,
    0x6b9 => 0x0,
    0x6ba => 0x0,
    0x6bb => 0x0,
    0x6bc => 0x0,
    0x6bd => 0x0,
    0x6be => 0x0,
    0x6bf => 0x0,
    0x6c0 => 0x0,
    0x6c1 => 0x0,
    0x6c2 => 0x0,
    0x6c3 => 0x0,
    0x6c4 => 0x0,
    0x6c5 => 0x0,
    0x6c6 => 0x0,
    0x6c7 => 0x0,
    0x6c8 => 0x0,
    0x6c9 => 0x0,
    0x6ca => 0x0,
    0x6cb => 0x0,
    0x6cc => 0x0,
    0x6cd => 0x0,
    0x6ce => 0x0,
    0x6cf => 0x0,
    0x6d0 => 0x0,
    0x6d1 => 0x0,
    0x6d2 => 0x0,
    0x6d3 => 0x0,
    0x6d4 => 0x0,
    0x6d5 => 0x0,
    0x6d6 => 0x0,
    0x6d7 => 0x0,
    0x6d8 => 0x0,
    0x6d9 => 0x0,
    0x6da => 0x0,
    0x6db => 0x0,
    0x6dc => 0x0,
    0x6dd => 0x0,
    0x6de => 0x0,
    0x6df => 0x0,
    0x6e0 => 0x0,
    0x6e1 => 0x0,
    0x6e2 => 0x0,
    0x6e3 => 0x0,
    0x6e4 => 0x0,
    0x6e5 => 0x0,
    0x6e6 => 0x0,
    0x6e7 => 0x0,
    0x6e8 => 0x0,
    0x6e9 => 0x0,
    0x6ea => 0x0,
    0x6eb => 0x0,
    0x6ec => 0x0,
    0x6ed => 0x0,
    0x6ee => 0x0,
    0x6ef => 0x0,
    0x6f0 => 0x0,
    0x6f1 => 0x0,
    0x6f2 => 0x0,
    0x6f3 => 0x0,
    0x6f4 => 0x0,
    0x6f5 => 0x0,
    0x6f6 => 0x0,
    0x6f7 => 0x0,
    0x6f8 => 0x0,
    0x6f9 => 0x0,
    0x6fa => 0x0,
    0x6fb => 0x0,
    0x6fc => 0x0,
    0x6fd => 0x0,
    0x6fe => 0x0,
    0x6ff => 0x0,
    0x700 => 0x0,
    0x701 => 0x0,
    0x702 => 0x0,
    0x703 => 0x0,
    0x704 => 0x0,
    0x705 => 0x0,
    0x706 => 0x0,
    0x707 => 0x0,
    0x708 => 0x0,
    0x709 => 0x0,
    0x70a => 0x0,
    0x70b => 0x0,
    0x70c => 0x0,
    0x70d => 0x0,
    0x70e => 0x0,
    0x70f => 0x0,
    0x710 => 0x0,
    0x711 => 0x0,
    0x712 => 0x0,
    0x713 => 0x0,
    0x714 => 0x0,
    0x715 => 0x0,
    0x716 => 0x0,
    0x717 => 0x0,
    0x718 => 0x0,
    0x719 => 0x0,
    0x71a => 0x0,
    0x71b => 0x0,
    0x71c => 0x0,
    0x71d => 0x0,
    0x71e => 0x0,
    0x71f => 0x0,
    0x720 => 0x0,
    0x721 => 0x0,
    0x722 => 0x0,
    0x723 => 0x0,
    0x724 => 0x0,
    0x725 => 0x0,
    0x726 => 0x0,
    0x727 => 0x0,
    0x728 => 0x0,
    0x729 => 0x0,
    0x72a => 0x0,
    0x72b => 0x0,
    0x72c => 0x0,
    0x72d => 0x0,
    0x72e => 0x0,
    0x72f => 0x0,
    0x730 => 0x0,
    0x731 => 0x0,
    0x732 => 0x0,
    0x733 => 0x0,
    0x734 => 0x0,
    0x735 => 0x0,
    0x736 => 0x0,
    0x737 => 0x0,
    0x738 => 0x0,
    0x739 => 0x0,
    0x73a => 0x0,
    0x73b => 0x0,
    0x73c => 0x0,
    0x73d => 0x0,
    0x73e => 0x0,
    0x73f => 0x0,
    0x740 => 0x0,
    0x741 => 0x0,
    0x742 => 0x0,
    0x743 => 0x0,
    0x744 => 0x0,
    0x745 => 0x0,
    0x746 => 0x0,
    0x747 => 0x0,
    0x748 => 0x0,
    0x749 => 0x0,
    0x74a => 0x0,
    0x74b => 0x0,
    0x74c => 0x0,
    0x74d => 0x0,
    0x74e => 0x0,
    0x74f => 0x0,
    0x750 => 0x0,
    0x751 => 0x0,
    0x752 => 0x0,
    0x753 => 0x0,
    0x754 => 0x0,
    0x755 => 0x0,
    0x756 => 0x0,
    0x757 => 0x0,
    0x758 => 0x0,
    0x759 => 0x0,
    0x75a => 0x0,
    0x75b => 0x0,
    0x75c => 0x0,
    0x75d => 0x0,
    0x75e => 0x0,
    0x75f => 0x0,
    0x760 => 0x0,
    0x761 => 0x0,
    0x762 => 0x0,
    0x763 => 0x0,
    0x764 => 0x0,
    0x765 => 0x0,
    0x766 => 0x0,
    0x767 => 0x0,
    0x768 => 0x0,
    0x769 => 0x0,
    0x76a => 0x0,
    0x76b => 0x0,
    0x76c => 0x0,
    0x76d => 0x0,
    0x76e => 0x0,
    0x76f => 0x0,
    0x770 => 0x0,
    0x771 => 0x0,
    0x772 => 0x0,
    0x773 => 0x0,
    0x774 => 0x0,
    0x775 => 0x0,
    0x776 => 0x0,
    0x777 => 0x0,
    0x778 => 0x0,
    0x779 => 0x0,
    0x77a => 0x0,
    0x77b => 0x0,
    0x77c => 0x0,
    0x77d => 0x0,
    0x77e => 0x0,
    0x77f => 0x0,
    0x780 => 0x0,
    0x781 => 0x0,
    0x782 => 0x0,
    0x783 => 0x0,
    0x784 => 0x0,
    0x785 => 0x0,
    0x786 => 0x0,
    0x787 => 0x0,
    0x788 => 0x0,
    0x789 => 0x0,
    0x78a => 0x0,
    0x78b => 0x0,
    0x78c => 0x0,
    0x78d => 0x0,
    0x78e => 0x0,
    0x78f => 0x0,
    0x790 => 0x0,
    0x791 => 0x0,
    0x792 => 0x0,
    0x793 => 0x0,
    0x794 => 0x0,
    0x795 => 0x0,
    0x796 => 0x0,
    0x797 => 0x0,
    0x798 => 0x0,
    0x799 => 0x0,
    0x79a => 0x0,
    0x79b => 0x0,
    0x79c => 0x0,
    0x79d => 0x0,
    0x79e => 0x0,
    0x79f => 0x0,
    0x7a0 => 0x0,
    0x7a1 => 0x0,
    0x7a2 => 0x0,
    0x7a3 => 0x0,
    0x7a4 => 0x0,
    0x7a5 => 0x0,
    0x7a6 => 0x0,
    0x7a7 => 0x0,
    0x7a8 => 0x0,
    0x7a9 => 0x0,
    0x7aa => 0x0,
    0x7ab => 0x0,
    0x7ac => 0x0,
    0x7ad => 0x0,
    0x7ae => 0x0,
    0x7af => 0x0,
    0x7b0 => 0x0,
    0x7b1 => 0x0,
    0x7b2 => 0x0,
    0x7b3 => 0x0,
    0x7b4 => 0x0,
    0x7b5 => 0x0,
    0x7b6 => 0x0,
    0x7b7 => 0x0,
    0x7b8 => 0x0,
    0x7b9 => 0x0,
    0x7ba => 0x0,
    0x7bb => 0x0,
    0x7bc => 0x0,
    0x7bd => 0x0,
    0x7be => 0x0,
    0x7bf => 0x0,
    0x7c0 => 0x0,
    0x7c1 => 0x0,
    0x7c2 => 0x0,
    0x7c3 => 0x0,
    0x7c4 => 0x0,
    0x7c5 => 0x0,
    0x7c6 => 0x0,
    0x7c7 => 0x0,
    0x7c8 => 0x0,
    0x7c9 => 0x0,
    0x7ca => 0x0,
    0x7cb => 0x0,
    0x7cc => 0x0,
    0x7cd => 0x0,
    0x7ce => 0x0,
    0x7cf => 0x0,
    0x7d0 => 0x0,
    0x7d1 => 0x0,
    0x7d2 => 0x0,
    0x7d3 => 0x0,
    0x7d4 => 0x0,
    0x7d5 => 0x0,
    0x7d6 => 0x0,
    0x7d7 => 0x0,
    0x7d8 => 0x0,
    0x7d9 => 0x0,
    0x7da => 0x0,
    0x7db => 0x0,
    0x7dc => 0x0,
    0x7dd => 0x0,
    0x7de => 0x0,
    0x7df => 0x0,
    0x7e0 => 0x0,
    0x7e1 => 0x0,
    0x7e2 => 0x0,
    0x7e3 => 0x0,
    0x7e4 => 0x0,
    0x7e5 => 0x0,
    0x7e6 => 0x0,
    0x7e7 => 0x0,
    0x7e8 => 0x0,
    0x7e9 => 0x0,
    0x7ea => 0x0,
    0x7eb => 0x0,
    0x7ec => 0x0,
    0x7ed => 0x0,
    0x7ee => 0x0,
    0x7ef => 0x0,
    0x7f0 => 0x0,
    0x7f1 => 0x0,
    0x7f2 => 0x0,
    0x7f3 => 0x0,
    0x7f4 => 0x0,
    0x7f5 => 0x0,
    0x7f6 => 0x0,
    0x7f7 => 0x0,
    0x7f8 => 0x0,
    0x7f9 => 0x0,
    0x7fa => 0x0,
    0x7fb => 0x0,
    0x7fc => 0x0,
    0x7fd => 0x0,
    0x7fe => 0x0,
    0x7ff => 0x0,
    0x800 => 0x0,
    0x801 => 0x0,
    0x802 => 0x0,
    0x803 => 0x0,
    0x804 => 0x0,
    0x805 => 0x0,
    0x806 => 0x0,
    0x807 => 0x0,
    0x808 => 0x0,
    0x809 => 0x0,
    0x80a => 0x0,
    0x80b => 0x0,
    0x80c => 0x0,
    0x80d => 0x0,
    0x80e => 0x0,
    0x80f => 0x0,
    0x810 => 0x0,
    0x811 => 0x0,
    0x812 => 0x0,
    0x813 => 0x0,
    0x814 => 0x0,
    0x815 => 0x0,
    0x816 => 0x0,
    0x817 => 0x0,
    0x818 => 0x0,
    0x819 => 0x0,
    0x81a => 0x0,
    0x81b => 0x0,
    0x81c => 0x0,
    0x81d => 0x0,
    0x81e => 0x0,
    0x81f => 0x0,
    0x820 => 0x0,
    0x821 => 0x0,
    0x822 => 0x0,
    0x823 => 0x0,
    0x824 => 0x0,
    0x825 => 0x0,
    0x826 => 0x0,
    0x827 => 0x0,
    0x828 => 0x0,
    0x829 => 0x0,
    0x82a => 0x0,
    0x82b => 0x0,
    0x82c => 0x0,
    0x82d => 0x0,
    0x82e => 0x0,
    0x82f => 0x0,
    0x830 => 0x0,
    0x831 => 0x0,
    0x832 => 0x0,
    0x833 => 0x0,
    0x834 => 0x0,
    0x835 => 0x0,
    0x836 => 0x0,
    0x837 => 0x0,
    0x838 => 0x0,
    0x839 => 0x0,
    0x83a => 0x0,
    0x83b => 0x0,
    0x83c => 0x0,
    0x83d => 0x0,
    0x83e => 0x0,
    0x83f => 0x0,
    0x840 => 0x0,
    0x841 => 0x0,
    0x842 => 0x0,
    0x843 => 0x0,
    0x844 => 0x0,
    0x845 => 0x0,
    0x846 => 0x0,
    0x847 => 0x0,
    0x848 => 0x0,
    0x849 => 0x0,
    0x84a => 0x0,
    0x84b => 0x0,
    0x84c => 0x0,
    0x84d => 0x0,
    0x84e => 0x0,
    0x84f => 0x0,
    0x850 => 0x0,
    0x851 => 0x0,
    0x852 => 0x0,
    0x853 => 0x0,
    0x854 => 0x0,
    0x855 => 0x0,
    0x856 => 0x0,
    0x857 => 0x0,
    0x858 => 0x0,
    0x859 => 0x0,
    0x85a => 0x0,
    0x85b => 0x0,
    0x85c => 0x0,
    0x85d => 0x0,
    0x85e => 0x0,
    0x85f => 0x0,
    0x860 => 0x0,
    0x861 => 0x0,
    0x862 => 0x0,
    0x863 => 0x0,
    0x864 => 0x0,
    0x865 => 0x0,
    0x866 => 0x0,
    0x867 => 0x0,
    0x868 => 0x0,
    0x869 => 0x0,
    0x86a => 0x0,
    0x86b => 0x0,
    0x86c => 0x0,
    0x86d => 0x0,
    0x86e => 0x0,
    0x86f => 0x0,
    0x870 => 0x0,
    0x871 => 0x0,
    0x872 => 0x0,
    0x873 => 0x0,
    0x874 => 0x0,
    0x875 => 0x0,
    0x876 => 0x0,
    0x877 => 0x0,
    0x878 => 0x0,
    0x879 => 0x0,
    0x87a => 0x0,
    0x87b => 0x0,
    0x87c => 0x0,
    0x87d => 0x0,
    0x87e => 0x0,
    0x87f => 0x0,
    0x880 => 0x0,
    0x881 => 0x0,
    0x882 => 0x0,
    0x883 => 0x0,
    0x884 => 0x0,
    0x885 => 0x0,
    0x886 => 0x0,
    0x887 => 0x0,
    0x888 => 0x0,
    0x889 => 0x0,
    0x88a => 0x0,
    0x88b => 0x0,
    0x88c => 0x0,
    0x88d => 0x0,
    0x88e => 0x0,
    0x88f => 0x0,
    0x890 => 0x0,
    0x891 => 0x0,
    0x892 => 0x0,
    0x893 => 0x0,
    0x894 => 0x0,
    0x895 => 0x0,
    0x896 => 0x0,
    0x897 => 0x0,
    0x898 => 0x0,
    0x899 => 0x0,
    0x89a => 0x0,
    0x89b => 0x0,
    0x89c => 0x0,
    0x89d => 0x0,
    0x89e => 0x0,
    0x89f => 0x0,
    0x8a0 => 0x0,
    0x8a1 => 0x0,
    0x8a2 => 0x0,
    0x8a3 => 0x0,
    0x8a4 => 0x0,
    0x8a5 => 0x0,
    0x8a6 => 0x0,
    0x8a7 => 0x0,
    0x8a8 => 0x0,
    0x8a9 => 0x0,
    0x8aa => 0x0,
    0x8ab => 0x0,
    0x8ac => 0x0,
    0x8ad => 0x0,
    0x8ae => 0x0,
    0x8af => 0x0,
    0x8b0 => 0x0,
    0x8b1 => 0x0,
    0x8b2 => 0x0,
    0x8b3 => 0x0,
    0x8b4 => 0x0,
    0x8b5 => 0x0,
    0x8b6 => 0x0,
    0x8b7 => 0x0,
    0x8b8 => 0x0,
    0x8b9 => 0x0,
    0x8ba => 0x0,
    0x8bb => 0x0,
    0x8bc => 0x0,
    0x8bd => 0x0,
    0x8be => 0x0,
    0x8bf => 0x0,
    0x8c0 => 0x0,
    0x8c1 => 0x0,
    0x8c2 => 0x0,
    0x8c3 => 0x0,
    0x8c4 => 0x0,
    0x8c5 => 0x0,
    0x8c6 => 0x0,
    0x8c7 => 0x0,
    0x8c8 => 0x0,
    0x8c9 => 0x0,
    0x8ca => 0x0,
    0x8cb => 0x0,
    0x8cc => 0x0,
    0x8cd => 0x0,
    0x8ce => 0x0,
    0x8cf => 0x0,
    0x8d0 => 0x0,
    0x8d1 => 0x0,
    0x8d2 => 0x0,
    0x8d3 => 0x0,
    0x8d4 => 0x0,
    0x8d5 => 0x0,
    0x8d6 => 0x0,
    0x8d7 => 0x0,
    0x8d8 => 0x0,
    0x8d9 => 0x0,
    0x8da => 0x0,
    0x8db => 0x0,
    0x8dc => 0x0,
    0x8dd => 0x0,
    0x8de => 0x0,
    0x8df => 0x0,
    0x8e0 => 0x0,
    0x8e1 => 0x0,
    0x8e2 => 0x0,
    0x8e3 => 0x0,
    0x8e4 => 0x0,
    0x8e5 => 0x0,
    0x8e6 => 0x0,
    0x8e7 => 0x0,
    0x8e8 => 0x0,
    0x8e9 => 0x0,
    0x8ea => 0x0,
    0x8eb => 0x0,
    0x8ec => 0x0,
    0x8ed => 0x0,
    0x8ee => 0x0,
    0x8ef => 0x0,
    0x8f0 => 0x0,
    0x8f1 => 0x0,
    0x8f2 => 0x0,
    0x8f3 => 0x0,
    0x8f4 => 0x0,
    0x8f5 => 0x0,
    0x8f6 => 0x0,
    0x8f7 => 0x0,
    0x8f8 => 0x0,
    0x8f9 => 0x0,
    0x8fa => 0x0,
    0x8fb => 0x0,
    0x8fc => 0x0,
    0x8fd => 0x0,
    0x8fe => 0x0,
    0x8ff => 0x0,
    0x900 => 0x0,
    0x901 => 0x0,
    0x902 => 0x0,
    0x903 => 0x0,
    0x904 => 0x0,
    0x905 => 0x0,
    0x906 => 0x0,
    0x907 => 0x0,
    0x908 => 0x0,
    0x909 => 0x0,
    0x90a => 0x0,
    0x90b => 0x0,
    0x90c => 0x0,
    0x90d => 0x0,
    0x90e => 0x0,
    0x90f => 0x0,
    0x910 => 0x0,
    0x911 => 0x0,
    0x912 => 0x0,
    0x913 => 0x0,
    0x914 => 0x0,
    0x915 => 0x0,
    0x916 => 0x0,
    0x917 => 0x0,
    0x918 => 0x0,
    0x919 => 0x0,
    0x91a => 0x0,
    0x91b => 0x0,
    0x91c => 0x0,
    0x91d => 0x0,
    0x91e => 0x0,
    0x91f => 0x0,
    0x920 => 0x0,
    0x921 => 0x0,
    0x922 => 0x0,
    0x923 => 0x0,
    0x924 => 0x0,
    0x925 => 0x0,
    0x926 => 0x0,
    0x927 => 0x0,
    0x928 => 0x0,
    0x929 => 0x0,
    0x92a => 0x0,
    0x92b => 0x0,
    0x92c => 0x0,
    0x92d => 0x0,
    0x92e => 0x0,
    0x92f => 0x0,
    0x930 => 0x0,
    0x931 => 0x0,
    0x932 => 0x0,
    0x933 => 0x0,
    0x934 => 0x0,
    0x935 => 0x0,
    0x936 => 0x0,
    0x937 => 0x0,
    0x938 => 0x0,
    0x939 => 0x0,
    0x93a => 0x0,
    0x93b => 0x0,
    0x93c => 0x0,
    0x93d => 0x0,
    0x93e => 0x0,
    0x93f => 0x0,
    0x940 => 0x0,
    0x941 => 0x0,
    0x942 => 0x0,
    0x943 => 0x0,
    0x944 => 0x0,
    0x945 => 0x0,
    0x946 => 0x0,
    0x947 => 0x0,
    0x948 => 0x0,
    0x949 => 0x0,
    0x94a => 0x0,
    0x94b => 0x0,
    0x94c => 0x0,
    0x94d => 0x0,
    0x94e => 0x0,
    0x94f => 0x0,
    0x950 => 0x0,
    0x951 => 0x0,
    0x952 => 0x0,
    0x953 => 0x0,
    0x954 => 0x0,
    0x955 => 0x0,
    0x956 => 0x0,
    0x957 => 0x0,
    0x958 => 0x0,
    0x959 => 0x0,
    0x95a => 0x0,
    0x95b => 0x0,
    0x95c => 0x0,
    0x95d => 0x0,
    0x95e => 0x0,
    0x95f => 0x0,
    0x960 => 0x0,
    0x961 => 0x0,
    0x962 => 0x0,
    0x963 => 0x0,
    0x964 => 0x0,
    0x965 => 0x0,
    0x966 => 0x0,
    0x967 => 0x0,
    0x968 => 0x0,
    0x969 => 0x0,
    0x96a => 0x0,
    0x96b => 0x0,
    0x96c => 0x0,
    0x96d => 0x0,
    0x96e => 0x0,
    0x96f => 0x0,
    0x970 => 0x0,
    0x971 => 0x0,
    0x972 => 0x0,
    0x973 => 0x0,
    0x974 => 0x0,
    0x975 => 0x0,
    0x976 => 0x0,
    0x977 => 0x0,
    0x978 => 0x0,
    0x979 => 0x0,
    0x97a => 0x0,
    0x97b => 0x0,
    0x97c => 0x0,
    0x97d => 0x0,
    0x97e => 0x0,
    0x97f => 0x0,
    0x980 => 0x0,
    0x981 => 0x0,
    0x982 => 0x0,
    0x983 => 0x0,
    0x984 => 0x0,
    0x985 => 0x0,
    0x986 => 0x0,
    0x987 => 0x0,
    0x988 => 0x0,
    0x989 => 0x0,
    0x98a => 0x0,
    0x98b => 0x0,
    0x98c => 0x0,
    0x98d => 0x0,
    0x98e => 0x0,
    0x98f => 0x0,
    0x990 => 0x0,
    0x991 => 0x0,
    0x992 => 0x0,
    0x993 => 0x0,
    0x994 => 0x0,
    0x995 => 0x0,
    0x996 => 0x0,
    0x997 => 0x0,
    0x998 => 0x0,
    0x999 => 0x0,
    0x99a => 0x0,
    0x99b => 0x0,
    0x99c => 0x0,
    0x99d => 0x0,
    0x99e => 0x0,
    0x99f => 0x0,
    0x9a0 => 0x0,
    0x9a1 => 0x0,
    0x9a2 => 0x0,
    0x9a3 => 0x0,
    0x9a4 => 0x0,
    0x9a5 => 0x0,
    0x9a6 => 0x0,
    0x9a7 => 0x0,
    0x9a8 => 0x0,
    0x9a9 => 0x0,
    0x9aa => 0x0,
    0x9ab => 0x0,
    0x9ac => 0x0,
    0x9ad => 0x0,
    0x9ae => 0x0,
    0x9af => 0x0,
    0x9b0 => 0x0,
    0x9b1 => 0x0,
    0x9b2 => 0x0,
    0x9b3 => 0x0,
    0x9b4 => 0x0,
    0x9b5 => 0x0,
    0x9b6 => 0x0,
    0x9b7 => 0x0,
    0x9b8 => 0x0,
    0x9b9 => 0x0,
    0x9ba => 0x0,
    0x9bb => 0x0,
    0x9bc => 0x0,
    0x9bd => 0x0,
    0x9be => 0x0,
    0x9bf => 0x0,
    0x9c0 => 0x0,
    0x9c1 => 0x0,
    0x9c2 => 0x0,
    0x9c3 => 0x0,
    0x9c4 => 0x0,
    0x9c5 => 0x0,
    0x9c6 => 0x0,
    0x9c7 => 0x0,
    0x9c8 => 0x0,
    0x9c9 => 0x0,
    0x9ca => 0x0,
    0x9cb => 0x0,
    0x9cc => 0x0,
    0x9cd => 0x0,
    0x9ce => 0x0,
    0x9cf => 0x0,
    0x9d0 => 0x0,
    0x9d1 => 0x0,
    0x9d2 => 0x0,
    0x9d3 => 0x0,
    0x9d4 => 0x0,
    0x9d5 => 0x0,
    0x9d6 => 0x0,
    0x9d7 => 0x0,
    0x9d8 => 0x0,
    0x9d9 => 0x0,
    0x9da => 0x0,
    0x9db => 0x0,
    0x9dc => 0x0,
    0x9dd => 0x0,
    0x9de => 0x0,
    0x9df => 0x0,
    0x9e0 => 0x0,
    0x9e1 => 0x0,
    0x9e2 => 0x0,
    0x9e3 => 0x0,
    0x9e4 => 0x0,
    0x9e5 => 0x0,
    0x9e6 => 0x0,
    0x9e7 => 0x0,
    0x9e8 => 0x0,
    0x9e9 => 0x0,
    0x9ea => 0x0,
    0x9eb => 0x0,
    0x9ec => 0x0,
    0x9ed => 0x0,
    0x9ee => 0x0,
    0x9ef => 0x0,
    0x9f0 => 0x0,
    0x9f1 => 0x0,
    0x9f2 => 0x0,
    0x9f3 => 0x0,
    0x9f4 => 0x0,
    0x9f5 => 0x0,
    0x9f6 => 0x0,
    0x9f7 => 0x0,
    0x9f8 => 0x0,
    0x9f9 => 0x0,
    0x9fa => 0x0,
    0x9fb => 0x0,
    0x9fc => 0x0,
    0x9fd => 0x0,
    0x9fe => 0x0,
    0x9ff => 0x0,
    0xa00 => 0x0,
    0xa01 => 0x0,
    0xa02 => 0x0,
    0xa03 => 0x0,
    0xa04 => 0x0,
    0xa05 => 0x0,
    0xa06 => 0x0,
    0xa07 => 0x0,
    0xa08 => 0x0,
    0xa09 => 0x0,
    0xa0a => 0x0,
    0xa0b => 0x0,
    0xa0c => 0x0,
    0xa0d => 0x0,
    0xa0e => 0x0,
    0xa0f => 0x0,
    0xa10 => 0x0,
    0xa11 => 0x0,
    0xa12 => 0x0,
    0xa13 => 0x0,
    0xa14 => 0x0,
    0xa15 => 0x0,
    0xa16 => 0x0,
    0xa17 => 0x0,
    0xa18 => 0x0,
    0xa19 => 0x0,
    0xa1a => 0x0,
    0xa1b => 0x0,
    0xa1c => 0x0,
    0xa1d => 0x0,
    0xa1e => 0x0,
    0xa1f => 0x0,
    0xa20 => 0x0,
    0xa21 => 0x0,
    0xa22 => 0x0,
    0xa23 => 0x0,
    0xa24 => 0x0,
    0xa25 => 0x0,
    0xa26 => 0x0,
    0xa27 => 0x0,
    0xa28 => 0x0,
    0xa29 => 0x0,
    0xa2a => 0x0,
    0xa2b => 0x0,
    0xa2c => 0x0,
    0xa2d => 0x0,
    0xa2e => 0x0,
    0xa2f => 0x0,
    0xa30 => 0x0,
    0xa31 => 0x0,
    0xa32 => 0x0,
    0xa33 => 0x0,
    0xa34 => 0x0,
    0xa35 => 0x0,
    0xa36 => 0x0,
    0xa37 => 0x0,
    0xa38 => 0x0,
    0xa39 => 0x0,
    0xa3a => 0x0,
    0xa3b => 0x0,
    0xa3c => 0x0,
    0xa3d => 0x0,
    0xa3e => 0x0,
    0xa3f => 0x0,
    0xa40 => 0x0,
    0xa41 => 0x0,
    0xa42 => 0x0,
    0xa43 => 0x0,
    0xa44 => 0x0,
    0xa45 => 0x0,
    0xa46 => 0x0,
    0xa47 => 0x0,
    0xa48 => 0x0,
    0xa49 => 0x0,
    0xa4a => 0x0,
    0xa4b => 0x0,
    0xa4c => 0x0,
    0xa4d => 0x0,
    0xa4e => 0x0,
    0xa4f => 0x0,
    0xa50 => 0x0,
    0xa51 => 0x0,
    0xa52 => 0x0,
    0xa53 => 0x0,
    0xa54 => 0x0,
    0xa55 => 0x0,
    0xa56 => 0x0,
    0xa57 => 0x0,
    0xa58 => 0x0,
    0xa59 => 0x0,
    0xa5a => 0x0,
    0xa5b => 0x0,
    0xa5c => 0x0,
    0xa5d => 0x0,
    0xa5e => 0x0,
    0xa5f => 0x0,
    0xa60 => 0x0,
    0xa61 => 0x0,
    0xa62 => 0x0,
    0xa63 => 0x0,
    0xa64 => 0x0,
    0xa65 => 0x0,
    0xa66 => 0x0,
    0xa67 => 0x0,
    0xa68 => 0x0,
    0xa69 => 0x0,
    0xa6a => 0x0,
    0xa6b => 0x0,
    0xa6c => 0x0,
    0xa6d => 0x0,
    0xa6e => 0x0,
    0xa6f => 0x0,
    0xa70 => 0x0,
    0xa71 => 0x0,
    0xa72 => 0x0,
    0xa73 => 0x0,
    0xa74 => 0x0,
    0xa75 => 0x0,
    0xa76 => 0x0,
    0xa77 => 0x0,
    0xa78 => 0x0,
    0xa79 => 0x0,
    0xa7a => 0x0,
    0xa7b => 0x0,
    0xa7c => 0x0,
    0xa7d => 0x0,
    0xa7e => 0x0,
    0xa7f => 0x0,
    0xa80 => 0x0,
    0xa81 => 0x0,
    0xa82 => 0x0,
    0xa83 => 0x0,
    0xa84 => 0x0,
    0xa85 => 0x0,
    0xa86 => 0x0,
    0xa87 => 0x0,
    0xa88 => 0x0,
    0xa89 => 0x0,
    0xa8a => 0x0,
    0xa8b => 0x0,
    0xa8c => 0x0,
    0xa8d => 0x0,
    0xa8e => 0x0,
    0xa8f => 0x0,
    0xa90 => 0x0,
    0xa91 => 0x0,
    0xa92 => 0x0,
    0xa93 => 0x0,
    0xa94 => 0x0,
    0xa95 => 0x0,
    0xa96 => 0x0,
    0xa97 => 0x0,
    0xa98 => 0x0,
    0xa99 => 0x0,
    0xa9a => 0x0,
    0xa9b => 0x0,
    0xa9c => 0x0,
    0xa9d => 0x0,
    0xa9e => 0x0,
    0xa9f => 0x0,
    0xaa0 => 0x0,
    0xaa1 => 0x0,
    0xaa2 => 0x0,
    0xaa3 => 0x0,
    0xaa4 => 0x0,
    0xaa5 => 0x0,
    0xaa6 => 0x0,
    0xaa7 => 0x0,
    0xaa8 => 0x0,
    0xaa9 => 0x0,
    0xaaa => 0x0,
    0xaab => 0x0,
    0xaac => 0x0,
    0xaad => 0x0,
    0xaae => 0x0,
    0xaaf => 0x0,
    0xab0 => 0x0,
    0xab1 => 0x0,
    0xab2 => 0x0,
    0xab3 => 0x0,
    0xab4 => 0x0,
    0xab5 => 0x0,
    0xab6 => 0x0,
    0xab7 => 0x0,
    0xab8 => 0x0,
    0xab9 => 0x0,
    0xaba => 0x0,
    0xabb => 0x0,
    0xabc => 0x0,
    0xabd => 0x0,
    0xabe => 0x0,
    0xabf => 0x0,
    0xac0 => 0x0,
    0xac1 => 0x0,
    0xac2 => 0x0,
    0xac3 => 0x0,
    0xac4 => 0x0,
    0xac5 => 0x0,
    0xac6 => 0x0,
    0xac7 => 0x0,
    0xac8 => 0x0,
    0xac9 => 0x0,
    0xaca => 0x0,
    0xacb => 0x0,
    0xacc => 0x0,
    0xacd => 0x0,
    0xace => 0x0,
    0xacf => 0x0,
    0xad0 => 0x0,
    0xad1 => 0x0,
    0xad2 => 0x0,
    0xad3 => 0x0,
    0xad4 => 0x0,
    0xad5 => 0x0,
    0xad6 => 0x0,
    0xad7 => 0x0,
    0xad8 => 0x0,
    0xad9 => 0x0,
    0xada => 0x0,
    0xadb => 0x0,
    0xadc => 0x0,
    0xadd => 0x0,
    0xade => 0x0,
    0xadf => 0x0,
    0xae0 => 0x0,
    0xae1 => 0x0,
    0xae2 => 0x0,
    0xae3 => 0x0,
    0xae4 => 0x0,
    0xae5 => 0x0,
    0xae6 => 0x0,
    0xae7 => 0x0,
    0xae8 => 0x0,
    0xae9 => 0x0,
    0xaea => 0x0,
    0xaeb => 0x0,
    0xaec => 0x0,
    0xaed => 0x0,
    0xaee => 0x0,
    0xaef => 0x0,
    0xaf0 => 0x0,
    0xaf1 => 0x0,
    0xaf2 => 0x0,
    0xaf3 => 0x0,
    0xaf4 => 0x0,
    0xaf5 => 0x0,
    0xaf6 => 0x0,
    0xaf7 => 0x0,
    0xaf8 => 0x0,
    0xaf9 => 0x0,
    0xafa => 0x0,
    0xafb => 0x0,
    0xafc => 0x0,
    0xafd => 0x0,
    0xafe => 0x0,
    0xaff => 0x0,
    0xb00 => 0x0,
    0xb01 => 0x0,
    0xb02 => 0x0,
    0xb03 => 0x0,
    0xb04 => 0x0,
    0xb05 => 0x0,
    0xb06 => 0x0,
    0xb07 => 0x0,
    0xb08 => 0x0,
    0xb09 => 0x0,
    0xb0a => 0x0,
    0xb0b => 0x0,
    0xb0c => 0x0,
    0xb0d => 0x0,
    0xb0e => 0x0,
    0xb0f => 0x0,
    0xb10 => 0x0,
    0xb11 => 0x0,
    0xb12 => 0x0,
    0xb13 => 0x0,
    0xb14 => 0x0,
    0xb15 => 0x0,
    0xb16 => 0x0,
    0xb17 => 0x0,
    0xb18 => 0x0,
    0xb19 => 0x0,
    0xb1a => 0x0,
    0xb1b => 0x0,
    0xb1c => 0x0,
    0xb1d => 0x0,
    0xb1e => 0x0,
    0xb1f => 0x0,
    0xb20 => 0x0,
    0xb21 => 0x0,
    0xb22 => 0x0,
    0xb23 => 0x0,
    0xb24 => 0x0,
    0xb25 => 0x0,
    0xb26 => 0x0,
    0xb27 => 0x0,
    0xb28 => 0x0,
    0xb29 => 0x0,
    0xb2a => 0x0,
    0xb2b => 0x0,
    0xb2c => 0x0,
    0xb2d => 0x0,
    0xb2e => 0x0,
    0xb2f => 0x0,
    0xb30 => 0x0,
    0xb31 => 0x0,
    0xb32 => 0x0,
    0xb33 => 0x0,
    0xb34 => 0x0,
    0xb35 => 0x0,
    0xb36 => 0x0,
    0xb37 => 0x0,
    0xb38 => 0x0,
    0xb39 => 0x0,
    0xb3a => 0x0,
    0xb3b => 0x0,
    0xb3c => 0x0,
    0xb3d => 0x0,
    0xb3e => 0x0,
    0xb3f => 0x0,
    0xb40 => 0x0,
    0xb41 => 0x0,
    0xb42 => 0x0,
    0xb43 => 0x0,
    0xb44 => 0x0,
    0xb45 => 0x0,
    0xb46 => 0x0,
    0xb47 => 0x0,
    0xb48 => 0x0,
    0xb49 => 0x0,
    0xb4a => 0x0,
    0xb4b => 0x0,
    0xb4c => 0x0,
    0xb4d => 0x0,
    0xb4e => 0x0,
    0xb4f => 0x0,
    0xb50 => 0x0,
    0xb51 => 0x0,
    0xb52 => 0x0,
    0xb53 => 0x0,
    0xb54 => 0x0,
    0xb55 => 0x0,
    0xb56 => 0x0,
    0xb57 => 0x0,
    0xb58 => 0x0,
    0xb59 => 0x0,
    0xb5a => 0x0,
    0xb5b => 0x0,
    0xb5c => 0x0,
    0xb5d => 0x0,
    0xb5e => 0x0,
    0xb5f => 0x0,
    0xb60 => 0x0,
    0xb61 => 0x0,
    0xb62 => 0x0,
    0xb63 => 0x0,
    0xb64 => 0x0,
    0xb65 => 0x0,
    0xb66 => 0x0,
    0xb67 => 0x0,
    0xb68 => 0x0,
    0xb69 => 0x0,
    0xb6a => 0x0,
    0xb6b => 0x0,
    0xb6c => 0x0,
    0xb6d => 0x0,
    0xb6e => 0x0,
    0xb6f => 0x0,
    0xb70 => 0x0,
    0xb71 => 0x0,
    0xb72 => 0x0,
    0xb73 => 0x0,
    0xb74 => 0x0,
    0xb75 => 0x0,
    0xb76 => 0x0,
    0xb77 => 0x0,
    0xb78 => 0x0,
    0xb79 => 0x0,
    0xb7a => 0x0,
    0xb7b => 0x0,
    0xb7c => 0x0,
    0xb7d => 0x0,
    0xb7e => 0x0,
    0xb7f => 0x0,
    0xb80 => 0x0,
    0xb81 => 0x0,
    0xb82 => 0x0,
    0xb83 => 0x0,
    0xb84 => 0x0,
    0xb85 => 0x0,
    0xb86 => 0x0,
    0xb87 => 0x0,
    0xb88 => 0x0,
    0xb89 => 0x0,
    0xb8a => 0x0,
    0xb8b => 0x0,
    0xb8c => 0x0,
    0xb8d => 0x0,
    0xb8e => 0x0,
    0xb8f => 0x0,
    0xb90 => 0x0,
    0xb91 => 0x0,
    0xb92 => 0x0,
    0xb93 => 0x0,
    0xb94 => 0x0,
    0xb95 => 0x0,
    0xb96 => 0x0,
    0xb97 => 0x0,
    0xb98 => 0x0,
    0xb99 => 0x0,
    0xb9a => 0x0,
    0xb9b => 0x0,
    0xb9c => 0x0,
    0xb9d => 0x0,
    0xb9e => 0x0,
    0xb9f => 0x0,
    0xba0 => 0x0,
    0xba1 => 0x0,
    0xba2 => 0x0,
    0xba3 => 0x0,
    0xba4 => 0x0,
    0xba5 => 0x0,
    0xba6 => 0x0,
    0xba7 => 0x0,
    0xba8 => 0x0,
    0xba9 => 0x0,
    0xbaa => 0x0,
    0xbab => 0x0,
    0xbac => 0x0,
    0xbad => 0x0,
    0xbae => 0x0,
    0xbaf => 0x0,
    0xbb0 => 0x0,
    0xbb1 => 0x0,
    0xbb2 => 0x0,
    0xbb3 => 0x0,
    0xbb4 => 0x0,
    0xbb5 => 0x0,
    0xbb6 => 0x0,
    0xbb7 => 0x0,
    0xbb8 => 0x0,
    0xbb9 => 0x0,
    0xbba => 0x0,
    0xbbb => 0x0,
    0xbbc => 0x0,
    0xbbd => 0x0,
    0xbbe => 0x0,
    0xbbf => 0x0,
    0xbc0 => 0x0,
    0xbc1 => 0x0,
    0xbc2 => 0x0,
    0xbc3 => 0x0,
    0xbc4 => 0x0,
    0xbc5 => 0x0,
    0xbc6 => 0x0,
    0xbc7 => 0x0,
    0xbc8 => 0x0,
    0xbc9 => 0x0,
    0xbca => 0x0,
    0xbcb => 0x0,
    0xbcc => 0x0,
    0xbcd => 0x0,
    0xbce => 0x0,
    0xbcf => 0x0,
    0xbd0 => 0x0,
    0xbd1 => 0x0,
    0xbd2 => 0x0,
    0xbd3 => 0x0,
    0xbd4 => 0x0,
    0xbd5 => 0x0,
    0xbd6 => 0x0,
    0xbd7 => 0x0,
    0xbd8 => 0x0,
    0xbd9 => 0x0,
    0xbda => 0x0,
    0xbdb => 0x0,
    0xbdc => 0x0,
    0xbdd => 0x0,
    0xbde => 0x0,
    0xbdf => 0x0,
    0xbe0 => 0x0,
    0xbe1 => 0x0,
    0xbe2 => 0x0,
    0xbe3 => 0x0,
    0xbe4 => 0x0,
    0xbe5 => 0x0,
    0xbe6 => 0x0,
    0xbe7 => 0x0,
    0xbe8 => 0x0,
    0xbe9 => 0x0,
    0xbea => 0x0,
    0xbeb => 0x0,
    0xbec => 0x0,
    0xbed => 0x0,
    0xbee => 0x0,
    0xbef => 0x0,
    0xbf0 => 0x0,
    0xbf1 => 0x0,
    0xbf2 => 0x0,
    0xbf3 => 0x0,
    0xbf4 => 0x0,
    0xbf5 => 0x0,
    0xbf6 => 0x0,
    0xbf7 => 0x0,
    0xbf8 => 0x0,
    0xbf9 => 0x0,
    0xbfa => 0x0,
    0xbfb => 0x0,
    0xbfc => 0x0,
    0xbfd => 0x0,
    0xbfe => 0x0,
    0xbff => 0x987,
    0xc00 => 0x0,
    0xc01 => 0x0,
    0xc02 => 0x0,
    0xc03 => 0x0,
    0xc04 => 0x0,
    0xc05 => 0x0,
    0xc06 => 0x0,
    0xc07 => 0x0,
    0xc08 => 0x0,
    0xc09 => 0x0,
    0xc0a => 0x0,
    0xc0b => 0x0,
    0xc0c => 0x0,
    0xc0d => 0x0,
    0xc0e => 0x0,
    0xc0f => 0x0,
    0xc10 => 0x0,
    0xc11 => 0x0,
    0xc12 => 0x0,
    0xc13 => 0x0,
    0xc14 => 0x0,
    0xc15 => 0x0,
    0xc16 => 0x0,
    0xc17 => 0x0,
    0xc18 => 0x0,
    0xc19 => 0x0,
    0xc1a => 0x0,
    0xc1b => 0x0,
    0xc1c => 0x0,
    0xc1d => 0x0,
    0xc1e => 0x0,
    0xc1f => 0x0,
    0xc20 => 0x0,
    0xc21 => 0x0,
    0xc22 => 0x0,
    0xc23 => 0x0,
    0xc24 => 0x0,
    0xc25 => 0x0,
    0xc26 => 0x0,
    0xc27 => 0x0,
    0xc28 => 0x0,
    0xc29 => 0x0,
    0xc2a => 0x0,
    0xc2b => 0x0,
    0xc2c => 0x0,
    0xc2d => 0x0,
    0xc2e => 0x0,
    0xc2f => 0x0,
    0xc30 => 0x0,
    0xc31 => 0x0,
    0xc32 => 0x0,
    0xc33 => 0x0,
    0xc34 => 0x0,
    0xc35 => 0x0,
    0xc36 => 0x0,
    0xc37 => 0x0,
    0xc38 => 0x0,
    0xc39 => 0x0,
    0xc3a => 0x0,
    0xc3b => 0x0,
    0xc3c => 0x0,
    0xc3d => 0x0,
    0xc3e => 0x0,
    0xc3f => 0x0,
    0xc40 => 0x0,
    0xc41 => 0x0,
    0xc42 => 0x0,
    0xc43 => 0x0,
    0xc44 => 0x0,
    0xc45 => 0x0,
    0xc46 => 0x0,
    0xc47 => 0x0,
    0xc48 => 0x0,
    0xc49 => 0x0,
    0xc4a => 0x0,
    0xc4b => 0x0,
    0xc4c => 0x0,
    0xc4d => 0x0,
    0xc4e => 0x0,
    0xc4f => 0x0,
    0xc50 => 0x0,
    0xc51 => 0x0,
    0xc52 => 0x0,
    0xc53 => 0x0,
    0xc54 => 0x0,
    0xc55 => 0x0,
    0xc56 => 0x0,
    0xc57 => 0x0,
    0xc58 => 0x0,
    0xc59 => 0x0,
    0xc5a => 0x0,
    0xc5b => 0x0,
    0xc5c => 0x0,
    0xc5d => 0x0,
    0xc5e => 0x0,
    0xc5f => 0x0,
    0xc60 => 0x0,
    0xc61 => 0x0,
    0xc62 => 0x0,
    0xc63 => 0x0,
    0xc64 => 0x0,
    0xc65 => 0x0,
    0xc66 => 0x0,
    0xc67 => 0x0,
    0xc68 => 0x0,
    0xc69 => 0x0,
    0xc6a => 0x0,
    0xc6b => 0x0,
    0xc6c => 0x0,
    0xc6d => 0x0,
    0xc6e => 0x0,
    0xc6f => 0x0,
    0xc70 => 0x0,
    0xc71 => 0x0,
    0xc72 => 0x0,
    0xc73 => 0x0,
    0xc74 => 0x0,
    0xc75 => 0x0,
    0xc76 => 0x0,
    0xc77 => 0x0,
    0xc78 => 0x0,
    0xc79 => 0x0,
    0xc7a => 0x0,
    0xc7b => 0x0,
    0xc7c => 0x0,
    0xc7d => 0x0,
    0xc7e => 0x0,
    0xc7f => 0x0,
    0xc80 => 0x0,
    0xc81 => 0x0,
    0xc82 => 0x0,
    0xc83 => 0x0,
    0xc84 => 0x0,
    0xc85 => 0x0,
    0xc86 => 0x0,
    0xc87 => 0x0,
    0xc88 => 0x0,
    0xc89 => 0x0,
    0xc8a => 0x0,
    0xc8b => 0x0,
    0xc8c => 0x0,
    0xc8d => 0x0,
    0xc8e => 0x0,
    0xc8f => 0x0,
    0xc90 => 0x0,
    0xc91 => 0x0,
    0xc92 => 0x0,
    0xc93 => 0x0,
    0xc94 => 0x0,
    0xc95 => 0x0,
    0xc96 => 0x0,
    0xc97 => 0x0,
    0xc98 => 0x0,
    0xc99 => 0x0,
    0xc9a => 0x0,
    0xc9b => 0x0,
    0xc9c => 0x0,
    0xc9d => 0x0,
    0xc9e => 0x0,
    0xc9f => 0x0,
    0xca0 => 0x0,
    0xca1 => 0x0,
    0xca2 => 0x0,
    0xca3 => 0x0,
    0xca4 => 0x0,
    0xca5 => 0x0,
    0xca6 => 0x0,
    0xca7 => 0x0,
    0xca8 => 0x0,
    0xca9 => 0x0,
    0xcaa => 0x0,
    0xcab => 0x0,
    0xcac => 0x0,
    0xcad => 0x0,
    0xcae => 0x0,
    0xcaf => 0x0,
    0xcb0 => 0x0,
    0xcb1 => 0x0,
    0xcb2 => 0x0,
    0xcb3 => 0x0,
    0xcb4 => 0x0,
    0xcb5 => 0x0,
    0xcb6 => 0x0,
    0xcb7 => 0x0,
    0xcb8 => 0x0,
    0xcb9 => 0x0,
    0xcba => 0x0,
    0xcbb => 0x0,
    0xcbc => 0x0,
    0xcbd => 0x0,
    0xcbe => 0x0,
    0xcbf => 0x0,
    0xcc0 => 0x0,
    0xcc1 => 0x0,
    0xcc2 => 0x0,
    0xcc3 => 0x0,
    0xcc4 => 0x0,
    0xcc5 => 0x0,
    0xcc6 => 0x0,
    0xcc7 => 0x0,
    0xcc8 => 0x0,
    0xcc9 => 0x0,
    0xcca => 0x0,
    0xccb => 0x0,
    0xccc => 0x0,
    0xccd => 0x0,
    0xcce => 0x0,
    0xccf => 0x0,
    0xcd0 => 0x0,
    0xcd1 => 0x0,
    0xcd2 => 0x0,
    0xcd3 => 0x0,
    0xcd4 => 0x0,
    0xcd5 => 0x0,
    0xcd6 => 0x0,
    0xcd7 => 0x0,
    0xcd8 => 0x0,
    0xcd9 => 0x0,
    0xcda => 0x0,
    0xcdb => 0x0,
    0xcdc => 0x0,
    0xcdd => 0x0,
    0xcde => 0x0,
    0xcdf => 0x0,
    0xce0 => 0x0,
    0xce1 => 0x0,
    0xce2 => 0x0,
    0xce3 => 0x0,
    0xce4 => 0x0,
    0xce5 => 0x0,
    0xce6 => 0x0,
    0xce7 => 0x0,
    0xce8 => 0x0,
    0xce9 => 0x0,
    0xcea => 0x0,
    0xceb => 0x0,
    0xcec => 0x0,
    0xced => 0x0,
    0xcee => 0x0,
    0xcef => 0x0,
    0xcf0 => 0x0,
    0xcf1 => 0x0,
    0xcf2 => 0x0,
    0xcf3 => 0x0,
    0xcf4 => 0x0,
    0xcf5 => 0x0,
    0xcf6 => 0x0,
    0xcf7 => 0x0,
    0xcf8 => 0x0,
    0xcf9 => 0x0,
    0xcfa => 0x0,
    0xcfb => 0x0,
    0xcfc => 0x0,
    0xcfd => 0x0,
    0xcfe => 0x0,
    0xcff => 0x0,
    0xd00 => 0x0,
    0xd01 => 0x0,
    0xd02 => 0x0,
    0xd03 => 0x0,
    0xd04 => 0x0,
    0xd05 => 0x0,
    0xd06 => 0x0,
    0xd07 => 0x0,
    0xd08 => 0x0,
    0xd09 => 0x0,
    0xd0a => 0x0,
    0xd0b => 0x0,
    0xd0c => 0x0,
    0xd0d => 0x0,
    0xd0e => 0x0,
    0xd0f => 0x0,
    0xd10 => 0x0,
    0xd11 => 0x0,
    0xd12 => 0x0,
    0xd13 => 0x0,
    0xd14 => 0x0,
    0xd15 => 0x0,
    0xd16 => 0x0,
    0xd17 => 0x0,
    0xd18 => 0x0,
    0xd19 => 0x0,
    0xd1a => 0x0,
    0xd1b => 0x0,
    0xd1c => 0x0,
    0xd1d => 0x0,
    0xd1e => 0x0,
    0xd1f => 0x0,
    0xd20 => 0x0,
    0xd21 => 0x0,
    0xd22 => 0x0,
    0xd23 => 0x0,
    0xd24 => 0x0,
    0xd25 => 0x0,
    0xd26 => 0x0,
    0xd27 => 0x0,
    0xd28 => 0x0,
    0xd29 => 0x0,
    0xd2a => 0x0,
    0xd2b => 0x0,
    0xd2c => 0x0,
    0xd2d => 0x0,
    0xd2e => 0x0,
    0xd2f => 0x0,
    0xd30 => 0x0,
    0xd31 => 0x0,
    0xd32 => 0x0,
    0xd33 => 0x0,
    0xd34 => 0x0,
    0xd35 => 0x0,
    0xd36 => 0x0,
    0xd37 => 0x0,
    0xd38 => 0x0,
    0xd39 => 0x0,
    0xd3a => 0x0,
    0xd3b => 0x0,
    0xd3c => 0x0,
    0xd3d => 0x0,
    0xd3e => 0x0,
    0xd3f => 0x0,
    0xd40 => 0x0,
    0xd41 => 0x0,
    0xd42 => 0x0,
    0xd43 => 0x0,
    0xd44 => 0x0,
    0xd45 => 0x0,
    0xd46 => 0x0,
    0xd47 => 0x0,
    0xd48 => 0x0,
    0xd49 => 0x0,
    0xd4a => 0x0,
    0xd4b => 0x0,
    0xd4c => 0x0,
    0xd4d => 0x0,
    0xd4e => 0x0,
    0xd4f => 0x0,
    0xd50 => 0x0,
    0xd51 => 0x0,
    0xd52 => 0x0,
    0xd53 => 0x0,
    0xd54 => 0x0,
    0xd55 => 0x0,
    0xd56 => 0x0,
    0xd57 => 0x0,
    0xd58 => 0x0,
    0xd59 => 0x0,
    0xd5a => 0x0,
    0xd5b => 0x0,
    0xd5c => 0x0,
    0xd5d => 0x0,
    0xd5e => 0x0,
    0xd5f => 0x0,
    0xd60 => 0x0,
    0xd61 => 0x0,
    0xd62 => 0x0,
    0xd63 => 0x0,
    0xd64 => 0x0,
    0xd65 => 0x0,
    0xd66 => 0x0,
    0xd67 => 0x0,
    0xd68 => 0x0,
    0xd69 => 0x0,
    0xd6a => 0x0,
    0xd6b => 0x0,
    0xd6c => 0x0,
    0xd6d => 0x0,
    0xd6e => 0x0,
    0xd6f => 0x0,
    0xd70 => 0x0,
    0xd71 => 0x0,
    0xd72 => 0x0,
    0xd73 => 0x0,
    0xd74 => 0x0,
    0xd75 => 0x0,
    0xd76 => 0x0,
    0xd77 => 0x0,
    0xd78 => 0x0,
    0xd79 => 0x0,
    0xd7a => 0x0,
    0xd7b => 0x0,
    0xd7c => 0x0,
    0xd7d => 0x0,
    0xd7e => 0x0,
    0xd7f => 0x0,
    0xd80 => 0x0,
    0xd81 => 0x0,
    0xd82 => 0x0,
    0xd83 => 0x0,
    0xd84 => 0x0,
    0xd85 => 0x0,
    0xd86 => 0x0,
    0xd87 => 0x0,
    0xd88 => 0x0,
    0xd89 => 0x0,
    0xd8a => 0x0,
    0xd8b => 0x0,
    0xd8c => 0x0,
    0xd8d => 0x0,
    0xd8e => 0x0,
    0xd8f => 0x0,
    0xd90 => 0x0,
    0xd91 => 0x0,
    0xd92 => 0x0,
    0xd93 => 0x0,
    0xd94 => 0x0,
    0xd95 => 0x0,
    0xd96 => 0x0,
    0xd97 => 0x0,
    0xd98 => 0x0,
    0xd99 => 0x0,
    0xd9a => 0x0,
    0xd9b => 0x0,
    0xd9c => 0x0,
    0xd9d => 0x0,
    0xd9e => 0x0,
    0xd9f => 0x0,
    0xda0 => 0x0,
    0xda1 => 0x0,
    0xda2 => 0x0,
    0xda3 => 0x0,
    0xda4 => 0x0,
    0xda5 => 0x0,
    0xda6 => 0x0,
    0xda7 => 0x0,
    0xda8 => 0x0,
    0xda9 => 0x0,
    0xdaa => 0x0,
    0xdab => 0x0,
    0xdac => 0x0,
    0xdad => 0x0,
    0xdae => 0x0,
    0xdaf => 0x0,
    0xdb0 => 0x0,
    0xdb1 => 0x0,
    0xdb2 => 0x0,
    0xdb3 => 0x0,
    0xdb4 => 0x0,
    0xdb5 => 0x0,
    0xdb6 => 0x0,
    0xdb7 => 0x0,
    0xdb8 => 0x0,
    0xdb9 => 0x0,
    0xdba => 0x0,
    0xdbb => 0x0,
    0xdbc => 0x0,
    0xdbd => 0x0,
    0xdbe => 0x0,
    0xdbf => 0x0,
    0xdc0 => 0x0,
    0xdc1 => 0x0,
    0xdc2 => 0x0,
    0xdc3 => 0x0,
    0xdc4 => 0x0,
    0xdc5 => 0x0,
    0xdc6 => 0x0,
    0xdc7 => 0x0,
    0xdc8 => 0x0,
    0xdc9 => 0x0,
    0xdca => 0x0,
    0xdcb => 0x0,
    0xdcc => 0x0,
    0xdcd => 0x0,
    0xdce => 0x0,
    0xdcf => 0x0,
    0xdd0 => 0x0,
    0xdd1 => 0x0,
    0xdd2 => 0x0,
    0xdd3 => 0x0,
    0xdd4 => 0x0,
    0xdd5 => 0x0,
    0xdd6 => 0x0,
    0xdd7 => 0x0,
    0xdd8 => 0x0,
    0xdd9 => 0x0,
    0xdda => 0x0,
    0xddb => 0x0,
    0xddc => 0x0,
    0xddd => 0x0,
    0xdde => 0x0,
    0xddf => 0x0,
    0xde0 => 0x0,
    0xde1 => 0x0,
    0xde2 => 0x0,
    0xde3 => 0x0,
    0xde4 => 0x0,
    0xde5 => 0x0,
    0xde6 => 0x0,
    0xde7 => 0x0,
    0xde8 => 0x0,
    0xde9 => 0x0,
    0xdea => 0x0,
    0xdeb => 0x0,
    0xdec => 0x0,
    0xded => 0x0,
    0xdee => 0x0,
    0xdef => 0x0,
    0xdf0 => 0x0,
    0xdf1 => 0x0,
    0xdf2 => 0x0,
    0xdf3 => 0x0,
    0xdf4 => 0x0,
    0xdf5 => 0x0,
    0xdf6 => 0x0,
    0xdf7 => 0x0,
    0xdf8 => 0x0,
    0xdf9 => 0x0,
    0xdfa => 0x0,
    0xdfb => 0x0,
    0xdfc => 0x0,
    0xdfd => 0x0,
    0xdfe => 0x0,
    0xdff => 0x0,
    0xe00 => 0x0,
    0xe01 => 0x0,
    0xe02 => 0x0,
    0xe03 => 0x0,
    0xe04 => 0x0,
    0xe05 => 0x0,
    0xe06 => 0x0,
    0xe07 => 0x0,
    0xe08 => 0x0,
    0xe09 => 0x0,
    0xe0a => 0x0,
    0xe0b => 0x0,
    0xe0c => 0x0,
    0xe0d => 0x0,
    0xe0e => 0x0,
    0xe0f => 0x0,
    0xe10 => 0x0,
    0xe11 => 0x0,
    0xe12 => 0x0,
    0xe13 => 0x0,
    0xe14 => 0x0,
    0xe15 => 0x0,
    0xe16 => 0x0,
    0xe17 => 0x0,
    0xe18 => 0x0,
    0xe19 => 0x0,
    0xe1a => 0x0,
    0xe1b => 0x0,
    0xe1c => 0x0,
    0xe1d => 0x0,
    0xe1e => 0x0,
    0xe1f => 0x0,
    0xe20 => 0x0,
    0xe21 => 0x0,
    0xe22 => 0x0,
    0xe23 => 0x0,
    0xe24 => 0x0,
    0xe25 => 0x0,
    0xe26 => 0x0,
    0xe27 => 0x0,
    0xe28 => 0x0,
    0xe29 => 0x0,
    0xe2a => 0x0,
    0xe2b => 0x0,
    0xe2c => 0x0,
    0xe2d => 0x0,
    0xe2e => 0x0,
    0xe2f => 0x0,
    0xe30 => 0x0,
    0xe31 => 0x0,
    0xe32 => 0x0,
    0xe33 => 0x0,
    0xe34 => 0x0,
    0xe35 => 0x0,
    0xe36 => 0x0,
    0xe37 => 0x0,
    0xe38 => 0x0,
    0xe39 => 0x0,
    0xe3a => 0x0,
    0xe3b => 0x0,
    0xe3c => 0x0,
    0xe3d => 0x0,
    0xe3e => 0x0,
    0xe3f => 0x0,
    0xe40 => 0x0,
    0xe41 => 0x0,
    0xe42 => 0x0,
    0xe43 => 0x0,
    0xe44 => 0x0,
    0xe45 => 0x0,
    0xe46 => 0x0,
    0xe47 => 0x0,
    0xe48 => 0x0,
    0xe49 => 0x0,
    0xe4a => 0x0,
    0xe4b => 0x0,
    0xe4c => 0x0,
    0xe4d => 0x0,
    0xe4e => 0x0,
    0xe4f => 0x0,
    0xe50 => 0x0,
    0xe51 => 0x0,
    0xe52 => 0x0,
    0xe53 => 0x0,
    0xe54 => 0x0,
    0xe55 => 0x0,
    0xe56 => 0x0,
    0xe57 => 0x0,
    0xe58 => 0x0,
    0xe59 => 0x0,
    0xe5a => 0x0,
    0xe5b => 0x0,
    0xe5c => 0x0,
    0xe5d => 0x0,
    0xe5e => 0x0,
    0xe5f => 0x0,
    0xe60 => 0x0,
    0xe61 => 0x0,
    0xe62 => 0x0,
    0xe63 => 0x0,
    0xe64 => 0x0,
    0xe65 => 0x0,
    0xe66 => 0x0,
    0xe67 => 0x0,
    0xe68 => 0x0,
    0xe69 => 0x0,
    0xe6a => 0x0,
    0xe6b => 0x0,
    0xe6c => 0x0,
    0xe6d => 0x0,
    0xe6e => 0x0,
    0xe6f => 0x0,
    0xe70 => 0x0,
    0xe71 => 0x0,
    0xe72 => 0x0,
    0xe73 => 0x0,
    0xe74 => 0x0,
    0xe75 => 0x0,
    0xe76 => 0x0,
    0xe77 => 0x0,
    0xe78 => 0x0,
    0xe79 => 0x0,
    0xe7a => 0x0,
    0xe7b => 0x0,
    0xe7c => 0x0,
    0xe7d => 0x0,
    0xe7e => 0x0,
    0xe7f => 0x0,
    0xe80 => 0x0,
    0xe81 => 0x0,
    0xe82 => 0x0,
    0xe83 => 0x0,
    0xe84 => 0x0,
    0xe85 => 0x0,
    0xe86 => 0x0,
    0xe87 => 0x0,
    0xe88 => 0x0,
    0xe89 => 0x0,
    0xe8a => 0x0,
    0xe8b => 0x0,
    0xe8c => 0x0,
    0xe8d => 0x0,
    0xe8e => 0x0,
    0xe8f => 0x0,
    0xe90 => 0x0,
    0xe91 => 0x0,
    0xe92 => 0x0,
    0xe93 => 0x0,
    0xe94 => 0x0,
    0xe95 => 0x0,
    0xe96 => 0x0,
    0xe97 => 0x0,
    0xe98 => 0x0,
    0xe99 => 0x0,
    0xe9a => 0x0,
    0xe9b => 0x0,
    0xe9c => 0x0,
    0xe9d => 0x0,
    0xe9e => 0x0,
    0xe9f => 0x0,
    0xea0 => 0x0,
    0xea1 => 0x0,
    0xea2 => 0x0,
    0xea3 => 0x0,
    0xea4 => 0x0,
    0xea5 => 0x0,
    0xea6 => 0x0,
    0xea7 => 0x0,
    0xea8 => 0x0,
    0xea9 => 0x0,
    0xeaa => 0x0,
    0xeab => 0x0,
    0xeac => 0x0,
    0xead => 0x0,
    0xeae => 0x0,
    0xeaf => 0x0,
    0xeb0 => 0x0,
    0xeb1 => 0x0,
    0xeb2 => 0x0,
    0xeb3 => 0x0,
    0xeb4 => 0x0,
    0xeb5 => 0x0,
    0xeb6 => 0x0,
    0xeb7 => 0x0,
    0xeb8 => 0x0,
    0xeb9 => 0x0,
    0xeba => 0x0,
    0xebb => 0x0,
    0xebc => 0x0,
    0xebd => 0x0,
    0xebe => 0x0,
    0xebf => 0x0,
    0xec0 => 0x0,
    0xec1 => 0x0,
    0xec2 => 0x0,
    0xec3 => 0x0,
    0xec4 => 0x0,
    0xec5 => 0x0,
    0xec6 => 0x0,
    0xec7 => 0x0,
    0xec8 => 0x0,
    0xec9 => 0x0,
    0xeca => 0x0,
    0xecb => 0x0,
    0xecc => 0x0,
    0xecd => 0x0,
    0xece => 0x0,
    0xecf => 0x0,
    0xed0 => 0x0,
    0xed1 => 0x0,
    0xed2 => 0x0,
    0xed3 => 0x0,
    0xed4 => 0x0,
    0xed5 => 0x0,
    0xed6 => 0x0,
    0xed7 => 0x0,
    0xed8 => 0x0,
    0xed9 => 0x0,
    0xeda => 0x0,
    0xedb => 0x0,
    0xedc => 0x0,
    0xedd => 0x0,
    0xede => 0x0,
    0xedf => 0x0,
    0xee0 => 0x0,
    0xee1 => 0x0,
    0xee2 => 0x0,
    0xee3 => 0x0,
    0xee4 => 0x0,
    0xee5 => 0x0,
    0xee6 => 0x0,
    0xee7 => 0x0,
    0xee8 => 0x0,
    0xee9 => 0x0,
    0xeea => 0x0,
    0xeeb => 0x0,
    0xeec => 0x0,
    0xeed => 0x0,
    0xeee => 0x0,
    0xeef => 0x0,
    0xef0 => 0x0,
    0xef1 => 0x0,
    0xef2 => 0x0,
    0xef3 => 0x0,
    0xef4 => 0x0,
    0xef5 => 0x0,
    0xef6 => 0x0,
    0xef7 => 0x0,
    0xef8 => 0x0,
    0xef9 => 0x0,
    0xefa => 0x0,
    0xefb => 0x0,
    0xefc => 0x0,
    0xefd => 0x0,
    0xefe => 0x0,
    0xeff => 0x0,
    0xf00 => 0x0,
    0xf01 => 0x0,
    0xf02 => 0x0,
    0xf03 => 0x0,
    0xf04 => 0x0,
    0xf05 => 0x0,
    0xf06 => 0x0,
    0xf07 => 0x0,
    0xf08 => 0x0,
    0xf09 => 0x0,
    0xf0a => 0x0,
    0xf0b => 0x0,
    0xf0c => 0x0,
    0xf0d => 0x0,
    0xf0e => 0x0,
    0xf0f => 0x0,
    0xf10 => 0x0,
    0xf11 => 0x0,
    0xf12 => 0x0,
    0xf13 => 0x0,
    0xf14 => 0x0,
    0xf15 => 0x0,
    0xf16 => 0x0,
    0xf17 => 0x0,
    0xf18 => 0x0,
    0xf19 => 0x0,
    0xf1a => 0x0,
    0xf1b => 0x0,
    0xf1c => 0x0,
    0xf1d => 0x0,
    0xf1e => 0x0,
    0xf1f => 0x0,
    0xf20 => 0x0,
    0xf21 => 0x0,
    0xf22 => 0x0,
    0xf23 => 0x0,
    0xf24 => 0x0,
    0xf25 => 0x0,
    0xf26 => 0x0,
    0xf27 => 0x0,
    0xf28 => 0x0,
    0xf29 => 0x0,
    0xf2a => 0x0,
    0xf2b => 0x0,
    0xf2c => 0x0,
    0xf2d => 0x0,
    0xf2e => 0x0,
    0xf2f => 0x0,
    0xf30 => 0x0,
    0xf31 => 0x0,
    0xf32 => 0x0,
    0xf33 => 0x0,
    0xf34 => 0x0,
    0xf35 => 0x0,
    0xf36 => 0x0,
    0xf37 => 0x0,
    0xf38 => 0x0,
    0xf39 => 0x0,
    0xf3a => 0x0,
    0xf3b => 0x0,
    0xf3c => 0x0,
    0xf3d => 0x0,
    0xf3e => 0x0,
    0xf3f => 0x0,
    0xf40 => 0x0,
    0xf41 => 0x0,
    0xf42 => 0x0,
    0xf43 => 0x0,
    0xf44 => 0x0,
    0xf45 => 0x0,
    0xf46 => 0x0,
    0xf47 => 0x0,
    0xf48 => 0x0,
    0xf49 => 0x0,
    0xf4a => 0x0,
    0xf4b => 0x0,
    0xf4c => 0x0,
    0xf4d => 0x0,
    0xf4e => 0x0,
    0xf4f => 0x0,
    0xf50 => 0x0,
    0xf51 => 0x0,
    0xf52 => 0x0,
    0xf53 => 0x0,
    0xf54 => 0x0,
    0xf55 => 0x0,
    0xf56 => 0x0,
    0xf57 => 0x0,
    0xf58 => 0x0,
    0xf59 => 0x0,
    0xf5a => 0x0,
    0xf5b => 0x0,
    0xf5c => 0x0,
    0xf5d => 0x0,
    0xf5e => 0x0,
    0xf5f => 0x0,
    0xf60 => 0x0,
    0xf61 => 0x0,
    0xf62 => 0x0,
    0xf63 => 0x0,
    0xf64 => 0x0,
    0xf65 => 0x0,
    0xf66 => 0x0,
    0xf67 => 0x0,
    0xf68 => 0x0,
    0xf69 => 0x0,
    0xf6a => 0x0,
    0xf6b => 0x0,
    0xf6c => 0x0,
    0xf6d => 0x0,
    0xf6e => 0x0,
    0xf6f => 0x0,
    0xf70 => 0x0,
    0xf71 => 0x0,
    0xf72 => 0x0,
    0xf73 => 0x0,
    0xf74 => 0x0,
    0xf75 => 0x0,
    0xf76 => 0x0,
    0xf77 => 0x0,
    0xf78 => 0x0,
    0xf79 => 0x0,
    0xf7a => 0x0,
    0xf7b => 0x0,
    0xf7c => 0x0,
    0xf7d => 0x0,
    0xf7e => 0x0,
    0xf7f => 0x0,
    0xf80 => 0x0,
    0xf81 => 0x0,
    0xf82 => 0x0,
    0xf83 => 0x0,
    0xf84 => 0x0,
    0xf85 => 0x0,
    0xf86 => 0x0,
    0xf87 => 0x0,
    0xf88 => 0x0,
    0xf89 => 0x0,
    0xf8a => 0x0,
    0xf8b => 0x0,
    0xf8c => 0x0,
    0xf8d => 0x0,
    0xf8e => 0x0,
    0xf8f => 0x0,
    0xf90 => 0x0,
    0xf91 => 0x0,
    0xf92 => 0x0,
    0xf93 => 0x0,
    0xf94 => 0x0,
    0xf95 => 0x0,
    0xf96 => 0x0,
    0xf97 => 0x0,
    0xf98 => 0x0,
    0xf99 => 0x0,
    0xf9a => 0x0,
    0xf9b => 0x0,
    0xf9c => 0x0,
    0xf9d => 0x0,
    0xf9e => 0x0,
    0xf9f => 0x0,
    0xfa0 => 0x0,
    0xfa1 => 0x0,
    0xfa2 => 0x0,
    0xfa3 => 0x0,
    0xfa4 => 0x0,
    0xfa5 => 0x0,
    0xfa6 => 0x0,
    0xfa7 => 0x0,
    0xfa8 => 0x0,
    0xfa9 => 0x0,
    0xfaa => 0x0,
    0xfab => 0x0,
    0xfac => 0x0,
    0xfad => 0x0,
    0xfae => 0x0,
    0xfaf => 0x0,
    0xfb0 => 0x0,
    0xfb1 => 0x0,
    0xfb2 => 0x0,
    0xfb3 => 0x0,
    0xfb4 => 0x0,
    0xfb5 => 0x0,
    0xfb6 => 0x0,
    0xfb7 => 0x0,
    0xfb8 => 0x0,
    0xfb9 => 0x0,
    0xfba => 0x0,
    0xfbb => 0x0,
    0xfbc => 0x0,
    0xfbd => 0x0,
    0xfbe => 0x0,
    0xfbf => 0x0,
    0xfc0 => 0x0,
    0xfc1 => 0x0,
    0xfc2 => 0x0,
    0xfc3 => 0x0,
    0xfc4 => 0x0,
    0xfc5 => 0x0,
    0xfc6 => 0x0,
    0xfc7 => 0x0,
    0xfc8 => 0x0,
    0xfc9 => 0x0,
    0xfca => 0x0,
    0xfcb => 0x0,
    0xfcc => 0x0,
    0xfcd => 0x0,
    0xfce => 0x0,
    0xfcf => 0x0,
    0xfd0 => 0x0,
    0xfd1 => 0x0,
    0xfd2 => 0x0,
    0xfd3 => 0x0,
    0xfd4 => 0x0,
    0xfd5 => 0x0,
    0xfd6 => 0x0,
    0xfd7 => 0x0,
    0xfd8 => 0x0,
    0xfd9 => 0x0,
    0xfda => 0x0,
    0xfdb => 0x0,
    0xfdc => 0x0,
    0xfdd => 0x0,
    0xfde => 0x0,
    0xfdf => 0x0,
    0xfe0 => 0x0,
    0xfe1 => 0x0,
    0xfe2 => 0x0,
    0xfe3 => 0x0,
    0xfe4 => 0x0,
    0xfe5 => 0x0,
    0xfe6 => 0x0,
    0xfe7 => 0x0,
    0xfe8 => 0x0,
    0xfe9 => 0x0,
    0xfea => 0x0,
    0xfeb => 0x0,
    0xfec => 0x0,
    0xfed => 0x0,
    0xfee => 0x0,
    0xfef => 0x0,
    0xff0 => 0x0,
    0xff1 => 0x0,
    0xff2 => 0x0,
    0xff3 => 0x0,
    0xff4 => 0x0,
    0xff5 => 0x0,
    0xff6 => 0x0,
    0xff7 => 0x0,
    0xff8 => 0x0,
    0xff9 => 0x0,
    0xffa => 0x0,
    0xffb => 0x0,
    0xffc => 0x0,
    0xffd => 0x0,
    0xffe => 0x0,
    0xfff => 0x988,
    _ => 0,
  };
  return idx;
}


// ERET-ERET#0
pub const fn classify_impl_157_1(inst: u32) -> u32 {
  if (inst&0x1f) != 0x0 { return 0; }
  return 0xf80;
}


// ERET-ERETAA#0
pub const fn classify_impl_157_2(inst: u32) -> u32 {
  if (inst&0x1f) != 0x1f { return 0; }
  return 0xf81;
}


// ERET-ERETAB#0
pub const fn classify_impl_157_3(inst: u32) -> u32 {
  if (inst&0x1f) != 0x1f { return 0; }
  return 0xf82;
}

// ERET-ERET#0,ERET-ERETAA#0,ERET-ERETAB#0
pub const fn classify_impl_157(inst: u32) -> u32 {
  if (inst&0xff3e0) != 0xf03e0 { return 0; }
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x1,
    0x1 => 0x0,
    0x2 => 0x2,
    0x3 => 0x3,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_157_1(inst), // ERET-ERET#0
    0x2 => return classify_impl_157_2(inst), // ERET-ERETAA#0
    0x3 => return classify_impl_157_3(inst), // ERET-ERETAB#0
    _ => idx
  };
  return idx;
}


// DRPS-DRPS#0
pub const fn classify_impl_158(inst: u32) -> u32 {
  if (inst&0xfffff) != 0xf03e0 { return 0; }
  return 0x1000;
}


// BRANCHREG-BRAA#0,BRANCHREG-BRAA#1,BRANCHREG-BRAA#2,BRANCHREG-BRAA#3,BRANCHREG-BRAA#4,BRANCHREG-BRAA#5,BRANCHREG-BRAA#6,BRANCHREG-BRAA#7,BRANCHREG-BRAA#8,BRANCHREG-BRAA#9,BRANCHREG-BRAA#10,BRANCHREG-BRAA#11,BRANCHREG-BRAA#12,BRANCHREG-BRAA#13,BRANCHREG-BRAA#14,BRANCHREG-BRAA#15,BRANCHREG-BRAA#16,BRANCHREG-BRAA#17,BRANCHREG-BRAA#18,BRANCHREG-BRAA#19,BRANCHREG-BRAA#20,BRANCHREG-BRAA#21,BRANCHREG-BRAA#22,BRANCHREG-BRAA#23,BRANCHREG-BRAA#24,BRANCHREG-BRAA#25,BRANCHREG-BRAA#26,BRANCHREG-BRAA#27,BRANCHREG-BRAA#28,BRANCHREG-BRAA#29,BRANCHREG-BRAA#30,BRANCHREG-BRAA#31,BRANCHREG-BRAA#32,BRANCHREG-BRAA#33,BRANCHREG-BRAA#34,BRANCHREG-BRAA#35,BRANCHREG-BRAA#36,BRANCHREG-BRAA#37,BRANCHREG-BRAA#38,BRANCHREG-BRAA#39,BRANCHREG-BRAA#40,BRANCHREG-BRAA#41,BRANCHREG-BRAA#42,BRANCHREG-BRAA#43,BRANCHREG-BRAA#44,BRANCHREG-BRAA#45,BRANCHREG-BRAA#46,BRANCHREG-BRAA#47,BRANCHREG-BRAA#48,BRANCHREG-BRAA#49,BRANCHREG-BRAA#50,BRANCHREG-BRAA#51,BRANCHREG-BRAA#52,BRANCHREG-BRAA#53,BRANCHREG-BRAA#54,BRANCHREG-BRAA#55,BRANCHREG-BRAA#56,BRANCHREG-BRAA#57,BRANCHREG-BRAA#58,BRANCHREG-BRAA#59,BRANCHREG-BRAA#60,BRANCHREG-BRAA#61,BRANCHREG-BRAA#62,BRANCHREG-BRAA#63,BRANCHREG-BRAA#64,BRANCHREG-BRAA#65,BRANCHREG-BRAA#66,BRANCHREG-BRAA#67,BRANCHREG-BRAA#68,BRANCHREG-BRAA#69,BRANCHREG-BRAA#70,BRANCHREG-BRAA#71,BRANCHREG-BRAA#72,BRANCHREG-BRAA#73,BRANCHREG-BRAA#74,BRANCHREG-BRAA#75,BRANCHREG-BRAA#76,BRANCHREG-BRAA#77,BRANCHREG-BRAA#78,BRANCHREG-BRAA#79,BRANCHREG-BRAA#80,BRANCHREG-BRAA#81,BRANCHREG-BRAA#82,BRANCHREG-BRAA#83,BRANCHREG-BRAA#84,BRANCHREG-BRAA#85,BRANCHREG-BRAA#86,BRANCHREG-BRAA#87,BRANCHREG-BRAA#88,BRANCHREG-BRAA#89,BRANCHREG-BRAA#90,BRANCHREG-BRAA#91,BRANCHREG-BRAA#92,BRANCHREG-BRAA#93,BRANCHREG-BRAA#94,BRANCHREG-BRAA#95,BRANCHREG-BRAA#96,BRANCHREG-BRAA#97,BRANCHREG-BRAA#98,BRANCHREG-BRAA#99,BRANCHREG-BRAA#100,BRANCHREG-BRAA#101,BRANCHREG-BRAA#102,BRANCHREG-BRAA#103,BRANCHREG-BRAA#104,BRANCHREG-BRAA#105,BRANCHREG-BRAA#106,BRANCHREG-BRAA#107,BRANCHREG-BRAA#108,BRANCHREG-BRAA#109,BRANCHREG-BRAA#110,BRANCHREG-BRAA#111,BRANCHREG-BRAA#112,BRANCHREG-BRAA#113,BRANCHREG-BRAA#114,BRANCHREG-BRAA#115,BRANCHREG-BRAA#116,BRANCHREG-BRAA#117,BRANCHREG-BRAA#118,BRANCHREG-BRAA#119,BRANCHREG-BRAA#120,BRANCHREG-BRAA#121,BRANCHREG-BRAA#122,BRANCHREG-BRAA#123,BRANCHREG-BRAA#124,BRANCHREG-BRAA#125,BRANCHREG-BRAA#126,BRANCHREG-BRAA#127,BRANCHREG-BRAA#128,BRANCHREG-BRAA#129,BRANCHREG-BRAA#130,BRANCHREG-BRAA#131,BRANCHREG-BRAA#132,BRANCHREG-BRAA#133,BRANCHREG-BRAA#134,BRANCHREG-BRAA#135,BRANCHREG-BRAA#136,BRANCHREG-BRAA#137,BRANCHREG-BRAA#138,BRANCHREG-BRAA#139,BRANCHREG-BRAA#140,BRANCHREG-BRAA#141,BRANCHREG-BRAA#142,BRANCHREG-BRAA#143,BRANCHREG-BRAA#144,BRANCHREG-BRAA#145,BRANCHREG-BRAA#146,BRANCHREG-BRAA#147,BRANCHREG-BRAA#148,BRANCHREG-BRAA#149,BRANCHREG-BRAA#150,BRANCHREG-BRAA#151,BRANCHREG-BRAA#152,BRANCHREG-BRAA#153,BRANCHREG-BRAA#154,BRANCHREG-BRAA#155,BRANCHREG-BRAA#156,BRANCHREG-BRAA#157,BRANCHREG-BRAA#158,BRANCHREG-BRAA#159,BRANCHREG-BRAA#160,BRANCHREG-BRAA#161,BRANCHREG-BRAA#162,BRANCHREG-BRAA#163,BRANCHREG-BRAA#164,BRANCHREG-BRAA#165,BRANCHREG-BRAA#166,BRANCHREG-BRAA#167,BRANCHREG-BRAA#168,BRANCHREG-BRAA#169,BRANCHREG-BRAA#170,BRANCHREG-BRAA#171,BRANCHREG-BRAA#172,BRANCHREG-BRAA#173,BRANCHREG-BRAA#174,BRANCHREG-BRAA#175,BRANCHREG-BRAA#176,BRANCHREG-BRAA#177,BRANCHREG-BRAA#178,BRANCHREG-BRAA#179,BRANCHREG-BRAA#180,BRANCHREG-BRAA#181,BRANCHREG-BRAA#182,BRANCHREG-BRAA#183,BRANCHREG-BRAA#184,BRANCHREG-BRAA#185,BRANCHREG-BRAA#186,BRANCHREG-BRAA#187,BRANCHREG-BRAA#188,BRANCHREG-BRAA#189,BRANCHREG-BRAA#190,BRANCHREG-BRAA#191,BRANCHREG-BRAA#192,BRANCHREG-BRAA#193,BRANCHREG-BRAA#194,BRANCHREG-BRAA#195,BRANCHREG-BRAA#196,BRANCHREG-BRAA#197,BRANCHREG-BRAA#198,BRANCHREG-BRAA#199,BRANCHREG-BRAA#200,BRANCHREG-BRAA#201,BRANCHREG-BRAA#202,BRANCHREG-BRAA#203,BRANCHREG-BRAA#204,BRANCHREG-BRAA#205,BRANCHREG-BRAA#206,BRANCHREG-BRAA#207,BRANCHREG-BRAA#208,BRANCHREG-BRAA#209,BRANCHREG-BRAA#210,BRANCHREG-BRAA#211,BRANCHREG-BRAA#212,BRANCHREG-BRAA#213,BRANCHREG-BRAA#214,BRANCHREG-BRAA#215,BRANCHREG-BRAA#216,BRANCHREG-BRAA#217,BRANCHREG-BRAA#218,BRANCHREG-BRAA#219,BRANCHREG-BRAA#220,BRANCHREG-BRAA#221,BRANCHREG-BRAA#222,BRANCHREG-BRAA#223,BRANCHREG-BRAA#224,BRANCHREG-BRAA#225,BRANCHREG-BRAA#226,BRANCHREG-BRAA#227,BRANCHREG-BRAA#228,BRANCHREG-BRAA#229,BRANCHREG-BRAA#230,BRANCHREG-BRAA#231,BRANCHREG-BRAA#232,BRANCHREG-BRAA#233,BRANCHREG-BRAA#234,BRANCHREG-BRAA#235,BRANCHREG-BRAA#236,BRANCHREG-BRAA#237,BRANCHREG-BRAA#238,BRANCHREG-BRAA#239,BRANCHREG-BRAA#240,BRANCHREG-BRAA#241,BRANCHREG-BRAA#242,BRANCHREG-BRAA#243,BRANCHREG-BRAA#244,BRANCHREG-BRAA#245,BRANCHREG-BRAA#246,BRANCHREG-BRAA#247,BRANCHREG-BRAA#248,BRANCHREG-BRAA#249,BRANCHREG-BRAA#250,BRANCHREG-BRAA#251,BRANCHREG-BRAA#252,BRANCHREG-BRAA#253,BRANCHREG-BRAA#254,BRANCHREG-BRAA#255,BRANCHREG-BRAA#256,BRANCHREG-BRAA#257,BRANCHREG-BRAA#258,BRANCHREG-BRAA#259,BRANCHREG-BRAA#260,BRANCHREG-BRAA#261,BRANCHREG-BRAA#262,BRANCHREG-BRAA#263,BRANCHREG-BRAA#264,BRANCHREG-BRAA#265,BRANCHREG-BRAA#266,BRANCHREG-BRAA#267,BRANCHREG-BRAA#268,BRANCHREG-BRAA#269,BRANCHREG-BRAA#270,BRANCHREG-BRAA#271,BRANCHREG-BRAA#272,BRANCHREG-BRAA#273,BRANCHREG-BRAA#274,BRANCHREG-BRAA#275,BRANCHREG-BRAA#276,BRANCHREG-BRAA#277,BRANCHREG-BRAA#278,BRANCHREG-BRAA#279,BRANCHREG-BRAA#280,BRANCHREG-BRAA#281,BRANCHREG-BRAA#282,BRANCHREG-BRAA#283,BRANCHREG-BRAA#284,BRANCHREG-BRAA#285,BRANCHREG-BRAA#286,BRANCHREG-BRAA#287,BRANCHREG-BRAA#288,BRANCHREG-BRAA#289,BRANCHREG-BRAA#290,BRANCHREG-BRAA#291,BRANCHREG-BRAA#292,BRANCHREG-BRAA#293,BRANCHREG-BRAA#294,BRANCHREG-BRAA#295,BRANCHREG-BRAA#296,BRANCHREG-BRAA#297,BRANCHREG-BRAA#298,BRANCHREG-BRAA#299,BRANCHREG-BRAA#300,BRANCHREG-BRAA#301,BRANCHREG-BRAA#302,BRANCHREG-BRAA#303,BRANCHREG-BRAA#304,BRANCHREG-BRAA#305,BRANCHREG-BRAA#306,BRANCHREG-BRAA#307,BRANCHREG-BRAA#308,BRANCHREG-BRAA#309,BRANCHREG-BRAA#310,BRANCHREG-BRAA#311,BRANCHREG-BRAA#312,BRANCHREG-BRAA#313,BRANCHREG-BRAA#314,BRANCHREG-BRAA#315,BRANCHREG-BRAA#316,BRANCHREG-BRAA#317,BRANCHREG-BRAA#318,BRANCHREG-BRAA#319,BRANCHREG-BRAA#320,BRANCHREG-BRAA#321,BRANCHREG-BRAA#322,BRANCHREG-BRAA#323,BRANCHREG-BRAA#324,BRANCHREG-BRAA#325,BRANCHREG-BRAA#326,BRANCHREG-BRAA#327,BRANCHREG-BRAA#328,BRANCHREG-BRAA#329,BRANCHREG-BRAA#330,BRANCHREG-BRAA#331,BRANCHREG-BRAA#332,BRANCHREG-BRAA#333,BRANCHREG-BRAA#334,BRANCHREG-BRAA#335,BRANCHREG-BRAA#336,BRANCHREG-BRAA#337,BRANCHREG-BRAA#338,BRANCHREG-BRAA#339,BRANCHREG-BRAA#340,BRANCHREG-BRAA#341,BRANCHREG-BRAA#342,BRANCHREG-BRAA#343,BRANCHREG-BRAA#344,BRANCHREG-BRAA#345,BRANCHREG-BRAA#346,BRANCHREG-BRAA#347,BRANCHREG-BRAA#348,BRANCHREG-BRAA#349,BRANCHREG-BRAA#350,BRANCHREG-BRAA#351,BRANCHREG-BRAA#352,BRANCHREG-BRAA#353,BRANCHREG-BRAA#354,BRANCHREG-BRAA#355,BRANCHREG-BRAA#356,BRANCHREG-BRAA#357,BRANCHREG-BRAA#358,BRANCHREG-BRAA#359,BRANCHREG-BRAA#360,BRANCHREG-BRAA#361,BRANCHREG-BRAA#362,BRANCHREG-BRAA#363,BRANCHREG-BRAA#364,BRANCHREG-BRAA#365,BRANCHREG-BRAA#366,BRANCHREG-BRAA#367,BRANCHREG-BRAA#368,BRANCHREG-BRAA#369,BRANCHREG-BRAA#370,BRANCHREG-BRAA#371,BRANCHREG-BRAA#372,BRANCHREG-BRAA#373,BRANCHREG-BRAA#374,BRANCHREG-BRAA#375,BRANCHREG-BRAA#376,BRANCHREG-BRAA#377,BRANCHREG-BRAA#378,BRANCHREG-BRAA#379,BRANCHREG-BRAA#380,BRANCHREG-BRAA#381,BRANCHREG-BRAA#382,BRANCHREG-BRAA#383,BRANCHREG-BRAA#384,BRANCHREG-BRAA#385,BRANCHREG-BRAA#386,BRANCHREG-BRAA#387,BRANCHREG-BRAA#388,BRANCHREG-BRAA#389,BRANCHREG-BRAA#390,BRANCHREG-BRAA#391,BRANCHREG-BRAA#392,BRANCHREG-BRAA#393,BRANCHREG-BRAA#394,BRANCHREG-BRAA#395,BRANCHREG-BRAA#396,BRANCHREG-BRAA#397,BRANCHREG-BRAA#398,BRANCHREG-BRAA#399,BRANCHREG-BRAA#400,BRANCHREG-BRAA#401,BRANCHREG-BRAA#402,BRANCHREG-BRAA#403,BRANCHREG-BRAA#404,BRANCHREG-BRAA#405,BRANCHREG-BRAA#406,BRANCHREG-BRAA#407,BRANCHREG-BRAA#408,BRANCHREG-BRAA#409,BRANCHREG-BRAA#410,BRANCHREG-BRAA#411,BRANCHREG-BRAA#412,BRANCHREG-BRAA#413,BRANCHREG-BRAA#414,BRANCHREG-BRAA#415,BRANCHREG-BRAA#416,BRANCHREG-BRAA#417,BRANCHREG-BRAA#418,BRANCHREG-BRAA#419,BRANCHREG-BRAA#420,BRANCHREG-BRAA#421,BRANCHREG-BRAA#422,BRANCHREG-BRAA#423,BRANCHREG-BRAA#424,BRANCHREG-BRAA#425,BRANCHREG-BRAA#426,BRANCHREG-BRAA#427,BRANCHREG-BRAA#428,BRANCHREG-BRAA#429,BRANCHREG-BRAA#430,BRANCHREG-BRAA#431,BRANCHREG-BRAA#432,BRANCHREG-BRAA#433,BRANCHREG-BRAA#434,BRANCHREG-BRAA#435,BRANCHREG-BRAA#436,BRANCHREG-BRAA#437,BRANCHREG-BRAA#438,BRANCHREG-BRAA#439,BRANCHREG-BRAA#440,BRANCHREG-BRAA#441,BRANCHREG-BRAA#442,BRANCHREG-BRAA#443,BRANCHREG-BRAA#444,BRANCHREG-BRAA#445,BRANCHREG-BRAA#446,BRANCHREG-BRAA#447,BRANCHREG-BRAA#448,BRANCHREG-BRAA#449,BRANCHREG-BRAA#450,BRANCHREG-BRAA#451,BRANCHREG-BRAA#452,BRANCHREG-BRAA#453,BRANCHREG-BRAA#454,BRANCHREG-BRAA#455,BRANCHREG-BRAA#456,BRANCHREG-BRAA#457,BRANCHREG-BRAA#458,BRANCHREG-BRAA#459,BRANCHREG-BRAA#460,BRANCHREG-BRAA#461,BRANCHREG-BRAA#462,BRANCHREG-BRAA#463,BRANCHREG-BRAA#464,BRANCHREG-BRAA#465,BRANCHREG-BRAA#466,BRANCHREG-BRAA#467,BRANCHREG-BRAA#468,BRANCHREG-BRAA#469,BRANCHREG-BRAA#470,BRANCHREG-BRAA#471,BRANCHREG-BRAA#472,BRANCHREG-BRAA#473,BRANCHREG-BRAA#474,BRANCHREG-BRAA#475,BRANCHREG-BRAA#476,BRANCHREG-BRAA#477,BRANCHREG-BRAA#478,BRANCHREG-BRAA#479,BRANCHREG-BRAA#480,BRANCHREG-BRAA#481,BRANCHREG-BRAA#482,BRANCHREG-BRAA#483,BRANCHREG-BRAA#484,BRANCHREG-BRAA#485,BRANCHREG-BRAA#486,BRANCHREG-BRAA#487,BRANCHREG-BRAA#488,BRANCHREG-BRAA#489,BRANCHREG-BRAA#490,BRANCHREG-BRAA#491,BRANCHREG-BRAA#492,BRANCHREG-BRAA#493,BRANCHREG-BRAA#494,BRANCHREG-BRAA#495,BRANCHREG-BRAA#496,BRANCHREG-BRAA#497,BRANCHREG-BRAA#498,BRANCHREG-BRAA#499,BRANCHREG-BRAA#500,BRANCHREG-BRAA#501,BRANCHREG-BRAA#502,BRANCHREG-BRAA#503,BRANCHREG-BRAA#504,BRANCHREG-BRAA#505,BRANCHREG-BRAA#506,BRANCHREG-BRAA#507,BRANCHREG-BRAA#508,BRANCHREG-BRAA#509,BRANCHREG-BRAA#510,BRANCHREG-BRAA#511,BRANCHREG-BRAA#512,BRANCHREG-BRAA#513,BRANCHREG-BRAA#514,BRANCHREG-BRAA#515,BRANCHREG-BRAA#516,BRANCHREG-BRAA#517,BRANCHREG-BRAA#518,BRANCHREG-BRAA#519,BRANCHREG-BRAA#520,BRANCHREG-BRAA#521,BRANCHREG-BRAA#522,BRANCHREG-BRAA#523,BRANCHREG-BRAA#524,BRANCHREG-BRAA#525,BRANCHREG-BRAA#526,BRANCHREG-BRAA#527,BRANCHREG-BRAA#528,BRANCHREG-BRAA#529,BRANCHREG-BRAA#530,BRANCHREG-BRAA#531,BRANCHREG-BRAA#532,BRANCHREG-BRAA#533,BRANCHREG-BRAA#534,BRANCHREG-BRAA#535,BRANCHREG-BRAA#536,BRANCHREG-BRAA#537,BRANCHREG-BRAA#538,BRANCHREG-BRAA#539,BRANCHREG-BRAA#540,BRANCHREG-BRAA#541,BRANCHREG-BRAA#542,BRANCHREG-BRAA#543,BRANCHREG-BRAA#544,BRANCHREG-BRAA#545,BRANCHREG-BRAA#546,BRANCHREG-BRAA#547,BRANCHREG-BRAA#548,BRANCHREG-BRAA#549,BRANCHREG-BRAA#550,BRANCHREG-BRAA#551,BRANCHREG-BRAA#552,BRANCHREG-BRAA#553,BRANCHREG-BRAA#554,BRANCHREG-BRAA#555,BRANCHREG-BRAA#556,BRANCHREG-BRAA#557,BRANCHREG-BRAA#558,BRANCHREG-BRAA#559,BRANCHREG-BRAA#560,BRANCHREG-BRAA#561,BRANCHREG-BRAA#562,BRANCHREG-BRAA#563,BRANCHREG-BRAA#564,BRANCHREG-BRAA#565,BRANCHREG-BRAA#566,BRANCHREG-BRAA#567,BRANCHREG-BRAA#568,BRANCHREG-BRAA#569,BRANCHREG-BRAA#570,BRANCHREG-BRAA#571,BRANCHREG-BRAA#572,BRANCHREG-BRAA#573,BRANCHREG-BRAA#574,BRANCHREG-BRAA#575,BRANCHREG-BRAA#576,BRANCHREG-BRAA#577,BRANCHREG-BRAA#578,BRANCHREG-BRAA#579,BRANCHREG-BRAA#580,BRANCHREG-BRAA#581,BRANCHREG-BRAA#582,BRANCHREG-BRAA#583,BRANCHREG-BRAA#584,BRANCHREG-BRAA#585,BRANCHREG-BRAA#586,BRANCHREG-BRAA#587,BRANCHREG-BRAA#588,BRANCHREG-BRAA#589,BRANCHREG-BRAA#590,BRANCHREG-BRAA#591,BRANCHREG-BRAA#592,BRANCHREG-BRAA#593,BRANCHREG-BRAA#594,BRANCHREG-BRAA#595,BRANCHREG-BRAA#596,BRANCHREG-BRAA#597,BRANCHREG-BRAA#598,BRANCHREG-BRAA#599,BRANCHREG-BRAA#600,BRANCHREG-BRAA#601,BRANCHREG-BRAA#602,BRANCHREG-BRAA#603,BRANCHREG-BRAA#604,BRANCHREG-BRAA#605,BRANCHREG-BRAA#606,BRANCHREG-BRAA#607,BRANCHREG-BRAA#608,BRANCHREG-BRAA#609,BRANCHREG-BRAA#610,BRANCHREG-BRAA#611,BRANCHREG-BRAA#612,BRANCHREG-BRAA#613,BRANCHREG-BRAA#614,BRANCHREG-BRAA#615,BRANCHREG-BRAA#616,BRANCHREG-BRAA#617,BRANCHREG-BRAA#618,BRANCHREG-BRAA#619,BRANCHREG-BRAA#620,BRANCHREG-BRAA#621,BRANCHREG-BRAA#622,BRANCHREG-BRAA#623,BRANCHREG-BRAA#624,BRANCHREG-BRAA#625,BRANCHREG-BRAA#626,BRANCHREG-BRAA#627,BRANCHREG-BRAA#628,BRANCHREG-BRAA#629,BRANCHREG-BRAA#630,BRANCHREG-BRAA#631,BRANCHREG-BRAA#632,BRANCHREG-BRAA#633,BRANCHREG-BRAA#634,BRANCHREG-BRAA#635,BRANCHREG-BRAA#636,BRANCHREG-BRAA#637,BRANCHREG-BRAA#638,BRANCHREG-BRAA#639,BRANCHREG-BRAA#640,BRANCHREG-BRAA#641,BRANCHREG-BRAA#642,BRANCHREG-BRAA#643,BRANCHREG-BRAA#644,BRANCHREG-BRAA#645,BRANCHREG-BRAA#646,BRANCHREG-BRAA#647,BRANCHREG-BRAA#648,BRANCHREG-BRAA#649,BRANCHREG-BRAA#650,BRANCHREG-BRAA#651,BRANCHREG-BRAA#652,BRANCHREG-BRAA#653,BRANCHREG-BRAA#654,BRANCHREG-BRAA#655,BRANCHREG-BRAA#656,BRANCHREG-BRAA#657,BRANCHREG-BRAA#658,BRANCHREG-BRAA#659,BRANCHREG-BRAA#660,BRANCHREG-BRAA#661,BRANCHREG-BRAA#662,BRANCHREG-BRAA#663,BRANCHREG-BRAA#664,BRANCHREG-BRAA#665,BRANCHREG-BRAA#666,BRANCHREG-BRAA#667,BRANCHREG-BRAA#668,BRANCHREG-BRAA#669,BRANCHREG-BRAA#670,BRANCHREG-BRAA#671,BRANCHREG-BRAA#672,BRANCHREG-BRAA#673,BRANCHREG-BRAA#674,BRANCHREG-BRAA#675,BRANCHREG-BRAA#676,BRANCHREG-BRAA#677,BRANCHREG-BRAA#678,BRANCHREG-BRAA#679,BRANCHREG-BRAA#680,BRANCHREG-BRAA#681,BRANCHREG-BRAA#682,BRANCHREG-BRAA#683,BRANCHREG-BRAA#684,BRANCHREG-BRAA#685,BRANCHREG-BRAA#686,BRANCHREG-BRAA#687,BRANCHREG-BRAA#688,BRANCHREG-BRAA#689,BRANCHREG-BRAA#690,BRANCHREG-BRAA#691,BRANCHREG-BRAA#692,BRANCHREG-BRAA#693,BRANCHREG-BRAA#694,BRANCHREG-BRAA#695,BRANCHREG-BRAA#696,BRANCHREG-BRAA#697,BRANCHREG-BRAA#698,BRANCHREG-BRAA#699,BRANCHREG-BRAA#700,BRANCHREG-BRAA#701,BRANCHREG-BRAA#702,BRANCHREG-BRAA#703,BRANCHREG-BRAA#704,BRANCHREG-BRAA#705,BRANCHREG-BRAA#706,BRANCHREG-BRAA#707,BRANCHREG-BRAA#708,BRANCHREG-BRAA#709,BRANCHREG-BRAA#710,BRANCHREG-BRAA#711,BRANCHREG-BRAA#712,BRANCHREG-BRAA#713,BRANCHREG-BRAA#714,BRANCHREG-BRAA#715,BRANCHREG-BRAA#716,BRANCHREG-BRAA#717,BRANCHREG-BRAA#718,BRANCHREG-BRAA#719,BRANCHREG-BRAA#720,BRANCHREG-BRAA#721,BRANCHREG-BRAA#722,BRANCHREG-BRAA#723,BRANCHREG-BRAA#724,BRANCHREG-BRAA#725,BRANCHREG-BRAA#726,BRANCHREG-BRAA#727,BRANCHREG-BRAA#728,BRANCHREG-BRAA#729,BRANCHREG-BRAA#730,BRANCHREG-BRAA#731,BRANCHREG-BRAA#732,BRANCHREG-BRAA#733,BRANCHREG-BRAA#734,BRANCHREG-BRAA#735,BRANCHREG-BRAA#736,BRANCHREG-BRAA#737,BRANCHREG-BRAA#738,BRANCHREG-BRAA#739,BRANCHREG-BRAA#740,BRANCHREG-BRAA#741,BRANCHREG-BRAA#742,BRANCHREG-BRAA#743,BRANCHREG-BRAA#744,BRANCHREG-BRAA#745,BRANCHREG-BRAA#746,BRANCHREG-BRAA#747,BRANCHREG-BRAA#748,BRANCHREG-BRAA#749,BRANCHREG-BRAA#750,BRANCHREG-BRAA#751,BRANCHREG-BRAA#752,BRANCHREG-BRAA#753,BRANCHREG-BRAA#754,BRANCHREG-BRAA#755,BRANCHREG-BRAA#756,BRANCHREG-BRAA#757,BRANCHREG-BRAA#758,BRANCHREG-BRAA#759,BRANCHREG-BRAA#760,BRANCHREG-BRAA#761,BRANCHREG-BRAA#762,BRANCHREG-BRAA#763,BRANCHREG-BRAA#764,BRANCHREG-BRAA#765,BRANCHREG-BRAA#766,BRANCHREG-BRAA#767,BRANCHREG-BRAA#768,BRANCHREG-BRAA#769,BRANCHREG-BRAA#770,BRANCHREG-BRAA#771,BRANCHREG-BRAA#772,BRANCHREG-BRAA#773,BRANCHREG-BRAA#774,BRANCHREG-BRAA#775,BRANCHREG-BRAA#776,BRANCHREG-BRAA#777,BRANCHREG-BRAA#778,BRANCHREG-BRAA#779,BRANCHREG-BRAA#780,BRANCHREG-BRAA#781,BRANCHREG-BRAA#782,BRANCHREG-BRAA#783,BRANCHREG-BRAA#784,BRANCHREG-BRAA#785,BRANCHREG-BRAA#786,BRANCHREG-BRAA#787,BRANCHREG-BRAA#788,BRANCHREG-BRAA#789,BRANCHREG-BRAA#790,BRANCHREG-BRAA#791,BRANCHREG-BRAA#792,BRANCHREG-BRAA#793,BRANCHREG-BRAA#794,BRANCHREG-BRAA#795,BRANCHREG-BRAA#796,BRANCHREG-BRAA#797,BRANCHREG-BRAA#798,BRANCHREG-BRAA#799,BRANCHREG-BRAA#800,BRANCHREG-BRAA#801,BRANCHREG-BRAA#802,BRANCHREG-BRAA#803,BRANCHREG-BRAA#804,BRANCHREG-BRAA#805,BRANCHREG-BRAA#806,BRANCHREG-BRAA#807,BRANCHREG-BRAA#808,BRANCHREG-BRAA#809,BRANCHREG-BRAA#810,BRANCHREG-BRAA#811,BRANCHREG-BRAA#812,BRANCHREG-BRAA#813,BRANCHREG-BRAA#814,BRANCHREG-BRAA#815,BRANCHREG-BRAA#816,BRANCHREG-BRAA#817,BRANCHREG-BRAA#818,BRANCHREG-BRAA#819,BRANCHREG-BRAA#820,BRANCHREG-BRAA#821,BRANCHREG-BRAA#822,BRANCHREG-BRAA#823,BRANCHREG-BRAA#824,BRANCHREG-BRAA#825,BRANCHREG-BRAA#826,BRANCHREG-BRAA#827,BRANCHREG-BRAA#828,BRANCHREG-BRAA#829,BRANCHREG-BRAA#830,BRANCHREG-BRAA#831,BRANCHREG-BRAA#832,BRANCHREG-BRAA#833,BRANCHREG-BRAA#834,BRANCHREG-BRAA#835,BRANCHREG-BRAA#836,BRANCHREG-BRAA#837,BRANCHREG-BRAA#838,BRANCHREG-BRAA#839,BRANCHREG-BRAA#840,BRANCHREG-BRAA#841,BRANCHREG-BRAA#842,BRANCHREG-BRAA#843,BRANCHREG-BRAA#844,BRANCHREG-BRAA#845,BRANCHREG-BRAA#846,BRANCHREG-BRAA#847,BRANCHREG-BRAA#848,BRANCHREG-BRAA#849,BRANCHREG-BRAA#850,BRANCHREG-BRAA#851,BRANCHREG-BRAA#852,BRANCHREG-BRAA#853,BRANCHREG-BRAA#854,BRANCHREG-BRAA#855,BRANCHREG-BRAA#856,BRANCHREG-BRAA#857,BRANCHREG-BRAA#858,BRANCHREG-BRAA#859,BRANCHREG-BRAA#860,BRANCHREG-BRAA#861,BRANCHREG-BRAA#862,BRANCHREG-BRAA#863,BRANCHREG-BRAA#864,BRANCHREG-BRAA#865,BRANCHREG-BRAA#866,BRANCHREG-BRAA#867,BRANCHREG-BRAA#868,BRANCHREG-BRAA#869,BRANCHREG-BRAA#870,BRANCHREG-BRAA#871,BRANCHREG-BRAA#872,BRANCHREG-BRAA#873,BRANCHREG-BRAA#874,BRANCHREG-BRAA#875,BRANCHREG-BRAA#876,BRANCHREG-BRAA#877,BRANCHREG-BRAA#878,BRANCHREG-BRAA#879,BRANCHREG-BRAA#880,BRANCHREG-BRAA#881,BRANCHREG-BRAA#882,BRANCHREG-BRAA#883,BRANCHREG-BRAA#884,BRANCHREG-BRAA#885,BRANCHREG-BRAA#886,BRANCHREG-BRAA#887,BRANCHREG-BRAA#888,BRANCHREG-BRAA#889,BRANCHREG-BRAA#890,BRANCHREG-BRAA#891,BRANCHREG-BRAA#892,BRANCHREG-BRAA#893,BRANCHREG-BRAA#894,BRANCHREG-BRAA#895,BRANCHREG-BRAA#896,BRANCHREG-BRAA#897,BRANCHREG-BRAA#898,BRANCHREG-BRAA#899,BRANCHREG-BRAA#900,BRANCHREG-BRAA#901,BRANCHREG-BRAA#902,BRANCHREG-BRAA#903,BRANCHREG-BRAA#904,BRANCHREG-BRAA#905,BRANCHREG-BRAA#906,BRANCHREG-BRAA#907,BRANCHREG-BRAA#908,BRANCHREG-BRAA#909,BRANCHREG-BRAA#910,BRANCHREG-BRAA#911,BRANCHREG-BRAA#912,BRANCHREG-BRAA#913,BRANCHREG-BRAA#914,BRANCHREG-BRAA#915,BRANCHREG-BRAA#916,BRANCHREG-BRAA#917,BRANCHREG-BRAA#918,BRANCHREG-BRAA#919,BRANCHREG-BRAA#920,BRANCHREG-BRAA#921,BRANCHREG-BRAA#922,BRANCHREG-BRAA#923,BRANCHREG-BRAA#924,BRANCHREG-BRAA#925,BRANCHREG-BRAA#926,BRANCHREG-BRAA#927,BRANCHREG-BRAA#928,BRANCHREG-BRAA#929,BRANCHREG-BRAA#930,BRANCHREG-BRAA#931,BRANCHREG-BRAA#932,BRANCHREG-BRAA#933,BRANCHREG-BRAA#934,BRANCHREG-BRAA#935,BRANCHREG-BRAA#936,BRANCHREG-BRAA#937,BRANCHREG-BRAA#938,BRANCHREG-BRAA#939,BRANCHREG-BRAA#940,BRANCHREG-BRAA#941,BRANCHREG-BRAA#942,BRANCHREG-BRAA#943,BRANCHREG-BRAA#944,BRANCHREG-BRAA#945,BRANCHREG-BRAA#946,BRANCHREG-BRAA#947,BRANCHREG-BRAA#948,BRANCHREG-BRAA#949,BRANCHREG-BRAA#950,BRANCHREG-BRAA#951,BRANCHREG-BRAA#952,BRANCHREG-BRAA#953,BRANCHREG-BRAA#954,BRANCHREG-BRAA#955,BRANCHREG-BRAA#956,BRANCHREG-BRAA#957,BRANCHREG-BRAA#958,BRANCHREG-BRAA#959,BRANCHREG-BRAA#960,BRANCHREG-BRAA#961,BRANCHREG-BRAA#962,BRANCHREG-BRAA#963,BRANCHREG-BRAA#964,BRANCHREG-BRAA#965,BRANCHREG-BRAA#966,BRANCHREG-BRAA#967,BRANCHREG-BRAA#968,BRANCHREG-BRAA#969,BRANCHREG-BRAA#970,BRANCHREG-BRAA#971,BRANCHREG-BRAA#972,BRANCHREG-BRAA#973,BRANCHREG-BRAA#974,BRANCHREG-BRAA#975,BRANCHREG-BRAA#976,BRANCHREG-BRAA#977,BRANCHREG-BRAA#978,BRANCHREG-BRAA#979,BRANCHREG-BRAA#980,BRANCHREG-BRAA#981,BRANCHREG-BRAA#982,BRANCHREG-BRAA#983,BRANCHREG-BRAA#984,BRANCHREG-BRAA#985,BRANCHREG-BRAA#986,BRANCHREG-BRAA#987,BRANCHREG-BRAA#988,BRANCHREG-BRAA#989,BRANCHREG-BRAA#990,BRANCHREG-BRAA#991,BRANCHREG-BRAA#992,BRANCHREG-BRAA#993,BRANCHREG-BRAA#994,BRANCHREG-BRAA#995,BRANCHREG-BRAA#996,BRANCHREG-BRAA#997,BRANCHREG-BRAA#998,BRANCHREG-BRAA#999,BRANCHREG-BRAA#1000,BRANCHREG-BRAA#1001,BRANCHREG-BRAA#1002,BRANCHREG-BRAA#1003,BRANCHREG-BRAA#1004,BRANCHREG-BRAA#1005,BRANCHREG-BRAA#1006,BRANCHREG-BRAA#1007,BRANCHREG-BRAA#1008,BRANCHREG-BRAA#1009,BRANCHREG-BRAA#1010,BRANCHREG-BRAA#1011,BRANCHREG-BRAA#1012,BRANCHREG-BRAA#1013,BRANCHREG-BRAA#1014,BRANCHREG-BRAA#1015,BRANCHREG-BRAA#1016,BRANCHREG-BRAA#1017,BRANCHREG-BRAA#1018,BRANCHREG-BRAA#1019,BRANCHREG-BRAA#1020,BRANCHREG-BRAA#1021,BRANCHREG-BRAA#1022,BRANCHREG-BRAA#1023,BRANCHREG-BRAB#0,BRANCHREG-BRAB#1,BRANCHREG-BRAB#2,BRANCHREG-BRAB#3,BRANCHREG-BRAB#4,BRANCHREG-BRAB#5,BRANCHREG-BRAB#6,BRANCHREG-BRAB#7,BRANCHREG-BRAB#8,BRANCHREG-BRAB#9,BRANCHREG-BRAB#10,BRANCHREG-BRAB#11,BRANCHREG-BRAB#12,BRANCHREG-BRAB#13,BRANCHREG-BRAB#14,BRANCHREG-BRAB#15,BRANCHREG-BRAB#16,BRANCHREG-BRAB#17,BRANCHREG-BRAB#18,BRANCHREG-BRAB#19,BRANCHREG-BRAB#20,BRANCHREG-BRAB#21,BRANCHREG-BRAB#22,BRANCHREG-BRAB#23,BRANCHREG-BRAB#24,BRANCHREG-BRAB#25,BRANCHREG-BRAB#26,BRANCHREG-BRAB#27,BRANCHREG-BRAB#28,BRANCHREG-BRAB#29,BRANCHREG-BRAB#30,BRANCHREG-BRAB#31,BRANCHREG-BRAB#32,BRANCHREG-BRAB#33,BRANCHREG-BRAB#34,BRANCHREG-BRAB#35,BRANCHREG-BRAB#36,BRANCHREG-BRAB#37,BRANCHREG-BRAB#38,BRANCHREG-BRAB#39,BRANCHREG-BRAB#40,BRANCHREG-BRAB#41,BRANCHREG-BRAB#42,BRANCHREG-BRAB#43,BRANCHREG-BRAB#44,BRANCHREG-BRAB#45,BRANCHREG-BRAB#46,BRANCHREG-BRAB#47,BRANCHREG-BRAB#48,BRANCHREG-BRAB#49,BRANCHREG-BRAB#50,BRANCHREG-BRAB#51,BRANCHREG-BRAB#52,BRANCHREG-BRAB#53,BRANCHREG-BRAB#54,BRANCHREG-BRAB#55,BRANCHREG-BRAB#56,BRANCHREG-BRAB#57,BRANCHREG-BRAB#58,BRANCHREG-BRAB#59,BRANCHREG-BRAB#60,BRANCHREG-BRAB#61,BRANCHREG-BRAB#62,BRANCHREG-BRAB#63,BRANCHREG-BRAB#64,BRANCHREG-BRAB#65,BRANCHREG-BRAB#66,BRANCHREG-BRAB#67,BRANCHREG-BRAB#68,BRANCHREG-BRAB#69,BRANCHREG-BRAB#70,BRANCHREG-BRAB#71,BRANCHREG-BRAB#72,BRANCHREG-BRAB#73,BRANCHREG-BRAB#74,BRANCHREG-BRAB#75,BRANCHREG-BRAB#76,BRANCHREG-BRAB#77,BRANCHREG-BRAB#78,BRANCHREG-BRAB#79,BRANCHREG-BRAB#80,BRANCHREG-BRAB#81,BRANCHREG-BRAB#82,BRANCHREG-BRAB#83,BRANCHREG-BRAB#84,BRANCHREG-BRAB#85,BRANCHREG-BRAB#86,BRANCHREG-BRAB#87,BRANCHREG-BRAB#88,BRANCHREG-BRAB#89,BRANCHREG-BRAB#90,BRANCHREG-BRAB#91,BRANCHREG-BRAB#92,BRANCHREG-BRAB#93,BRANCHREG-BRAB#94,BRANCHREG-BRAB#95,BRANCHREG-BRAB#96,BRANCHREG-BRAB#97,BRANCHREG-BRAB#98,BRANCHREG-BRAB#99,BRANCHREG-BRAB#100,BRANCHREG-BRAB#101,BRANCHREG-BRAB#102,BRANCHREG-BRAB#103,BRANCHREG-BRAB#104,BRANCHREG-BRAB#105,BRANCHREG-BRAB#106,BRANCHREG-BRAB#107,BRANCHREG-BRAB#108,BRANCHREG-BRAB#109,BRANCHREG-BRAB#110,BRANCHREG-BRAB#111,BRANCHREG-BRAB#112,BRANCHREG-BRAB#113,BRANCHREG-BRAB#114,BRANCHREG-BRAB#115,BRANCHREG-BRAB#116,BRANCHREG-BRAB#117,BRANCHREG-BRAB#118,BRANCHREG-BRAB#119,BRANCHREG-BRAB#120,BRANCHREG-BRAB#121,BRANCHREG-BRAB#122,BRANCHREG-BRAB#123,BRANCHREG-BRAB#124,BRANCHREG-BRAB#125,BRANCHREG-BRAB#126,BRANCHREG-BRAB#127,BRANCHREG-BRAB#128,BRANCHREG-BRAB#129,BRANCHREG-BRAB#130,BRANCHREG-BRAB#131,BRANCHREG-BRAB#132,BRANCHREG-BRAB#133,BRANCHREG-BRAB#134,BRANCHREG-BRAB#135,BRANCHREG-BRAB#136,BRANCHREG-BRAB#137,BRANCHREG-BRAB#138,BRANCHREG-BRAB#139,BRANCHREG-BRAB#140,BRANCHREG-BRAB#141,BRANCHREG-BRAB#142,BRANCHREG-BRAB#143,BRANCHREG-BRAB#144,BRANCHREG-BRAB#145,BRANCHREG-BRAB#146,BRANCHREG-BRAB#147,BRANCHREG-BRAB#148,BRANCHREG-BRAB#149,BRANCHREG-BRAB#150,BRANCHREG-BRAB#151,BRANCHREG-BRAB#152,BRANCHREG-BRAB#153,BRANCHREG-BRAB#154,BRANCHREG-BRAB#155,BRANCHREG-BRAB#156,BRANCHREG-BRAB#157,BRANCHREG-BRAB#158,BRANCHREG-BRAB#159,BRANCHREG-BRAB#160,BRANCHREG-BRAB#161,BRANCHREG-BRAB#162,BRANCHREG-BRAB#163,BRANCHREG-BRAB#164,BRANCHREG-BRAB#165,BRANCHREG-BRAB#166,BRANCHREG-BRAB#167,BRANCHREG-BRAB#168,BRANCHREG-BRAB#169,BRANCHREG-BRAB#170,BRANCHREG-BRAB#171,BRANCHREG-BRAB#172,BRANCHREG-BRAB#173,BRANCHREG-BRAB#174,BRANCHREG-BRAB#175,BRANCHREG-BRAB#176,BRANCHREG-BRAB#177,BRANCHREG-BRAB#178,BRANCHREG-BRAB#179,BRANCHREG-BRAB#180,BRANCHREG-BRAB#181,BRANCHREG-BRAB#182,BRANCHREG-BRAB#183,BRANCHREG-BRAB#184,BRANCHREG-BRAB#185,BRANCHREG-BRAB#186,BRANCHREG-BRAB#187,BRANCHREG-BRAB#188,BRANCHREG-BRAB#189,BRANCHREG-BRAB#190,BRANCHREG-BRAB#191,BRANCHREG-BRAB#192,BRANCHREG-BRAB#193,BRANCHREG-BRAB#194,BRANCHREG-BRAB#195,BRANCHREG-BRAB#196,BRANCHREG-BRAB#197,BRANCHREG-BRAB#198,BRANCHREG-BRAB#199,BRANCHREG-BRAB#200,BRANCHREG-BRAB#201,BRANCHREG-BRAB#202,BRANCHREG-BRAB#203,BRANCHREG-BRAB#204,BRANCHREG-BRAB#205,BRANCHREG-BRAB#206,BRANCHREG-BRAB#207,BRANCHREG-BRAB#208,BRANCHREG-BRAB#209,BRANCHREG-BRAB#210,BRANCHREG-BRAB#211,BRANCHREG-BRAB#212,BRANCHREG-BRAB#213,BRANCHREG-BRAB#214,BRANCHREG-BRAB#215,BRANCHREG-BRAB#216,BRANCHREG-BRAB#217,BRANCHREG-BRAB#218,BRANCHREG-BRAB#219,BRANCHREG-BRAB#220,BRANCHREG-BRAB#221,BRANCHREG-BRAB#222,BRANCHREG-BRAB#223,BRANCHREG-BRAB#224,BRANCHREG-BRAB#225,BRANCHREG-BRAB#226,BRANCHREG-BRAB#227,BRANCHREG-BRAB#228,BRANCHREG-BRAB#229,BRANCHREG-BRAB#230,BRANCHREG-BRAB#231,BRANCHREG-BRAB#232,BRANCHREG-BRAB#233,BRANCHREG-BRAB#234,BRANCHREG-BRAB#235,BRANCHREG-BRAB#236,BRANCHREG-BRAB#237,BRANCHREG-BRAB#238,BRANCHREG-BRAB#239,BRANCHREG-BRAB#240,BRANCHREG-BRAB#241,BRANCHREG-BRAB#242,BRANCHREG-BRAB#243,BRANCHREG-BRAB#244,BRANCHREG-BRAB#245,BRANCHREG-BRAB#246,BRANCHREG-BRAB#247,BRANCHREG-BRAB#248,BRANCHREG-BRAB#249,BRANCHREG-BRAB#250,BRANCHREG-BRAB#251,BRANCHREG-BRAB#252,BRANCHREG-BRAB#253,BRANCHREG-BRAB#254,BRANCHREG-BRAB#255,BRANCHREG-BRAB#256,BRANCHREG-BRAB#257,BRANCHREG-BRAB#258,BRANCHREG-BRAB#259,BRANCHREG-BRAB#260,BRANCHREG-BRAB#261,BRANCHREG-BRAB#262,BRANCHREG-BRAB#263,BRANCHREG-BRAB#264,BRANCHREG-BRAB#265,BRANCHREG-BRAB#266,BRANCHREG-BRAB#267,BRANCHREG-BRAB#268,BRANCHREG-BRAB#269,BRANCHREG-BRAB#270,BRANCHREG-BRAB#271,BRANCHREG-BRAB#272,BRANCHREG-BRAB#273,BRANCHREG-BRAB#274,BRANCHREG-BRAB#275,BRANCHREG-BRAB#276,BRANCHREG-BRAB#277,BRANCHREG-BRAB#278,BRANCHREG-BRAB#279,BRANCHREG-BRAB#280,BRANCHREG-BRAB#281,BRANCHREG-BRAB#282,BRANCHREG-BRAB#283,BRANCHREG-BRAB#284,BRANCHREG-BRAB#285,BRANCHREG-BRAB#286,BRANCHREG-BRAB#287,BRANCHREG-BRAB#288,BRANCHREG-BRAB#289,BRANCHREG-BRAB#290,BRANCHREG-BRAB#291,BRANCHREG-BRAB#292,BRANCHREG-BRAB#293,BRANCHREG-BRAB#294,BRANCHREG-BRAB#295,BRANCHREG-BRAB#296,BRANCHREG-BRAB#297,BRANCHREG-BRAB#298,BRANCHREG-BRAB#299,BRANCHREG-BRAB#300,BRANCHREG-BRAB#301,BRANCHREG-BRAB#302,BRANCHREG-BRAB#303,BRANCHREG-BRAB#304,BRANCHREG-BRAB#305,BRANCHREG-BRAB#306,BRANCHREG-BRAB#307,BRANCHREG-BRAB#308,BRANCHREG-BRAB#309,BRANCHREG-BRAB#310,BRANCHREG-BRAB#311,BRANCHREG-BRAB#312,BRANCHREG-BRAB#313,BRANCHREG-BRAB#314,BRANCHREG-BRAB#315,BRANCHREG-BRAB#316,BRANCHREG-BRAB#317,BRANCHREG-BRAB#318,BRANCHREG-BRAB#319,BRANCHREG-BRAB#320,BRANCHREG-BRAB#321,BRANCHREG-BRAB#322,BRANCHREG-BRAB#323,BRANCHREG-BRAB#324,BRANCHREG-BRAB#325,BRANCHREG-BRAB#326,BRANCHREG-BRAB#327,BRANCHREG-BRAB#328,BRANCHREG-BRAB#329,BRANCHREG-BRAB#330,BRANCHREG-BRAB#331,BRANCHREG-BRAB#332,BRANCHREG-BRAB#333,BRANCHREG-BRAB#334,BRANCHREG-BRAB#335,BRANCHREG-BRAB#336,BRANCHREG-BRAB#337,BRANCHREG-BRAB#338,BRANCHREG-BRAB#339,BRANCHREG-BRAB#340,BRANCHREG-BRAB#341,BRANCHREG-BRAB#342,BRANCHREG-BRAB#343,BRANCHREG-BRAB#344,BRANCHREG-BRAB#345,BRANCHREG-BRAB#346,BRANCHREG-BRAB#347,BRANCHREG-BRAB#348,BRANCHREG-BRAB#349,BRANCHREG-BRAB#350,BRANCHREG-BRAB#351,BRANCHREG-BRAB#352,BRANCHREG-BRAB#353,BRANCHREG-BRAB#354,BRANCHREG-BRAB#355,BRANCHREG-BRAB#356,BRANCHREG-BRAB#357,BRANCHREG-BRAB#358,BRANCHREG-BRAB#359,BRANCHREG-BRAB#360,BRANCHREG-BRAB#361,BRANCHREG-BRAB#362,BRANCHREG-BRAB#363,BRANCHREG-BRAB#364,BRANCHREG-BRAB#365,BRANCHREG-BRAB#366,BRANCHREG-BRAB#367,BRANCHREG-BRAB#368,BRANCHREG-BRAB#369,BRANCHREG-BRAB#370,BRANCHREG-BRAB#371,BRANCHREG-BRAB#372,BRANCHREG-BRAB#373,BRANCHREG-BRAB#374,BRANCHREG-BRAB#375,BRANCHREG-BRAB#376,BRANCHREG-BRAB#377,BRANCHREG-BRAB#378,BRANCHREG-BRAB#379,BRANCHREG-BRAB#380,BRANCHREG-BRAB#381,BRANCHREG-BRAB#382,BRANCHREG-BRAB#383,BRANCHREG-BRAB#384,BRANCHREG-BRAB#385,BRANCHREG-BRAB#386,BRANCHREG-BRAB#387,BRANCHREG-BRAB#388,BRANCHREG-BRAB#389,BRANCHREG-BRAB#390,BRANCHREG-BRAB#391,BRANCHREG-BRAB#392,BRANCHREG-BRAB#393,BRANCHREG-BRAB#394,BRANCHREG-BRAB#395,BRANCHREG-BRAB#396,BRANCHREG-BRAB#397,BRANCHREG-BRAB#398,BRANCHREG-BRAB#399,BRANCHREG-BRAB#400,BRANCHREG-BRAB#401,BRANCHREG-BRAB#402,BRANCHREG-BRAB#403,BRANCHREG-BRAB#404,BRANCHREG-BRAB#405,BRANCHREG-BRAB#406,BRANCHREG-BRAB#407,BRANCHREG-BRAB#408,BRANCHREG-BRAB#409,BRANCHREG-BRAB#410,BRANCHREG-BRAB#411,BRANCHREG-BRAB#412,BRANCHREG-BRAB#413,BRANCHREG-BRAB#414,BRANCHREG-BRAB#415,BRANCHREG-BRAB#416,BRANCHREG-BRAB#417,BRANCHREG-BRAB#418,BRANCHREG-BRAB#419,BRANCHREG-BRAB#420,BRANCHREG-BRAB#421,BRANCHREG-BRAB#422,BRANCHREG-BRAB#423,BRANCHREG-BRAB#424,BRANCHREG-BRAB#425,BRANCHREG-BRAB#426,BRANCHREG-BRAB#427,BRANCHREG-BRAB#428,BRANCHREG-BRAB#429,BRANCHREG-BRAB#430,BRANCHREG-BRAB#431,BRANCHREG-BRAB#432,BRANCHREG-BRAB#433,BRANCHREG-BRAB#434,BRANCHREG-BRAB#435,BRANCHREG-BRAB#436,BRANCHREG-BRAB#437,BRANCHREG-BRAB#438,BRANCHREG-BRAB#439,BRANCHREG-BRAB#440,BRANCHREG-BRAB#441,BRANCHREG-BRAB#442,BRANCHREG-BRAB#443,BRANCHREG-BRAB#444,BRANCHREG-BRAB#445,BRANCHREG-BRAB#446,BRANCHREG-BRAB#447,BRANCHREG-BRAB#448,BRANCHREG-BRAB#449,BRANCHREG-BRAB#450,BRANCHREG-BRAB#451,BRANCHREG-BRAB#452,BRANCHREG-BRAB#453,BRANCHREG-BRAB#454,BRANCHREG-BRAB#455,BRANCHREG-BRAB#456,BRANCHREG-BRAB#457,BRANCHREG-BRAB#458,BRANCHREG-BRAB#459,BRANCHREG-BRAB#460,BRANCHREG-BRAB#461,BRANCHREG-BRAB#462,BRANCHREG-BRAB#463,BRANCHREG-BRAB#464,BRANCHREG-BRAB#465,BRANCHREG-BRAB#466,BRANCHREG-BRAB#467,BRANCHREG-BRAB#468,BRANCHREG-BRAB#469,BRANCHREG-BRAB#470,BRANCHREG-BRAB#471,BRANCHREG-BRAB#472,BRANCHREG-BRAB#473,BRANCHREG-BRAB#474,BRANCHREG-BRAB#475,BRANCHREG-BRAB#476,BRANCHREG-BRAB#477,BRANCHREG-BRAB#478,BRANCHREG-BRAB#479,BRANCHREG-BRAB#480,BRANCHREG-BRAB#481,BRANCHREG-BRAB#482,BRANCHREG-BRAB#483,BRANCHREG-BRAB#484,BRANCHREG-BRAB#485,BRANCHREG-BRAB#486,BRANCHREG-BRAB#487,BRANCHREG-BRAB#488,BRANCHREG-BRAB#489,BRANCHREG-BRAB#490,BRANCHREG-BRAB#491,BRANCHREG-BRAB#492,BRANCHREG-BRAB#493,BRANCHREG-BRAB#494,BRANCHREG-BRAB#495,BRANCHREG-BRAB#496,BRANCHREG-BRAB#497,BRANCHREG-BRAB#498,BRANCHREG-BRAB#499,BRANCHREG-BRAB#500,BRANCHREG-BRAB#501,BRANCHREG-BRAB#502,BRANCHREG-BRAB#503,BRANCHREG-BRAB#504,BRANCHREG-BRAB#505,BRANCHREG-BRAB#506,BRANCHREG-BRAB#507,BRANCHREG-BRAB#508,BRANCHREG-BRAB#509,BRANCHREG-BRAB#510,BRANCHREG-BRAB#511,BRANCHREG-BRAB#512,BRANCHREG-BRAB#513,BRANCHREG-BRAB#514,BRANCHREG-BRAB#515,BRANCHREG-BRAB#516,BRANCHREG-BRAB#517,BRANCHREG-BRAB#518,BRANCHREG-BRAB#519,BRANCHREG-BRAB#520,BRANCHREG-BRAB#521,BRANCHREG-BRAB#522,BRANCHREG-BRAB#523,BRANCHREG-BRAB#524,BRANCHREG-BRAB#525,BRANCHREG-BRAB#526,BRANCHREG-BRAB#527,BRANCHREG-BRAB#528,BRANCHREG-BRAB#529,BRANCHREG-BRAB#530,BRANCHREG-BRAB#531,BRANCHREG-BRAB#532,BRANCHREG-BRAB#533,BRANCHREG-BRAB#534,BRANCHREG-BRAB#535,BRANCHREG-BRAB#536,BRANCHREG-BRAB#537,BRANCHREG-BRAB#538,BRANCHREG-BRAB#539,BRANCHREG-BRAB#540,BRANCHREG-BRAB#541,BRANCHREG-BRAB#542,BRANCHREG-BRAB#543,BRANCHREG-BRAB#544,BRANCHREG-BRAB#545,BRANCHREG-BRAB#546,BRANCHREG-BRAB#547,BRANCHREG-BRAB#548,BRANCHREG-BRAB#549,BRANCHREG-BRAB#550,BRANCHREG-BRAB#551,BRANCHREG-BRAB#552,BRANCHREG-BRAB#553,BRANCHREG-BRAB#554,BRANCHREG-BRAB#555,BRANCHREG-BRAB#556,BRANCHREG-BRAB#557,BRANCHREG-BRAB#558,BRANCHREG-BRAB#559,BRANCHREG-BRAB#560,BRANCHREG-BRAB#561,BRANCHREG-BRAB#562,BRANCHREG-BRAB#563,BRANCHREG-BRAB#564,BRANCHREG-BRAB#565,BRANCHREG-BRAB#566,BRANCHREG-BRAB#567,BRANCHREG-BRAB#568,BRANCHREG-BRAB#569,BRANCHREG-BRAB#570,BRANCHREG-BRAB#571,BRANCHREG-BRAB#572,BRANCHREG-BRAB#573,BRANCHREG-BRAB#574,BRANCHREG-BRAB#575,BRANCHREG-BRAB#576,BRANCHREG-BRAB#577,BRANCHREG-BRAB#578,BRANCHREG-BRAB#579,BRANCHREG-BRAB#580,BRANCHREG-BRAB#581,BRANCHREG-BRAB#582,BRANCHREG-BRAB#583,BRANCHREG-BRAB#584,BRANCHREG-BRAB#585,BRANCHREG-BRAB#586,BRANCHREG-BRAB#587,BRANCHREG-BRAB#588,BRANCHREG-BRAB#589,BRANCHREG-BRAB#590,BRANCHREG-BRAB#591,BRANCHREG-BRAB#592,BRANCHREG-BRAB#593,BRANCHREG-BRAB#594,BRANCHREG-BRAB#595,BRANCHREG-BRAB#596,BRANCHREG-BRAB#597,BRANCHREG-BRAB#598,BRANCHREG-BRAB#599,BRANCHREG-BRAB#600,BRANCHREG-BRAB#601,BRANCHREG-BRAB#602,BRANCHREG-BRAB#603,BRANCHREG-BRAB#604,BRANCHREG-BRAB#605,BRANCHREG-BRAB#606,BRANCHREG-BRAB#607,BRANCHREG-BRAB#608,BRANCHREG-BRAB#609,BRANCHREG-BRAB#610,BRANCHREG-BRAB#611,BRANCHREG-BRAB#612,BRANCHREG-BRAB#613,BRANCHREG-BRAB#614,BRANCHREG-BRAB#615,BRANCHREG-BRAB#616,BRANCHREG-BRAB#617,BRANCHREG-BRAB#618,BRANCHREG-BRAB#619,BRANCHREG-BRAB#620,BRANCHREG-BRAB#621,BRANCHREG-BRAB#622,BRANCHREG-BRAB#623,BRANCHREG-BRAB#624,BRANCHREG-BRAB#625,BRANCHREG-BRAB#626,BRANCHREG-BRAB#627,BRANCHREG-BRAB#628,BRANCHREG-BRAB#629,BRANCHREG-BRAB#630,BRANCHREG-BRAB#631,BRANCHREG-BRAB#632,BRANCHREG-BRAB#633,BRANCHREG-BRAB#634,BRANCHREG-BRAB#635,BRANCHREG-BRAB#636,BRANCHREG-BRAB#637,BRANCHREG-BRAB#638,BRANCHREG-BRAB#639,BRANCHREG-BRAB#640,BRANCHREG-BRAB#641,BRANCHREG-BRAB#642,BRANCHREG-BRAB#643,BRANCHREG-BRAB#644,BRANCHREG-BRAB#645,BRANCHREG-BRAB#646,BRANCHREG-BRAB#647,BRANCHREG-BRAB#648,BRANCHREG-BRAB#649,BRANCHREG-BRAB#650,BRANCHREG-BRAB#651,BRANCHREG-BRAB#652,BRANCHREG-BRAB#653,BRANCHREG-BRAB#654,BRANCHREG-BRAB#655,BRANCHREG-BRAB#656,BRANCHREG-BRAB#657,BRANCHREG-BRAB#658,BRANCHREG-BRAB#659,BRANCHREG-BRAB#660,BRANCHREG-BRAB#661,BRANCHREG-BRAB#662,BRANCHREG-BRAB#663,BRANCHREG-BRAB#664,BRANCHREG-BRAB#665,BRANCHREG-BRAB#666,BRANCHREG-BRAB#667,BRANCHREG-BRAB#668,BRANCHREG-BRAB#669,BRANCHREG-BRAB#670,BRANCHREG-BRAB#671,BRANCHREG-BRAB#672,BRANCHREG-BRAB#673,BRANCHREG-BRAB#674,BRANCHREG-BRAB#675,BRANCHREG-BRAB#676,BRANCHREG-BRAB#677,BRANCHREG-BRAB#678,BRANCHREG-BRAB#679,BRANCHREG-BRAB#680,BRANCHREG-BRAB#681,BRANCHREG-BRAB#682,BRANCHREG-BRAB#683,BRANCHREG-BRAB#684,BRANCHREG-BRAB#685,BRANCHREG-BRAB#686,BRANCHREG-BRAB#687,BRANCHREG-BRAB#688,BRANCHREG-BRAB#689,BRANCHREG-BRAB#690,BRANCHREG-BRAB#691,BRANCHREG-BRAB#692,BRANCHREG-BRAB#693,BRANCHREG-BRAB#694,BRANCHREG-BRAB#695,BRANCHREG-BRAB#696,BRANCHREG-BRAB#697,BRANCHREG-BRAB#698,BRANCHREG-BRAB#699,BRANCHREG-BRAB#700,BRANCHREG-BRAB#701,BRANCHREG-BRAB#702,BRANCHREG-BRAB#703,BRANCHREG-BRAB#704,BRANCHREG-BRAB#705,BRANCHREG-BRAB#706,BRANCHREG-BRAB#707,BRANCHREG-BRAB#708,BRANCHREG-BRAB#709,BRANCHREG-BRAB#710,BRANCHREG-BRAB#711,BRANCHREG-BRAB#712,BRANCHREG-BRAB#713,BRANCHREG-BRAB#714,BRANCHREG-BRAB#715,BRANCHREG-BRAB#716,BRANCHREG-BRAB#717,BRANCHREG-BRAB#718,BRANCHREG-BRAB#719,BRANCHREG-BRAB#720,BRANCHREG-BRAB#721,BRANCHREG-BRAB#722,BRANCHREG-BRAB#723,BRANCHREG-BRAB#724,BRANCHREG-BRAB#725,BRANCHREG-BRAB#726,BRANCHREG-BRAB#727,BRANCHREG-BRAB#728,BRANCHREG-BRAB#729,BRANCHREG-BRAB#730,BRANCHREG-BRAB#731,BRANCHREG-BRAB#732,BRANCHREG-BRAB#733,BRANCHREG-BRAB#734,BRANCHREG-BRAB#735,BRANCHREG-BRAB#736,BRANCHREG-BRAB#737,BRANCHREG-BRAB#738,BRANCHREG-BRAB#739,BRANCHREG-BRAB#740,BRANCHREG-BRAB#741,BRANCHREG-BRAB#742,BRANCHREG-BRAB#743,BRANCHREG-BRAB#744,BRANCHREG-BRAB#745,BRANCHREG-BRAB#746,BRANCHREG-BRAB#747,BRANCHREG-BRAB#748,BRANCHREG-BRAB#749,BRANCHREG-BRAB#750,BRANCHREG-BRAB#751,BRANCHREG-BRAB#752,BRANCHREG-BRAB#753,BRANCHREG-BRAB#754,BRANCHREG-BRAB#755,BRANCHREG-BRAB#756,BRANCHREG-BRAB#757,BRANCHREG-BRAB#758,BRANCHREG-BRAB#759,BRANCHREG-BRAB#760,BRANCHREG-BRAB#761,BRANCHREG-BRAB#762,BRANCHREG-BRAB#763,BRANCHREG-BRAB#764,BRANCHREG-BRAB#765,BRANCHREG-BRAB#766,BRANCHREG-BRAB#767,BRANCHREG-BRAB#768,BRANCHREG-BRAB#769,BRANCHREG-BRAB#770,BRANCHREG-BRAB#771,BRANCHREG-BRAB#772,BRANCHREG-BRAB#773,BRANCHREG-BRAB#774,BRANCHREG-BRAB#775,BRANCHREG-BRAB#776,BRANCHREG-BRAB#777,BRANCHREG-BRAB#778,BRANCHREG-BRAB#779,BRANCHREG-BRAB#780,BRANCHREG-BRAB#781,BRANCHREG-BRAB#782,BRANCHREG-BRAB#783,BRANCHREG-BRAB#784,BRANCHREG-BRAB#785,BRANCHREG-BRAB#786,BRANCHREG-BRAB#787,BRANCHREG-BRAB#788,BRANCHREG-BRAB#789,BRANCHREG-BRAB#790,BRANCHREG-BRAB#791,BRANCHREG-BRAB#792,BRANCHREG-BRAB#793,BRANCHREG-BRAB#794,BRANCHREG-BRAB#795,BRANCHREG-BRAB#796,BRANCHREG-BRAB#797,BRANCHREG-BRAB#798,BRANCHREG-BRAB#799,BRANCHREG-BRAB#800,BRANCHREG-BRAB#801,BRANCHREG-BRAB#802,BRANCHREG-BRAB#803,BRANCHREG-BRAB#804,BRANCHREG-BRAB#805,BRANCHREG-BRAB#806,BRANCHREG-BRAB#807,BRANCHREG-BRAB#808,BRANCHREG-BRAB#809,BRANCHREG-BRAB#810,BRANCHREG-BRAB#811,BRANCHREG-BRAB#812,BRANCHREG-BRAB#813,BRANCHREG-BRAB#814,BRANCHREG-BRAB#815,BRANCHREG-BRAB#816,BRANCHREG-BRAB#817,BRANCHREG-BRAB#818,BRANCHREG-BRAB#819,BRANCHREG-BRAB#820,BRANCHREG-BRAB#821,BRANCHREG-BRAB#822,BRANCHREG-BRAB#823,BRANCHREG-BRAB#824,BRANCHREG-BRAB#825,BRANCHREG-BRAB#826,BRANCHREG-BRAB#827,BRANCHREG-BRAB#828,BRANCHREG-BRAB#829,BRANCHREG-BRAB#830,BRANCHREG-BRAB#831,BRANCHREG-BRAB#832,BRANCHREG-BRAB#833,BRANCHREG-BRAB#834,BRANCHREG-BRAB#835,BRANCHREG-BRAB#836,BRANCHREG-BRAB#837,BRANCHREG-BRAB#838,BRANCHREG-BRAB#839,BRANCHREG-BRAB#840,BRANCHREG-BRAB#841,BRANCHREG-BRAB#842,BRANCHREG-BRAB#843,BRANCHREG-BRAB#844,BRANCHREG-BRAB#845,BRANCHREG-BRAB#846,BRANCHREG-BRAB#847,BRANCHREG-BRAB#848,BRANCHREG-BRAB#849,BRANCHREG-BRAB#850,BRANCHREG-BRAB#851,BRANCHREG-BRAB#852,BRANCHREG-BRAB#853,BRANCHREG-BRAB#854,BRANCHREG-BRAB#855,BRANCHREG-BRAB#856,BRANCHREG-BRAB#857,BRANCHREG-BRAB#858,BRANCHREG-BRAB#859,BRANCHREG-BRAB#860,BRANCHREG-BRAB#861,BRANCHREG-BRAB#862,BRANCHREG-BRAB#863,BRANCHREG-BRAB#864,BRANCHREG-BRAB#865,BRANCHREG-BRAB#866,BRANCHREG-BRAB#867,BRANCHREG-BRAB#868,BRANCHREG-BRAB#869,BRANCHREG-BRAB#870,BRANCHREG-BRAB#871,BRANCHREG-BRAB#872,BRANCHREG-BRAB#873,BRANCHREG-BRAB#874,BRANCHREG-BRAB#875,BRANCHREG-BRAB#876,BRANCHREG-BRAB#877,BRANCHREG-BRAB#878,BRANCHREG-BRAB#879,BRANCHREG-BRAB#880,BRANCHREG-BRAB#881,BRANCHREG-BRAB#882,BRANCHREG-BRAB#883,BRANCHREG-BRAB#884,BRANCHREG-BRAB#885,BRANCHREG-BRAB#886,BRANCHREG-BRAB#887,BRANCHREG-BRAB#888,BRANCHREG-BRAB#889,BRANCHREG-BRAB#890,BRANCHREG-BRAB#891,BRANCHREG-BRAB#892,BRANCHREG-BRAB#893,BRANCHREG-BRAB#894,BRANCHREG-BRAB#895,BRANCHREG-BRAB#896,BRANCHREG-BRAB#897,BRANCHREG-BRAB#898,BRANCHREG-BRAB#899,BRANCHREG-BRAB#900,BRANCHREG-BRAB#901,BRANCHREG-BRAB#902,BRANCHREG-BRAB#903,BRANCHREG-BRAB#904,BRANCHREG-BRAB#905,BRANCHREG-BRAB#906,BRANCHREG-BRAB#907,BRANCHREG-BRAB#908,BRANCHREG-BRAB#909,BRANCHREG-BRAB#910,BRANCHREG-BRAB#911,BRANCHREG-BRAB#912,BRANCHREG-BRAB#913,BRANCHREG-BRAB#914,BRANCHREG-BRAB#915,BRANCHREG-BRAB#916,BRANCHREG-BRAB#917,BRANCHREG-BRAB#918,BRANCHREG-BRAB#919,BRANCHREG-BRAB#920,BRANCHREG-BRAB#921,BRANCHREG-BRAB#922,BRANCHREG-BRAB#923,BRANCHREG-BRAB#924,BRANCHREG-BRAB#925,BRANCHREG-BRAB#926,BRANCHREG-BRAB#927,BRANCHREG-BRAB#928,BRANCHREG-BRAB#929,BRANCHREG-BRAB#930,BRANCHREG-BRAB#931,BRANCHREG-BRAB#932,BRANCHREG-BRAB#933,BRANCHREG-BRAB#934,BRANCHREG-BRAB#935,BRANCHREG-BRAB#936,BRANCHREG-BRAB#937,BRANCHREG-BRAB#938,BRANCHREG-BRAB#939,BRANCHREG-BRAB#940,BRANCHREG-BRAB#941,BRANCHREG-BRAB#942,BRANCHREG-BRAB#943,BRANCHREG-BRAB#944,BRANCHREG-BRAB#945,BRANCHREG-BRAB#946,BRANCHREG-BRAB#947,BRANCHREG-BRAB#948,BRANCHREG-BRAB#949,BRANCHREG-BRAB#950,BRANCHREG-BRAB#951,BRANCHREG-BRAB#952,BRANCHREG-BRAB#953,BRANCHREG-BRAB#954,BRANCHREG-BRAB#955,BRANCHREG-BRAB#956,BRANCHREG-BRAB#957,BRANCHREG-BRAB#958,BRANCHREG-BRAB#959,BRANCHREG-BRAB#960,BRANCHREG-BRAB#961,BRANCHREG-BRAB#962,BRANCHREG-BRAB#963,BRANCHREG-BRAB#964,BRANCHREG-BRAB#965,BRANCHREG-BRAB#966,BRANCHREG-BRAB#967,BRANCHREG-BRAB#968,BRANCHREG-BRAB#969,BRANCHREG-BRAB#970,BRANCHREG-BRAB#971,BRANCHREG-BRAB#972,BRANCHREG-BRAB#973,BRANCHREG-BRAB#974,BRANCHREG-BRAB#975,BRANCHREG-BRAB#976,BRANCHREG-BRAB#977,BRANCHREG-BRAB#978,BRANCHREG-BRAB#979,BRANCHREG-BRAB#980,BRANCHREG-BRAB#981,BRANCHREG-BRAB#982,BRANCHREG-BRAB#983,BRANCHREG-BRAB#984,BRANCHREG-BRAB#985,BRANCHREG-BRAB#986,BRANCHREG-BRAB#987,BRANCHREG-BRAB#988,BRANCHREG-BRAB#989,BRANCHREG-BRAB#990,BRANCHREG-BRAB#991,BRANCHREG-BRAB#992,BRANCHREG-BRAB#993,BRANCHREG-BRAB#994,BRANCHREG-BRAB#995,BRANCHREG-BRAB#996,BRANCHREG-BRAB#997,BRANCHREG-BRAB#998,BRANCHREG-BRAB#999,BRANCHREG-BRAB#1000,BRANCHREG-BRAB#1001,BRANCHREG-BRAB#1002,BRANCHREG-BRAB#1003,BRANCHREG-BRAB#1004,BRANCHREG-BRAB#1005,BRANCHREG-BRAB#1006,BRANCHREG-BRAB#1007,BRANCHREG-BRAB#1008,BRANCHREG-BRAB#1009,BRANCHREG-BRAB#1010,BRANCHREG-BRAB#1011,BRANCHREG-BRAB#1012,BRANCHREG-BRAB#1013,BRANCHREG-BRAB#1014,BRANCHREG-BRAB#1015,BRANCHREG-BRAB#1016,BRANCHREG-BRAB#1017,BRANCHREG-BRAB#1018,BRANCHREG-BRAB#1019,BRANCHREG-BRAB#1020,BRANCHREG-BRAB#1021,BRANCHREG-BRAB#1022,BRANCHREG-BRAB#1023
pub const fn classify_impl_159(inst: u32) -> u32 {
  if (inst&0xff800) != 0xf0800 { return 0; }
  let idx = match (inst >> 0) & 0x7ff {
    0x0 => 0x989,
    0x1 => 0x989,
    0x2 => 0x989,
    0x3 => 0x989,
    0x4 => 0x989,
    0x5 => 0x989,
    0x6 => 0x989,
    0x7 => 0x989,
    0x8 => 0x989,
    0x9 => 0x989,
    0xa => 0x989,
    0xb => 0x989,
    0xc => 0x989,
    0xd => 0x989,
    0xe => 0x989,
    0xf => 0x989,
    0x10 => 0x989,
    0x11 => 0x989,
    0x12 => 0x989,
    0x13 => 0x989,
    0x14 => 0x989,
    0x15 => 0x989,
    0x16 => 0x989,
    0x17 => 0x989,
    0x18 => 0x989,
    0x19 => 0x989,
    0x1a => 0x989,
    0x1b => 0x989,
    0x1c => 0x989,
    0x1d => 0x989,
    0x1e => 0x989,
    0x1f => 0x989,
    0x20 => 0x989,
    0x21 => 0x989,
    0x22 => 0x989,
    0x23 => 0x989,
    0x24 => 0x989,
    0x25 => 0x989,
    0x26 => 0x989,
    0x27 => 0x989,
    0x28 => 0x989,
    0x29 => 0x989,
    0x2a => 0x989,
    0x2b => 0x989,
    0x2c => 0x989,
    0x2d => 0x989,
    0x2e => 0x989,
    0x2f => 0x989,
    0x30 => 0x989,
    0x31 => 0x989,
    0x32 => 0x989,
    0x33 => 0x989,
    0x34 => 0x989,
    0x35 => 0x989,
    0x36 => 0x989,
    0x37 => 0x989,
    0x38 => 0x989,
    0x39 => 0x989,
    0x3a => 0x989,
    0x3b => 0x989,
    0x3c => 0x989,
    0x3d => 0x989,
    0x3e => 0x989,
    0x3f => 0x989,
    0x40 => 0x989,
    0x41 => 0x989,
    0x42 => 0x989,
    0x43 => 0x989,
    0x44 => 0x989,
    0x45 => 0x989,
    0x46 => 0x989,
    0x47 => 0x989,
    0x48 => 0x989,
    0x49 => 0x989,
    0x4a => 0x989,
    0x4b => 0x989,
    0x4c => 0x989,
    0x4d => 0x989,
    0x4e => 0x989,
    0x4f => 0x989,
    0x50 => 0x989,
    0x51 => 0x989,
    0x52 => 0x989,
    0x53 => 0x989,
    0x54 => 0x989,
    0x55 => 0x989,
    0x56 => 0x989,
    0x57 => 0x989,
    0x58 => 0x989,
    0x59 => 0x989,
    0x5a => 0x989,
    0x5b => 0x989,
    0x5c => 0x989,
    0x5d => 0x989,
    0x5e => 0x989,
    0x5f => 0x989,
    0x60 => 0x989,
    0x61 => 0x989,
    0x62 => 0x989,
    0x63 => 0x989,
    0x64 => 0x989,
    0x65 => 0x989,
    0x66 => 0x989,
    0x67 => 0x989,
    0x68 => 0x989,
    0x69 => 0x989,
    0x6a => 0x989,
    0x6b => 0x989,
    0x6c => 0x989,
    0x6d => 0x989,
    0x6e => 0x989,
    0x6f => 0x989,
    0x70 => 0x989,
    0x71 => 0x989,
    0x72 => 0x989,
    0x73 => 0x989,
    0x74 => 0x989,
    0x75 => 0x989,
    0x76 => 0x989,
    0x77 => 0x989,
    0x78 => 0x989,
    0x79 => 0x989,
    0x7a => 0x989,
    0x7b => 0x989,
    0x7c => 0x989,
    0x7d => 0x989,
    0x7e => 0x989,
    0x7f => 0x989,
    0x80 => 0x989,
    0x81 => 0x989,
    0x82 => 0x989,
    0x83 => 0x989,
    0x84 => 0x989,
    0x85 => 0x989,
    0x86 => 0x989,
    0x87 => 0x989,
    0x88 => 0x989,
    0x89 => 0x989,
    0x8a => 0x989,
    0x8b => 0x989,
    0x8c => 0x989,
    0x8d => 0x989,
    0x8e => 0x989,
    0x8f => 0x989,
    0x90 => 0x989,
    0x91 => 0x989,
    0x92 => 0x989,
    0x93 => 0x989,
    0x94 => 0x989,
    0x95 => 0x989,
    0x96 => 0x989,
    0x97 => 0x989,
    0x98 => 0x989,
    0x99 => 0x989,
    0x9a => 0x989,
    0x9b => 0x989,
    0x9c => 0x989,
    0x9d => 0x989,
    0x9e => 0x989,
    0x9f => 0x989,
    0xa0 => 0x989,
    0xa1 => 0x989,
    0xa2 => 0x989,
    0xa3 => 0x989,
    0xa4 => 0x989,
    0xa5 => 0x989,
    0xa6 => 0x989,
    0xa7 => 0x989,
    0xa8 => 0x989,
    0xa9 => 0x989,
    0xaa => 0x989,
    0xab => 0x989,
    0xac => 0x989,
    0xad => 0x989,
    0xae => 0x989,
    0xaf => 0x989,
    0xb0 => 0x989,
    0xb1 => 0x989,
    0xb2 => 0x989,
    0xb3 => 0x989,
    0xb4 => 0x989,
    0xb5 => 0x989,
    0xb6 => 0x989,
    0xb7 => 0x989,
    0xb8 => 0x989,
    0xb9 => 0x989,
    0xba => 0x989,
    0xbb => 0x989,
    0xbc => 0x989,
    0xbd => 0x989,
    0xbe => 0x989,
    0xbf => 0x989,
    0xc0 => 0x989,
    0xc1 => 0x989,
    0xc2 => 0x989,
    0xc3 => 0x989,
    0xc4 => 0x989,
    0xc5 => 0x989,
    0xc6 => 0x989,
    0xc7 => 0x989,
    0xc8 => 0x989,
    0xc9 => 0x989,
    0xca => 0x989,
    0xcb => 0x989,
    0xcc => 0x989,
    0xcd => 0x989,
    0xce => 0x989,
    0xcf => 0x989,
    0xd0 => 0x989,
    0xd1 => 0x989,
    0xd2 => 0x989,
    0xd3 => 0x989,
    0xd4 => 0x989,
    0xd5 => 0x989,
    0xd6 => 0x989,
    0xd7 => 0x989,
    0xd8 => 0x989,
    0xd9 => 0x989,
    0xda => 0x989,
    0xdb => 0x989,
    0xdc => 0x989,
    0xdd => 0x989,
    0xde => 0x989,
    0xdf => 0x989,
    0xe0 => 0x989,
    0xe1 => 0x989,
    0xe2 => 0x989,
    0xe3 => 0x989,
    0xe4 => 0x989,
    0xe5 => 0x989,
    0xe6 => 0x989,
    0xe7 => 0x989,
    0xe8 => 0x989,
    0xe9 => 0x989,
    0xea => 0x989,
    0xeb => 0x989,
    0xec => 0x989,
    0xed => 0x989,
    0xee => 0x989,
    0xef => 0x989,
    0xf0 => 0x989,
    0xf1 => 0x989,
    0xf2 => 0x989,
    0xf3 => 0x989,
    0xf4 => 0x989,
    0xf5 => 0x989,
    0xf6 => 0x989,
    0xf7 => 0x989,
    0xf8 => 0x989,
    0xf9 => 0x989,
    0xfa => 0x989,
    0xfb => 0x989,
    0xfc => 0x989,
    0xfd => 0x989,
    0xfe => 0x989,
    0xff => 0x989,
    0x100 => 0x989,
    0x101 => 0x989,
    0x102 => 0x989,
    0x103 => 0x989,
    0x104 => 0x989,
    0x105 => 0x989,
    0x106 => 0x989,
    0x107 => 0x989,
    0x108 => 0x989,
    0x109 => 0x989,
    0x10a => 0x989,
    0x10b => 0x989,
    0x10c => 0x989,
    0x10d => 0x989,
    0x10e => 0x989,
    0x10f => 0x989,
    0x110 => 0x989,
    0x111 => 0x989,
    0x112 => 0x989,
    0x113 => 0x989,
    0x114 => 0x989,
    0x115 => 0x989,
    0x116 => 0x989,
    0x117 => 0x989,
    0x118 => 0x989,
    0x119 => 0x989,
    0x11a => 0x989,
    0x11b => 0x989,
    0x11c => 0x989,
    0x11d => 0x989,
    0x11e => 0x989,
    0x11f => 0x989,
    0x120 => 0x989,
    0x121 => 0x989,
    0x122 => 0x989,
    0x123 => 0x989,
    0x124 => 0x989,
    0x125 => 0x989,
    0x126 => 0x989,
    0x127 => 0x989,
    0x128 => 0x989,
    0x129 => 0x989,
    0x12a => 0x989,
    0x12b => 0x989,
    0x12c => 0x989,
    0x12d => 0x989,
    0x12e => 0x989,
    0x12f => 0x989,
    0x130 => 0x989,
    0x131 => 0x989,
    0x132 => 0x989,
    0x133 => 0x989,
    0x134 => 0x989,
    0x135 => 0x989,
    0x136 => 0x989,
    0x137 => 0x989,
    0x138 => 0x989,
    0x139 => 0x989,
    0x13a => 0x989,
    0x13b => 0x989,
    0x13c => 0x989,
    0x13d => 0x989,
    0x13e => 0x989,
    0x13f => 0x989,
    0x140 => 0x989,
    0x141 => 0x989,
    0x142 => 0x989,
    0x143 => 0x989,
    0x144 => 0x989,
    0x145 => 0x989,
    0x146 => 0x989,
    0x147 => 0x989,
    0x148 => 0x989,
    0x149 => 0x989,
    0x14a => 0x989,
    0x14b => 0x989,
    0x14c => 0x989,
    0x14d => 0x989,
    0x14e => 0x989,
    0x14f => 0x989,
    0x150 => 0x989,
    0x151 => 0x989,
    0x152 => 0x989,
    0x153 => 0x989,
    0x154 => 0x989,
    0x155 => 0x989,
    0x156 => 0x989,
    0x157 => 0x989,
    0x158 => 0x989,
    0x159 => 0x989,
    0x15a => 0x989,
    0x15b => 0x989,
    0x15c => 0x989,
    0x15d => 0x989,
    0x15e => 0x989,
    0x15f => 0x989,
    0x160 => 0x989,
    0x161 => 0x989,
    0x162 => 0x989,
    0x163 => 0x989,
    0x164 => 0x989,
    0x165 => 0x989,
    0x166 => 0x989,
    0x167 => 0x989,
    0x168 => 0x989,
    0x169 => 0x989,
    0x16a => 0x989,
    0x16b => 0x989,
    0x16c => 0x989,
    0x16d => 0x989,
    0x16e => 0x989,
    0x16f => 0x989,
    0x170 => 0x989,
    0x171 => 0x989,
    0x172 => 0x989,
    0x173 => 0x989,
    0x174 => 0x989,
    0x175 => 0x989,
    0x176 => 0x989,
    0x177 => 0x989,
    0x178 => 0x989,
    0x179 => 0x989,
    0x17a => 0x989,
    0x17b => 0x989,
    0x17c => 0x989,
    0x17d => 0x989,
    0x17e => 0x989,
    0x17f => 0x989,
    0x180 => 0x989,
    0x181 => 0x989,
    0x182 => 0x989,
    0x183 => 0x989,
    0x184 => 0x989,
    0x185 => 0x989,
    0x186 => 0x989,
    0x187 => 0x989,
    0x188 => 0x989,
    0x189 => 0x989,
    0x18a => 0x989,
    0x18b => 0x989,
    0x18c => 0x989,
    0x18d => 0x989,
    0x18e => 0x989,
    0x18f => 0x989,
    0x190 => 0x989,
    0x191 => 0x989,
    0x192 => 0x989,
    0x193 => 0x989,
    0x194 => 0x989,
    0x195 => 0x989,
    0x196 => 0x989,
    0x197 => 0x989,
    0x198 => 0x989,
    0x199 => 0x989,
    0x19a => 0x989,
    0x19b => 0x989,
    0x19c => 0x989,
    0x19d => 0x989,
    0x19e => 0x989,
    0x19f => 0x989,
    0x1a0 => 0x989,
    0x1a1 => 0x989,
    0x1a2 => 0x989,
    0x1a3 => 0x989,
    0x1a4 => 0x989,
    0x1a5 => 0x989,
    0x1a6 => 0x989,
    0x1a7 => 0x989,
    0x1a8 => 0x989,
    0x1a9 => 0x989,
    0x1aa => 0x989,
    0x1ab => 0x989,
    0x1ac => 0x989,
    0x1ad => 0x989,
    0x1ae => 0x989,
    0x1af => 0x989,
    0x1b0 => 0x989,
    0x1b1 => 0x989,
    0x1b2 => 0x989,
    0x1b3 => 0x989,
    0x1b4 => 0x989,
    0x1b5 => 0x989,
    0x1b6 => 0x989,
    0x1b7 => 0x989,
    0x1b8 => 0x989,
    0x1b9 => 0x989,
    0x1ba => 0x989,
    0x1bb => 0x989,
    0x1bc => 0x989,
    0x1bd => 0x989,
    0x1be => 0x989,
    0x1bf => 0x989,
    0x1c0 => 0x989,
    0x1c1 => 0x989,
    0x1c2 => 0x989,
    0x1c3 => 0x989,
    0x1c4 => 0x989,
    0x1c5 => 0x989,
    0x1c6 => 0x989,
    0x1c7 => 0x989,
    0x1c8 => 0x989,
    0x1c9 => 0x989,
    0x1ca => 0x989,
    0x1cb => 0x989,
    0x1cc => 0x989,
    0x1cd => 0x989,
    0x1ce => 0x989,
    0x1cf => 0x989,
    0x1d0 => 0x989,
    0x1d1 => 0x989,
    0x1d2 => 0x989,
    0x1d3 => 0x989,
    0x1d4 => 0x989,
    0x1d5 => 0x989,
    0x1d6 => 0x989,
    0x1d7 => 0x989,
    0x1d8 => 0x989,
    0x1d9 => 0x989,
    0x1da => 0x989,
    0x1db => 0x989,
    0x1dc => 0x989,
    0x1dd => 0x989,
    0x1de => 0x989,
    0x1df => 0x989,
    0x1e0 => 0x989,
    0x1e1 => 0x989,
    0x1e2 => 0x989,
    0x1e3 => 0x989,
    0x1e4 => 0x989,
    0x1e5 => 0x989,
    0x1e6 => 0x989,
    0x1e7 => 0x989,
    0x1e8 => 0x989,
    0x1e9 => 0x989,
    0x1ea => 0x989,
    0x1eb => 0x989,
    0x1ec => 0x989,
    0x1ed => 0x989,
    0x1ee => 0x989,
    0x1ef => 0x989,
    0x1f0 => 0x989,
    0x1f1 => 0x989,
    0x1f2 => 0x989,
    0x1f3 => 0x989,
    0x1f4 => 0x989,
    0x1f5 => 0x989,
    0x1f6 => 0x989,
    0x1f7 => 0x989,
    0x1f8 => 0x989,
    0x1f9 => 0x989,
    0x1fa => 0x989,
    0x1fb => 0x989,
    0x1fc => 0x989,
    0x1fd => 0x989,
    0x1fe => 0x989,
    0x1ff => 0x989,
    0x200 => 0x989,
    0x201 => 0x989,
    0x202 => 0x989,
    0x203 => 0x989,
    0x204 => 0x989,
    0x205 => 0x989,
    0x206 => 0x989,
    0x207 => 0x989,
    0x208 => 0x989,
    0x209 => 0x989,
    0x20a => 0x989,
    0x20b => 0x989,
    0x20c => 0x989,
    0x20d => 0x989,
    0x20e => 0x989,
    0x20f => 0x989,
    0x210 => 0x989,
    0x211 => 0x989,
    0x212 => 0x989,
    0x213 => 0x989,
    0x214 => 0x989,
    0x215 => 0x989,
    0x216 => 0x989,
    0x217 => 0x989,
    0x218 => 0x989,
    0x219 => 0x989,
    0x21a => 0x989,
    0x21b => 0x989,
    0x21c => 0x989,
    0x21d => 0x989,
    0x21e => 0x989,
    0x21f => 0x989,
    0x220 => 0x989,
    0x221 => 0x989,
    0x222 => 0x989,
    0x223 => 0x989,
    0x224 => 0x989,
    0x225 => 0x989,
    0x226 => 0x989,
    0x227 => 0x989,
    0x228 => 0x989,
    0x229 => 0x989,
    0x22a => 0x989,
    0x22b => 0x989,
    0x22c => 0x989,
    0x22d => 0x989,
    0x22e => 0x989,
    0x22f => 0x989,
    0x230 => 0x989,
    0x231 => 0x989,
    0x232 => 0x989,
    0x233 => 0x989,
    0x234 => 0x989,
    0x235 => 0x989,
    0x236 => 0x989,
    0x237 => 0x989,
    0x238 => 0x989,
    0x239 => 0x989,
    0x23a => 0x989,
    0x23b => 0x989,
    0x23c => 0x989,
    0x23d => 0x989,
    0x23e => 0x989,
    0x23f => 0x989,
    0x240 => 0x989,
    0x241 => 0x989,
    0x242 => 0x989,
    0x243 => 0x989,
    0x244 => 0x989,
    0x245 => 0x989,
    0x246 => 0x989,
    0x247 => 0x989,
    0x248 => 0x989,
    0x249 => 0x989,
    0x24a => 0x989,
    0x24b => 0x989,
    0x24c => 0x989,
    0x24d => 0x989,
    0x24e => 0x989,
    0x24f => 0x989,
    0x250 => 0x989,
    0x251 => 0x989,
    0x252 => 0x989,
    0x253 => 0x989,
    0x254 => 0x989,
    0x255 => 0x989,
    0x256 => 0x989,
    0x257 => 0x989,
    0x258 => 0x989,
    0x259 => 0x989,
    0x25a => 0x989,
    0x25b => 0x989,
    0x25c => 0x989,
    0x25d => 0x989,
    0x25e => 0x989,
    0x25f => 0x989,
    0x260 => 0x989,
    0x261 => 0x989,
    0x262 => 0x989,
    0x263 => 0x989,
    0x264 => 0x989,
    0x265 => 0x989,
    0x266 => 0x989,
    0x267 => 0x989,
    0x268 => 0x989,
    0x269 => 0x989,
    0x26a => 0x989,
    0x26b => 0x989,
    0x26c => 0x989,
    0x26d => 0x989,
    0x26e => 0x989,
    0x26f => 0x989,
    0x270 => 0x989,
    0x271 => 0x989,
    0x272 => 0x989,
    0x273 => 0x989,
    0x274 => 0x989,
    0x275 => 0x989,
    0x276 => 0x989,
    0x277 => 0x989,
    0x278 => 0x989,
    0x279 => 0x989,
    0x27a => 0x989,
    0x27b => 0x989,
    0x27c => 0x989,
    0x27d => 0x989,
    0x27e => 0x989,
    0x27f => 0x989,
    0x280 => 0x989,
    0x281 => 0x989,
    0x282 => 0x989,
    0x283 => 0x989,
    0x284 => 0x989,
    0x285 => 0x989,
    0x286 => 0x989,
    0x287 => 0x989,
    0x288 => 0x989,
    0x289 => 0x989,
    0x28a => 0x989,
    0x28b => 0x989,
    0x28c => 0x989,
    0x28d => 0x989,
    0x28e => 0x989,
    0x28f => 0x989,
    0x290 => 0x989,
    0x291 => 0x989,
    0x292 => 0x989,
    0x293 => 0x989,
    0x294 => 0x989,
    0x295 => 0x989,
    0x296 => 0x989,
    0x297 => 0x989,
    0x298 => 0x989,
    0x299 => 0x989,
    0x29a => 0x989,
    0x29b => 0x989,
    0x29c => 0x989,
    0x29d => 0x989,
    0x29e => 0x989,
    0x29f => 0x989,
    0x2a0 => 0x989,
    0x2a1 => 0x989,
    0x2a2 => 0x989,
    0x2a3 => 0x989,
    0x2a4 => 0x989,
    0x2a5 => 0x989,
    0x2a6 => 0x989,
    0x2a7 => 0x989,
    0x2a8 => 0x989,
    0x2a9 => 0x989,
    0x2aa => 0x989,
    0x2ab => 0x989,
    0x2ac => 0x989,
    0x2ad => 0x989,
    0x2ae => 0x989,
    0x2af => 0x989,
    0x2b0 => 0x989,
    0x2b1 => 0x989,
    0x2b2 => 0x989,
    0x2b3 => 0x989,
    0x2b4 => 0x989,
    0x2b5 => 0x989,
    0x2b6 => 0x989,
    0x2b7 => 0x989,
    0x2b8 => 0x989,
    0x2b9 => 0x989,
    0x2ba => 0x989,
    0x2bb => 0x989,
    0x2bc => 0x989,
    0x2bd => 0x989,
    0x2be => 0x989,
    0x2bf => 0x989,
    0x2c0 => 0x989,
    0x2c1 => 0x989,
    0x2c2 => 0x989,
    0x2c3 => 0x989,
    0x2c4 => 0x989,
    0x2c5 => 0x989,
    0x2c6 => 0x989,
    0x2c7 => 0x989,
    0x2c8 => 0x989,
    0x2c9 => 0x989,
    0x2ca => 0x989,
    0x2cb => 0x989,
    0x2cc => 0x989,
    0x2cd => 0x989,
    0x2ce => 0x989,
    0x2cf => 0x989,
    0x2d0 => 0x989,
    0x2d1 => 0x989,
    0x2d2 => 0x989,
    0x2d3 => 0x989,
    0x2d4 => 0x989,
    0x2d5 => 0x989,
    0x2d6 => 0x989,
    0x2d7 => 0x989,
    0x2d8 => 0x989,
    0x2d9 => 0x989,
    0x2da => 0x989,
    0x2db => 0x989,
    0x2dc => 0x989,
    0x2dd => 0x989,
    0x2de => 0x989,
    0x2df => 0x989,
    0x2e0 => 0x989,
    0x2e1 => 0x989,
    0x2e2 => 0x989,
    0x2e3 => 0x989,
    0x2e4 => 0x989,
    0x2e5 => 0x989,
    0x2e6 => 0x989,
    0x2e7 => 0x989,
    0x2e8 => 0x989,
    0x2e9 => 0x989,
    0x2ea => 0x989,
    0x2eb => 0x989,
    0x2ec => 0x989,
    0x2ed => 0x989,
    0x2ee => 0x989,
    0x2ef => 0x989,
    0x2f0 => 0x989,
    0x2f1 => 0x989,
    0x2f2 => 0x989,
    0x2f3 => 0x989,
    0x2f4 => 0x989,
    0x2f5 => 0x989,
    0x2f6 => 0x989,
    0x2f7 => 0x989,
    0x2f8 => 0x989,
    0x2f9 => 0x989,
    0x2fa => 0x989,
    0x2fb => 0x989,
    0x2fc => 0x989,
    0x2fd => 0x989,
    0x2fe => 0x989,
    0x2ff => 0x989,
    0x300 => 0x989,
    0x301 => 0x989,
    0x302 => 0x989,
    0x303 => 0x989,
    0x304 => 0x989,
    0x305 => 0x989,
    0x306 => 0x989,
    0x307 => 0x989,
    0x308 => 0x989,
    0x309 => 0x989,
    0x30a => 0x989,
    0x30b => 0x989,
    0x30c => 0x989,
    0x30d => 0x989,
    0x30e => 0x989,
    0x30f => 0x989,
    0x310 => 0x989,
    0x311 => 0x989,
    0x312 => 0x989,
    0x313 => 0x989,
    0x314 => 0x989,
    0x315 => 0x989,
    0x316 => 0x989,
    0x317 => 0x989,
    0x318 => 0x989,
    0x319 => 0x989,
    0x31a => 0x989,
    0x31b => 0x989,
    0x31c => 0x989,
    0x31d => 0x989,
    0x31e => 0x989,
    0x31f => 0x989,
    0x320 => 0x989,
    0x321 => 0x989,
    0x322 => 0x989,
    0x323 => 0x989,
    0x324 => 0x989,
    0x325 => 0x989,
    0x326 => 0x989,
    0x327 => 0x989,
    0x328 => 0x989,
    0x329 => 0x989,
    0x32a => 0x989,
    0x32b => 0x989,
    0x32c => 0x989,
    0x32d => 0x989,
    0x32e => 0x989,
    0x32f => 0x989,
    0x330 => 0x989,
    0x331 => 0x989,
    0x332 => 0x989,
    0x333 => 0x989,
    0x334 => 0x989,
    0x335 => 0x989,
    0x336 => 0x989,
    0x337 => 0x989,
    0x338 => 0x989,
    0x339 => 0x989,
    0x33a => 0x989,
    0x33b => 0x989,
    0x33c => 0x989,
    0x33d => 0x989,
    0x33e => 0x989,
    0x33f => 0x989,
    0x340 => 0x989,
    0x341 => 0x989,
    0x342 => 0x989,
    0x343 => 0x989,
    0x344 => 0x989,
    0x345 => 0x989,
    0x346 => 0x989,
    0x347 => 0x989,
    0x348 => 0x989,
    0x349 => 0x989,
    0x34a => 0x989,
    0x34b => 0x989,
    0x34c => 0x989,
    0x34d => 0x989,
    0x34e => 0x989,
    0x34f => 0x989,
    0x350 => 0x989,
    0x351 => 0x989,
    0x352 => 0x989,
    0x353 => 0x989,
    0x354 => 0x989,
    0x355 => 0x989,
    0x356 => 0x989,
    0x357 => 0x989,
    0x358 => 0x989,
    0x359 => 0x989,
    0x35a => 0x989,
    0x35b => 0x989,
    0x35c => 0x989,
    0x35d => 0x989,
    0x35e => 0x989,
    0x35f => 0x989,
    0x360 => 0x989,
    0x361 => 0x989,
    0x362 => 0x989,
    0x363 => 0x989,
    0x364 => 0x989,
    0x365 => 0x989,
    0x366 => 0x989,
    0x367 => 0x989,
    0x368 => 0x989,
    0x369 => 0x989,
    0x36a => 0x989,
    0x36b => 0x989,
    0x36c => 0x989,
    0x36d => 0x989,
    0x36e => 0x989,
    0x36f => 0x989,
    0x370 => 0x989,
    0x371 => 0x989,
    0x372 => 0x989,
    0x373 => 0x989,
    0x374 => 0x989,
    0x375 => 0x989,
    0x376 => 0x989,
    0x377 => 0x989,
    0x378 => 0x989,
    0x379 => 0x989,
    0x37a => 0x989,
    0x37b => 0x989,
    0x37c => 0x989,
    0x37d => 0x989,
    0x37e => 0x989,
    0x37f => 0x989,
    0x380 => 0x989,
    0x381 => 0x989,
    0x382 => 0x989,
    0x383 => 0x989,
    0x384 => 0x989,
    0x385 => 0x989,
    0x386 => 0x989,
    0x387 => 0x989,
    0x388 => 0x989,
    0x389 => 0x989,
    0x38a => 0x989,
    0x38b => 0x989,
    0x38c => 0x989,
    0x38d => 0x989,
    0x38e => 0x989,
    0x38f => 0x989,
    0x390 => 0x989,
    0x391 => 0x989,
    0x392 => 0x989,
    0x393 => 0x989,
    0x394 => 0x989,
    0x395 => 0x989,
    0x396 => 0x989,
    0x397 => 0x989,
    0x398 => 0x989,
    0x399 => 0x989,
    0x39a => 0x989,
    0x39b => 0x989,
    0x39c => 0x989,
    0x39d => 0x989,
    0x39e => 0x989,
    0x39f => 0x989,
    0x3a0 => 0x989,
    0x3a1 => 0x989,
    0x3a2 => 0x989,
    0x3a3 => 0x989,
    0x3a4 => 0x989,
    0x3a5 => 0x989,
    0x3a6 => 0x989,
    0x3a7 => 0x989,
    0x3a8 => 0x989,
    0x3a9 => 0x989,
    0x3aa => 0x989,
    0x3ab => 0x989,
    0x3ac => 0x989,
    0x3ad => 0x989,
    0x3ae => 0x989,
    0x3af => 0x989,
    0x3b0 => 0x989,
    0x3b1 => 0x989,
    0x3b2 => 0x989,
    0x3b3 => 0x989,
    0x3b4 => 0x989,
    0x3b5 => 0x989,
    0x3b6 => 0x989,
    0x3b7 => 0x989,
    0x3b8 => 0x989,
    0x3b9 => 0x989,
    0x3ba => 0x989,
    0x3bb => 0x989,
    0x3bc => 0x989,
    0x3bd => 0x989,
    0x3be => 0x989,
    0x3bf => 0x989,
    0x3c0 => 0x989,
    0x3c1 => 0x989,
    0x3c2 => 0x989,
    0x3c3 => 0x989,
    0x3c4 => 0x989,
    0x3c5 => 0x989,
    0x3c6 => 0x989,
    0x3c7 => 0x989,
    0x3c8 => 0x989,
    0x3c9 => 0x989,
    0x3ca => 0x989,
    0x3cb => 0x989,
    0x3cc => 0x989,
    0x3cd => 0x989,
    0x3ce => 0x989,
    0x3cf => 0x989,
    0x3d0 => 0x989,
    0x3d1 => 0x989,
    0x3d2 => 0x989,
    0x3d3 => 0x989,
    0x3d4 => 0x989,
    0x3d5 => 0x989,
    0x3d6 => 0x989,
    0x3d7 => 0x989,
    0x3d8 => 0x989,
    0x3d9 => 0x989,
    0x3da => 0x989,
    0x3db => 0x989,
    0x3dc => 0x989,
    0x3dd => 0x989,
    0x3de => 0x989,
    0x3df => 0x989,
    0x3e0 => 0x989,
    0x3e1 => 0x989,
    0x3e2 => 0x989,
    0x3e3 => 0x989,
    0x3e4 => 0x989,
    0x3e5 => 0x989,
    0x3e6 => 0x989,
    0x3e7 => 0x989,
    0x3e8 => 0x989,
    0x3e9 => 0x989,
    0x3ea => 0x989,
    0x3eb => 0x989,
    0x3ec => 0x989,
    0x3ed => 0x989,
    0x3ee => 0x989,
    0x3ef => 0x989,
    0x3f0 => 0x989,
    0x3f1 => 0x989,
    0x3f2 => 0x989,
    0x3f3 => 0x989,
    0x3f4 => 0x989,
    0x3f5 => 0x989,
    0x3f6 => 0x989,
    0x3f7 => 0x989,
    0x3f8 => 0x989,
    0x3f9 => 0x989,
    0x3fa => 0x989,
    0x3fb => 0x989,
    0x3fc => 0x989,
    0x3fd => 0x989,
    0x3fe => 0x989,
    0x3ff => 0x989,
    0x400 => 0x98a,
    0x401 => 0x98a,
    0x402 => 0x98a,
    0x403 => 0x98a,
    0x404 => 0x98a,
    0x405 => 0x98a,
    0x406 => 0x98a,
    0x407 => 0x98a,
    0x408 => 0x98a,
    0x409 => 0x98a,
    0x40a => 0x98a,
    0x40b => 0x98a,
    0x40c => 0x98a,
    0x40d => 0x98a,
    0x40e => 0x98a,
    0x40f => 0x98a,
    0x410 => 0x98a,
    0x411 => 0x98a,
    0x412 => 0x98a,
    0x413 => 0x98a,
    0x414 => 0x98a,
    0x415 => 0x98a,
    0x416 => 0x98a,
    0x417 => 0x98a,
    0x418 => 0x98a,
    0x419 => 0x98a,
    0x41a => 0x98a,
    0x41b => 0x98a,
    0x41c => 0x98a,
    0x41d => 0x98a,
    0x41e => 0x98a,
    0x41f => 0x98a,
    0x420 => 0x98a,
    0x421 => 0x98a,
    0x422 => 0x98a,
    0x423 => 0x98a,
    0x424 => 0x98a,
    0x425 => 0x98a,
    0x426 => 0x98a,
    0x427 => 0x98a,
    0x428 => 0x98a,
    0x429 => 0x98a,
    0x42a => 0x98a,
    0x42b => 0x98a,
    0x42c => 0x98a,
    0x42d => 0x98a,
    0x42e => 0x98a,
    0x42f => 0x98a,
    0x430 => 0x98a,
    0x431 => 0x98a,
    0x432 => 0x98a,
    0x433 => 0x98a,
    0x434 => 0x98a,
    0x435 => 0x98a,
    0x436 => 0x98a,
    0x437 => 0x98a,
    0x438 => 0x98a,
    0x439 => 0x98a,
    0x43a => 0x98a,
    0x43b => 0x98a,
    0x43c => 0x98a,
    0x43d => 0x98a,
    0x43e => 0x98a,
    0x43f => 0x98a,
    0x440 => 0x98a,
    0x441 => 0x98a,
    0x442 => 0x98a,
    0x443 => 0x98a,
    0x444 => 0x98a,
    0x445 => 0x98a,
    0x446 => 0x98a,
    0x447 => 0x98a,
    0x448 => 0x98a,
    0x449 => 0x98a,
    0x44a => 0x98a,
    0x44b => 0x98a,
    0x44c => 0x98a,
    0x44d => 0x98a,
    0x44e => 0x98a,
    0x44f => 0x98a,
    0x450 => 0x98a,
    0x451 => 0x98a,
    0x452 => 0x98a,
    0x453 => 0x98a,
    0x454 => 0x98a,
    0x455 => 0x98a,
    0x456 => 0x98a,
    0x457 => 0x98a,
    0x458 => 0x98a,
    0x459 => 0x98a,
    0x45a => 0x98a,
    0x45b => 0x98a,
    0x45c => 0x98a,
    0x45d => 0x98a,
    0x45e => 0x98a,
    0x45f => 0x98a,
    0x460 => 0x98a,
    0x461 => 0x98a,
    0x462 => 0x98a,
    0x463 => 0x98a,
    0x464 => 0x98a,
    0x465 => 0x98a,
    0x466 => 0x98a,
    0x467 => 0x98a,
    0x468 => 0x98a,
    0x469 => 0x98a,
    0x46a => 0x98a,
    0x46b => 0x98a,
    0x46c => 0x98a,
    0x46d => 0x98a,
    0x46e => 0x98a,
    0x46f => 0x98a,
    0x470 => 0x98a,
    0x471 => 0x98a,
    0x472 => 0x98a,
    0x473 => 0x98a,
    0x474 => 0x98a,
    0x475 => 0x98a,
    0x476 => 0x98a,
    0x477 => 0x98a,
    0x478 => 0x98a,
    0x479 => 0x98a,
    0x47a => 0x98a,
    0x47b => 0x98a,
    0x47c => 0x98a,
    0x47d => 0x98a,
    0x47e => 0x98a,
    0x47f => 0x98a,
    0x480 => 0x98a,
    0x481 => 0x98a,
    0x482 => 0x98a,
    0x483 => 0x98a,
    0x484 => 0x98a,
    0x485 => 0x98a,
    0x486 => 0x98a,
    0x487 => 0x98a,
    0x488 => 0x98a,
    0x489 => 0x98a,
    0x48a => 0x98a,
    0x48b => 0x98a,
    0x48c => 0x98a,
    0x48d => 0x98a,
    0x48e => 0x98a,
    0x48f => 0x98a,
    0x490 => 0x98a,
    0x491 => 0x98a,
    0x492 => 0x98a,
    0x493 => 0x98a,
    0x494 => 0x98a,
    0x495 => 0x98a,
    0x496 => 0x98a,
    0x497 => 0x98a,
    0x498 => 0x98a,
    0x499 => 0x98a,
    0x49a => 0x98a,
    0x49b => 0x98a,
    0x49c => 0x98a,
    0x49d => 0x98a,
    0x49e => 0x98a,
    0x49f => 0x98a,
    0x4a0 => 0x98a,
    0x4a1 => 0x98a,
    0x4a2 => 0x98a,
    0x4a3 => 0x98a,
    0x4a4 => 0x98a,
    0x4a5 => 0x98a,
    0x4a6 => 0x98a,
    0x4a7 => 0x98a,
    0x4a8 => 0x98a,
    0x4a9 => 0x98a,
    0x4aa => 0x98a,
    0x4ab => 0x98a,
    0x4ac => 0x98a,
    0x4ad => 0x98a,
    0x4ae => 0x98a,
    0x4af => 0x98a,
    0x4b0 => 0x98a,
    0x4b1 => 0x98a,
    0x4b2 => 0x98a,
    0x4b3 => 0x98a,
    0x4b4 => 0x98a,
    0x4b5 => 0x98a,
    0x4b6 => 0x98a,
    0x4b7 => 0x98a,
    0x4b8 => 0x98a,
    0x4b9 => 0x98a,
    0x4ba => 0x98a,
    0x4bb => 0x98a,
    0x4bc => 0x98a,
    0x4bd => 0x98a,
    0x4be => 0x98a,
    0x4bf => 0x98a,
    0x4c0 => 0x98a,
    0x4c1 => 0x98a,
    0x4c2 => 0x98a,
    0x4c3 => 0x98a,
    0x4c4 => 0x98a,
    0x4c5 => 0x98a,
    0x4c6 => 0x98a,
    0x4c7 => 0x98a,
    0x4c8 => 0x98a,
    0x4c9 => 0x98a,
    0x4ca => 0x98a,
    0x4cb => 0x98a,
    0x4cc => 0x98a,
    0x4cd => 0x98a,
    0x4ce => 0x98a,
    0x4cf => 0x98a,
    0x4d0 => 0x98a,
    0x4d1 => 0x98a,
    0x4d2 => 0x98a,
    0x4d3 => 0x98a,
    0x4d4 => 0x98a,
    0x4d5 => 0x98a,
    0x4d6 => 0x98a,
    0x4d7 => 0x98a,
    0x4d8 => 0x98a,
    0x4d9 => 0x98a,
    0x4da => 0x98a,
    0x4db => 0x98a,
    0x4dc => 0x98a,
    0x4dd => 0x98a,
    0x4de => 0x98a,
    0x4df => 0x98a,
    0x4e0 => 0x98a,
    0x4e1 => 0x98a,
    0x4e2 => 0x98a,
    0x4e3 => 0x98a,
    0x4e4 => 0x98a,
    0x4e5 => 0x98a,
    0x4e6 => 0x98a,
    0x4e7 => 0x98a,
    0x4e8 => 0x98a,
    0x4e9 => 0x98a,
    0x4ea => 0x98a,
    0x4eb => 0x98a,
    0x4ec => 0x98a,
    0x4ed => 0x98a,
    0x4ee => 0x98a,
    0x4ef => 0x98a,
    0x4f0 => 0x98a,
    0x4f1 => 0x98a,
    0x4f2 => 0x98a,
    0x4f3 => 0x98a,
    0x4f4 => 0x98a,
    0x4f5 => 0x98a,
    0x4f6 => 0x98a,
    0x4f7 => 0x98a,
    0x4f8 => 0x98a,
    0x4f9 => 0x98a,
    0x4fa => 0x98a,
    0x4fb => 0x98a,
    0x4fc => 0x98a,
    0x4fd => 0x98a,
    0x4fe => 0x98a,
    0x4ff => 0x98a,
    0x500 => 0x98a,
    0x501 => 0x98a,
    0x502 => 0x98a,
    0x503 => 0x98a,
    0x504 => 0x98a,
    0x505 => 0x98a,
    0x506 => 0x98a,
    0x507 => 0x98a,
    0x508 => 0x98a,
    0x509 => 0x98a,
    0x50a => 0x98a,
    0x50b => 0x98a,
    0x50c => 0x98a,
    0x50d => 0x98a,
    0x50e => 0x98a,
    0x50f => 0x98a,
    0x510 => 0x98a,
    0x511 => 0x98a,
    0x512 => 0x98a,
    0x513 => 0x98a,
    0x514 => 0x98a,
    0x515 => 0x98a,
    0x516 => 0x98a,
    0x517 => 0x98a,
    0x518 => 0x98a,
    0x519 => 0x98a,
    0x51a => 0x98a,
    0x51b => 0x98a,
    0x51c => 0x98a,
    0x51d => 0x98a,
    0x51e => 0x98a,
    0x51f => 0x98a,
    0x520 => 0x98a,
    0x521 => 0x98a,
    0x522 => 0x98a,
    0x523 => 0x98a,
    0x524 => 0x98a,
    0x525 => 0x98a,
    0x526 => 0x98a,
    0x527 => 0x98a,
    0x528 => 0x98a,
    0x529 => 0x98a,
    0x52a => 0x98a,
    0x52b => 0x98a,
    0x52c => 0x98a,
    0x52d => 0x98a,
    0x52e => 0x98a,
    0x52f => 0x98a,
    0x530 => 0x98a,
    0x531 => 0x98a,
    0x532 => 0x98a,
    0x533 => 0x98a,
    0x534 => 0x98a,
    0x535 => 0x98a,
    0x536 => 0x98a,
    0x537 => 0x98a,
    0x538 => 0x98a,
    0x539 => 0x98a,
    0x53a => 0x98a,
    0x53b => 0x98a,
    0x53c => 0x98a,
    0x53d => 0x98a,
    0x53e => 0x98a,
    0x53f => 0x98a,
    0x540 => 0x98a,
    0x541 => 0x98a,
    0x542 => 0x98a,
    0x543 => 0x98a,
    0x544 => 0x98a,
    0x545 => 0x98a,
    0x546 => 0x98a,
    0x547 => 0x98a,
    0x548 => 0x98a,
    0x549 => 0x98a,
    0x54a => 0x98a,
    0x54b => 0x98a,
    0x54c => 0x98a,
    0x54d => 0x98a,
    0x54e => 0x98a,
    0x54f => 0x98a,
    0x550 => 0x98a,
    0x551 => 0x98a,
    0x552 => 0x98a,
    0x553 => 0x98a,
    0x554 => 0x98a,
    0x555 => 0x98a,
    0x556 => 0x98a,
    0x557 => 0x98a,
    0x558 => 0x98a,
    0x559 => 0x98a,
    0x55a => 0x98a,
    0x55b => 0x98a,
    0x55c => 0x98a,
    0x55d => 0x98a,
    0x55e => 0x98a,
    0x55f => 0x98a,
    0x560 => 0x98a,
    0x561 => 0x98a,
    0x562 => 0x98a,
    0x563 => 0x98a,
    0x564 => 0x98a,
    0x565 => 0x98a,
    0x566 => 0x98a,
    0x567 => 0x98a,
    0x568 => 0x98a,
    0x569 => 0x98a,
    0x56a => 0x98a,
    0x56b => 0x98a,
    0x56c => 0x98a,
    0x56d => 0x98a,
    0x56e => 0x98a,
    0x56f => 0x98a,
    0x570 => 0x98a,
    0x571 => 0x98a,
    0x572 => 0x98a,
    0x573 => 0x98a,
    0x574 => 0x98a,
    0x575 => 0x98a,
    0x576 => 0x98a,
    0x577 => 0x98a,
    0x578 => 0x98a,
    0x579 => 0x98a,
    0x57a => 0x98a,
    0x57b => 0x98a,
    0x57c => 0x98a,
    0x57d => 0x98a,
    0x57e => 0x98a,
    0x57f => 0x98a,
    0x580 => 0x98a,
    0x581 => 0x98a,
    0x582 => 0x98a,
    0x583 => 0x98a,
    0x584 => 0x98a,
    0x585 => 0x98a,
    0x586 => 0x98a,
    0x587 => 0x98a,
    0x588 => 0x98a,
    0x589 => 0x98a,
    0x58a => 0x98a,
    0x58b => 0x98a,
    0x58c => 0x98a,
    0x58d => 0x98a,
    0x58e => 0x98a,
    0x58f => 0x98a,
    0x590 => 0x98a,
    0x591 => 0x98a,
    0x592 => 0x98a,
    0x593 => 0x98a,
    0x594 => 0x98a,
    0x595 => 0x98a,
    0x596 => 0x98a,
    0x597 => 0x98a,
    0x598 => 0x98a,
    0x599 => 0x98a,
    0x59a => 0x98a,
    0x59b => 0x98a,
    0x59c => 0x98a,
    0x59d => 0x98a,
    0x59e => 0x98a,
    0x59f => 0x98a,
    0x5a0 => 0x98a,
    0x5a1 => 0x98a,
    0x5a2 => 0x98a,
    0x5a3 => 0x98a,
    0x5a4 => 0x98a,
    0x5a5 => 0x98a,
    0x5a6 => 0x98a,
    0x5a7 => 0x98a,
    0x5a8 => 0x98a,
    0x5a9 => 0x98a,
    0x5aa => 0x98a,
    0x5ab => 0x98a,
    0x5ac => 0x98a,
    0x5ad => 0x98a,
    0x5ae => 0x98a,
    0x5af => 0x98a,
    0x5b0 => 0x98a,
    0x5b1 => 0x98a,
    0x5b2 => 0x98a,
    0x5b3 => 0x98a,
    0x5b4 => 0x98a,
    0x5b5 => 0x98a,
    0x5b6 => 0x98a,
    0x5b7 => 0x98a,
    0x5b8 => 0x98a,
    0x5b9 => 0x98a,
    0x5ba => 0x98a,
    0x5bb => 0x98a,
    0x5bc => 0x98a,
    0x5bd => 0x98a,
    0x5be => 0x98a,
    0x5bf => 0x98a,
    0x5c0 => 0x98a,
    0x5c1 => 0x98a,
    0x5c2 => 0x98a,
    0x5c3 => 0x98a,
    0x5c4 => 0x98a,
    0x5c5 => 0x98a,
    0x5c6 => 0x98a,
    0x5c7 => 0x98a,
    0x5c8 => 0x98a,
    0x5c9 => 0x98a,
    0x5ca => 0x98a,
    0x5cb => 0x98a,
    0x5cc => 0x98a,
    0x5cd => 0x98a,
    0x5ce => 0x98a,
    0x5cf => 0x98a,
    0x5d0 => 0x98a,
    0x5d1 => 0x98a,
    0x5d2 => 0x98a,
    0x5d3 => 0x98a,
    0x5d4 => 0x98a,
    0x5d5 => 0x98a,
    0x5d6 => 0x98a,
    0x5d7 => 0x98a,
    0x5d8 => 0x98a,
    0x5d9 => 0x98a,
    0x5da => 0x98a,
    0x5db => 0x98a,
    0x5dc => 0x98a,
    0x5dd => 0x98a,
    0x5de => 0x98a,
    0x5df => 0x98a,
    0x5e0 => 0x98a,
    0x5e1 => 0x98a,
    0x5e2 => 0x98a,
    0x5e3 => 0x98a,
    0x5e4 => 0x98a,
    0x5e5 => 0x98a,
    0x5e6 => 0x98a,
    0x5e7 => 0x98a,
    0x5e8 => 0x98a,
    0x5e9 => 0x98a,
    0x5ea => 0x98a,
    0x5eb => 0x98a,
    0x5ec => 0x98a,
    0x5ed => 0x98a,
    0x5ee => 0x98a,
    0x5ef => 0x98a,
    0x5f0 => 0x98a,
    0x5f1 => 0x98a,
    0x5f2 => 0x98a,
    0x5f3 => 0x98a,
    0x5f4 => 0x98a,
    0x5f5 => 0x98a,
    0x5f6 => 0x98a,
    0x5f7 => 0x98a,
    0x5f8 => 0x98a,
    0x5f9 => 0x98a,
    0x5fa => 0x98a,
    0x5fb => 0x98a,
    0x5fc => 0x98a,
    0x5fd => 0x98a,
    0x5fe => 0x98a,
    0x5ff => 0x98a,
    0x600 => 0x98a,
    0x601 => 0x98a,
    0x602 => 0x98a,
    0x603 => 0x98a,
    0x604 => 0x98a,
    0x605 => 0x98a,
    0x606 => 0x98a,
    0x607 => 0x98a,
    0x608 => 0x98a,
    0x609 => 0x98a,
    0x60a => 0x98a,
    0x60b => 0x98a,
    0x60c => 0x98a,
    0x60d => 0x98a,
    0x60e => 0x98a,
    0x60f => 0x98a,
    0x610 => 0x98a,
    0x611 => 0x98a,
    0x612 => 0x98a,
    0x613 => 0x98a,
    0x614 => 0x98a,
    0x615 => 0x98a,
    0x616 => 0x98a,
    0x617 => 0x98a,
    0x618 => 0x98a,
    0x619 => 0x98a,
    0x61a => 0x98a,
    0x61b => 0x98a,
    0x61c => 0x98a,
    0x61d => 0x98a,
    0x61e => 0x98a,
    0x61f => 0x98a,
    0x620 => 0x98a,
    0x621 => 0x98a,
    0x622 => 0x98a,
    0x623 => 0x98a,
    0x624 => 0x98a,
    0x625 => 0x98a,
    0x626 => 0x98a,
    0x627 => 0x98a,
    0x628 => 0x98a,
    0x629 => 0x98a,
    0x62a => 0x98a,
    0x62b => 0x98a,
    0x62c => 0x98a,
    0x62d => 0x98a,
    0x62e => 0x98a,
    0x62f => 0x98a,
    0x630 => 0x98a,
    0x631 => 0x98a,
    0x632 => 0x98a,
    0x633 => 0x98a,
    0x634 => 0x98a,
    0x635 => 0x98a,
    0x636 => 0x98a,
    0x637 => 0x98a,
    0x638 => 0x98a,
    0x639 => 0x98a,
    0x63a => 0x98a,
    0x63b => 0x98a,
    0x63c => 0x98a,
    0x63d => 0x98a,
    0x63e => 0x98a,
    0x63f => 0x98a,
    0x640 => 0x98a,
    0x641 => 0x98a,
    0x642 => 0x98a,
    0x643 => 0x98a,
    0x644 => 0x98a,
    0x645 => 0x98a,
    0x646 => 0x98a,
    0x647 => 0x98a,
    0x648 => 0x98a,
    0x649 => 0x98a,
    0x64a => 0x98a,
    0x64b => 0x98a,
    0x64c => 0x98a,
    0x64d => 0x98a,
    0x64e => 0x98a,
    0x64f => 0x98a,
    0x650 => 0x98a,
    0x651 => 0x98a,
    0x652 => 0x98a,
    0x653 => 0x98a,
    0x654 => 0x98a,
    0x655 => 0x98a,
    0x656 => 0x98a,
    0x657 => 0x98a,
    0x658 => 0x98a,
    0x659 => 0x98a,
    0x65a => 0x98a,
    0x65b => 0x98a,
    0x65c => 0x98a,
    0x65d => 0x98a,
    0x65e => 0x98a,
    0x65f => 0x98a,
    0x660 => 0x98a,
    0x661 => 0x98a,
    0x662 => 0x98a,
    0x663 => 0x98a,
    0x664 => 0x98a,
    0x665 => 0x98a,
    0x666 => 0x98a,
    0x667 => 0x98a,
    0x668 => 0x98a,
    0x669 => 0x98a,
    0x66a => 0x98a,
    0x66b => 0x98a,
    0x66c => 0x98a,
    0x66d => 0x98a,
    0x66e => 0x98a,
    0x66f => 0x98a,
    0x670 => 0x98a,
    0x671 => 0x98a,
    0x672 => 0x98a,
    0x673 => 0x98a,
    0x674 => 0x98a,
    0x675 => 0x98a,
    0x676 => 0x98a,
    0x677 => 0x98a,
    0x678 => 0x98a,
    0x679 => 0x98a,
    0x67a => 0x98a,
    0x67b => 0x98a,
    0x67c => 0x98a,
    0x67d => 0x98a,
    0x67e => 0x98a,
    0x67f => 0x98a,
    0x680 => 0x98a,
    0x681 => 0x98a,
    0x682 => 0x98a,
    0x683 => 0x98a,
    0x684 => 0x98a,
    0x685 => 0x98a,
    0x686 => 0x98a,
    0x687 => 0x98a,
    0x688 => 0x98a,
    0x689 => 0x98a,
    0x68a => 0x98a,
    0x68b => 0x98a,
    0x68c => 0x98a,
    0x68d => 0x98a,
    0x68e => 0x98a,
    0x68f => 0x98a,
    0x690 => 0x98a,
    0x691 => 0x98a,
    0x692 => 0x98a,
    0x693 => 0x98a,
    0x694 => 0x98a,
    0x695 => 0x98a,
    0x696 => 0x98a,
    0x697 => 0x98a,
    0x698 => 0x98a,
    0x699 => 0x98a,
    0x69a => 0x98a,
    0x69b => 0x98a,
    0x69c => 0x98a,
    0x69d => 0x98a,
    0x69e => 0x98a,
    0x69f => 0x98a,
    0x6a0 => 0x98a,
    0x6a1 => 0x98a,
    0x6a2 => 0x98a,
    0x6a3 => 0x98a,
    0x6a4 => 0x98a,
    0x6a5 => 0x98a,
    0x6a6 => 0x98a,
    0x6a7 => 0x98a,
    0x6a8 => 0x98a,
    0x6a9 => 0x98a,
    0x6aa => 0x98a,
    0x6ab => 0x98a,
    0x6ac => 0x98a,
    0x6ad => 0x98a,
    0x6ae => 0x98a,
    0x6af => 0x98a,
    0x6b0 => 0x98a,
    0x6b1 => 0x98a,
    0x6b2 => 0x98a,
    0x6b3 => 0x98a,
    0x6b4 => 0x98a,
    0x6b5 => 0x98a,
    0x6b6 => 0x98a,
    0x6b7 => 0x98a,
    0x6b8 => 0x98a,
    0x6b9 => 0x98a,
    0x6ba => 0x98a,
    0x6bb => 0x98a,
    0x6bc => 0x98a,
    0x6bd => 0x98a,
    0x6be => 0x98a,
    0x6bf => 0x98a,
    0x6c0 => 0x98a,
    0x6c1 => 0x98a,
    0x6c2 => 0x98a,
    0x6c3 => 0x98a,
    0x6c4 => 0x98a,
    0x6c5 => 0x98a,
    0x6c6 => 0x98a,
    0x6c7 => 0x98a,
    0x6c8 => 0x98a,
    0x6c9 => 0x98a,
    0x6ca => 0x98a,
    0x6cb => 0x98a,
    0x6cc => 0x98a,
    0x6cd => 0x98a,
    0x6ce => 0x98a,
    0x6cf => 0x98a,
    0x6d0 => 0x98a,
    0x6d1 => 0x98a,
    0x6d2 => 0x98a,
    0x6d3 => 0x98a,
    0x6d4 => 0x98a,
    0x6d5 => 0x98a,
    0x6d6 => 0x98a,
    0x6d7 => 0x98a,
    0x6d8 => 0x98a,
    0x6d9 => 0x98a,
    0x6da => 0x98a,
    0x6db => 0x98a,
    0x6dc => 0x98a,
    0x6dd => 0x98a,
    0x6de => 0x98a,
    0x6df => 0x98a,
    0x6e0 => 0x98a,
    0x6e1 => 0x98a,
    0x6e2 => 0x98a,
    0x6e3 => 0x98a,
    0x6e4 => 0x98a,
    0x6e5 => 0x98a,
    0x6e6 => 0x98a,
    0x6e7 => 0x98a,
    0x6e8 => 0x98a,
    0x6e9 => 0x98a,
    0x6ea => 0x98a,
    0x6eb => 0x98a,
    0x6ec => 0x98a,
    0x6ed => 0x98a,
    0x6ee => 0x98a,
    0x6ef => 0x98a,
    0x6f0 => 0x98a,
    0x6f1 => 0x98a,
    0x6f2 => 0x98a,
    0x6f3 => 0x98a,
    0x6f4 => 0x98a,
    0x6f5 => 0x98a,
    0x6f6 => 0x98a,
    0x6f7 => 0x98a,
    0x6f8 => 0x98a,
    0x6f9 => 0x98a,
    0x6fa => 0x98a,
    0x6fb => 0x98a,
    0x6fc => 0x98a,
    0x6fd => 0x98a,
    0x6fe => 0x98a,
    0x6ff => 0x98a,
    0x700 => 0x98a,
    0x701 => 0x98a,
    0x702 => 0x98a,
    0x703 => 0x98a,
    0x704 => 0x98a,
    0x705 => 0x98a,
    0x706 => 0x98a,
    0x707 => 0x98a,
    0x708 => 0x98a,
    0x709 => 0x98a,
    0x70a => 0x98a,
    0x70b => 0x98a,
    0x70c => 0x98a,
    0x70d => 0x98a,
    0x70e => 0x98a,
    0x70f => 0x98a,
    0x710 => 0x98a,
    0x711 => 0x98a,
    0x712 => 0x98a,
    0x713 => 0x98a,
    0x714 => 0x98a,
    0x715 => 0x98a,
    0x716 => 0x98a,
    0x717 => 0x98a,
    0x718 => 0x98a,
    0x719 => 0x98a,
    0x71a => 0x98a,
    0x71b => 0x98a,
    0x71c => 0x98a,
    0x71d => 0x98a,
    0x71e => 0x98a,
    0x71f => 0x98a,
    0x720 => 0x98a,
    0x721 => 0x98a,
    0x722 => 0x98a,
    0x723 => 0x98a,
    0x724 => 0x98a,
    0x725 => 0x98a,
    0x726 => 0x98a,
    0x727 => 0x98a,
    0x728 => 0x98a,
    0x729 => 0x98a,
    0x72a => 0x98a,
    0x72b => 0x98a,
    0x72c => 0x98a,
    0x72d => 0x98a,
    0x72e => 0x98a,
    0x72f => 0x98a,
    0x730 => 0x98a,
    0x731 => 0x98a,
    0x732 => 0x98a,
    0x733 => 0x98a,
    0x734 => 0x98a,
    0x735 => 0x98a,
    0x736 => 0x98a,
    0x737 => 0x98a,
    0x738 => 0x98a,
    0x739 => 0x98a,
    0x73a => 0x98a,
    0x73b => 0x98a,
    0x73c => 0x98a,
    0x73d => 0x98a,
    0x73e => 0x98a,
    0x73f => 0x98a,
    0x740 => 0x98a,
    0x741 => 0x98a,
    0x742 => 0x98a,
    0x743 => 0x98a,
    0x744 => 0x98a,
    0x745 => 0x98a,
    0x746 => 0x98a,
    0x747 => 0x98a,
    0x748 => 0x98a,
    0x749 => 0x98a,
    0x74a => 0x98a,
    0x74b => 0x98a,
    0x74c => 0x98a,
    0x74d => 0x98a,
    0x74e => 0x98a,
    0x74f => 0x98a,
    0x750 => 0x98a,
    0x751 => 0x98a,
    0x752 => 0x98a,
    0x753 => 0x98a,
    0x754 => 0x98a,
    0x755 => 0x98a,
    0x756 => 0x98a,
    0x757 => 0x98a,
    0x758 => 0x98a,
    0x759 => 0x98a,
    0x75a => 0x98a,
    0x75b => 0x98a,
    0x75c => 0x98a,
    0x75d => 0x98a,
    0x75e => 0x98a,
    0x75f => 0x98a,
    0x760 => 0x98a,
    0x761 => 0x98a,
    0x762 => 0x98a,
    0x763 => 0x98a,
    0x764 => 0x98a,
    0x765 => 0x98a,
    0x766 => 0x98a,
    0x767 => 0x98a,
    0x768 => 0x98a,
    0x769 => 0x98a,
    0x76a => 0x98a,
    0x76b => 0x98a,
    0x76c => 0x98a,
    0x76d => 0x98a,
    0x76e => 0x98a,
    0x76f => 0x98a,
    0x770 => 0x98a,
    0x771 => 0x98a,
    0x772 => 0x98a,
    0x773 => 0x98a,
    0x774 => 0x98a,
    0x775 => 0x98a,
    0x776 => 0x98a,
    0x777 => 0x98a,
    0x778 => 0x98a,
    0x779 => 0x98a,
    0x77a => 0x98a,
    0x77b => 0x98a,
    0x77c => 0x98a,
    0x77d => 0x98a,
    0x77e => 0x98a,
    0x77f => 0x98a,
    0x780 => 0x98a,
    0x781 => 0x98a,
    0x782 => 0x98a,
    0x783 => 0x98a,
    0x784 => 0x98a,
    0x785 => 0x98a,
    0x786 => 0x98a,
    0x787 => 0x98a,
    0x788 => 0x98a,
    0x789 => 0x98a,
    0x78a => 0x98a,
    0x78b => 0x98a,
    0x78c => 0x98a,
    0x78d => 0x98a,
    0x78e => 0x98a,
    0x78f => 0x98a,
    0x790 => 0x98a,
    0x791 => 0x98a,
    0x792 => 0x98a,
    0x793 => 0x98a,
    0x794 => 0x98a,
    0x795 => 0x98a,
    0x796 => 0x98a,
    0x797 => 0x98a,
    0x798 => 0x98a,
    0x799 => 0x98a,
    0x79a => 0x98a,
    0x79b => 0x98a,
    0x79c => 0x98a,
    0x79d => 0x98a,
    0x79e => 0x98a,
    0x79f => 0x98a,
    0x7a0 => 0x98a,
    0x7a1 => 0x98a,
    0x7a2 => 0x98a,
    0x7a3 => 0x98a,
    0x7a4 => 0x98a,
    0x7a5 => 0x98a,
    0x7a6 => 0x98a,
    0x7a7 => 0x98a,
    0x7a8 => 0x98a,
    0x7a9 => 0x98a,
    0x7aa => 0x98a,
    0x7ab => 0x98a,
    0x7ac => 0x98a,
    0x7ad => 0x98a,
    0x7ae => 0x98a,
    0x7af => 0x98a,
    0x7b0 => 0x98a,
    0x7b1 => 0x98a,
    0x7b2 => 0x98a,
    0x7b3 => 0x98a,
    0x7b4 => 0x98a,
    0x7b5 => 0x98a,
    0x7b6 => 0x98a,
    0x7b7 => 0x98a,
    0x7b8 => 0x98a,
    0x7b9 => 0x98a,
    0x7ba => 0x98a,
    0x7bb => 0x98a,
    0x7bc => 0x98a,
    0x7bd => 0x98a,
    0x7be => 0x98a,
    0x7bf => 0x98a,
    0x7c0 => 0x98a,
    0x7c1 => 0x98a,
    0x7c2 => 0x98a,
    0x7c3 => 0x98a,
    0x7c4 => 0x98a,
    0x7c5 => 0x98a,
    0x7c6 => 0x98a,
    0x7c7 => 0x98a,
    0x7c8 => 0x98a,
    0x7c9 => 0x98a,
    0x7ca => 0x98a,
    0x7cb => 0x98a,
    0x7cc => 0x98a,
    0x7cd => 0x98a,
    0x7ce => 0x98a,
    0x7cf => 0x98a,
    0x7d0 => 0x98a,
    0x7d1 => 0x98a,
    0x7d2 => 0x98a,
    0x7d3 => 0x98a,
    0x7d4 => 0x98a,
    0x7d5 => 0x98a,
    0x7d6 => 0x98a,
    0x7d7 => 0x98a,
    0x7d8 => 0x98a,
    0x7d9 => 0x98a,
    0x7da => 0x98a,
    0x7db => 0x98a,
    0x7dc => 0x98a,
    0x7dd => 0x98a,
    0x7de => 0x98a,
    0x7df => 0x98a,
    0x7e0 => 0x98a,
    0x7e1 => 0x98a,
    0x7e2 => 0x98a,
    0x7e3 => 0x98a,
    0x7e4 => 0x98a,
    0x7e5 => 0x98a,
    0x7e6 => 0x98a,
    0x7e7 => 0x98a,
    0x7e8 => 0x98a,
    0x7e9 => 0x98a,
    0x7ea => 0x98a,
    0x7eb => 0x98a,
    0x7ec => 0x98a,
    0x7ed => 0x98a,
    0x7ee => 0x98a,
    0x7ef => 0x98a,
    0x7f0 => 0x98a,
    0x7f1 => 0x98a,
    0x7f2 => 0x98a,
    0x7f3 => 0x98a,
    0x7f4 => 0x98a,
    0x7f5 => 0x98a,
    0x7f6 => 0x98a,
    0x7f7 => 0x98a,
    0x7f8 => 0x98a,
    0x7f9 => 0x98a,
    0x7fa => 0x98a,
    0x7fb => 0x98a,
    0x7fc => 0x98a,
    0x7fd => 0x98a,
    0x7fe => 0x98a,
    0x7ff => 0x98a,
    _ => 0,
  };
  return idx;
}


// BRANCHREG-BLRAA#0,BRANCHREG-BLRAA#1,BRANCHREG-BLRAA#2,BRANCHREG-BLRAA#3,BRANCHREG-BLRAA#4,BRANCHREG-BLRAA#5,BRANCHREG-BLRAA#6,BRANCHREG-BLRAA#7,BRANCHREG-BLRAA#8,BRANCHREG-BLRAA#9,BRANCHREG-BLRAA#10,BRANCHREG-BLRAA#11,BRANCHREG-BLRAA#12,BRANCHREG-BLRAA#13,BRANCHREG-BLRAA#14,BRANCHREG-BLRAA#15,BRANCHREG-BLRAA#16,BRANCHREG-BLRAA#17,BRANCHREG-BLRAA#18,BRANCHREG-BLRAA#19,BRANCHREG-BLRAA#20,BRANCHREG-BLRAA#21,BRANCHREG-BLRAA#22,BRANCHREG-BLRAA#23,BRANCHREG-BLRAA#24,BRANCHREG-BLRAA#25,BRANCHREG-BLRAA#26,BRANCHREG-BLRAA#27,BRANCHREG-BLRAA#28,BRANCHREG-BLRAA#29,BRANCHREG-BLRAA#30,BRANCHREG-BLRAA#31,BRANCHREG-BLRAA#32,BRANCHREG-BLRAA#33,BRANCHREG-BLRAA#34,BRANCHREG-BLRAA#35,BRANCHREG-BLRAA#36,BRANCHREG-BLRAA#37,BRANCHREG-BLRAA#38,BRANCHREG-BLRAA#39,BRANCHREG-BLRAA#40,BRANCHREG-BLRAA#41,BRANCHREG-BLRAA#42,BRANCHREG-BLRAA#43,BRANCHREG-BLRAA#44,BRANCHREG-BLRAA#45,BRANCHREG-BLRAA#46,BRANCHREG-BLRAA#47,BRANCHREG-BLRAA#48,BRANCHREG-BLRAA#49,BRANCHREG-BLRAA#50,BRANCHREG-BLRAA#51,BRANCHREG-BLRAA#52,BRANCHREG-BLRAA#53,BRANCHREG-BLRAA#54,BRANCHREG-BLRAA#55,BRANCHREG-BLRAA#56,BRANCHREG-BLRAA#57,BRANCHREG-BLRAA#58,BRANCHREG-BLRAA#59,BRANCHREG-BLRAA#60,BRANCHREG-BLRAA#61,BRANCHREG-BLRAA#62,BRANCHREG-BLRAA#63,BRANCHREG-BLRAA#64,BRANCHREG-BLRAA#65,BRANCHREG-BLRAA#66,BRANCHREG-BLRAA#67,BRANCHREG-BLRAA#68,BRANCHREG-BLRAA#69,BRANCHREG-BLRAA#70,BRANCHREG-BLRAA#71,BRANCHREG-BLRAA#72,BRANCHREG-BLRAA#73,BRANCHREG-BLRAA#74,BRANCHREG-BLRAA#75,BRANCHREG-BLRAA#76,BRANCHREG-BLRAA#77,BRANCHREG-BLRAA#78,BRANCHREG-BLRAA#79,BRANCHREG-BLRAA#80,BRANCHREG-BLRAA#81,BRANCHREG-BLRAA#82,BRANCHREG-BLRAA#83,BRANCHREG-BLRAA#84,BRANCHREG-BLRAA#85,BRANCHREG-BLRAA#86,BRANCHREG-BLRAA#87,BRANCHREG-BLRAA#88,BRANCHREG-BLRAA#89,BRANCHREG-BLRAA#90,BRANCHREG-BLRAA#91,BRANCHREG-BLRAA#92,BRANCHREG-BLRAA#93,BRANCHREG-BLRAA#94,BRANCHREG-BLRAA#95,BRANCHREG-BLRAA#96,BRANCHREG-BLRAA#97,BRANCHREG-BLRAA#98,BRANCHREG-BLRAA#99,BRANCHREG-BLRAA#100,BRANCHREG-BLRAA#101,BRANCHREG-BLRAA#102,BRANCHREG-BLRAA#103,BRANCHREG-BLRAA#104,BRANCHREG-BLRAA#105,BRANCHREG-BLRAA#106,BRANCHREG-BLRAA#107,BRANCHREG-BLRAA#108,BRANCHREG-BLRAA#109,BRANCHREG-BLRAA#110,BRANCHREG-BLRAA#111,BRANCHREG-BLRAA#112,BRANCHREG-BLRAA#113,BRANCHREG-BLRAA#114,BRANCHREG-BLRAA#115,BRANCHREG-BLRAA#116,BRANCHREG-BLRAA#117,BRANCHREG-BLRAA#118,BRANCHREG-BLRAA#119,BRANCHREG-BLRAA#120,BRANCHREG-BLRAA#121,BRANCHREG-BLRAA#122,BRANCHREG-BLRAA#123,BRANCHREG-BLRAA#124,BRANCHREG-BLRAA#125,BRANCHREG-BLRAA#126,BRANCHREG-BLRAA#127,BRANCHREG-BLRAA#128,BRANCHREG-BLRAA#129,BRANCHREG-BLRAA#130,BRANCHREG-BLRAA#131,BRANCHREG-BLRAA#132,BRANCHREG-BLRAA#133,BRANCHREG-BLRAA#134,BRANCHREG-BLRAA#135,BRANCHREG-BLRAA#136,BRANCHREG-BLRAA#137,BRANCHREG-BLRAA#138,BRANCHREG-BLRAA#139,BRANCHREG-BLRAA#140,BRANCHREG-BLRAA#141,BRANCHREG-BLRAA#142,BRANCHREG-BLRAA#143,BRANCHREG-BLRAA#144,BRANCHREG-BLRAA#145,BRANCHREG-BLRAA#146,BRANCHREG-BLRAA#147,BRANCHREG-BLRAA#148,BRANCHREG-BLRAA#149,BRANCHREG-BLRAA#150,BRANCHREG-BLRAA#151,BRANCHREG-BLRAA#152,BRANCHREG-BLRAA#153,BRANCHREG-BLRAA#154,BRANCHREG-BLRAA#155,BRANCHREG-BLRAA#156,BRANCHREG-BLRAA#157,BRANCHREG-BLRAA#158,BRANCHREG-BLRAA#159,BRANCHREG-BLRAA#160,BRANCHREG-BLRAA#161,BRANCHREG-BLRAA#162,BRANCHREG-BLRAA#163,BRANCHREG-BLRAA#164,BRANCHREG-BLRAA#165,BRANCHREG-BLRAA#166,BRANCHREG-BLRAA#167,BRANCHREG-BLRAA#168,BRANCHREG-BLRAA#169,BRANCHREG-BLRAA#170,BRANCHREG-BLRAA#171,BRANCHREG-BLRAA#172,BRANCHREG-BLRAA#173,BRANCHREG-BLRAA#174,BRANCHREG-BLRAA#175,BRANCHREG-BLRAA#176,BRANCHREG-BLRAA#177,BRANCHREG-BLRAA#178,BRANCHREG-BLRAA#179,BRANCHREG-BLRAA#180,BRANCHREG-BLRAA#181,BRANCHREG-BLRAA#182,BRANCHREG-BLRAA#183,BRANCHREG-BLRAA#184,BRANCHREG-BLRAA#185,BRANCHREG-BLRAA#186,BRANCHREG-BLRAA#187,BRANCHREG-BLRAA#188,BRANCHREG-BLRAA#189,BRANCHREG-BLRAA#190,BRANCHREG-BLRAA#191,BRANCHREG-BLRAA#192,BRANCHREG-BLRAA#193,BRANCHREG-BLRAA#194,BRANCHREG-BLRAA#195,BRANCHREG-BLRAA#196,BRANCHREG-BLRAA#197,BRANCHREG-BLRAA#198,BRANCHREG-BLRAA#199,BRANCHREG-BLRAA#200,BRANCHREG-BLRAA#201,BRANCHREG-BLRAA#202,BRANCHREG-BLRAA#203,BRANCHREG-BLRAA#204,BRANCHREG-BLRAA#205,BRANCHREG-BLRAA#206,BRANCHREG-BLRAA#207,BRANCHREG-BLRAA#208,BRANCHREG-BLRAA#209,BRANCHREG-BLRAA#210,BRANCHREG-BLRAA#211,BRANCHREG-BLRAA#212,BRANCHREG-BLRAA#213,BRANCHREG-BLRAA#214,BRANCHREG-BLRAA#215,BRANCHREG-BLRAA#216,BRANCHREG-BLRAA#217,BRANCHREG-BLRAA#218,BRANCHREG-BLRAA#219,BRANCHREG-BLRAA#220,BRANCHREG-BLRAA#221,BRANCHREG-BLRAA#222,BRANCHREG-BLRAA#223,BRANCHREG-BLRAA#224,BRANCHREG-BLRAA#225,BRANCHREG-BLRAA#226,BRANCHREG-BLRAA#227,BRANCHREG-BLRAA#228,BRANCHREG-BLRAA#229,BRANCHREG-BLRAA#230,BRANCHREG-BLRAA#231,BRANCHREG-BLRAA#232,BRANCHREG-BLRAA#233,BRANCHREG-BLRAA#234,BRANCHREG-BLRAA#235,BRANCHREG-BLRAA#236,BRANCHREG-BLRAA#237,BRANCHREG-BLRAA#238,BRANCHREG-BLRAA#239,BRANCHREG-BLRAA#240,BRANCHREG-BLRAA#241,BRANCHREG-BLRAA#242,BRANCHREG-BLRAA#243,BRANCHREG-BLRAA#244,BRANCHREG-BLRAA#245,BRANCHREG-BLRAA#246,BRANCHREG-BLRAA#247,BRANCHREG-BLRAA#248,BRANCHREG-BLRAA#249,BRANCHREG-BLRAA#250,BRANCHREG-BLRAA#251,BRANCHREG-BLRAA#252,BRANCHREG-BLRAA#253,BRANCHREG-BLRAA#254,BRANCHREG-BLRAA#255,BRANCHREG-BLRAA#256,BRANCHREG-BLRAA#257,BRANCHREG-BLRAA#258,BRANCHREG-BLRAA#259,BRANCHREG-BLRAA#260,BRANCHREG-BLRAA#261,BRANCHREG-BLRAA#262,BRANCHREG-BLRAA#263,BRANCHREG-BLRAA#264,BRANCHREG-BLRAA#265,BRANCHREG-BLRAA#266,BRANCHREG-BLRAA#267,BRANCHREG-BLRAA#268,BRANCHREG-BLRAA#269,BRANCHREG-BLRAA#270,BRANCHREG-BLRAA#271,BRANCHREG-BLRAA#272,BRANCHREG-BLRAA#273,BRANCHREG-BLRAA#274,BRANCHREG-BLRAA#275,BRANCHREG-BLRAA#276,BRANCHREG-BLRAA#277,BRANCHREG-BLRAA#278,BRANCHREG-BLRAA#279,BRANCHREG-BLRAA#280,BRANCHREG-BLRAA#281,BRANCHREG-BLRAA#282,BRANCHREG-BLRAA#283,BRANCHREG-BLRAA#284,BRANCHREG-BLRAA#285,BRANCHREG-BLRAA#286,BRANCHREG-BLRAA#287,BRANCHREG-BLRAA#288,BRANCHREG-BLRAA#289,BRANCHREG-BLRAA#290,BRANCHREG-BLRAA#291,BRANCHREG-BLRAA#292,BRANCHREG-BLRAA#293,BRANCHREG-BLRAA#294,BRANCHREG-BLRAA#295,BRANCHREG-BLRAA#296,BRANCHREG-BLRAA#297,BRANCHREG-BLRAA#298,BRANCHREG-BLRAA#299,BRANCHREG-BLRAA#300,BRANCHREG-BLRAA#301,BRANCHREG-BLRAA#302,BRANCHREG-BLRAA#303,BRANCHREG-BLRAA#304,BRANCHREG-BLRAA#305,BRANCHREG-BLRAA#306,BRANCHREG-BLRAA#307,BRANCHREG-BLRAA#308,BRANCHREG-BLRAA#309,BRANCHREG-BLRAA#310,BRANCHREG-BLRAA#311,BRANCHREG-BLRAA#312,BRANCHREG-BLRAA#313,BRANCHREG-BLRAA#314,BRANCHREG-BLRAA#315,BRANCHREG-BLRAA#316,BRANCHREG-BLRAA#317,BRANCHREG-BLRAA#318,BRANCHREG-BLRAA#319,BRANCHREG-BLRAA#320,BRANCHREG-BLRAA#321,BRANCHREG-BLRAA#322,BRANCHREG-BLRAA#323,BRANCHREG-BLRAA#324,BRANCHREG-BLRAA#325,BRANCHREG-BLRAA#326,BRANCHREG-BLRAA#327,BRANCHREG-BLRAA#328,BRANCHREG-BLRAA#329,BRANCHREG-BLRAA#330,BRANCHREG-BLRAA#331,BRANCHREG-BLRAA#332,BRANCHREG-BLRAA#333,BRANCHREG-BLRAA#334,BRANCHREG-BLRAA#335,BRANCHREG-BLRAA#336,BRANCHREG-BLRAA#337,BRANCHREG-BLRAA#338,BRANCHREG-BLRAA#339,BRANCHREG-BLRAA#340,BRANCHREG-BLRAA#341,BRANCHREG-BLRAA#342,BRANCHREG-BLRAA#343,BRANCHREG-BLRAA#344,BRANCHREG-BLRAA#345,BRANCHREG-BLRAA#346,BRANCHREG-BLRAA#347,BRANCHREG-BLRAA#348,BRANCHREG-BLRAA#349,BRANCHREG-BLRAA#350,BRANCHREG-BLRAA#351,BRANCHREG-BLRAA#352,BRANCHREG-BLRAA#353,BRANCHREG-BLRAA#354,BRANCHREG-BLRAA#355,BRANCHREG-BLRAA#356,BRANCHREG-BLRAA#357,BRANCHREG-BLRAA#358,BRANCHREG-BLRAA#359,BRANCHREG-BLRAA#360,BRANCHREG-BLRAA#361,BRANCHREG-BLRAA#362,BRANCHREG-BLRAA#363,BRANCHREG-BLRAA#364,BRANCHREG-BLRAA#365,BRANCHREG-BLRAA#366,BRANCHREG-BLRAA#367,BRANCHREG-BLRAA#368,BRANCHREG-BLRAA#369,BRANCHREG-BLRAA#370,BRANCHREG-BLRAA#371,BRANCHREG-BLRAA#372,BRANCHREG-BLRAA#373,BRANCHREG-BLRAA#374,BRANCHREG-BLRAA#375,BRANCHREG-BLRAA#376,BRANCHREG-BLRAA#377,BRANCHREG-BLRAA#378,BRANCHREG-BLRAA#379,BRANCHREG-BLRAA#380,BRANCHREG-BLRAA#381,BRANCHREG-BLRAA#382,BRANCHREG-BLRAA#383,BRANCHREG-BLRAA#384,BRANCHREG-BLRAA#385,BRANCHREG-BLRAA#386,BRANCHREG-BLRAA#387,BRANCHREG-BLRAA#388,BRANCHREG-BLRAA#389,BRANCHREG-BLRAA#390,BRANCHREG-BLRAA#391,BRANCHREG-BLRAA#392,BRANCHREG-BLRAA#393,BRANCHREG-BLRAA#394,BRANCHREG-BLRAA#395,BRANCHREG-BLRAA#396,BRANCHREG-BLRAA#397,BRANCHREG-BLRAA#398,BRANCHREG-BLRAA#399,BRANCHREG-BLRAA#400,BRANCHREG-BLRAA#401,BRANCHREG-BLRAA#402,BRANCHREG-BLRAA#403,BRANCHREG-BLRAA#404,BRANCHREG-BLRAA#405,BRANCHREG-BLRAA#406,BRANCHREG-BLRAA#407,BRANCHREG-BLRAA#408,BRANCHREG-BLRAA#409,BRANCHREG-BLRAA#410,BRANCHREG-BLRAA#411,BRANCHREG-BLRAA#412,BRANCHREG-BLRAA#413,BRANCHREG-BLRAA#414,BRANCHREG-BLRAA#415,BRANCHREG-BLRAA#416,BRANCHREG-BLRAA#417,BRANCHREG-BLRAA#418,BRANCHREG-BLRAA#419,BRANCHREG-BLRAA#420,BRANCHREG-BLRAA#421,BRANCHREG-BLRAA#422,BRANCHREG-BLRAA#423,BRANCHREG-BLRAA#424,BRANCHREG-BLRAA#425,BRANCHREG-BLRAA#426,BRANCHREG-BLRAA#427,BRANCHREG-BLRAA#428,BRANCHREG-BLRAA#429,BRANCHREG-BLRAA#430,BRANCHREG-BLRAA#431,BRANCHREG-BLRAA#432,BRANCHREG-BLRAA#433,BRANCHREG-BLRAA#434,BRANCHREG-BLRAA#435,BRANCHREG-BLRAA#436,BRANCHREG-BLRAA#437,BRANCHREG-BLRAA#438,BRANCHREG-BLRAA#439,BRANCHREG-BLRAA#440,BRANCHREG-BLRAA#441,BRANCHREG-BLRAA#442,BRANCHREG-BLRAA#443,BRANCHREG-BLRAA#444,BRANCHREG-BLRAA#445,BRANCHREG-BLRAA#446,BRANCHREG-BLRAA#447,BRANCHREG-BLRAA#448,BRANCHREG-BLRAA#449,BRANCHREG-BLRAA#450,BRANCHREG-BLRAA#451,BRANCHREG-BLRAA#452,BRANCHREG-BLRAA#453,BRANCHREG-BLRAA#454,BRANCHREG-BLRAA#455,BRANCHREG-BLRAA#456,BRANCHREG-BLRAA#457,BRANCHREG-BLRAA#458,BRANCHREG-BLRAA#459,BRANCHREG-BLRAA#460,BRANCHREG-BLRAA#461,BRANCHREG-BLRAA#462,BRANCHREG-BLRAA#463,BRANCHREG-BLRAA#464,BRANCHREG-BLRAA#465,BRANCHREG-BLRAA#466,BRANCHREG-BLRAA#467,BRANCHREG-BLRAA#468,BRANCHREG-BLRAA#469,BRANCHREG-BLRAA#470,BRANCHREG-BLRAA#471,BRANCHREG-BLRAA#472,BRANCHREG-BLRAA#473,BRANCHREG-BLRAA#474,BRANCHREG-BLRAA#475,BRANCHREG-BLRAA#476,BRANCHREG-BLRAA#477,BRANCHREG-BLRAA#478,BRANCHREG-BLRAA#479,BRANCHREG-BLRAA#480,BRANCHREG-BLRAA#481,BRANCHREG-BLRAA#482,BRANCHREG-BLRAA#483,BRANCHREG-BLRAA#484,BRANCHREG-BLRAA#485,BRANCHREG-BLRAA#486,BRANCHREG-BLRAA#487,BRANCHREG-BLRAA#488,BRANCHREG-BLRAA#489,BRANCHREG-BLRAA#490,BRANCHREG-BLRAA#491,BRANCHREG-BLRAA#492,BRANCHREG-BLRAA#493,BRANCHREG-BLRAA#494,BRANCHREG-BLRAA#495,BRANCHREG-BLRAA#496,BRANCHREG-BLRAA#497,BRANCHREG-BLRAA#498,BRANCHREG-BLRAA#499,BRANCHREG-BLRAA#500,BRANCHREG-BLRAA#501,BRANCHREG-BLRAA#502,BRANCHREG-BLRAA#503,BRANCHREG-BLRAA#504,BRANCHREG-BLRAA#505,BRANCHREG-BLRAA#506,BRANCHREG-BLRAA#507,BRANCHREG-BLRAA#508,BRANCHREG-BLRAA#509,BRANCHREG-BLRAA#510,BRANCHREG-BLRAA#511,BRANCHREG-BLRAA#512,BRANCHREG-BLRAA#513,BRANCHREG-BLRAA#514,BRANCHREG-BLRAA#515,BRANCHREG-BLRAA#516,BRANCHREG-BLRAA#517,BRANCHREG-BLRAA#518,BRANCHREG-BLRAA#519,BRANCHREG-BLRAA#520,BRANCHREG-BLRAA#521,BRANCHREG-BLRAA#522,BRANCHREG-BLRAA#523,BRANCHREG-BLRAA#524,BRANCHREG-BLRAA#525,BRANCHREG-BLRAA#526,BRANCHREG-BLRAA#527,BRANCHREG-BLRAA#528,BRANCHREG-BLRAA#529,BRANCHREG-BLRAA#530,BRANCHREG-BLRAA#531,BRANCHREG-BLRAA#532,BRANCHREG-BLRAA#533,BRANCHREG-BLRAA#534,BRANCHREG-BLRAA#535,BRANCHREG-BLRAA#536,BRANCHREG-BLRAA#537,BRANCHREG-BLRAA#538,BRANCHREG-BLRAA#539,BRANCHREG-BLRAA#540,BRANCHREG-BLRAA#541,BRANCHREG-BLRAA#542,BRANCHREG-BLRAA#543,BRANCHREG-BLRAA#544,BRANCHREG-BLRAA#545,BRANCHREG-BLRAA#546,BRANCHREG-BLRAA#547,BRANCHREG-BLRAA#548,BRANCHREG-BLRAA#549,BRANCHREG-BLRAA#550,BRANCHREG-BLRAA#551,BRANCHREG-BLRAA#552,BRANCHREG-BLRAA#553,BRANCHREG-BLRAA#554,BRANCHREG-BLRAA#555,BRANCHREG-BLRAA#556,BRANCHREG-BLRAA#557,BRANCHREG-BLRAA#558,BRANCHREG-BLRAA#559,BRANCHREG-BLRAA#560,BRANCHREG-BLRAA#561,BRANCHREG-BLRAA#562,BRANCHREG-BLRAA#563,BRANCHREG-BLRAA#564,BRANCHREG-BLRAA#565,BRANCHREG-BLRAA#566,BRANCHREG-BLRAA#567,BRANCHREG-BLRAA#568,BRANCHREG-BLRAA#569,BRANCHREG-BLRAA#570,BRANCHREG-BLRAA#571,BRANCHREG-BLRAA#572,BRANCHREG-BLRAA#573,BRANCHREG-BLRAA#574,BRANCHREG-BLRAA#575,BRANCHREG-BLRAA#576,BRANCHREG-BLRAA#577,BRANCHREG-BLRAA#578,BRANCHREG-BLRAA#579,BRANCHREG-BLRAA#580,BRANCHREG-BLRAA#581,BRANCHREG-BLRAA#582,BRANCHREG-BLRAA#583,BRANCHREG-BLRAA#584,BRANCHREG-BLRAA#585,BRANCHREG-BLRAA#586,BRANCHREG-BLRAA#587,BRANCHREG-BLRAA#588,BRANCHREG-BLRAA#589,BRANCHREG-BLRAA#590,BRANCHREG-BLRAA#591,BRANCHREG-BLRAA#592,BRANCHREG-BLRAA#593,BRANCHREG-BLRAA#594,BRANCHREG-BLRAA#595,BRANCHREG-BLRAA#596,BRANCHREG-BLRAA#597,BRANCHREG-BLRAA#598,BRANCHREG-BLRAA#599,BRANCHREG-BLRAA#600,BRANCHREG-BLRAA#601,BRANCHREG-BLRAA#602,BRANCHREG-BLRAA#603,BRANCHREG-BLRAA#604,BRANCHREG-BLRAA#605,BRANCHREG-BLRAA#606,BRANCHREG-BLRAA#607,BRANCHREG-BLRAA#608,BRANCHREG-BLRAA#609,BRANCHREG-BLRAA#610,BRANCHREG-BLRAA#611,BRANCHREG-BLRAA#612,BRANCHREG-BLRAA#613,BRANCHREG-BLRAA#614,BRANCHREG-BLRAA#615,BRANCHREG-BLRAA#616,BRANCHREG-BLRAA#617,BRANCHREG-BLRAA#618,BRANCHREG-BLRAA#619,BRANCHREG-BLRAA#620,BRANCHREG-BLRAA#621,BRANCHREG-BLRAA#622,BRANCHREG-BLRAA#623,BRANCHREG-BLRAA#624,BRANCHREG-BLRAA#625,BRANCHREG-BLRAA#626,BRANCHREG-BLRAA#627,BRANCHREG-BLRAA#628,BRANCHREG-BLRAA#629,BRANCHREG-BLRAA#630,BRANCHREG-BLRAA#631,BRANCHREG-BLRAA#632,BRANCHREG-BLRAA#633,BRANCHREG-BLRAA#634,BRANCHREG-BLRAA#635,BRANCHREG-BLRAA#636,BRANCHREG-BLRAA#637,BRANCHREG-BLRAA#638,BRANCHREG-BLRAA#639,BRANCHREG-BLRAA#640,BRANCHREG-BLRAA#641,BRANCHREG-BLRAA#642,BRANCHREG-BLRAA#643,BRANCHREG-BLRAA#644,BRANCHREG-BLRAA#645,BRANCHREG-BLRAA#646,BRANCHREG-BLRAA#647,BRANCHREG-BLRAA#648,BRANCHREG-BLRAA#649,BRANCHREG-BLRAA#650,BRANCHREG-BLRAA#651,BRANCHREG-BLRAA#652,BRANCHREG-BLRAA#653,BRANCHREG-BLRAA#654,BRANCHREG-BLRAA#655,BRANCHREG-BLRAA#656,BRANCHREG-BLRAA#657,BRANCHREG-BLRAA#658,BRANCHREG-BLRAA#659,BRANCHREG-BLRAA#660,BRANCHREG-BLRAA#661,BRANCHREG-BLRAA#662,BRANCHREG-BLRAA#663,BRANCHREG-BLRAA#664,BRANCHREG-BLRAA#665,BRANCHREG-BLRAA#666,BRANCHREG-BLRAA#667,BRANCHREG-BLRAA#668,BRANCHREG-BLRAA#669,BRANCHREG-BLRAA#670,BRANCHREG-BLRAA#671,BRANCHREG-BLRAA#672,BRANCHREG-BLRAA#673,BRANCHREG-BLRAA#674,BRANCHREG-BLRAA#675,BRANCHREG-BLRAA#676,BRANCHREG-BLRAA#677,BRANCHREG-BLRAA#678,BRANCHREG-BLRAA#679,BRANCHREG-BLRAA#680,BRANCHREG-BLRAA#681,BRANCHREG-BLRAA#682,BRANCHREG-BLRAA#683,BRANCHREG-BLRAA#684,BRANCHREG-BLRAA#685,BRANCHREG-BLRAA#686,BRANCHREG-BLRAA#687,BRANCHREG-BLRAA#688,BRANCHREG-BLRAA#689,BRANCHREG-BLRAA#690,BRANCHREG-BLRAA#691,BRANCHREG-BLRAA#692,BRANCHREG-BLRAA#693,BRANCHREG-BLRAA#694,BRANCHREG-BLRAA#695,BRANCHREG-BLRAA#696,BRANCHREG-BLRAA#697,BRANCHREG-BLRAA#698,BRANCHREG-BLRAA#699,BRANCHREG-BLRAA#700,BRANCHREG-BLRAA#701,BRANCHREG-BLRAA#702,BRANCHREG-BLRAA#703,BRANCHREG-BLRAA#704,BRANCHREG-BLRAA#705,BRANCHREG-BLRAA#706,BRANCHREG-BLRAA#707,BRANCHREG-BLRAA#708,BRANCHREG-BLRAA#709,BRANCHREG-BLRAA#710,BRANCHREG-BLRAA#711,BRANCHREG-BLRAA#712,BRANCHREG-BLRAA#713,BRANCHREG-BLRAA#714,BRANCHREG-BLRAA#715,BRANCHREG-BLRAA#716,BRANCHREG-BLRAA#717,BRANCHREG-BLRAA#718,BRANCHREG-BLRAA#719,BRANCHREG-BLRAA#720,BRANCHREG-BLRAA#721,BRANCHREG-BLRAA#722,BRANCHREG-BLRAA#723,BRANCHREG-BLRAA#724,BRANCHREG-BLRAA#725,BRANCHREG-BLRAA#726,BRANCHREG-BLRAA#727,BRANCHREG-BLRAA#728,BRANCHREG-BLRAA#729,BRANCHREG-BLRAA#730,BRANCHREG-BLRAA#731,BRANCHREG-BLRAA#732,BRANCHREG-BLRAA#733,BRANCHREG-BLRAA#734,BRANCHREG-BLRAA#735,BRANCHREG-BLRAA#736,BRANCHREG-BLRAA#737,BRANCHREG-BLRAA#738,BRANCHREG-BLRAA#739,BRANCHREG-BLRAA#740,BRANCHREG-BLRAA#741,BRANCHREG-BLRAA#742,BRANCHREG-BLRAA#743,BRANCHREG-BLRAA#744,BRANCHREG-BLRAA#745,BRANCHREG-BLRAA#746,BRANCHREG-BLRAA#747,BRANCHREG-BLRAA#748,BRANCHREG-BLRAA#749,BRANCHREG-BLRAA#750,BRANCHREG-BLRAA#751,BRANCHREG-BLRAA#752,BRANCHREG-BLRAA#753,BRANCHREG-BLRAA#754,BRANCHREG-BLRAA#755,BRANCHREG-BLRAA#756,BRANCHREG-BLRAA#757,BRANCHREG-BLRAA#758,BRANCHREG-BLRAA#759,BRANCHREG-BLRAA#760,BRANCHREG-BLRAA#761,BRANCHREG-BLRAA#762,BRANCHREG-BLRAA#763,BRANCHREG-BLRAA#764,BRANCHREG-BLRAA#765,BRANCHREG-BLRAA#766,BRANCHREG-BLRAA#767,BRANCHREG-BLRAA#768,BRANCHREG-BLRAA#769,BRANCHREG-BLRAA#770,BRANCHREG-BLRAA#771,BRANCHREG-BLRAA#772,BRANCHREG-BLRAA#773,BRANCHREG-BLRAA#774,BRANCHREG-BLRAA#775,BRANCHREG-BLRAA#776,BRANCHREG-BLRAA#777,BRANCHREG-BLRAA#778,BRANCHREG-BLRAA#779,BRANCHREG-BLRAA#780,BRANCHREG-BLRAA#781,BRANCHREG-BLRAA#782,BRANCHREG-BLRAA#783,BRANCHREG-BLRAA#784,BRANCHREG-BLRAA#785,BRANCHREG-BLRAA#786,BRANCHREG-BLRAA#787,BRANCHREG-BLRAA#788,BRANCHREG-BLRAA#789,BRANCHREG-BLRAA#790,BRANCHREG-BLRAA#791,BRANCHREG-BLRAA#792,BRANCHREG-BLRAA#793,BRANCHREG-BLRAA#794,BRANCHREG-BLRAA#795,BRANCHREG-BLRAA#796,BRANCHREG-BLRAA#797,BRANCHREG-BLRAA#798,BRANCHREG-BLRAA#799,BRANCHREG-BLRAA#800,BRANCHREG-BLRAA#801,BRANCHREG-BLRAA#802,BRANCHREG-BLRAA#803,BRANCHREG-BLRAA#804,BRANCHREG-BLRAA#805,BRANCHREG-BLRAA#806,BRANCHREG-BLRAA#807,BRANCHREG-BLRAA#808,BRANCHREG-BLRAA#809,BRANCHREG-BLRAA#810,BRANCHREG-BLRAA#811,BRANCHREG-BLRAA#812,BRANCHREG-BLRAA#813,BRANCHREG-BLRAA#814,BRANCHREG-BLRAA#815,BRANCHREG-BLRAA#816,BRANCHREG-BLRAA#817,BRANCHREG-BLRAA#818,BRANCHREG-BLRAA#819,BRANCHREG-BLRAA#820,BRANCHREG-BLRAA#821,BRANCHREG-BLRAA#822,BRANCHREG-BLRAA#823,BRANCHREG-BLRAA#824,BRANCHREG-BLRAA#825,BRANCHREG-BLRAA#826,BRANCHREG-BLRAA#827,BRANCHREG-BLRAA#828,BRANCHREG-BLRAA#829,BRANCHREG-BLRAA#830,BRANCHREG-BLRAA#831,BRANCHREG-BLRAA#832,BRANCHREG-BLRAA#833,BRANCHREG-BLRAA#834,BRANCHREG-BLRAA#835,BRANCHREG-BLRAA#836,BRANCHREG-BLRAA#837,BRANCHREG-BLRAA#838,BRANCHREG-BLRAA#839,BRANCHREG-BLRAA#840,BRANCHREG-BLRAA#841,BRANCHREG-BLRAA#842,BRANCHREG-BLRAA#843,BRANCHREG-BLRAA#844,BRANCHREG-BLRAA#845,BRANCHREG-BLRAA#846,BRANCHREG-BLRAA#847,BRANCHREG-BLRAA#848,BRANCHREG-BLRAA#849,BRANCHREG-BLRAA#850,BRANCHREG-BLRAA#851,BRANCHREG-BLRAA#852,BRANCHREG-BLRAA#853,BRANCHREG-BLRAA#854,BRANCHREG-BLRAA#855,BRANCHREG-BLRAA#856,BRANCHREG-BLRAA#857,BRANCHREG-BLRAA#858,BRANCHREG-BLRAA#859,BRANCHREG-BLRAA#860,BRANCHREG-BLRAA#861,BRANCHREG-BLRAA#862,BRANCHREG-BLRAA#863,BRANCHREG-BLRAA#864,BRANCHREG-BLRAA#865,BRANCHREG-BLRAA#866,BRANCHREG-BLRAA#867,BRANCHREG-BLRAA#868,BRANCHREG-BLRAA#869,BRANCHREG-BLRAA#870,BRANCHREG-BLRAA#871,BRANCHREG-BLRAA#872,BRANCHREG-BLRAA#873,BRANCHREG-BLRAA#874,BRANCHREG-BLRAA#875,BRANCHREG-BLRAA#876,BRANCHREG-BLRAA#877,BRANCHREG-BLRAA#878,BRANCHREG-BLRAA#879,BRANCHREG-BLRAA#880,BRANCHREG-BLRAA#881,BRANCHREG-BLRAA#882,BRANCHREG-BLRAA#883,BRANCHREG-BLRAA#884,BRANCHREG-BLRAA#885,BRANCHREG-BLRAA#886,BRANCHREG-BLRAA#887,BRANCHREG-BLRAA#888,BRANCHREG-BLRAA#889,BRANCHREG-BLRAA#890,BRANCHREG-BLRAA#891,BRANCHREG-BLRAA#892,BRANCHREG-BLRAA#893,BRANCHREG-BLRAA#894,BRANCHREG-BLRAA#895,BRANCHREG-BLRAA#896,BRANCHREG-BLRAA#897,BRANCHREG-BLRAA#898,BRANCHREG-BLRAA#899,BRANCHREG-BLRAA#900,BRANCHREG-BLRAA#901,BRANCHREG-BLRAA#902,BRANCHREG-BLRAA#903,BRANCHREG-BLRAA#904,BRANCHREG-BLRAA#905,BRANCHREG-BLRAA#906,BRANCHREG-BLRAA#907,BRANCHREG-BLRAA#908,BRANCHREG-BLRAA#909,BRANCHREG-BLRAA#910,BRANCHREG-BLRAA#911,BRANCHREG-BLRAA#912,BRANCHREG-BLRAA#913,BRANCHREG-BLRAA#914,BRANCHREG-BLRAA#915,BRANCHREG-BLRAA#916,BRANCHREG-BLRAA#917,BRANCHREG-BLRAA#918,BRANCHREG-BLRAA#919,BRANCHREG-BLRAA#920,BRANCHREG-BLRAA#921,BRANCHREG-BLRAA#922,BRANCHREG-BLRAA#923,BRANCHREG-BLRAA#924,BRANCHREG-BLRAA#925,BRANCHREG-BLRAA#926,BRANCHREG-BLRAA#927,BRANCHREG-BLRAA#928,BRANCHREG-BLRAA#929,BRANCHREG-BLRAA#930,BRANCHREG-BLRAA#931,BRANCHREG-BLRAA#932,BRANCHREG-BLRAA#933,BRANCHREG-BLRAA#934,BRANCHREG-BLRAA#935,BRANCHREG-BLRAA#936,BRANCHREG-BLRAA#937,BRANCHREG-BLRAA#938,BRANCHREG-BLRAA#939,BRANCHREG-BLRAA#940,BRANCHREG-BLRAA#941,BRANCHREG-BLRAA#942,BRANCHREG-BLRAA#943,BRANCHREG-BLRAA#944,BRANCHREG-BLRAA#945,BRANCHREG-BLRAA#946,BRANCHREG-BLRAA#947,BRANCHREG-BLRAA#948,BRANCHREG-BLRAA#949,BRANCHREG-BLRAA#950,BRANCHREG-BLRAA#951,BRANCHREG-BLRAA#952,BRANCHREG-BLRAA#953,BRANCHREG-BLRAA#954,BRANCHREG-BLRAA#955,BRANCHREG-BLRAA#956,BRANCHREG-BLRAA#957,BRANCHREG-BLRAA#958,BRANCHREG-BLRAA#959,BRANCHREG-BLRAA#960,BRANCHREG-BLRAA#961,BRANCHREG-BLRAA#962,BRANCHREG-BLRAA#963,BRANCHREG-BLRAA#964,BRANCHREG-BLRAA#965,BRANCHREG-BLRAA#966,BRANCHREG-BLRAA#967,BRANCHREG-BLRAA#968,BRANCHREG-BLRAA#969,BRANCHREG-BLRAA#970,BRANCHREG-BLRAA#971,BRANCHREG-BLRAA#972,BRANCHREG-BLRAA#973,BRANCHREG-BLRAA#974,BRANCHREG-BLRAA#975,BRANCHREG-BLRAA#976,BRANCHREG-BLRAA#977,BRANCHREG-BLRAA#978,BRANCHREG-BLRAA#979,BRANCHREG-BLRAA#980,BRANCHREG-BLRAA#981,BRANCHREG-BLRAA#982,BRANCHREG-BLRAA#983,BRANCHREG-BLRAA#984,BRANCHREG-BLRAA#985,BRANCHREG-BLRAA#986,BRANCHREG-BLRAA#987,BRANCHREG-BLRAA#988,BRANCHREG-BLRAA#989,BRANCHREG-BLRAA#990,BRANCHREG-BLRAA#991,BRANCHREG-BLRAA#992,BRANCHREG-BLRAA#993,BRANCHREG-BLRAA#994,BRANCHREG-BLRAA#995,BRANCHREG-BLRAA#996,BRANCHREG-BLRAA#997,BRANCHREG-BLRAA#998,BRANCHREG-BLRAA#999,BRANCHREG-BLRAA#1000,BRANCHREG-BLRAA#1001,BRANCHREG-BLRAA#1002,BRANCHREG-BLRAA#1003,BRANCHREG-BLRAA#1004,BRANCHREG-BLRAA#1005,BRANCHREG-BLRAA#1006,BRANCHREG-BLRAA#1007,BRANCHREG-BLRAA#1008,BRANCHREG-BLRAA#1009,BRANCHREG-BLRAA#1010,BRANCHREG-BLRAA#1011,BRANCHREG-BLRAA#1012,BRANCHREG-BLRAA#1013,BRANCHREG-BLRAA#1014,BRANCHREG-BLRAA#1015,BRANCHREG-BLRAA#1016,BRANCHREG-BLRAA#1017,BRANCHREG-BLRAA#1018,BRANCHREG-BLRAA#1019,BRANCHREG-BLRAA#1020,BRANCHREG-BLRAA#1021,BRANCHREG-BLRAA#1022,BRANCHREG-BLRAA#1023,BRANCHREG-BLRAB#0,BRANCHREG-BLRAB#1,BRANCHREG-BLRAB#2,BRANCHREG-BLRAB#3,BRANCHREG-BLRAB#4,BRANCHREG-BLRAB#5,BRANCHREG-BLRAB#6,BRANCHREG-BLRAB#7,BRANCHREG-BLRAB#8,BRANCHREG-BLRAB#9,BRANCHREG-BLRAB#10,BRANCHREG-BLRAB#11,BRANCHREG-BLRAB#12,BRANCHREG-BLRAB#13,BRANCHREG-BLRAB#14,BRANCHREG-BLRAB#15,BRANCHREG-BLRAB#16,BRANCHREG-BLRAB#17,BRANCHREG-BLRAB#18,BRANCHREG-BLRAB#19,BRANCHREG-BLRAB#20,BRANCHREG-BLRAB#21,BRANCHREG-BLRAB#22,BRANCHREG-BLRAB#23,BRANCHREG-BLRAB#24,BRANCHREG-BLRAB#25,BRANCHREG-BLRAB#26,BRANCHREG-BLRAB#27,BRANCHREG-BLRAB#28,BRANCHREG-BLRAB#29,BRANCHREG-BLRAB#30,BRANCHREG-BLRAB#31,BRANCHREG-BLRAB#32,BRANCHREG-BLRAB#33,BRANCHREG-BLRAB#34,BRANCHREG-BLRAB#35,BRANCHREG-BLRAB#36,BRANCHREG-BLRAB#37,BRANCHREG-BLRAB#38,BRANCHREG-BLRAB#39,BRANCHREG-BLRAB#40,BRANCHREG-BLRAB#41,BRANCHREG-BLRAB#42,BRANCHREG-BLRAB#43,BRANCHREG-BLRAB#44,BRANCHREG-BLRAB#45,BRANCHREG-BLRAB#46,BRANCHREG-BLRAB#47,BRANCHREG-BLRAB#48,BRANCHREG-BLRAB#49,BRANCHREG-BLRAB#50,BRANCHREG-BLRAB#51,BRANCHREG-BLRAB#52,BRANCHREG-BLRAB#53,BRANCHREG-BLRAB#54,BRANCHREG-BLRAB#55,BRANCHREG-BLRAB#56,BRANCHREG-BLRAB#57,BRANCHREG-BLRAB#58,BRANCHREG-BLRAB#59,BRANCHREG-BLRAB#60,BRANCHREG-BLRAB#61,BRANCHREG-BLRAB#62,BRANCHREG-BLRAB#63,BRANCHREG-BLRAB#64,BRANCHREG-BLRAB#65,BRANCHREG-BLRAB#66,BRANCHREG-BLRAB#67,BRANCHREG-BLRAB#68,BRANCHREG-BLRAB#69,BRANCHREG-BLRAB#70,BRANCHREG-BLRAB#71,BRANCHREG-BLRAB#72,BRANCHREG-BLRAB#73,BRANCHREG-BLRAB#74,BRANCHREG-BLRAB#75,BRANCHREG-BLRAB#76,BRANCHREG-BLRAB#77,BRANCHREG-BLRAB#78,BRANCHREG-BLRAB#79,BRANCHREG-BLRAB#80,BRANCHREG-BLRAB#81,BRANCHREG-BLRAB#82,BRANCHREG-BLRAB#83,BRANCHREG-BLRAB#84,BRANCHREG-BLRAB#85,BRANCHREG-BLRAB#86,BRANCHREG-BLRAB#87,BRANCHREG-BLRAB#88,BRANCHREG-BLRAB#89,BRANCHREG-BLRAB#90,BRANCHREG-BLRAB#91,BRANCHREG-BLRAB#92,BRANCHREG-BLRAB#93,BRANCHREG-BLRAB#94,BRANCHREG-BLRAB#95,BRANCHREG-BLRAB#96,BRANCHREG-BLRAB#97,BRANCHREG-BLRAB#98,BRANCHREG-BLRAB#99,BRANCHREG-BLRAB#100,BRANCHREG-BLRAB#101,BRANCHREG-BLRAB#102,BRANCHREG-BLRAB#103,BRANCHREG-BLRAB#104,BRANCHREG-BLRAB#105,BRANCHREG-BLRAB#106,BRANCHREG-BLRAB#107,BRANCHREG-BLRAB#108,BRANCHREG-BLRAB#109,BRANCHREG-BLRAB#110,BRANCHREG-BLRAB#111,BRANCHREG-BLRAB#112,BRANCHREG-BLRAB#113,BRANCHREG-BLRAB#114,BRANCHREG-BLRAB#115,BRANCHREG-BLRAB#116,BRANCHREG-BLRAB#117,BRANCHREG-BLRAB#118,BRANCHREG-BLRAB#119,BRANCHREG-BLRAB#120,BRANCHREG-BLRAB#121,BRANCHREG-BLRAB#122,BRANCHREG-BLRAB#123,BRANCHREG-BLRAB#124,BRANCHREG-BLRAB#125,BRANCHREG-BLRAB#126,BRANCHREG-BLRAB#127,BRANCHREG-BLRAB#128,BRANCHREG-BLRAB#129,BRANCHREG-BLRAB#130,BRANCHREG-BLRAB#131,BRANCHREG-BLRAB#132,BRANCHREG-BLRAB#133,BRANCHREG-BLRAB#134,BRANCHREG-BLRAB#135,BRANCHREG-BLRAB#136,BRANCHREG-BLRAB#137,BRANCHREG-BLRAB#138,BRANCHREG-BLRAB#139,BRANCHREG-BLRAB#140,BRANCHREG-BLRAB#141,BRANCHREG-BLRAB#142,BRANCHREG-BLRAB#143,BRANCHREG-BLRAB#144,BRANCHREG-BLRAB#145,BRANCHREG-BLRAB#146,BRANCHREG-BLRAB#147,BRANCHREG-BLRAB#148,BRANCHREG-BLRAB#149,BRANCHREG-BLRAB#150,BRANCHREG-BLRAB#151,BRANCHREG-BLRAB#152,BRANCHREG-BLRAB#153,BRANCHREG-BLRAB#154,BRANCHREG-BLRAB#155,BRANCHREG-BLRAB#156,BRANCHREG-BLRAB#157,BRANCHREG-BLRAB#158,BRANCHREG-BLRAB#159,BRANCHREG-BLRAB#160,BRANCHREG-BLRAB#161,BRANCHREG-BLRAB#162,BRANCHREG-BLRAB#163,BRANCHREG-BLRAB#164,BRANCHREG-BLRAB#165,BRANCHREG-BLRAB#166,BRANCHREG-BLRAB#167,BRANCHREG-BLRAB#168,BRANCHREG-BLRAB#169,BRANCHREG-BLRAB#170,BRANCHREG-BLRAB#171,BRANCHREG-BLRAB#172,BRANCHREG-BLRAB#173,BRANCHREG-BLRAB#174,BRANCHREG-BLRAB#175,BRANCHREG-BLRAB#176,BRANCHREG-BLRAB#177,BRANCHREG-BLRAB#178,BRANCHREG-BLRAB#179,BRANCHREG-BLRAB#180,BRANCHREG-BLRAB#181,BRANCHREG-BLRAB#182,BRANCHREG-BLRAB#183,BRANCHREG-BLRAB#184,BRANCHREG-BLRAB#185,BRANCHREG-BLRAB#186,BRANCHREG-BLRAB#187,BRANCHREG-BLRAB#188,BRANCHREG-BLRAB#189,BRANCHREG-BLRAB#190,BRANCHREG-BLRAB#191,BRANCHREG-BLRAB#192,BRANCHREG-BLRAB#193,BRANCHREG-BLRAB#194,BRANCHREG-BLRAB#195,BRANCHREG-BLRAB#196,BRANCHREG-BLRAB#197,BRANCHREG-BLRAB#198,BRANCHREG-BLRAB#199,BRANCHREG-BLRAB#200,BRANCHREG-BLRAB#201,BRANCHREG-BLRAB#202,BRANCHREG-BLRAB#203,BRANCHREG-BLRAB#204,BRANCHREG-BLRAB#205,BRANCHREG-BLRAB#206,BRANCHREG-BLRAB#207,BRANCHREG-BLRAB#208,BRANCHREG-BLRAB#209,BRANCHREG-BLRAB#210,BRANCHREG-BLRAB#211,BRANCHREG-BLRAB#212,BRANCHREG-BLRAB#213,BRANCHREG-BLRAB#214,BRANCHREG-BLRAB#215,BRANCHREG-BLRAB#216,BRANCHREG-BLRAB#217,BRANCHREG-BLRAB#218,BRANCHREG-BLRAB#219,BRANCHREG-BLRAB#220,BRANCHREG-BLRAB#221,BRANCHREG-BLRAB#222,BRANCHREG-BLRAB#223,BRANCHREG-BLRAB#224,BRANCHREG-BLRAB#225,BRANCHREG-BLRAB#226,BRANCHREG-BLRAB#227,BRANCHREG-BLRAB#228,BRANCHREG-BLRAB#229,BRANCHREG-BLRAB#230,BRANCHREG-BLRAB#231,BRANCHREG-BLRAB#232,BRANCHREG-BLRAB#233,BRANCHREG-BLRAB#234,BRANCHREG-BLRAB#235,BRANCHREG-BLRAB#236,BRANCHREG-BLRAB#237,BRANCHREG-BLRAB#238,BRANCHREG-BLRAB#239,BRANCHREG-BLRAB#240,BRANCHREG-BLRAB#241,BRANCHREG-BLRAB#242,BRANCHREG-BLRAB#243,BRANCHREG-BLRAB#244,BRANCHREG-BLRAB#245,BRANCHREG-BLRAB#246,BRANCHREG-BLRAB#247,BRANCHREG-BLRAB#248,BRANCHREG-BLRAB#249,BRANCHREG-BLRAB#250,BRANCHREG-BLRAB#251,BRANCHREG-BLRAB#252,BRANCHREG-BLRAB#253,BRANCHREG-BLRAB#254,BRANCHREG-BLRAB#255,BRANCHREG-BLRAB#256,BRANCHREG-BLRAB#257,BRANCHREG-BLRAB#258,BRANCHREG-BLRAB#259,BRANCHREG-BLRAB#260,BRANCHREG-BLRAB#261,BRANCHREG-BLRAB#262,BRANCHREG-BLRAB#263,BRANCHREG-BLRAB#264,BRANCHREG-BLRAB#265,BRANCHREG-BLRAB#266,BRANCHREG-BLRAB#267,BRANCHREG-BLRAB#268,BRANCHREG-BLRAB#269,BRANCHREG-BLRAB#270,BRANCHREG-BLRAB#271,BRANCHREG-BLRAB#272,BRANCHREG-BLRAB#273,BRANCHREG-BLRAB#274,BRANCHREG-BLRAB#275,BRANCHREG-BLRAB#276,BRANCHREG-BLRAB#277,BRANCHREG-BLRAB#278,BRANCHREG-BLRAB#279,BRANCHREG-BLRAB#280,BRANCHREG-BLRAB#281,BRANCHREG-BLRAB#282,BRANCHREG-BLRAB#283,BRANCHREG-BLRAB#284,BRANCHREG-BLRAB#285,BRANCHREG-BLRAB#286,BRANCHREG-BLRAB#287,BRANCHREG-BLRAB#288,BRANCHREG-BLRAB#289,BRANCHREG-BLRAB#290,BRANCHREG-BLRAB#291,BRANCHREG-BLRAB#292,BRANCHREG-BLRAB#293,BRANCHREG-BLRAB#294,BRANCHREG-BLRAB#295,BRANCHREG-BLRAB#296,BRANCHREG-BLRAB#297,BRANCHREG-BLRAB#298,BRANCHREG-BLRAB#299,BRANCHREG-BLRAB#300,BRANCHREG-BLRAB#301,BRANCHREG-BLRAB#302,BRANCHREG-BLRAB#303,BRANCHREG-BLRAB#304,BRANCHREG-BLRAB#305,BRANCHREG-BLRAB#306,BRANCHREG-BLRAB#307,BRANCHREG-BLRAB#308,BRANCHREG-BLRAB#309,BRANCHREG-BLRAB#310,BRANCHREG-BLRAB#311,BRANCHREG-BLRAB#312,BRANCHREG-BLRAB#313,BRANCHREG-BLRAB#314,BRANCHREG-BLRAB#315,BRANCHREG-BLRAB#316,BRANCHREG-BLRAB#317,BRANCHREG-BLRAB#318,BRANCHREG-BLRAB#319,BRANCHREG-BLRAB#320,BRANCHREG-BLRAB#321,BRANCHREG-BLRAB#322,BRANCHREG-BLRAB#323,BRANCHREG-BLRAB#324,BRANCHREG-BLRAB#325,BRANCHREG-BLRAB#326,BRANCHREG-BLRAB#327,BRANCHREG-BLRAB#328,BRANCHREG-BLRAB#329,BRANCHREG-BLRAB#330,BRANCHREG-BLRAB#331,BRANCHREG-BLRAB#332,BRANCHREG-BLRAB#333,BRANCHREG-BLRAB#334,BRANCHREG-BLRAB#335,BRANCHREG-BLRAB#336,BRANCHREG-BLRAB#337,BRANCHREG-BLRAB#338,BRANCHREG-BLRAB#339,BRANCHREG-BLRAB#340,BRANCHREG-BLRAB#341,BRANCHREG-BLRAB#342,BRANCHREG-BLRAB#343,BRANCHREG-BLRAB#344,BRANCHREG-BLRAB#345,BRANCHREG-BLRAB#346,BRANCHREG-BLRAB#347,BRANCHREG-BLRAB#348,BRANCHREG-BLRAB#349,BRANCHREG-BLRAB#350,BRANCHREG-BLRAB#351,BRANCHREG-BLRAB#352,BRANCHREG-BLRAB#353,BRANCHREG-BLRAB#354,BRANCHREG-BLRAB#355,BRANCHREG-BLRAB#356,BRANCHREG-BLRAB#357,BRANCHREG-BLRAB#358,BRANCHREG-BLRAB#359,BRANCHREG-BLRAB#360,BRANCHREG-BLRAB#361,BRANCHREG-BLRAB#362,BRANCHREG-BLRAB#363,BRANCHREG-BLRAB#364,BRANCHREG-BLRAB#365,BRANCHREG-BLRAB#366,BRANCHREG-BLRAB#367,BRANCHREG-BLRAB#368,BRANCHREG-BLRAB#369,BRANCHREG-BLRAB#370,BRANCHREG-BLRAB#371,BRANCHREG-BLRAB#372,BRANCHREG-BLRAB#373,BRANCHREG-BLRAB#374,BRANCHREG-BLRAB#375,BRANCHREG-BLRAB#376,BRANCHREG-BLRAB#377,BRANCHREG-BLRAB#378,BRANCHREG-BLRAB#379,BRANCHREG-BLRAB#380,BRANCHREG-BLRAB#381,BRANCHREG-BLRAB#382,BRANCHREG-BLRAB#383,BRANCHREG-BLRAB#384,BRANCHREG-BLRAB#385,BRANCHREG-BLRAB#386,BRANCHREG-BLRAB#387,BRANCHREG-BLRAB#388,BRANCHREG-BLRAB#389,BRANCHREG-BLRAB#390,BRANCHREG-BLRAB#391,BRANCHREG-BLRAB#392,BRANCHREG-BLRAB#393,BRANCHREG-BLRAB#394,BRANCHREG-BLRAB#395,BRANCHREG-BLRAB#396,BRANCHREG-BLRAB#397,BRANCHREG-BLRAB#398,BRANCHREG-BLRAB#399,BRANCHREG-BLRAB#400,BRANCHREG-BLRAB#401,BRANCHREG-BLRAB#402,BRANCHREG-BLRAB#403,BRANCHREG-BLRAB#404,BRANCHREG-BLRAB#405,BRANCHREG-BLRAB#406,BRANCHREG-BLRAB#407,BRANCHREG-BLRAB#408,BRANCHREG-BLRAB#409,BRANCHREG-BLRAB#410,BRANCHREG-BLRAB#411,BRANCHREG-BLRAB#412,BRANCHREG-BLRAB#413,BRANCHREG-BLRAB#414,BRANCHREG-BLRAB#415,BRANCHREG-BLRAB#416,BRANCHREG-BLRAB#417,BRANCHREG-BLRAB#418,BRANCHREG-BLRAB#419,BRANCHREG-BLRAB#420,BRANCHREG-BLRAB#421,BRANCHREG-BLRAB#422,BRANCHREG-BLRAB#423,BRANCHREG-BLRAB#424,BRANCHREG-BLRAB#425,BRANCHREG-BLRAB#426,BRANCHREG-BLRAB#427,BRANCHREG-BLRAB#428,BRANCHREG-BLRAB#429,BRANCHREG-BLRAB#430,BRANCHREG-BLRAB#431,BRANCHREG-BLRAB#432,BRANCHREG-BLRAB#433,BRANCHREG-BLRAB#434,BRANCHREG-BLRAB#435,BRANCHREG-BLRAB#436,BRANCHREG-BLRAB#437,BRANCHREG-BLRAB#438,BRANCHREG-BLRAB#439,BRANCHREG-BLRAB#440,BRANCHREG-BLRAB#441,BRANCHREG-BLRAB#442,BRANCHREG-BLRAB#443,BRANCHREG-BLRAB#444,BRANCHREG-BLRAB#445,BRANCHREG-BLRAB#446,BRANCHREG-BLRAB#447,BRANCHREG-BLRAB#448,BRANCHREG-BLRAB#449,BRANCHREG-BLRAB#450,BRANCHREG-BLRAB#451,BRANCHREG-BLRAB#452,BRANCHREG-BLRAB#453,BRANCHREG-BLRAB#454,BRANCHREG-BLRAB#455,BRANCHREG-BLRAB#456,BRANCHREG-BLRAB#457,BRANCHREG-BLRAB#458,BRANCHREG-BLRAB#459,BRANCHREG-BLRAB#460,BRANCHREG-BLRAB#461,BRANCHREG-BLRAB#462,BRANCHREG-BLRAB#463,BRANCHREG-BLRAB#464,BRANCHREG-BLRAB#465,BRANCHREG-BLRAB#466,BRANCHREG-BLRAB#467,BRANCHREG-BLRAB#468,BRANCHREG-BLRAB#469,BRANCHREG-BLRAB#470,BRANCHREG-BLRAB#471,BRANCHREG-BLRAB#472,BRANCHREG-BLRAB#473,BRANCHREG-BLRAB#474,BRANCHREG-BLRAB#475,BRANCHREG-BLRAB#476,BRANCHREG-BLRAB#477,BRANCHREG-BLRAB#478,BRANCHREG-BLRAB#479,BRANCHREG-BLRAB#480,BRANCHREG-BLRAB#481,BRANCHREG-BLRAB#482,BRANCHREG-BLRAB#483,BRANCHREG-BLRAB#484,BRANCHREG-BLRAB#485,BRANCHREG-BLRAB#486,BRANCHREG-BLRAB#487,BRANCHREG-BLRAB#488,BRANCHREG-BLRAB#489,BRANCHREG-BLRAB#490,BRANCHREG-BLRAB#491,BRANCHREG-BLRAB#492,BRANCHREG-BLRAB#493,BRANCHREG-BLRAB#494,BRANCHREG-BLRAB#495,BRANCHREG-BLRAB#496,BRANCHREG-BLRAB#497,BRANCHREG-BLRAB#498,BRANCHREG-BLRAB#499,BRANCHREG-BLRAB#500,BRANCHREG-BLRAB#501,BRANCHREG-BLRAB#502,BRANCHREG-BLRAB#503,BRANCHREG-BLRAB#504,BRANCHREG-BLRAB#505,BRANCHREG-BLRAB#506,BRANCHREG-BLRAB#507,BRANCHREG-BLRAB#508,BRANCHREG-BLRAB#509,BRANCHREG-BLRAB#510,BRANCHREG-BLRAB#511,BRANCHREG-BLRAB#512,BRANCHREG-BLRAB#513,BRANCHREG-BLRAB#514,BRANCHREG-BLRAB#515,BRANCHREG-BLRAB#516,BRANCHREG-BLRAB#517,BRANCHREG-BLRAB#518,BRANCHREG-BLRAB#519,BRANCHREG-BLRAB#520,BRANCHREG-BLRAB#521,BRANCHREG-BLRAB#522,BRANCHREG-BLRAB#523,BRANCHREG-BLRAB#524,BRANCHREG-BLRAB#525,BRANCHREG-BLRAB#526,BRANCHREG-BLRAB#527,BRANCHREG-BLRAB#528,BRANCHREG-BLRAB#529,BRANCHREG-BLRAB#530,BRANCHREG-BLRAB#531,BRANCHREG-BLRAB#532,BRANCHREG-BLRAB#533,BRANCHREG-BLRAB#534,BRANCHREG-BLRAB#535,BRANCHREG-BLRAB#536,BRANCHREG-BLRAB#537,BRANCHREG-BLRAB#538,BRANCHREG-BLRAB#539,BRANCHREG-BLRAB#540,BRANCHREG-BLRAB#541,BRANCHREG-BLRAB#542,BRANCHREG-BLRAB#543,BRANCHREG-BLRAB#544,BRANCHREG-BLRAB#545,BRANCHREG-BLRAB#546,BRANCHREG-BLRAB#547,BRANCHREG-BLRAB#548,BRANCHREG-BLRAB#549,BRANCHREG-BLRAB#550,BRANCHREG-BLRAB#551,BRANCHREG-BLRAB#552,BRANCHREG-BLRAB#553,BRANCHREG-BLRAB#554,BRANCHREG-BLRAB#555,BRANCHREG-BLRAB#556,BRANCHREG-BLRAB#557,BRANCHREG-BLRAB#558,BRANCHREG-BLRAB#559,BRANCHREG-BLRAB#560,BRANCHREG-BLRAB#561,BRANCHREG-BLRAB#562,BRANCHREG-BLRAB#563,BRANCHREG-BLRAB#564,BRANCHREG-BLRAB#565,BRANCHREG-BLRAB#566,BRANCHREG-BLRAB#567,BRANCHREG-BLRAB#568,BRANCHREG-BLRAB#569,BRANCHREG-BLRAB#570,BRANCHREG-BLRAB#571,BRANCHREG-BLRAB#572,BRANCHREG-BLRAB#573,BRANCHREG-BLRAB#574,BRANCHREG-BLRAB#575,BRANCHREG-BLRAB#576,BRANCHREG-BLRAB#577,BRANCHREG-BLRAB#578,BRANCHREG-BLRAB#579,BRANCHREG-BLRAB#580,BRANCHREG-BLRAB#581,BRANCHREG-BLRAB#582,BRANCHREG-BLRAB#583,BRANCHREG-BLRAB#584,BRANCHREG-BLRAB#585,BRANCHREG-BLRAB#586,BRANCHREG-BLRAB#587,BRANCHREG-BLRAB#588,BRANCHREG-BLRAB#589,BRANCHREG-BLRAB#590,BRANCHREG-BLRAB#591,BRANCHREG-BLRAB#592,BRANCHREG-BLRAB#593,BRANCHREG-BLRAB#594,BRANCHREG-BLRAB#595,BRANCHREG-BLRAB#596,BRANCHREG-BLRAB#597,BRANCHREG-BLRAB#598,BRANCHREG-BLRAB#599,BRANCHREG-BLRAB#600,BRANCHREG-BLRAB#601,BRANCHREG-BLRAB#602,BRANCHREG-BLRAB#603,BRANCHREG-BLRAB#604,BRANCHREG-BLRAB#605,BRANCHREG-BLRAB#606,BRANCHREG-BLRAB#607,BRANCHREG-BLRAB#608,BRANCHREG-BLRAB#609,BRANCHREG-BLRAB#610,BRANCHREG-BLRAB#611,BRANCHREG-BLRAB#612,BRANCHREG-BLRAB#613,BRANCHREG-BLRAB#614,BRANCHREG-BLRAB#615,BRANCHREG-BLRAB#616,BRANCHREG-BLRAB#617,BRANCHREG-BLRAB#618,BRANCHREG-BLRAB#619,BRANCHREG-BLRAB#620,BRANCHREG-BLRAB#621,BRANCHREG-BLRAB#622,BRANCHREG-BLRAB#623,BRANCHREG-BLRAB#624,BRANCHREG-BLRAB#625,BRANCHREG-BLRAB#626,BRANCHREG-BLRAB#627,BRANCHREG-BLRAB#628,BRANCHREG-BLRAB#629,BRANCHREG-BLRAB#630,BRANCHREG-BLRAB#631,BRANCHREG-BLRAB#632,BRANCHREG-BLRAB#633,BRANCHREG-BLRAB#634,BRANCHREG-BLRAB#635,BRANCHREG-BLRAB#636,BRANCHREG-BLRAB#637,BRANCHREG-BLRAB#638,BRANCHREG-BLRAB#639,BRANCHREG-BLRAB#640,BRANCHREG-BLRAB#641,BRANCHREG-BLRAB#642,BRANCHREG-BLRAB#643,BRANCHREG-BLRAB#644,BRANCHREG-BLRAB#645,BRANCHREG-BLRAB#646,BRANCHREG-BLRAB#647,BRANCHREG-BLRAB#648,BRANCHREG-BLRAB#649,BRANCHREG-BLRAB#650,BRANCHREG-BLRAB#651,BRANCHREG-BLRAB#652,BRANCHREG-BLRAB#653,BRANCHREG-BLRAB#654,BRANCHREG-BLRAB#655,BRANCHREG-BLRAB#656,BRANCHREG-BLRAB#657,BRANCHREG-BLRAB#658,BRANCHREG-BLRAB#659,BRANCHREG-BLRAB#660,BRANCHREG-BLRAB#661,BRANCHREG-BLRAB#662,BRANCHREG-BLRAB#663,BRANCHREG-BLRAB#664,BRANCHREG-BLRAB#665,BRANCHREG-BLRAB#666,BRANCHREG-BLRAB#667,BRANCHREG-BLRAB#668,BRANCHREG-BLRAB#669,BRANCHREG-BLRAB#670,BRANCHREG-BLRAB#671,BRANCHREG-BLRAB#672,BRANCHREG-BLRAB#673,BRANCHREG-BLRAB#674,BRANCHREG-BLRAB#675,BRANCHREG-BLRAB#676,BRANCHREG-BLRAB#677,BRANCHREG-BLRAB#678,BRANCHREG-BLRAB#679,BRANCHREG-BLRAB#680,BRANCHREG-BLRAB#681,BRANCHREG-BLRAB#682,BRANCHREG-BLRAB#683,BRANCHREG-BLRAB#684,BRANCHREG-BLRAB#685,BRANCHREG-BLRAB#686,BRANCHREG-BLRAB#687,BRANCHREG-BLRAB#688,BRANCHREG-BLRAB#689,BRANCHREG-BLRAB#690,BRANCHREG-BLRAB#691,BRANCHREG-BLRAB#692,BRANCHREG-BLRAB#693,BRANCHREG-BLRAB#694,BRANCHREG-BLRAB#695,BRANCHREG-BLRAB#696,BRANCHREG-BLRAB#697,BRANCHREG-BLRAB#698,BRANCHREG-BLRAB#699,BRANCHREG-BLRAB#700,BRANCHREG-BLRAB#701,BRANCHREG-BLRAB#702,BRANCHREG-BLRAB#703,BRANCHREG-BLRAB#704,BRANCHREG-BLRAB#705,BRANCHREG-BLRAB#706,BRANCHREG-BLRAB#707,BRANCHREG-BLRAB#708,BRANCHREG-BLRAB#709,BRANCHREG-BLRAB#710,BRANCHREG-BLRAB#711,BRANCHREG-BLRAB#712,BRANCHREG-BLRAB#713,BRANCHREG-BLRAB#714,BRANCHREG-BLRAB#715,BRANCHREG-BLRAB#716,BRANCHREG-BLRAB#717,BRANCHREG-BLRAB#718,BRANCHREG-BLRAB#719,BRANCHREG-BLRAB#720,BRANCHREG-BLRAB#721,BRANCHREG-BLRAB#722,BRANCHREG-BLRAB#723,BRANCHREG-BLRAB#724,BRANCHREG-BLRAB#725,BRANCHREG-BLRAB#726,BRANCHREG-BLRAB#727,BRANCHREG-BLRAB#728,BRANCHREG-BLRAB#729,BRANCHREG-BLRAB#730,BRANCHREG-BLRAB#731,BRANCHREG-BLRAB#732,BRANCHREG-BLRAB#733,BRANCHREG-BLRAB#734,BRANCHREG-BLRAB#735,BRANCHREG-BLRAB#736,BRANCHREG-BLRAB#737,BRANCHREG-BLRAB#738,BRANCHREG-BLRAB#739,BRANCHREG-BLRAB#740,BRANCHREG-BLRAB#741,BRANCHREG-BLRAB#742,BRANCHREG-BLRAB#743,BRANCHREG-BLRAB#744,BRANCHREG-BLRAB#745,BRANCHREG-BLRAB#746,BRANCHREG-BLRAB#747,BRANCHREG-BLRAB#748,BRANCHREG-BLRAB#749,BRANCHREG-BLRAB#750,BRANCHREG-BLRAB#751,BRANCHREG-BLRAB#752,BRANCHREG-BLRAB#753,BRANCHREG-BLRAB#754,BRANCHREG-BLRAB#755,BRANCHREG-BLRAB#756,BRANCHREG-BLRAB#757,BRANCHREG-BLRAB#758,BRANCHREG-BLRAB#759,BRANCHREG-BLRAB#760,BRANCHREG-BLRAB#761,BRANCHREG-BLRAB#762,BRANCHREG-BLRAB#763,BRANCHREG-BLRAB#764,BRANCHREG-BLRAB#765,BRANCHREG-BLRAB#766,BRANCHREG-BLRAB#767,BRANCHREG-BLRAB#768,BRANCHREG-BLRAB#769,BRANCHREG-BLRAB#770,BRANCHREG-BLRAB#771,BRANCHREG-BLRAB#772,BRANCHREG-BLRAB#773,BRANCHREG-BLRAB#774,BRANCHREG-BLRAB#775,BRANCHREG-BLRAB#776,BRANCHREG-BLRAB#777,BRANCHREG-BLRAB#778,BRANCHREG-BLRAB#779,BRANCHREG-BLRAB#780,BRANCHREG-BLRAB#781,BRANCHREG-BLRAB#782,BRANCHREG-BLRAB#783,BRANCHREG-BLRAB#784,BRANCHREG-BLRAB#785,BRANCHREG-BLRAB#786,BRANCHREG-BLRAB#787,BRANCHREG-BLRAB#788,BRANCHREG-BLRAB#789,BRANCHREG-BLRAB#790,BRANCHREG-BLRAB#791,BRANCHREG-BLRAB#792,BRANCHREG-BLRAB#793,BRANCHREG-BLRAB#794,BRANCHREG-BLRAB#795,BRANCHREG-BLRAB#796,BRANCHREG-BLRAB#797,BRANCHREG-BLRAB#798,BRANCHREG-BLRAB#799,BRANCHREG-BLRAB#800,BRANCHREG-BLRAB#801,BRANCHREG-BLRAB#802,BRANCHREG-BLRAB#803,BRANCHREG-BLRAB#804,BRANCHREG-BLRAB#805,BRANCHREG-BLRAB#806,BRANCHREG-BLRAB#807,BRANCHREG-BLRAB#808,BRANCHREG-BLRAB#809,BRANCHREG-BLRAB#810,BRANCHREG-BLRAB#811,BRANCHREG-BLRAB#812,BRANCHREG-BLRAB#813,BRANCHREG-BLRAB#814,BRANCHREG-BLRAB#815,BRANCHREG-BLRAB#816,BRANCHREG-BLRAB#817,BRANCHREG-BLRAB#818,BRANCHREG-BLRAB#819,BRANCHREG-BLRAB#820,BRANCHREG-BLRAB#821,BRANCHREG-BLRAB#822,BRANCHREG-BLRAB#823,BRANCHREG-BLRAB#824,BRANCHREG-BLRAB#825,BRANCHREG-BLRAB#826,BRANCHREG-BLRAB#827,BRANCHREG-BLRAB#828,BRANCHREG-BLRAB#829,BRANCHREG-BLRAB#830,BRANCHREG-BLRAB#831,BRANCHREG-BLRAB#832,BRANCHREG-BLRAB#833,BRANCHREG-BLRAB#834,BRANCHREG-BLRAB#835,BRANCHREG-BLRAB#836,BRANCHREG-BLRAB#837,BRANCHREG-BLRAB#838,BRANCHREG-BLRAB#839,BRANCHREG-BLRAB#840,BRANCHREG-BLRAB#841,BRANCHREG-BLRAB#842,BRANCHREG-BLRAB#843,BRANCHREG-BLRAB#844,BRANCHREG-BLRAB#845,BRANCHREG-BLRAB#846,BRANCHREG-BLRAB#847,BRANCHREG-BLRAB#848,BRANCHREG-BLRAB#849,BRANCHREG-BLRAB#850,BRANCHREG-BLRAB#851,BRANCHREG-BLRAB#852,BRANCHREG-BLRAB#853,BRANCHREG-BLRAB#854,BRANCHREG-BLRAB#855,BRANCHREG-BLRAB#856,BRANCHREG-BLRAB#857,BRANCHREG-BLRAB#858,BRANCHREG-BLRAB#859,BRANCHREG-BLRAB#860,BRANCHREG-BLRAB#861,BRANCHREG-BLRAB#862,BRANCHREG-BLRAB#863,BRANCHREG-BLRAB#864,BRANCHREG-BLRAB#865,BRANCHREG-BLRAB#866,BRANCHREG-BLRAB#867,BRANCHREG-BLRAB#868,BRANCHREG-BLRAB#869,BRANCHREG-BLRAB#870,BRANCHREG-BLRAB#871,BRANCHREG-BLRAB#872,BRANCHREG-BLRAB#873,BRANCHREG-BLRAB#874,BRANCHREG-BLRAB#875,BRANCHREG-BLRAB#876,BRANCHREG-BLRAB#877,BRANCHREG-BLRAB#878,BRANCHREG-BLRAB#879,BRANCHREG-BLRAB#880,BRANCHREG-BLRAB#881,BRANCHREG-BLRAB#882,BRANCHREG-BLRAB#883,BRANCHREG-BLRAB#884,BRANCHREG-BLRAB#885,BRANCHREG-BLRAB#886,BRANCHREG-BLRAB#887,BRANCHREG-BLRAB#888,BRANCHREG-BLRAB#889,BRANCHREG-BLRAB#890,BRANCHREG-BLRAB#891,BRANCHREG-BLRAB#892,BRANCHREG-BLRAB#893,BRANCHREG-BLRAB#894,BRANCHREG-BLRAB#895,BRANCHREG-BLRAB#896,BRANCHREG-BLRAB#897,BRANCHREG-BLRAB#898,BRANCHREG-BLRAB#899,BRANCHREG-BLRAB#900,BRANCHREG-BLRAB#901,BRANCHREG-BLRAB#902,BRANCHREG-BLRAB#903,BRANCHREG-BLRAB#904,BRANCHREG-BLRAB#905,BRANCHREG-BLRAB#906,BRANCHREG-BLRAB#907,BRANCHREG-BLRAB#908,BRANCHREG-BLRAB#909,BRANCHREG-BLRAB#910,BRANCHREG-BLRAB#911,BRANCHREG-BLRAB#912,BRANCHREG-BLRAB#913,BRANCHREG-BLRAB#914,BRANCHREG-BLRAB#915,BRANCHREG-BLRAB#916,BRANCHREG-BLRAB#917,BRANCHREG-BLRAB#918,BRANCHREG-BLRAB#919,BRANCHREG-BLRAB#920,BRANCHREG-BLRAB#921,BRANCHREG-BLRAB#922,BRANCHREG-BLRAB#923,BRANCHREG-BLRAB#924,BRANCHREG-BLRAB#925,BRANCHREG-BLRAB#926,BRANCHREG-BLRAB#927,BRANCHREG-BLRAB#928,BRANCHREG-BLRAB#929,BRANCHREG-BLRAB#930,BRANCHREG-BLRAB#931,BRANCHREG-BLRAB#932,BRANCHREG-BLRAB#933,BRANCHREG-BLRAB#934,BRANCHREG-BLRAB#935,BRANCHREG-BLRAB#936,BRANCHREG-BLRAB#937,BRANCHREG-BLRAB#938,BRANCHREG-BLRAB#939,BRANCHREG-BLRAB#940,BRANCHREG-BLRAB#941,BRANCHREG-BLRAB#942,BRANCHREG-BLRAB#943,BRANCHREG-BLRAB#944,BRANCHREG-BLRAB#945,BRANCHREG-BLRAB#946,BRANCHREG-BLRAB#947,BRANCHREG-BLRAB#948,BRANCHREG-BLRAB#949,BRANCHREG-BLRAB#950,BRANCHREG-BLRAB#951,BRANCHREG-BLRAB#952,BRANCHREG-BLRAB#953,BRANCHREG-BLRAB#954,BRANCHREG-BLRAB#955,BRANCHREG-BLRAB#956,BRANCHREG-BLRAB#957,BRANCHREG-BLRAB#958,BRANCHREG-BLRAB#959,BRANCHREG-BLRAB#960,BRANCHREG-BLRAB#961,BRANCHREG-BLRAB#962,BRANCHREG-BLRAB#963,BRANCHREG-BLRAB#964,BRANCHREG-BLRAB#965,BRANCHREG-BLRAB#966,BRANCHREG-BLRAB#967,BRANCHREG-BLRAB#968,BRANCHREG-BLRAB#969,BRANCHREG-BLRAB#970,BRANCHREG-BLRAB#971,BRANCHREG-BLRAB#972,BRANCHREG-BLRAB#973,BRANCHREG-BLRAB#974,BRANCHREG-BLRAB#975,BRANCHREG-BLRAB#976,BRANCHREG-BLRAB#977,BRANCHREG-BLRAB#978,BRANCHREG-BLRAB#979,BRANCHREG-BLRAB#980,BRANCHREG-BLRAB#981,BRANCHREG-BLRAB#982,BRANCHREG-BLRAB#983,BRANCHREG-BLRAB#984,BRANCHREG-BLRAB#985,BRANCHREG-BLRAB#986,BRANCHREG-BLRAB#987,BRANCHREG-BLRAB#988,BRANCHREG-BLRAB#989,BRANCHREG-BLRAB#990,BRANCHREG-BLRAB#991,BRANCHREG-BLRAB#992,BRANCHREG-BLRAB#993,BRANCHREG-BLRAB#994,BRANCHREG-BLRAB#995,BRANCHREG-BLRAB#996,BRANCHREG-BLRAB#997,BRANCHREG-BLRAB#998,BRANCHREG-BLRAB#999,BRANCHREG-BLRAB#1000,BRANCHREG-BLRAB#1001,BRANCHREG-BLRAB#1002,BRANCHREG-BLRAB#1003,BRANCHREG-BLRAB#1004,BRANCHREG-BLRAB#1005,BRANCHREG-BLRAB#1006,BRANCHREG-BLRAB#1007,BRANCHREG-BLRAB#1008,BRANCHREG-BLRAB#1009,BRANCHREG-BLRAB#1010,BRANCHREG-BLRAB#1011,BRANCHREG-BLRAB#1012,BRANCHREG-BLRAB#1013,BRANCHREG-BLRAB#1014,BRANCHREG-BLRAB#1015,BRANCHREG-BLRAB#1016,BRANCHREG-BLRAB#1017,BRANCHREG-BLRAB#1018,BRANCHREG-BLRAB#1019,BRANCHREG-BLRAB#1020,BRANCHREG-BLRAB#1021,BRANCHREG-BLRAB#1022,BRANCHREG-BLRAB#1023
pub const fn classify_impl_15a(inst: u32) -> u32 {
  if (inst&0xff800) != 0xf0800 { return 0; }
  let idx = match (inst >> 0) & 0x7ff {
    0x0 => 0x98b,
    0x1 => 0x98b,
    0x2 => 0x98b,
    0x3 => 0x98b,
    0x4 => 0x98b,
    0x5 => 0x98b,
    0x6 => 0x98b,
    0x7 => 0x98b,
    0x8 => 0x98b,
    0x9 => 0x98b,
    0xa => 0x98b,
    0xb => 0x98b,
    0xc => 0x98b,
    0xd => 0x98b,
    0xe => 0x98b,
    0xf => 0x98b,
    0x10 => 0x98b,
    0x11 => 0x98b,
    0x12 => 0x98b,
    0x13 => 0x98b,
    0x14 => 0x98b,
    0x15 => 0x98b,
    0x16 => 0x98b,
    0x17 => 0x98b,
    0x18 => 0x98b,
    0x19 => 0x98b,
    0x1a => 0x98b,
    0x1b => 0x98b,
    0x1c => 0x98b,
    0x1d => 0x98b,
    0x1e => 0x98b,
    0x1f => 0x98b,
    0x20 => 0x98b,
    0x21 => 0x98b,
    0x22 => 0x98b,
    0x23 => 0x98b,
    0x24 => 0x98b,
    0x25 => 0x98b,
    0x26 => 0x98b,
    0x27 => 0x98b,
    0x28 => 0x98b,
    0x29 => 0x98b,
    0x2a => 0x98b,
    0x2b => 0x98b,
    0x2c => 0x98b,
    0x2d => 0x98b,
    0x2e => 0x98b,
    0x2f => 0x98b,
    0x30 => 0x98b,
    0x31 => 0x98b,
    0x32 => 0x98b,
    0x33 => 0x98b,
    0x34 => 0x98b,
    0x35 => 0x98b,
    0x36 => 0x98b,
    0x37 => 0x98b,
    0x38 => 0x98b,
    0x39 => 0x98b,
    0x3a => 0x98b,
    0x3b => 0x98b,
    0x3c => 0x98b,
    0x3d => 0x98b,
    0x3e => 0x98b,
    0x3f => 0x98b,
    0x40 => 0x98b,
    0x41 => 0x98b,
    0x42 => 0x98b,
    0x43 => 0x98b,
    0x44 => 0x98b,
    0x45 => 0x98b,
    0x46 => 0x98b,
    0x47 => 0x98b,
    0x48 => 0x98b,
    0x49 => 0x98b,
    0x4a => 0x98b,
    0x4b => 0x98b,
    0x4c => 0x98b,
    0x4d => 0x98b,
    0x4e => 0x98b,
    0x4f => 0x98b,
    0x50 => 0x98b,
    0x51 => 0x98b,
    0x52 => 0x98b,
    0x53 => 0x98b,
    0x54 => 0x98b,
    0x55 => 0x98b,
    0x56 => 0x98b,
    0x57 => 0x98b,
    0x58 => 0x98b,
    0x59 => 0x98b,
    0x5a => 0x98b,
    0x5b => 0x98b,
    0x5c => 0x98b,
    0x5d => 0x98b,
    0x5e => 0x98b,
    0x5f => 0x98b,
    0x60 => 0x98b,
    0x61 => 0x98b,
    0x62 => 0x98b,
    0x63 => 0x98b,
    0x64 => 0x98b,
    0x65 => 0x98b,
    0x66 => 0x98b,
    0x67 => 0x98b,
    0x68 => 0x98b,
    0x69 => 0x98b,
    0x6a => 0x98b,
    0x6b => 0x98b,
    0x6c => 0x98b,
    0x6d => 0x98b,
    0x6e => 0x98b,
    0x6f => 0x98b,
    0x70 => 0x98b,
    0x71 => 0x98b,
    0x72 => 0x98b,
    0x73 => 0x98b,
    0x74 => 0x98b,
    0x75 => 0x98b,
    0x76 => 0x98b,
    0x77 => 0x98b,
    0x78 => 0x98b,
    0x79 => 0x98b,
    0x7a => 0x98b,
    0x7b => 0x98b,
    0x7c => 0x98b,
    0x7d => 0x98b,
    0x7e => 0x98b,
    0x7f => 0x98b,
    0x80 => 0x98b,
    0x81 => 0x98b,
    0x82 => 0x98b,
    0x83 => 0x98b,
    0x84 => 0x98b,
    0x85 => 0x98b,
    0x86 => 0x98b,
    0x87 => 0x98b,
    0x88 => 0x98b,
    0x89 => 0x98b,
    0x8a => 0x98b,
    0x8b => 0x98b,
    0x8c => 0x98b,
    0x8d => 0x98b,
    0x8e => 0x98b,
    0x8f => 0x98b,
    0x90 => 0x98b,
    0x91 => 0x98b,
    0x92 => 0x98b,
    0x93 => 0x98b,
    0x94 => 0x98b,
    0x95 => 0x98b,
    0x96 => 0x98b,
    0x97 => 0x98b,
    0x98 => 0x98b,
    0x99 => 0x98b,
    0x9a => 0x98b,
    0x9b => 0x98b,
    0x9c => 0x98b,
    0x9d => 0x98b,
    0x9e => 0x98b,
    0x9f => 0x98b,
    0xa0 => 0x98b,
    0xa1 => 0x98b,
    0xa2 => 0x98b,
    0xa3 => 0x98b,
    0xa4 => 0x98b,
    0xa5 => 0x98b,
    0xa6 => 0x98b,
    0xa7 => 0x98b,
    0xa8 => 0x98b,
    0xa9 => 0x98b,
    0xaa => 0x98b,
    0xab => 0x98b,
    0xac => 0x98b,
    0xad => 0x98b,
    0xae => 0x98b,
    0xaf => 0x98b,
    0xb0 => 0x98b,
    0xb1 => 0x98b,
    0xb2 => 0x98b,
    0xb3 => 0x98b,
    0xb4 => 0x98b,
    0xb5 => 0x98b,
    0xb6 => 0x98b,
    0xb7 => 0x98b,
    0xb8 => 0x98b,
    0xb9 => 0x98b,
    0xba => 0x98b,
    0xbb => 0x98b,
    0xbc => 0x98b,
    0xbd => 0x98b,
    0xbe => 0x98b,
    0xbf => 0x98b,
    0xc0 => 0x98b,
    0xc1 => 0x98b,
    0xc2 => 0x98b,
    0xc3 => 0x98b,
    0xc4 => 0x98b,
    0xc5 => 0x98b,
    0xc6 => 0x98b,
    0xc7 => 0x98b,
    0xc8 => 0x98b,
    0xc9 => 0x98b,
    0xca => 0x98b,
    0xcb => 0x98b,
    0xcc => 0x98b,
    0xcd => 0x98b,
    0xce => 0x98b,
    0xcf => 0x98b,
    0xd0 => 0x98b,
    0xd1 => 0x98b,
    0xd2 => 0x98b,
    0xd3 => 0x98b,
    0xd4 => 0x98b,
    0xd5 => 0x98b,
    0xd6 => 0x98b,
    0xd7 => 0x98b,
    0xd8 => 0x98b,
    0xd9 => 0x98b,
    0xda => 0x98b,
    0xdb => 0x98b,
    0xdc => 0x98b,
    0xdd => 0x98b,
    0xde => 0x98b,
    0xdf => 0x98b,
    0xe0 => 0x98b,
    0xe1 => 0x98b,
    0xe2 => 0x98b,
    0xe3 => 0x98b,
    0xe4 => 0x98b,
    0xe5 => 0x98b,
    0xe6 => 0x98b,
    0xe7 => 0x98b,
    0xe8 => 0x98b,
    0xe9 => 0x98b,
    0xea => 0x98b,
    0xeb => 0x98b,
    0xec => 0x98b,
    0xed => 0x98b,
    0xee => 0x98b,
    0xef => 0x98b,
    0xf0 => 0x98b,
    0xf1 => 0x98b,
    0xf2 => 0x98b,
    0xf3 => 0x98b,
    0xf4 => 0x98b,
    0xf5 => 0x98b,
    0xf6 => 0x98b,
    0xf7 => 0x98b,
    0xf8 => 0x98b,
    0xf9 => 0x98b,
    0xfa => 0x98b,
    0xfb => 0x98b,
    0xfc => 0x98b,
    0xfd => 0x98b,
    0xfe => 0x98b,
    0xff => 0x98b,
    0x100 => 0x98b,
    0x101 => 0x98b,
    0x102 => 0x98b,
    0x103 => 0x98b,
    0x104 => 0x98b,
    0x105 => 0x98b,
    0x106 => 0x98b,
    0x107 => 0x98b,
    0x108 => 0x98b,
    0x109 => 0x98b,
    0x10a => 0x98b,
    0x10b => 0x98b,
    0x10c => 0x98b,
    0x10d => 0x98b,
    0x10e => 0x98b,
    0x10f => 0x98b,
    0x110 => 0x98b,
    0x111 => 0x98b,
    0x112 => 0x98b,
    0x113 => 0x98b,
    0x114 => 0x98b,
    0x115 => 0x98b,
    0x116 => 0x98b,
    0x117 => 0x98b,
    0x118 => 0x98b,
    0x119 => 0x98b,
    0x11a => 0x98b,
    0x11b => 0x98b,
    0x11c => 0x98b,
    0x11d => 0x98b,
    0x11e => 0x98b,
    0x11f => 0x98b,
    0x120 => 0x98b,
    0x121 => 0x98b,
    0x122 => 0x98b,
    0x123 => 0x98b,
    0x124 => 0x98b,
    0x125 => 0x98b,
    0x126 => 0x98b,
    0x127 => 0x98b,
    0x128 => 0x98b,
    0x129 => 0x98b,
    0x12a => 0x98b,
    0x12b => 0x98b,
    0x12c => 0x98b,
    0x12d => 0x98b,
    0x12e => 0x98b,
    0x12f => 0x98b,
    0x130 => 0x98b,
    0x131 => 0x98b,
    0x132 => 0x98b,
    0x133 => 0x98b,
    0x134 => 0x98b,
    0x135 => 0x98b,
    0x136 => 0x98b,
    0x137 => 0x98b,
    0x138 => 0x98b,
    0x139 => 0x98b,
    0x13a => 0x98b,
    0x13b => 0x98b,
    0x13c => 0x98b,
    0x13d => 0x98b,
    0x13e => 0x98b,
    0x13f => 0x98b,
    0x140 => 0x98b,
    0x141 => 0x98b,
    0x142 => 0x98b,
    0x143 => 0x98b,
    0x144 => 0x98b,
    0x145 => 0x98b,
    0x146 => 0x98b,
    0x147 => 0x98b,
    0x148 => 0x98b,
    0x149 => 0x98b,
    0x14a => 0x98b,
    0x14b => 0x98b,
    0x14c => 0x98b,
    0x14d => 0x98b,
    0x14e => 0x98b,
    0x14f => 0x98b,
    0x150 => 0x98b,
    0x151 => 0x98b,
    0x152 => 0x98b,
    0x153 => 0x98b,
    0x154 => 0x98b,
    0x155 => 0x98b,
    0x156 => 0x98b,
    0x157 => 0x98b,
    0x158 => 0x98b,
    0x159 => 0x98b,
    0x15a => 0x98b,
    0x15b => 0x98b,
    0x15c => 0x98b,
    0x15d => 0x98b,
    0x15e => 0x98b,
    0x15f => 0x98b,
    0x160 => 0x98b,
    0x161 => 0x98b,
    0x162 => 0x98b,
    0x163 => 0x98b,
    0x164 => 0x98b,
    0x165 => 0x98b,
    0x166 => 0x98b,
    0x167 => 0x98b,
    0x168 => 0x98b,
    0x169 => 0x98b,
    0x16a => 0x98b,
    0x16b => 0x98b,
    0x16c => 0x98b,
    0x16d => 0x98b,
    0x16e => 0x98b,
    0x16f => 0x98b,
    0x170 => 0x98b,
    0x171 => 0x98b,
    0x172 => 0x98b,
    0x173 => 0x98b,
    0x174 => 0x98b,
    0x175 => 0x98b,
    0x176 => 0x98b,
    0x177 => 0x98b,
    0x178 => 0x98b,
    0x179 => 0x98b,
    0x17a => 0x98b,
    0x17b => 0x98b,
    0x17c => 0x98b,
    0x17d => 0x98b,
    0x17e => 0x98b,
    0x17f => 0x98b,
    0x180 => 0x98b,
    0x181 => 0x98b,
    0x182 => 0x98b,
    0x183 => 0x98b,
    0x184 => 0x98b,
    0x185 => 0x98b,
    0x186 => 0x98b,
    0x187 => 0x98b,
    0x188 => 0x98b,
    0x189 => 0x98b,
    0x18a => 0x98b,
    0x18b => 0x98b,
    0x18c => 0x98b,
    0x18d => 0x98b,
    0x18e => 0x98b,
    0x18f => 0x98b,
    0x190 => 0x98b,
    0x191 => 0x98b,
    0x192 => 0x98b,
    0x193 => 0x98b,
    0x194 => 0x98b,
    0x195 => 0x98b,
    0x196 => 0x98b,
    0x197 => 0x98b,
    0x198 => 0x98b,
    0x199 => 0x98b,
    0x19a => 0x98b,
    0x19b => 0x98b,
    0x19c => 0x98b,
    0x19d => 0x98b,
    0x19e => 0x98b,
    0x19f => 0x98b,
    0x1a0 => 0x98b,
    0x1a1 => 0x98b,
    0x1a2 => 0x98b,
    0x1a3 => 0x98b,
    0x1a4 => 0x98b,
    0x1a5 => 0x98b,
    0x1a6 => 0x98b,
    0x1a7 => 0x98b,
    0x1a8 => 0x98b,
    0x1a9 => 0x98b,
    0x1aa => 0x98b,
    0x1ab => 0x98b,
    0x1ac => 0x98b,
    0x1ad => 0x98b,
    0x1ae => 0x98b,
    0x1af => 0x98b,
    0x1b0 => 0x98b,
    0x1b1 => 0x98b,
    0x1b2 => 0x98b,
    0x1b3 => 0x98b,
    0x1b4 => 0x98b,
    0x1b5 => 0x98b,
    0x1b6 => 0x98b,
    0x1b7 => 0x98b,
    0x1b8 => 0x98b,
    0x1b9 => 0x98b,
    0x1ba => 0x98b,
    0x1bb => 0x98b,
    0x1bc => 0x98b,
    0x1bd => 0x98b,
    0x1be => 0x98b,
    0x1bf => 0x98b,
    0x1c0 => 0x98b,
    0x1c1 => 0x98b,
    0x1c2 => 0x98b,
    0x1c3 => 0x98b,
    0x1c4 => 0x98b,
    0x1c5 => 0x98b,
    0x1c6 => 0x98b,
    0x1c7 => 0x98b,
    0x1c8 => 0x98b,
    0x1c9 => 0x98b,
    0x1ca => 0x98b,
    0x1cb => 0x98b,
    0x1cc => 0x98b,
    0x1cd => 0x98b,
    0x1ce => 0x98b,
    0x1cf => 0x98b,
    0x1d0 => 0x98b,
    0x1d1 => 0x98b,
    0x1d2 => 0x98b,
    0x1d3 => 0x98b,
    0x1d4 => 0x98b,
    0x1d5 => 0x98b,
    0x1d6 => 0x98b,
    0x1d7 => 0x98b,
    0x1d8 => 0x98b,
    0x1d9 => 0x98b,
    0x1da => 0x98b,
    0x1db => 0x98b,
    0x1dc => 0x98b,
    0x1dd => 0x98b,
    0x1de => 0x98b,
    0x1df => 0x98b,
    0x1e0 => 0x98b,
    0x1e1 => 0x98b,
    0x1e2 => 0x98b,
    0x1e3 => 0x98b,
    0x1e4 => 0x98b,
    0x1e5 => 0x98b,
    0x1e6 => 0x98b,
    0x1e7 => 0x98b,
    0x1e8 => 0x98b,
    0x1e9 => 0x98b,
    0x1ea => 0x98b,
    0x1eb => 0x98b,
    0x1ec => 0x98b,
    0x1ed => 0x98b,
    0x1ee => 0x98b,
    0x1ef => 0x98b,
    0x1f0 => 0x98b,
    0x1f1 => 0x98b,
    0x1f2 => 0x98b,
    0x1f3 => 0x98b,
    0x1f4 => 0x98b,
    0x1f5 => 0x98b,
    0x1f6 => 0x98b,
    0x1f7 => 0x98b,
    0x1f8 => 0x98b,
    0x1f9 => 0x98b,
    0x1fa => 0x98b,
    0x1fb => 0x98b,
    0x1fc => 0x98b,
    0x1fd => 0x98b,
    0x1fe => 0x98b,
    0x1ff => 0x98b,
    0x200 => 0x98b,
    0x201 => 0x98b,
    0x202 => 0x98b,
    0x203 => 0x98b,
    0x204 => 0x98b,
    0x205 => 0x98b,
    0x206 => 0x98b,
    0x207 => 0x98b,
    0x208 => 0x98b,
    0x209 => 0x98b,
    0x20a => 0x98b,
    0x20b => 0x98b,
    0x20c => 0x98b,
    0x20d => 0x98b,
    0x20e => 0x98b,
    0x20f => 0x98b,
    0x210 => 0x98b,
    0x211 => 0x98b,
    0x212 => 0x98b,
    0x213 => 0x98b,
    0x214 => 0x98b,
    0x215 => 0x98b,
    0x216 => 0x98b,
    0x217 => 0x98b,
    0x218 => 0x98b,
    0x219 => 0x98b,
    0x21a => 0x98b,
    0x21b => 0x98b,
    0x21c => 0x98b,
    0x21d => 0x98b,
    0x21e => 0x98b,
    0x21f => 0x98b,
    0x220 => 0x98b,
    0x221 => 0x98b,
    0x222 => 0x98b,
    0x223 => 0x98b,
    0x224 => 0x98b,
    0x225 => 0x98b,
    0x226 => 0x98b,
    0x227 => 0x98b,
    0x228 => 0x98b,
    0x229 => 0x98b,
    0x22a => 0x98b,
    0x22b => 0x98b,
    0x22c => 0x98b,
    0x22d => 0x98b,
    0x22e => 0x98b,
    0x22f => 0x98b,
    0x230 => 0x98b,
    0x231 => 0x98b,
    0x232 => 0x98b,
    0x233 => 0x98b,
    0x234 => 0x98b,
    0x235 => 0x98b,
    0x236 => 0x98b,
    0x237 => 0x98b,
    0x238 => 0x98b,
    0x239 => 0x98b,
    0x23a => 0x98b,
    0x23b => 0x98b,
    0x23c => 0x98b,
    0x23d => 0x98b,
    0x23e => 0x98b,
    0x23f => 0x98b,
    0x240 => 0x98b,
    0x241 => 0x98b,
    0x242 => 0x98b,
    0x243 => 0x98b,
    0x244 => 0x98b,
    0x245 => 0x98b,
    0x246 => 0x98b,
    0x247 => 0x98b,
    0x248 => 0x98b,
    0x249 => 0x98b,
    0x24a => 0x98b,
    0x24b => 0x98b,
    0x24c => 0x98b,
    0x24d => 0x98b,
    0x24e => 0x98b,
    0x24f => 0x98b,
    0x250 => 0x98b,
    0x251 => 0x98b,
    0x252 => 0x98b,
    0x253 => 0x98b,
    0x254 => 0x98b,
    0x255 => 0x98b,
    0x256 => 0x98b,
    0x257 => 0x98b,
    0x258 => 0x98b,
    0x259 => 0x98b,
    0x25a => 0x98b,
    0x25b => 0x98b,
    0x25c => 0x98b,
    0x25d => 0x98b,
    0x25e => 0x98b,
    0x25f => 0x98b,
    0x260 => 0x98b,
    0x261 => 0x98b,
    0x262 => 0x98b,
    0x263 => 0x98b,
    0x264 => 0x98b,
    0x265 => 0x98b,
    0x266 => 0x98b,
    0x267 => 0x98b,
    0x268 => 0x98b,
    0x269 => 0x98b,
    0x26a => 0x98b,
    0x26b => 0x98b,
    0x26c => 0x98b,
    0x26d => 0x98b,
    0x26e => 0x98b,
    0x26f => 0x98b,
    0x270 => 0x98b,
    0x271 => 0x98b,
    0x272 => 0x98b,
    0x273 => 0x98b,
    0x274 => 0x98b,
    0x275 => 0x98b,
    0x276 => 0x98b,
    0x277 => 0x98b,
    0x278 => 0x98b,
    0x279 => 0x98b,
    0x27a => 0x98b,
    0x27b => 0x98b,
    0x27c => 0x98b,
    0x27d => 0x98b,
    0x27e => 0x98b,
    0x27f => 0x98b,
    0x280 => 0x98b,
    0x281 => 0x98b,
    0x282 => 0x98b,
    0x283 => 0x98b,
    0x284 => 0x98b,
    0x285 => 0x98b,
    0x286 => 0x98b,
    0x287 => 0x98b,
    0x288 => 0x98b,
    0x289 => 0x98b,
    0x28a => 0x98b,
    0x28b => 0x98b,
    0x28c => 0x98b,
    0x28d => 0x98b,
    0x28e => 0x98b,
    0x28f => 0x98b,
    0x290 => 0x98b,
    0x291 => 0x98b,
    0x292 => 0x98b,
    0x293 => 0x98b,
    0x294 => 0x98b,
    0x295 => 0x98b,
    0x296 => 0x98b,
    0x297 => 0x98b,
    0x298 => 0x98b,
    0x299 => 0x98b,
    0x29a => 0x98b,
    0x29b => 0x98b,
    0x29c => 0x98b,
    0x29d => 0x98b,
    0x29e => 0x98b,
    0x29f => 0x98b,
    0x2a0 => 0x98b,
    0x2a1 => 0x98b,
    0x2a2 => 0x98b,
    0x2a3 => 0x98b,
    0x2a4 => 0x98b,
    0x2a5 => 0x98b,
    0x2a6 => 0x98b,
    0x2a7 => 0x98b,
    0x2a8 => 0x98b,
    0x2a9 => 0x98b,
    0x2aa => 0x98b,
    0x2ab => 0x98b,
    0x2ac => 0x98b,
    0x2ad => 0x98b,
    0x2ae => 0x98b,
    0x2af => 0x98b,
    0x2b0 => 0x98b,
    0x2b1 => 0x98b,
    0x2b2 => 0x98b,
    0x2b3 => 0x98b,
    0x2b4 => 0x98b,
    0x2b5 => 0x98b,
    0x2b6 => 0x98b,
    0x2b7 => 0x98b,
    0x2b8 => 0x98b,
    0x2b9 => 0x98b,
    0x2ba => 0x98b,
    0x2bb => 0x98b,
    0x2bc => 0x98b,
    0x2bd => 0x98b,
    0x2be => 0x98b,
    0x2bf => 0x98b,
    0x2c0 => 0x98b,
    0x2c1 => 0x98b,
    0x2c2 => 0x98b,
    0x2c3 => 0x98b,
    0x2c4 => 0x98b,
    0x2c5 => 0x98b,
    0x2c6 => 0x98b,
    0x2c7 => 0x98b,
    0x2c8 => 0x98b,
    0x2c9 => 0x98b,
    0x2ca => 0x98b,
    0x2cb => 0x98b,
    0x2cc => 0x98b,
    0x2cd => 0x98b,
    0x2ce => 0x98b,
    0x2cf => 0x98b,
    0x2d0 => 0x98b,
    0x2d1 => 0x98b,
    0x2d2 => 0x98b,
    0x2d3 => 0x98b,
    0x2d4 => 0x98b,
    0x2d5 => 0x98b,
    0x2d6 => 0x98b,
    0x2d7 => 0x98b,
    0x2d8 => 0x98b,
    0x2d9 => 0x98b,
    0x2da => 0x98b,
    0x2db => 0x98b,
    0x2dc => 0x98b,
    0x2dd => 0x98b,
    0x2de => 0x98b,
    0x2df => 0x98b,
    0x2e0 => 0x98b,
    0x2e1 => 0x98b,
    0x2e2 => 0x98b,
    0x2e3 => 0x98b,
    0x2e4 => 0x98b,
    0x2e5 => 0x98b,
    0x2e6 => 0x98b,
    0x2e7 => 0x98b,
    0x2e8 => 0x98b,
    0x2e9 => 0x98b,
    0x2ea => 0x98b,
    0x2eb => 0x98b,
    0x2ec => 0x98b,
    0x2ed => 0x98b,
    0x2ee => 0x98b,
    0x2ef => 0x98b,
    0x2f0 => 0x98b,
    0x2f1 => 0x98b,
    0x2f2 => 0x98b,
    0x2f3 => 0x98b,
    0x2f4 => 0x98b,
    0x2f5 => 0x98b,
    0x2f6 => 0x98b,
    0x2f7 => 0x98b,
    0x2f8 => 0x98b,
    0x2f9 => 0x98b,
    0x2fa => 0x98b,
    0x2fb => 0x98b,
    0x2fc => 0x98b,
    0x2fd => 0x98b,
    0x2fe => 0x98b,
    0x2ff => 0x98b,
    0x300 => 0x98b,
    0x301 => 0x98b,
    0x302 => 0x98b,
    0x303 => 0x98b,
    0x304 => 0x98b,
    0x305 => 0x98b,
    0x306 => 0x98b,
    0x307 => 0x98b,
    0x308 => 0x98b,
    0x309 => 0x98b,
    0x30a => 0x98b,
    0x30b => 0x98b,
    0x30c => 0x98b,
    0x30d => 0x98b,
    0x30e => 0x98b,
    0x30f => 0x98b,
    0x310 => 0x98b,
    0x311 => 0x98b,
    0x312 => 0x98b,
    0x313 => 0x98b,
    0x314 => 0x98b,
    0x315 => 0x98b,
    0x316 => 0x98b,
    0x317 => 0x98b,
    0x318 => 0x98b,
    0x319 => 0x98b,
    0x31a => 0x98b,
    0x31b => 0x98b,
    0x31c => 0x98b,
    0x31d => 0x98b,
    0x31e => 0x98b,
    0x31f => 0x98b,
    0x320 => 0x98b,
    0x321 => 0x98b,
    0x322 => 0x98b,
    0x323 => 0x98b,
    0x324 => 0x98b,
    0x325 => 0x98b,
    0x326 => 0x98b,
    0x327 => 0x98b,
    0x328 => 0x98b,
    0x329 => 0x98b,
    0x32a => 0x98b,
    0x32b => 0x98b,
    0x32c => 0x98b,
    0x32d => 0x98b,
    0x32e => 0x98b,
    0x32f => 0x98b,
    0x330 => 0x98b,
    0x331 => 0x98b,
    0x332 => 0x98b,
    0x333 => 0x98b,
    0x334 => 0x98b,
    0x335 => 0x98b,
    0x336 => 0x98b,
    0x337 => 0x98b,
    0x338 => 0x98b,
    0x339 => 0x98b,
    0x33a => 0x98b,
    0x33b => 0x98b,
    0x33c => 0x98b,
    0x33d => 0x98b,
    0x33e => 0x98b,
    0x33f => 0x98b,
    0x340 => 0x98b,
    0x341 => 0x98b,
    0x342 => 0x98b,
    0x343 => 0x98b,
    0x344 => 0x98b,
    0x345 => 0x98b,
    0x346 => 0x98b,
    0x347 => 0x98b,
    0x348 => 0x98b,
    0x349 => 0x98b,
    0x34a => 0x98b,
    0x34b => 0x98b,
    0x34c => 0x98b,
    0x34d => 0x98b,
    0x34e => 0x98b,
    0x34f => 0x98b,
    0x350 => 0x98b,
    0x351 => 0x98b,
    0x352 => 0x98b,
    0x353 => 0x98b,
    0x354 => 0x98b,
    0x355 => 0x98b,
    0x356 => 0x98b,
    0x357 => 0x98b,
    0x358 => 0x98b,
    0x359 => 0x98b,
    0x35a => 0x98b,
    0x35b => 0x98b,
    0x35c => 0x98b,
    0x35d => 0x98b,
    0x35e => 0x98b,
    0x35f => 0x98b,
    0x360 => 0x98b,
    0x361 => 0x98b,
    0x362 => 0x98b,
    0x363 => 0x98b,
    0x364 => 0x98b,
    0x365 => 0x98b,
    0x366 => 0x98b,
    0x367 => 0x98b,
    0x368 => 0x98b,
    0x369 => 0x98b,
    0x36a => 0x98b,
    0x36b => 0x98b,
    0x36c => 0x98b,
    0x36d => 0x98b,
    0x36e => 0x98b,
    0x36f => 0x98b,
    0x370 => 0x98b,
    0x371 => 0x98b,
    0x372 => 0x98b,
    0x373 => 0x98b,
    0x374 => 0x98b,
    0x375 => 0x98b,
    0x376 => 0x98b,
    0x377 => 0x98b,
    0x378 => 0x98b,
    0x379 => 0x98b,
    0x37a => 0x98b,
    0x37b => 0x98b,
    0x37c => 0x98b,
    0x37d => 0x98b,
    0x37e => 0x98b,
    0x37f => 0x98b,
    0x380 => 0x98b,
    0x381 => 0x98b,
    0x382 => 0x98b,
    0x383 => 0x98b,
    0x384 => 0x98b,
    0x385 => 0x98b,
    0x386 => 0x98b,
    0x387 => 0x98b,
    0x388 => 0x98b,
    0x389 => 0x98b,
    0x38a => 0x98b,
    0x38b => 0x98b,
    0x38c => 0x98b,
    0x38d => 0x98b,
    0x38e => 0x98b,
    0x38f => 0x98b,
    0x390 => 0x98b,
    0x391 => 0x98b,
    0x392 => 0x98b,
    0x393 => 0x98b,
    0x394 => 0x98b,
    0x395 => 0x98b,
    0x396 => 0x98b,
    0x397 => 0x98b,
    0x398 => 0x98b,
    0x399 => 0x98b,
    0x39a => 0x98b,
    0x39b => 0x98b,
    0x39c => 0x98b,
    0x39d => 0x98b,
    0x39e => 0x98b,
    0x39f => 0x98b,
    0x3a0 => 0x98b,
    0x3a1 => 0x98b,
    0x3a2 => 0x98b,
    0x3a3 => 0x98b,
    0x3a4 => 0x98b,
    0x3a5 => 0x98b,
    0x3a6 => 0x98b,
    0x3a7 => 0x98b,
    0x3a8 => 0x98b,
    0x3a9 => 0x98b,
    0x3aa => 0x98b,
    0x3ab => 0x98b,
    0x3ac => 0x98b,
    0x3ad => 0x98b,
    0x3ae => 0x98b,
    0x3af => 0x98b,
    0x3b0 => 0x98b,
    0x3b1 => 0x98b,
    0x3b2 => 0x98b,
    0x3b3 => 0x98b,
    0x3b4 => 0x98b,
    0x3b5 => 0x98b,
    0x3b6 => 0x98b,
    0x3b7 => 0x98b,
    0x3b8 => 0x98b,
    0x3b9 => 0x98b,
    0x3ba => 0x98b,
    0x3bb => 0x98b,
    0x3bc => 0x98b,
    0x3bd => 0x98b,
    0x3be => 0x98b,
    0x3bf => 0x98b,
    0x3c0 => 0x98b,
    0x3c1 => 0x98b,
    0x3c2 => 0x98b,
    0x3c3 => 0x98b,
    0x3c4 => 0x98b,
    0x3c5 => 0x98b,
    0x3c6 => 0x98b,
    0x3c7 => 0x98b,
    0x3c8 => 0x98b,
    0x3c9 => 0x98b,
    0x3ca => 0x98b,
    0x3cb => 0x98b,
    0x3cc => 0x98b,
    0x3cd => 0x98b,
    0x3ce => 0x98b,
    0x3cf => 0x98b,
    0x3d0 => 0x98b,
    0x3d1 => 0x98b,
    0x3d2 => 0x98b,
    0x3d3 => 0x98b,
    0x3d4 => 0x98b,
    0x3d5 => 0x98b,
    0x3d6 => 0x98b,
    0x3d7 => 0x98b,
    0x3d8 => 0x98b,
    0x3d9 => 0x98b,
    0x3da => 0x98b,
    0x3db => 0x98b,
    0x3dc => 0x98b,
    0x3dd => 0x98b,
    0x3de => 0x98b,
    0x3df => 0x98b,
    0x3e0 => 0x98b,
    0x3e1 => 0x98b,
    0x3e2 => 0x98b,
    0x3e3 => 0x98b,
    0x3e4 => 0x98b,
    0x3e5 => 0x98b,
    0x3e6 => 0x98b,
    0x3e7 => 0x98b,
    0x3e8 => 0x98b,
    0x3e9 => 0x98b,
    0x3ea => 0x98b,
    0x3eb => 0x98b,
    0x3ec => 0x98b,
    0x3ed => 0x98b,
    0x3ee => 0x98b,
    0x3ef => 0x98b,
    0x3f0 => 0x98b,
    0x3f1 => 0x98b,
    0x3f2 => 0x98b,
    0x3f3 => 0x98b,
    0x3f4 => 0x98b,
    0x3f5 => 0x98b,
    0x3f6 => 0x98b,
    0x3f7 => 0x98b,
    0x3f8 => 0x98b,
    0x3f9 => 0x98b,
    0x3fa => 0x98b,
    0x3fb => 0x98b,
    0x3fc => 0x98b,
    0x3fd => 0x98b,
    0x3fe => 0x98b,
    0x3ff => 0x98b,
    0x400 => 0x98c,
    0x401 => 0x98c,
    0x402 => 0x98c,
    0x403 => 0x98c,
    0x404 => 0x98c,
    0x405 => 0x98c,
    0x406 => 0x98c,
    0x407 => 0x98c,
    0x408 => 0x98c,
    0x409 => 0x98c,
    0x40a => 0x98c,
    0x40b => 0x98c,
    0x40c => 0x98c,
    0x40d => 0x98c,
    0x40e => 0x98c,
    0x40f => 0x98c,
    0x410 => 0x98c,
    0x411 => 0x98c,
    0x412 => 0x98c,
    0x413 => 0x98c,
    0x414 => 0x98c,
    0x415 => 0x98c,
    0x416 => 0x98c,
    0x417 => 0x98c,
    0x418 => 0x98c,
    0x419 => 0x98c,
    0x41a => 0x98c,
    0x41b => 0x98c,
    0x41c => 0x98c,
    0x41d => 0x98c,
    0x41e => 0x98c,
    0x41f => 0x98c,
    0x420 => 0x98c,
    0x421 => 0x98c,
    0x422 => 0x98c,
    0x423 => 0x98c,
    0x424 => 0x98c,
    0x425 => 0x98c,
    0x426 => 0x98c,
    0x427 => 0x98c,
    0x428 => 0x98c,
    0x429 => 0x98c,
    0x42a => 0x98c,
    0x42b => 0x98c,
    0x42c => 0x98c,
    0x42d => 0x98c,
    0x42e => 0x98c,
    0x42f => 0x98c,
    0x430 => 0x98c,
    0x431 => 0x98c,
    0x432 => 0x98c,
    0x433 => 0x98c,
    0x434 => 0x98c,
    0x435 => 0x98c,
    0x436 => 0x98c,
    0x437 => 0x98c,
    0x438 => 0x98c,
    0x439 => 0x98c,
    0x43a => 0x98c,
    0x43b => 0x98c,
    0x43c => 0x98c,
    0x43d => 0x98c,
    0x43e => 0x98c,
    0x43f => 0x98c,
    0x440 => 0x98c,
    0x441 => 0x98c,
    0x442 => 0x98c,
    0x443 => 0x98c,
    0x444 => 0x98c,
    0x445 => 0x98c,
    0x446 => 0x98c,
    0x447 => 0x98c,
    0x448 => 0x98c,
    0x449 => 0x98c,
    0x44a => 0x98c,
    0x44b => 0x98c,
    0x44c => 0x98c,
    0x44d => 0x98c,
    0x44e => 0x98c,
    0x44f => 0x98c,
    0x450 => 0x98c,
    0x451 => 0x98c,
    0x452 => 0x98c,
    0x453 => 0x98c,
    0x454 => 0x98c,
    0x455 => 0x98c,
    0x456 => 0x98c,
    0x457 => 0x98c,
    0x458 => 0x98c,
    0x459 => 0x98c,
    0x45a => 0x98c,
    0x45b => 0x98c,
    0x45c => 0x98c,
    0x45d => 0x98c,
    0x45e => 0x98c,
    0x45f => 0x98c,
    0x460 => 0x98c,
    0x461 => 0x98c,
    0x462 => 0x98c,
    0x463 => 0x98c,
    0x464 => 0x98c,
    0x465 => 0x98c,
    0x466 => 0x98c,
    0x467 => 0x98c,
    0x468 => 0x98c,
    0x469 => 0x98c,
    0x46a => 0x98c,
    0x46b => 0x98c,
    0x46c => 0x98c,
    0x46d => 0x98c,
    0x46e => 0x98c,
    0x46f => 0x98c,
    0x470 => 0x98c,
    0x471 => 0x98c,
    0x472 => 0x98c,
    0x473 => 0x98c,
    0x474 => 0x98c,
    0x475 => 0x98c,
    0x476 => 0x98c,
    0x477 => 0x98c,
    0x478 => 0x98c,
    0x479 => 0x98c,
    0x47a => 0x98c,
    0x47b => 0x98c,
    0x47c => 0x98c,
    0x47d => 0x98c,
    0x47e => 0x98c,
    0x47f => 0x98c,
    0x480 => 0x98c,
    0x481 => 0x98c,
    0x482 => 0x98c,
    0x483 => 0x98c,
    0x484 => 0x98c,
    0x485 => 0x98c,
    0x486 => 0x98c,
    0x487 => 0x98c,
    0x488 => 0x98c,
    0x489 => 0x98c,
    0x48a => 0x98c,
    0x48b => 0x98c,
    0x48c => 0x98c,
    0x48d => 0x98c,
    0x48e => 0x98c,
    0x48f => 0x98c,
    0x490 => 0x98c,
    0x491 => 0x98c,
    0x492 => 0x98c,
    0x493 => 0x98c,
    0x494 => 0x98c,
    0x495 => 0x98c,
    0x496 => 0x98c,
    0x497 => 0x98c,
    0x498 => 0x98c,
    0x499 => 0x98c,
    0x49a => 0x98c,
    0x49b => 0x98c,
    0x49c => 0x98c,
    0x49d => 0x98c,
    0x49e => 0x98c,
    0x49f => 0x98c,
    0x4a0 => 0x98c,
    0x4a1 => 0x98c,
    0x4a2 => 0x98c,
    0x4a3 => 0x98c,
    0x4a4 => 0x98c,
    0x4a5 => 0x98c,
    0x4a6 => 0x98c,
    0x4a7 => 0x98c,
    0x4a8 => 0x98c,
    0x4a9 => 0x98c,
    0x4aa => 0x98c,
    0x4ab => 0x98c,
    0x4ac => 0x98c,
    0x4ad => 0x98c,
    0x4ae => 0x98c,
    0x4af => 0x98c,
    0x4b0 => 0x98c,
    0x4b1 => 0x98c,
    0x4b2 => 0x98c,
    0x4b3 => 0x98c,
    0x4b4 => 0x98c,
    0x4b5 => 0x98c,
    0x4b6 => 0x98c,
    0x4b7 => 0x98c,
    0x4b8 => 0x98c,
    0x4b9 => 0x98c,
    0x4ba => 0x98c,
    0x4bb => 0x98c,
    0x4bc => 0x98c,
    0x4bd => 0x98c,
    0x4be => 0x98c,
    0x4bf => 0x98c,
    0x4c0 => 0x98c,
    0x4c1 => 0x98c,
    0x4c2 => 0x98c,
    0x4c3 => 0x98c,
    0x4c4 => 0x98c,
    0x4c5 => 0x98c,
    0x4c6 => 0x98c,
    0x4c7 => 0x98c,
    0x4c8 => 0x98c,
    0x4c9 => 0x98c,
    0x4ca => 0x98c,
    0x4cb => 0x98c,
    0x4cc => 0x98c,
    0x4cd => 0x98c,
    0x4ce => 0x98c,
    0x4cf => 0x98c,
    0x4d0 => 0x98c,
    0x4d1 => 0x98c,
    0x4d2 => 0x98c,
    0x4d3 => 0x98c,
    0x4d4 => 0x98c,
    0x4d5 => 0x98c,
    0x4d6 => 0x98c,
    0x4d7 => 0x98c,
    0x4d8 => 0x98c,
    0x4d9 => 0x98c,
    0x4da => 0x98c,
    0x4db => 0x98c,
    0x4dc => 0x98c,
    0x4dd => 0x98c,
    0x4de => 0x98c,
    0x4df => 0x98c,
    0x4e0 => 0x98c,
    0x4e1 => 0x98c,
    0x4e2 => 0x98c,
    0x4e3 => 0x98c,
    0x4e4 => 0x98c,
    0x4e5 => 0x98c,
    0x4e6 => 0x98c,
    0x4e7 => 0x98c,
    0x4e8 => 0x98c,
    0x4e9 => 0x98c,
    0x4ea => 0x98c,
    0x4eb => 0x98c,
    0x4ec => 0x98c,
    0x4ed => 0x98c,
    0x4ee => 0x98c,
    0x4ef => 0x98c,
    0x4f0 => 0x98c,
    0x4f1 => 0x98c,
    0x4f2 => 0x98c,
    0x4f3 => 0x98c,
    0x4f4 => 0x98c,
    0x4f5 => 0x98c,
    0x4f6 => 0x98c,
    0x4f7 => 0x98c,
    0x4f8 => 0x98c,
    0x4f9 => 0x98c,
    0x4fa => 0x98c,
    0x4fb => 0x98c,
    0x4fc => 0x98c,
    0x4fd => 0x98c,
    0x4fe => 0x98c,
    0x4ff => 0x98c,
    0x500 => 0x98c,
    0x501 => 0x98c,
    0x502 => 0x98c,
    0x503 => 0x98c,
    0x504 => 0x98c,
    0x505 => 0x98c,
    0x506 => 0x98c,
    0x507 => 0x98c,
    0x508 => 0x98c,
    0x509 => 0x98c,
    0x50a => 0x98c,
    0x50b => 0x98c,
    0x50c => 0x98c,
    0x50d => 0x98c,
    0x50e => 0x98c,
    0x50f => 0x98c,
    0x510 => 0x98c,
    0x511 => 0x98c,
    0x512 => 0x98c,
    0x513 => 0x98c,
    0x514 => 0x98c,
    0x515 => 0x98c,
    0x516 => 0x98c,
    0x517 => 0x98c,
    0x518 => 0x98c,
    0x519 => 0x98c,
    0x51a => 0x98c,
    0x51b => 0x98c,
    0x51c => 0x98c,
    0x51d => 0x98c,
    0x51e => 0x98c,
    0x51f => 0x98c,
    0x520 => 0x98c,
    0x521 => 0x98c,
    0x522 => 0x98c,
    0x523 => 0x98c,
    0x524 => 0x98c,
    0x525 => 0x98c,
    0x526 => 0x98c,
    0x527 => 0x98c,
    0x528 => 0x98c,
    0x529 => 0x98c,
    0x52a => 0x98c,
    0x52b => 0x98c,
    0x52c => 0x98c,
    0x52d => 0x98c,
    0x52e => 0x98c,
    0x52f => 0x98c,
    0x530 => 0x98c,
    0x531 => 0x98c,
    0x532 => 0x98c,
    0x533 => 0x98c,
    0x534 => 0x98c,
    0x535 => 0x98c,
    0x536 => 0x98c,
    0x537 => 0x98c,
    0x538 => 0x98c,
    0x539 => 0x98c,
    0x53a => 0x98c,
    0x53b => 0x98c,
    0x53c => 0x98c,
    0x53d => 0x98c,
    0x53e => 0x98c,
    0x53f => 0x98c,
    0x540 => 0x98c,
    0x541 => 0x98c,
    0x542 => 0x98c,
    0x543 => 0x98c,
    0x544 => 0x98c,
    0x545 => 0x98c,
    0x546 => 0x98c,
    0x547 => 0x98c,
    0x548 => 0x98c,
    0x549 => 0x98c,
    0x54a => 0x98c,
    0x54b => 0x98c,
    0x54c => 0x98c,
    0x54d => 0x98c,
    0x54e => 0x98c,
    0x54f => 0x98c,
    0x550 => 0x98c,
    0x551 => 0x98c,
    0x552 => 0x98c,
    0x553 => 0x98c,
    0x554 => 0x98c,
    0x555 => 0x98c,
    0x556 => 0x98c,
    0x557 => 0x98c,
    0x558 => 0x98c,
    0x559 => 0x98c,
    0x55a => 0x98c,
    0x55b => 0x98c,
    0x55c => 0x98c,
    0x55d => 0x98c,
    0x55e => 0x98c,
    0x55f => 0x98c,
    0x560 => 0x98c,
    0x561 => 0x98c,
    0x562 => 0x98c,
    0x563 => 0x98c,
    0x564 => 0x98c,
    0x565 => 0x98c,
    0x566 => 0x98c,
    0x567 => 0x98c,
    0x568 => 0x98c,
    0x569 => 0x98c,
    0x56a => 0x98c,
    0x56b => 0x98c,
    0x56c => 0x98c,
    0x56d => 0x98c,
    0x56e => 0x98c,
    0x56f => 0x98c,
    0x570 => 0x98c,
    0x571 => 0x98c,
    0x572 => 0x98c,
    0x573 => 0x98c,
    0x574 => 0x98c,
    0x575 => 0x98c,
    0x576 => 0x98c,
    0x577 => 0x98c,
    0x578 => 0x98c,
    0x579 => 0x98c,
    0x57a => 0x98c,
    0x57b => 0x98c,
    0x57c => 0x98c,
    0x57d => 0x98c,
    0x57e => 0x98c,
    0x57f => 0x98c,
    0x580 => 0x98c,
    0x581 => 0x98c,
    0x582 => 0x98c,
    0x583 => 0x98c,
    0x584 => 0x98c,
    0x585 => 0x98c,
    0x586 => 0x98c,
    0x587 => 0x98c,
    0x588 => 0x98c,
    0x589 => 0x98c,
    0x58a => 0x98c,
    0x58b => 0x98c,
    0x58c => 0x98c,
    0x58d => 0x98c,
    0x58e => 0x98c,
    0x58f => 0x98c,
    0x590 => 0x98c,
    0x591 => 0x98c,
    0x592 => 0x98c,
    0x593 => 0x98c,
    0x594 => 0x98c,
    0x595 => 0x98c,
    0x596 => 0x98c,
    0x597 => 0x98c,
    0x598 => 0x98c,
    0x599 => 0x98c,
    0x59a => 0x98c,
    0x59b => 0x98c,
    0x59c => 0x98c,
    0x59d => 0x98c,
    0x59e => 0x98c,
    0x59f => 0x98c,
    0x5a0 => 0x98c,
    0x5a1 => 0x98c,
    0x5a2 => 0x98c,
    0x5a3 => 0x98c,
    0x5a4 => 0x98c,
    0x5a5 => 0x98c,
    0x5a6 => 0x98c,
    0x5a7 => 0x98c,
    0x5a8 => 0x98c,
    0x5a9 => 0x98c,
    0x5aa => 0x98c,
    0x5ab => 0x98c,
    0x5ac => 0x98c,
    0x5ad => 0x98c,
    0x5ae => 0x98c,
    0x5af => 0x98c,
    0x5b0 => 0x98c,
    0x5b1 => 0x98c,
    0x5b2 => 0x98c,
    0x5b3 => 0x98c,
    0x5b4 => 0x98c,
    0x5b5 => 0x98c,
    0x5b6 => 0x98c,
    0x5b7 => 0x98c,
    0x5b8 => 0x98c,
    0x5b9 => 0x98c,
    0x5ba => 0x98c,
    0x5bb => 0x98c,
    0x5bc => 0x98c,
    0x5bd => 0x98c,
    0x5be => 0x98c,
    0x5bf => 0x98c,
    0x5c0 => 0x98c,
    0x5c1 => 0x98c,
    0x5c2 => 0x98c,
    0x5c3 => 0x98c,
    0x5c4 => 0x98c,
    0x5c5 => 0x98c,
    0x5c6 => 0x98c,
    0x5c7 => 0x98c,
    0x5c8 => 0x98c,
    0x5c9 => 0x98c,
    0x5ca => 0x98c,
    0x5cb => 0x98c,
    0x5cc => 0x98c,
    0x5cd => 0x98c,
    0x5ce => 0x98c,
    0x5cf => 0x98c,
    0x5d0 => 0x98c,
    0x5d1 => 0x98c,
    0x5d2 => 0x98c,
    0x5d3 => 0x98c,
    0x5d4 => 0x98c,
    0x5d5 => 0x98c,
    0x5d6 => 0x98c,
    0x5d7 => 0x98c,
    0x5d8 => 0x98c,
    0x5d9 => 0x98c,
    0x5da => 0x98c,
    0x5db => 0x98c,
    0x5dc => 0x98c,
    0x5dd => 0x98c,
    0x5de => 0x98c,
    0x5df => 0x98c,
    0x5e0 => 0x98c,
    0x5e1 => 0x98c,
    0x5e2 => 0x98c,
    0x5e3 => 0x98c,
    0x5e4 => 0x98c,
    0x5e5 => 0x98c,
    0x5e6 => 0x98c,
    0x5e7 => 0x98c,
    0x5e8 => 0x98c,
    0x5e9 => 0x98c,
    0x5ea => 0x98c,
    0x5eb => 0x98c,
    0x5ec => 0x98c,
    0x5ed => 0x98c,
    0x5ee => 0x98c,
    0x5ef => 0x98c,
    0x5f0 => 0x98c,
    0x5f1 => 0x98c,
    0x5f2 => 0x98c,
    0x5f3 => 0x98c,
    0x5f4 => 0x98c,
    0x5f5 => 0x98c,
    0x5f6 => 0x98c,
    0x5f7 => 0x98c,
    0x5f8 => 0x98c,
    0x5f9 => 0x98c,
    0x5fa => 0x98c,
    0x5fb => 0x98c,
    0x5fc => 0x98c,
    0x5fd => 0x98c,
    0x5fe => 0x98c,
    0x5ff => 0x98c,
    0x600 => 0x98c,
    0x601 => 0x98c,
    0x602 => 0x98c,
    0x603 => 0x98c,
    0x604 => 0x98c,
    0x605 => 0x98c,
    0x606 => 0x98c,
    0x607 => 0x98c,
    0x608 => 0x98c,
    0x609 => 0x98c,
    0x60a => 0x98c,
    0x60b => 0x98c,
    0x60c => 0x98c,
    0x60d => 0x98c,
    0x60e => 0x98c,
    0x60f => 0x98c,
    0x610 => 0x98c,
    0x611 => 0x98c,
    0x612 => 0x98c,
    0x613 => 0x98c,
    0x614 => 0x98c,
    0x615 => 0x98c,
    0x616 => 0x98c,
    0x617 => 0x98c,
    0x618 => 0x98c,
    0x619 => 0x98c,
    0x61a => 0x98c,
    0x61b => 0x98c,
    0x61c => 0x98c,
    0x61d => 0x98c,
    0x61e => 0x98c,
    0x61f => 0x98c,
    0x620 => 0x98c,
    0x621 => 0x98c,
    0x622 => 0x98c,
    0x623 => 0x98c,
    0x624 => 0x98c,
    0x625 => 0x98c,
    0x626 => 0x98c,
    0x627 => 0x98c,
    0x628 => 0x98c,
    0x629 => 0x98c,
    0x62a => 0x98c,
    0x62b => 0x98c,
    0x62c => 0x98c,
    0x62d => 0x98c,
    0x62e => 0x98c,
    0x62f => 0x98c,
    0x630 => 0x98c,
    0x631 => 0x98c,
    0x632 => 0x98c,
    0x633 => 0x98c,
    0x634 => 0x98c,
    0x635 => 0x98c,
    0x636 => 0x98c,
    0x637 => 0x98c,
    0x638 => 0x98c,
    0x639 => 0x98c,
    0x63a => 0x98c,
    0x63b => 0x98c,
    0x63c => 0x98c,
    0x63d => 0x98c,
    0x63e => 0x98c,
    0x63f => 0x98c,
    0x640 => 0x98c,
    0x641 => 0x98c,
    0x642 => 0x98c,
    0x643 => 0x98c,
    0x644 => 0x98c,
    0x645 => 0x98c,
    0x646 => 0x98c,
    0x647 => 0x98c,
    0x648 => 0x98c,
    0x649 => 0x98c,
    0x64a => 0x98c,
    0x64b => 0x98c,
    0x64c => 0x98c,
    0x64d => 0x98c,
    0x64e => 0x98c,
    0x64f => 0x98c,
    0x650 => 0x98c,
    0x651 => 0x98c,
    0x652 => 0x98c,
    0x653 => 0x98c,
    0x654 => 0x98c,
    0x655 => 0x98c,
    0x656 => 0x98c,
    0x657 => 0x98c,
    0x658 => 0x98c,
    0x659 => 0x98c,
    0x65a => 0x98c,
    0x65b => 0x98c,
    0x65c => 0x98c,
    0x65d => 0x98c,
    0x65e => 0x98c,
    0x65f => 0x98c,
    0x660 => 0x98c,
    0x661 => 0x98c,
    0x662 => 0x98c,
    0x663 => 0x98c,
    0x664 => 0x98c,
    0x665 => 0x98c,
    0x666 => 0x98c,
    0x667 => 0x98c,
    0x668 => 0x98c,
    0x669 => 0x98c,
    0x66a => 0x98c,
    0x66b => 0x98c,
    0x66c => 0x98c,
    0x66d => 0x98c,
    0x66e => 0x98c,
    0x66f => 0x98c,
    0x670 => 0x98c,
    0x671 => 0x98c,
    0x672 => 0x98c,
    0x673 => 0x98c,
    0x674 => 0x98c,
    0x675 => 0x98c,
    0x676 => 0x98c,
    0x677 => 0x98c,
    0x678 => 0x98c,
    0x679 => 0x98c,
    0x67a => 0x98c,
    0x67b => 0x98c,
    0x67c => 0x98c,
    0x67d => 0x98c,
    0x67e => 0x98c,
    0x67f => 0x98c,
    0x680 => 0x98c,
    0x681 => 0x98c,
    0x682 => 0x98c,
    0x683 => 0x98c,
    0x684 => 0x98c,
    0x685 => 0x98c,
    0x686 => 0x98c,
    0x687 => 0x98c,
    0x688 => 0x98c,
    0x689 => 0x98c,
    0x68a => 0x98c,
    0x68b => 0x98c,
    0x68c => 0x98c,
    0x68d => 0x98c,
    0x68e => 0x98c,
    0x68f => 0x98c,
    0x690 => 0x98c,
    0x691 => 0x98c,
    0x692 => 0x98c,
    0x693 => 0x98c,
    0x694 => 0x98c,
    0x695 => 0x98c,
    0x696 => 0x98c,
    0x697 => 0x98c,
    0x698 => 0x98c,
    0x699 => 0x98c,
    0x69a => 0x98c,
    0x69b => 0x98c,
    0x69c => 0x98c,
    0x69d => 0x98c,
    0x69e => 0x98c,
    0x69f => 0x98c,
    0x6a0 => 0x98c,
    0x6a1 => 0x98c,
    0x6a2 => 0x98c,
    0x6a3 => 0x98c,
    0x6a4 => 0x98c,
    0x6a5 => 0x98c,
    0x6a6 => 0x98c,
    0x6a7 => 0x98c,
    0x6a8 => 0x98c,
    0x6a9 => 0x98c,
    0x6aa => 0x98c,
    0x6ab => 0x98c,
    0x6ac => 0x98c,
    0x6ad => 0x98c,
    0x6ae => 0x98c,
    0x6af => 0x98c,
    0x6b0 => 0x98c,
    0x6b1 => 0x98c,
    0x6b2 => 0x98c,
    0x6b3 => 0x98c,
    0x6b4 => 0x98c,
    0x6b5 => 0x98c,
    0x6b6 => 0x98c,
    0x6b7 => 0x98c,
    0x6b8 => 0x98c,
    0x6b9 => 0x98c,
    0x6ba => 0x98c,
    0x6bb => 0x98c,
    0x6bc => 0x98c,
    0x6bd => 0x98c,
    0x6be => 0x98c,
    0x6bf => 0x98c,
    0x6c0 => 0x98c,
    0x6c1 => 0x98c,
    0x6c2 => 0x98c,
    0x6c3 => 0x98c,
    0x6c4 => 0x98c,
    0x6c5 => 0x98c,
    0x6c6 => 0x98c,
    0x6c7 => 0x98c,
    0x6c8 => 0x98c,
    0x6c9 => 0x98c,
    0x6ca => 0x98c,
    0x6cb => 0x98c,
    0x6cc => 0x98c,
    0x6cd => 0x98c,
    0x6ce => 0x98c,
    0x6cf => 0x98c,
    0x6d0 => 0x98c,
    0x6d1 => 0x98c,
    0x6d2 => 0x98c,
    0x6d3 => 0x98c,
    0x6d4 => 0x98c,
    0x6d5 => 0x98c,
    0x6d6 => 0x98c,
    0x6d7 => 0x98c,
    0x6d8 => 0x98c,
    0x6d9 => 0x98c,
    0x6da => 0x98c,
    0x6db => 0x98c,
    0x6dc => 0x98c,
    0x6dd => 0x98c,
    0x6de => 0x98c,
    0x6df => 0x98c,
    0x6e0 => 0x98c,
    0x6e1 => 0x98c,
    0x6e2 => 0x98c,
    0x6e3 => 0x98c,
    0x6e4 => 0x98c,
    0x6e5 => 0x98c,
    0x6e6 => 0x98c,
    0x6e7 => 0x98c,
    0x6e8 => 0x98c,
    0x6e9 => 0x98c,
    0x6ea => 0x98c,
    0x6eb => 0x98c,
    0x6ec => 0x98c,
    0x6ed => 0x98c,
    0x6ee => 0x98c,
    0x6ef => 0x98c,
    0x6f0 => 0x98c,
    0x6f1 => 0x98c,
    0x6f2 => 0x98c,
    0x6f3 => 0x98c,
    0x6f4 => 0x98c,
    0x6f5 => 0x98c,
    0x6f6 => 0x98c,
    0x6f7 => 0x98c,
    0x6f8 => 0x98c,
    0x6f9 => 0x98c,
    0x6fa => 0x98c,
    0x6fb => 0x98c,
    0x6fc => 0x98c,
    0x6fd => 0x98c,
    0x6fe => 0x98c,
    0x6ff => 0x98c,
    0x700 => 0x98c,
    0x701 => 0x98c,
    0x702 => 0x98c,
    0x703 => 0x98c,
    0x704 => 0x98c,
    0x705 => 0x98c,
    0x706 => 0x98c,
    0x707 => 0x98c,
    0x708 => 0x98c,
    0x709 => 0x98c,
    0x70a => 0x98c,
    0x70b => 0x98c,
    0x70c => 0x98c,
    0x70d => 0x98c,
    0x70e => 0x98c,
    0x70f => 0x98c,
    0x710 => 0x98c,
    0x711 => 0x98c,
    0x712 => 0x98c,
    0x713 => 0x98c,
    0x714 => 0x98c,
    0x715 => 0x98c,
    0x716 => 0x98c,
    0x717 => 0x98c,
    0x718 => 0x98c,
    0x719 => 0x98c,
    0x71a => 0x98c,
    0x71b => 0x98c,
    0x71c => 0x98c,
    0x71d => 0x98c,
    0x71e => 0x98c,
    0x71f => 0x98c,
    0x720 => 0x98c,
    0x721 => 0x98c,
    0x722 => 0x98c,
    0x723 => 0x98c,
    0x724 => 0x98c,
    0x725 => 0x98c,
    0x726 => 0x98c,
    0x727 => 0x98c,
    0x728 => 0x98c,
    0x729 => 0x98c,
    0x72a => 0x98c,
    0x72b => 0x98c,
    0x72c => 0x98c,
    0x72d => 0x98c,
    0x72e => 0x98c,
    0x72f => 0x98c,
    0x730 => 0x98c,
    0x731 => 0x98c,
    0x732 => 0x98c,
    0x733 => 0x98c,
    0x734 => 0x98c,
    0x735 => 0x98c,
    0x736 => 0x98c,
    0x737 => 0x98c,
    0x738 => 0x98c,
    0x739 => 0x98c,
    0x73a => 0x98c,
    0x73b => 0x98c,
    0x73c => 0x98c,
    0x73d => 0x98c,
    0x73e => 0x98c,
    0x73f => 0x98c,
    0x740 => 0x98c,
    0x741 => 0x98c,
    0x742 => 0x98c,
    0x743 => 0x98c,
    0x744 => 0x98c,
    0x745 => 0x98c,
    0x746 => 0x98c,
    0x747 => 0x98c,
    0x748 => 0x98c,
    0x749 => 0x98c,
    0x74a => 0x98c,
    0x74b => 0x98c,
    0x74c => 0x98c,
    0x74d => 0x98c,
    0x74e => 0x98c,
    0x74f => 0x98c,
    0x750 => 0x98c,
    0x751 => 0x98c,
    0x752 => 0x98c,
    0x753 => 0x98c,
    0x754 => 0x98c,
    0x755 => 0x98c,
    0x756 => 0x98c,
    0x757 => 0x98c,
    0x758 => 0x98c,
    0x759 => 0x98c,
    0x75a => 0x98c,
    0x75b => 0x98c,
    0x75c => 0x98c,
    0x75d => 0x98c,
    0x75e => 0x98c,
    0x75f => 0x98c,
    0x760 => 0x98c,
    0x761 => 0x98c,
    0x762 => 0x98c,
    0x763 => 0x98c,
    0x764 => 0x98c,
    0x765 => 0x98c,
    0x766 => 0x98c,
    0x767 => 0x98c,
    0x768 => 0x98c,
    0x769 => 0x98c,
    0x76a => 0x98c,
    0x76b => 0x98c,
    0x76c => 0x98c,
    0x76d => 0x98c,
    0x76e => 0x98c,
    0x76f => 0x98c,
    0x770 => 0x98c,
    0x771 => 0x98c,
    0x772 => 0x98c,
    0x773 => 0x98c,
    0x774 => 0x98c,
    0x775 => 0x98c,
    0x776 => 0x98c,
    0x777 => 0x98c,
    0x778 => 0x98c,
    0x779 => 0x98c,
    0x77a => 0x98c,
    0x77b => 0x98c,
    0x77c => 0x98c,
    0x77d => 0x98c,
    0x77e => 0x98c,
    0x77f => 0x98c,
    0x780 => 0x98c,
    0x781 => 0x98c,
    0x782 => 0x98c,
    0x783 => 0x98c,
    0x784 => 0x98c,
    0x785 => 0x98c,
    0x786 => 0x98c,
    0x787 => 0x98c,
    0x788 => 0x98c,
    0x789 => 0x98c,
    0x78a => 0x98c,
    0x78b => 0x98c,
    0x78c => 0x98c,
    0x78d => 0x98c,
    0x78e => 0x98c,
    0x78f => 0x98c,
    0x790 => 0x98c,
    0x791 => 0x98c,
    0x792 => 0x98c,
    0x793 => 0x98c,
    0x794 => 0x98c,
    0x795 => 0x98c,
    0x796 => 0x98c,
    0x797 => 0x98c,
    0x798 => 0x98c,
    0x799 => 0x98c,
    0x79a => 0x98c,
    0x79b => 0x98c,
    0x79c => 0x98c,
    0x79d => 0x98c,
    0x79e => 0x98c,
    0x79f => 0x98c,
    0x7a0 => 0x98c,
    0x7a1 => 0x98c,
    0x7a2 => 0x98c,
    0x7a3 => 0x98c,
    0x7a4 => 0x98c,
    0x7a5 => 0x98c,
    0x7a6 => 0x98c,
    0x7a7 => 0x98c,
    0x7a8 => 0x98c,
    0x7a9 => 0x98c,
    0x7aa => 0x98c,
    0x7ab => 0x98c,
    0x7ac => 0x98c,
    0x7ad => 0x98c,
    0x7ae => 0x98c,
    0x7af => 0x98c,
    0x7b0 => 0x98c,
    0x7b1 => 0x98c,
    0x7b2 => 0x98c,
    0x7b3 => 0x98c,
    0x7b4 => 0x98c,
    0x7b5 => 0x98c,
    0x7b6 => 0x98c,
    0x7b7 => 0x98c,
    0x7b8 => 0x98c,
    0x7b9 => 0x98c,
    0x7ba => 0x98c,
    0x7bb => 0x98c,
    0x7bc => 0x98c,
    0x7bd => 0x98c,
    0x7be => 0x98c,
    0x7bf => 0x98c,
    0x7c0 => 0x98c,
    0x7c1 => 0x98c,
    0x7c2 => 0x98c,
    0x7c3 => 0x98c,
    0x7c4 => 0x98c,
    0x7c5 => 0x98c,
    0x7c6 => 0x98c,
    0x7c7 => 0x98c,
    0x7c8 => 0x98c,
    0x7c9 => 0x98c,
    0x7ca => 0x98c,
    0x7cb => 0x98c,
    0x7cc => 0x98c,
    0x7cd => 0x98c,
    0x7ce => 0x98c,
    0x7cf => 0x98c,
    0x7d0 => 0x98c,
    0x7d1 => 0x98c,
    0x7d2 => 0x98c,
    0x7d3 => 0x98c,
    0x7d4 => 0x98c,
    0x7d5 => 0x98c,
    0x7d6 => 0x98c,
    0x7d7 => 0x98c,
    0x7d8 => 0x98c,
    0x7d9 => 0x98c,
    0x7da => 0x98c,
    0x7db => 0x98c,
    0x7dc => 0x98c,
    0x7dd => 0x98c,
    0x7de => 0x98c,
    0x7df => 0x98c,
    0x7e0 => 0x98c,
    0x7e1 => 0x98c,
    0x7e2 => 0x98c,
    0x7e3 => 0x98c,
    0x7e4 => 0x98c,
    0x7e5 => 0x98c,
    0x7e6 => 0x98c,
    0x7e7 => 0x98c,
    0x7e8 => 0x98c,
    0x7e9 => 0x98c,
    0x7ea => 0x98c,
    0x7eb => 0x98c,
    0x7ec => 0x98c,
    0x7ed => 0x98c,
    0x7ee => 0x98c,
    0x7ef => 0x98c,
    0x7f0 => 0x98c,
    0x7f1 => 0x98c,
    0x7f2 => 0x98c,
    0x7f3 => 0x98c,
    0x7f4 => 0x98c,
    0x7f5 => 0x98c,
    0x7f6 => 0x98c,
    0x7f7 => 0x98c,
    0x7f8 => 0x98c,
    0x7f9 => 0x98c,
    0x7fa => 0x98c,
    0x7fb => 0x98c,
    0x7fc => 0x98c,
    0x7fd => 0x98c,
    0x7fe => 0x98c,
    0x7ff => 0x98c,
    _ => 0,
  };
  return idx;
}


// RCPCU-STLUR#0
pub const fn classify_impl_15b(inst: u32) -> u32 {
  if (inst&0xc00) != 0x0 { return 0; }
  return 0x618b;
}


// MEMGM-STZGM#0
pub const fn classify_impl_15c_1(inst: u32) -> u32 {
  if (inst&0xff000) != 0x0 { return 0; }
  return 0x6580;
}

// STG-STG_POST#0,STG-STG#0,STG-STG_PRE#0,MEMGM-STZGM#0
pub const fn classify_impl_15c(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x1,
    0x1 => 0x6480,
    0x2 => 0x6481,
    0x3 => 0x6482,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_15c_1(inst), // MEMGM-STZGM#0
    _ => idx
  };
  return idx;
}


// STG-STG_POST#0,STG-STG#0,STG-STG_PRE#0
pub const fn classify_impl_15d(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x0,
    0x1 => 0x6480,
    0x2 => 0x6481,
    0x3 => 0x6482,
    _ => 0,
  };
  return idx;
}


// RCPCU-LDAPUR#0
pub const fn classify_impl_15e(inst: u32) -> u32 {
  if (inst&0xc00) != 0x0 { return 0; }
  return 0x618c;
}


// STG-STZG_POST#0,STG-STZG#0,STG-STZG_PRE#0,LDG-LDG#0
pub const fn classify_impl_15f(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x6500,
    0x1 => 0x6483,
    0x2 => 0x6484,
    0x3 => 0x6485,
    _ => 0,
  };
  return idx;
}


// MEMGM-STGM#0
pub const fn classify_impl_160_1(inst: u32) -> u32 {
  if (inst&0xff000) != 0x0 { return 0; }
  return 0x6581;
}

// STG-ST2G_POST#0,STG-ST2G#0,STG-ST2G_PRE#0,MEMGM-STGM#0
pub const fn classify_impl_160(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x1,
    0x1 => 0x6486,
    0x2 => 0x6487,
    0x3 => 0x6488,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_160_1(inst), // MEMGM-STGM#0
    _ => idx
  };
  return idx;
}


// STG-ST2G_POST#0,STG-ST2G#0,STG-ST2G_PRE#0
pub const fn classify_impl_161(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x0,
    0x1 => 0x6486,
    0x2 => 0x6487,
    0x3 => 0x6488,
    _ => 0,
  };
  return idx;
}


// MEMGM-LDGM#0
pub const fn classify_impl_162_1(inst: u32) -> u32 {
  if (inst&0xff000) != 0x0 { return 0; }
  return 0x6582;
}

// STG-STZ2G_POST#0,STG-STZ2G#0,STG-STZ2G_PRE#0,MEMGM-LDGM#0
pub const fn classify_impl_162(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x1,
    0x1 => 0x6489,
    0x2 => 0x648a,
    0x3 => 0x648b,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_162_1(inst), // MEMGM-LDGM#0
    _ => idx
  };
  return idx;
}


// STG-STZ2G_POST#0,STG-STZ2G#0,STG-STZ2G_PRE#0
pub const fn classify_impl_163(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x0,
    0x1 => 0x6489,
    0x2 => 0x648a,
    0x3 => 0x648b,
    _ => 0,
  };
  return idx;
}


// CLZ-CLZ#0,CLZ-CLS#0,CLZ-CTZ#0,CLZ-CNT#0,CLZ-ABS#0,REV-RBIT#1,REV-REV16#1,REV-REV32#0,REV-REV64#0
pub const fn classify_impl_164_1(inst: u32) -> u32 {
  if (inst&0x4000) != 0x0 { return 0; }
  let idx = match (inst >> 10) & 0xf {
    0x0 => 0x1500,
    0x1 => 0x1501,
    0x2 => 0x1503,
    0x3 => 0x1504,
    0x4 => 0x1080,
    0x5 => 0x1081,
    0x6 => 0x1082,
    0x7 => 0x1083,
    0x8 => 0x1084,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    _ => 0,
  };
  return idx;
}


// AUT-PACIA#0,AUT-PACIA#1,AUT-PACIA#2,AUT-PACIA#3,AUT-PACIA#4,AUT-PACIA#5,AUT-PACIA#6,AUT-PACIA#7,AUT-PACIA#8,AUT-PACIA#9,AUT-PACIA#10,AUT-PACIA#11,AUT-PACIA#12,AUT-PACIA#13,AUT-PACIA#14,AUT-PACIA#15,AUT-PACIA#16,AUT-PACIA#17,AUT-PACIA#18,AUT-PACIA#19,AUT-PACIA#20,AUT-PACIA#21,AUT-PACIA#22,AUT-PACIA#23,AUT-PACIA#24,AUT-PACIA#25,AUT-PACIA#26,AUT-PACIA#27,AUT-PACIA#28,AUT-PACIA#29,AUT-PACIA#30,AUT-PACIA#31,AUT-PACIB#0,AUT-PACIB#1,AUT-PACIB#2,AUT-PACIB#3,AUT-PACIB#4,AUT-PACIB#5,AUT-PACIB#6,AUT-PACIB#7,AUT-PACIB#8,AUT-PACIB#9,AUT-PACIB#10,AUT-PACIB#11,AUT-PACIB#12,AUT-PACIB#13,AUT-PACIB#14,AUT-PACIB#15,AUT-PACIB#16,AUT-PACIB#17,AUT-PACIB#18,AUT-PACIB#19,AUT-PACIB#20,AUT-PACIB#21,AUT-PACIB#22,AUT-PACIB#23,AUT-PACIB#24,AUT-PACIB#25,AUT-PACIB#26,AUT-PACIB#27,AUT-PACIB#28,AUT-PACIB#29,AUT-PACIB#30,AUT-PACIB#31,AUT-PACDA#0,AUT-PACDA#1,AUT-PACDA#2,AUT-PACDA#3,AUT-PACDA#4,AUT-PACDA#5,AUT-PACDA#6,AUT-PACDA#7,AUT-PACDA#8,AUT-PACDA#9,AUT-PACDA#10,AUT-PACDA#11,AUT-PACDA#12,AUT-PACDA#13,AUT-PACDA#14,AUT-PACDA#15,AUT-PACDA#16,AUT-PACDA#17,AUT-PACDA#18,AUT-PACDA#19,AUT-PACDA#20,AUT-PACDA#21,AUT-PACDA#22,AUT-PACDA#23,AUT-PACDA#24,AUT-PACDA#25,AUT-PACDA#26,AUT-PACDA#27,AUT-PACDA#28,AUT-PACDA#29,AUT-PACDA#30,AUT-PACDA#31,AUT-PACDB#0,AUT-PACDB#1,AUT-PACDB#2,AUT-PACDB#3,AUT-PACDB#4,AUT-PACDB#5,AUT-PACDB#6,AUT-PACDB#7,AUT-PACDB#8,AUT-PACDB#9,AUT-PACDB#10,AUT-PACDB#11,AUT-PACDB#12,AUT-PACDB#13,AUT-PACDB#14,AUT-PACDB#15,AUT-PACDB#16,AUT-PACDB#17,AUT-PACDB#18,AUT-PACDB#19,AUT-PACDB#20,AUT-PACDB#21,AUT-PACDB#22,AUT-PACDB#23,AUT-PACDB#24,AUT-PACDB#25,AUT-PACDB#26,AUT-PACDB#27,AUT-PACDB#28,AUT-PACDB#29,AUT-PACDB#30,AUT-PACDB#31,AUT-AUTIA#0,AUT-AUTIA#1,AUT-AUTIA#2,AUT-AUTIA#3,AUT-AUTIA#4,AUT-AUTIA#5,AUT-AUTIA#6,AUT-AUTIA#7,AUT-AUTIA#8,AUT-AUTIA#9,AUT-AUTIA#10,AUT-AUTIA#11,AUT-AUTIA#12,AUT-AUTIA#13,AUT-AUTIA#14,AUT-AUTIA#15,AUT-AUTIA#16,AUT-AUTIA#17,AUT-AUTIA#18,AUT-AUTIA#19,AUT-AUTIA#20,AUT-AUTIA#21,AUT-AUTIA#22,AUT-AUTIA#23,AUT-AUTIA#24,AUT-AUTIA#25,AUT-AUTIA#26,AUT-AUTIA#27,AUT-AUTIA#28,AUT-AUTIA#29,AUT-AUTIA#30,AUT-AUTIA#31,AUT-AUTIB#0,AUT-AUTIB#1,AUT-AUTIB#2,AUT-AUTIB#3,AUT-AUTIB#4,AUT-AUTIB#5,AUT-AUTIB#6,AUT-AUTIB#7,AUT-AUTIB#8,AUT-AUTIB#9,AUT-AUTIB#10,AUT-AUTIB#11,AUT-AUTIB#12,AUT-AUTIB#13,AUT-AUTIB#14,AUT-AUTIB#15,AUT-AUTIB#16,AUT-AUTIB#17,AUT-AUTIB#18,AUT-AUTIB#19,AUT-AUTIB#20,AUT-AUTIB#21,AUT-AUTIB#22,AUT-AUTIB#23,AUT-AUTIB#24,AUT-AUTIB#25,AUT-AUTIB#26,AUT-AUTIB#27,AUT-AUTIB#28,AUT-AUTIB#29,AUT-AUTIB#30,AUT-AUTIB#31,AUT-AUTDA#0,AUT-AUTDA#1,AUT-AUTDA#2,AUT-AUTDA#3,AUT-AUTDA#4,AUT-AUTDA#5,AUT-AUTDA#6,AUT-AUTDA#7,AUT-AUTDA#8,AUT-AUTDA#9,AUT-AUTDA#10,AUT-AUTDA#11,AUT-AUTDA#12,AUT-AUTDA#13,AUT-AUTDA#14,AUT-AUTDA#15,AUT-AUTDA#16,AUT-AUTDA#17,AUT-AUTDA#18,AUT-AUTDA#19,AUT-AUTDA#20,AUT-AUTDA#21,AUT-AUTDA#22,AUT-AUTDA#23,AUT-AUTDA#24,AUT-AUTDA#25,AUT-AUTDA#26,AUT-AUTDA#27,AUT-AUTDA#28,AUT-AUTDA#29,AUT-AUTDA#30,AUT-AUTDA#31,AUT-AUTDB#0,AUT-AUTDB#1,AUT-AUTDB#2,AUT-AUTDB#3,AUT-AUTDB#4,AUT-AUTDB#5,AUT-AUTDB#6,AUT-AUTDB#7,AUT-AUTDB#8,AUT-AUTDB#9,AUT-AUTDB#10,AUT-AUTDB#11,AUT-AUTDB#12,AUT-AUTDB#13,AUT-AUTDB#14,AUT-AUTDB#15,AUT-AUTDB#16,AUT-AUTDB#17,AUT-AUTDB#18,AUT-AUTDB#19,AUT-AUTDB#20,AUT-AUTDB#21,AUT-AUTDB#22,AUT-AUTDB#23,AUT-AUTDB#24,AUT-AUTDB#25,AUT-AUTDB#26,AUT-AUTDB#27,AUT-AUTDB#28,AUT-AUTDB#29,AUT-AUTDB#30,AUT-AUTDB#31,AUT-PACIZA#0,AUT-PACIZB#0,AUT-PACDZA#0,AUT-PACDZB#0,AUT-AUTIZA#0,AUT-AUTIZB#0,AUT-AUTDZA#0,AUT-AUTDZB#0,XPAC-XPACI#0,XPAC-XPACD#0
pub const fn classify_impl_164_2(inst: u32) -> u32 {
  let idx = match (inst >> 5) & 0x3ff {
    0x0 => 0x5d80,
    0x1 => 0x5d80,
    0x2 => 0x5d80,
    0x3 => 0x5d80,
    0x4 => 0x5d80,
    0x5 => 0x5d80,
    0x6 => 0x5d80,
    0x7 => 0x5d80,
    0x8 => 0x5d80,
    0x9 => 0x5d80,
    0xa => 0x5d80,
    0xb => 0x5d80,
    0xc => 0x5d80,
    0xd => 0x5d80,
    0xe => 0x5d80,
    0xf => 0x5d80,
    0x10 => 0x5d80,
    0x11 => 0x5d80,
    0x12 => 0x5d80,
    0x13 => 0x5d80,
    0x14 => 0x5d80,
    0x15 => 0x5d80,
    0x16 => 0x5d80,
    0x17 => 0x5d80,
    0x18 => 0x5d80,
    0x19 => 0x5d80,
    0x1a => 0x5d80,
    0x1b => 0x5d80,
    0x1c => 0x5d80,
    0x1d => 0x5d80,
    0x1e => 0x5d80,
    0x1f => 0x5d80,
    0x20 => 0x5d81,
    0x21 => 0x5d81,
    0x22 => 0x5d81,
    0x23 => 0x5d81,
    0x24 => 0x5d81,
    0x25 => 0x5d81,
    0x26 => 0x5d81,
    0x27 => 0x5d81,
    0x28 => 0x5d81,
    0x29 => 0x5d81,
    0x2a => 0x5d81,
    0x2b => 0x5d81,
    0x2c => 0x5d81,
    0x2d => 0x5d81,
    0x2e => 0x5d81,
    0x2f => 0x5d81,
    0x30 => 0x5d81,
    0x31 => 0x5d81,
    0x32 => 0x5d81,
    0x33 => 0x5d81,
    0x34 => 0x5d81,
    0x35 => 0x5d81,
    0x36 => 0x5d81,
    0x37 => 0x5d81,
    0x38 => 0x5d81,
    0x39 => 0x5d81,
    0x3a => 0x5d81,
    0x3b => 0x5d81,
    0x3c => 0x5d81,
    0x3d => 0x5d81,
    0x3e => 0x5d81,
    0x3f => 0x5d81,
    0x40 => 0x5d82,
    0x41 => 0x5d82,
    0x42 => 0x5d82,
    0x43 => 0x5d82,
    0x44 => 0x5d82,
    0x45 => 0x5d82,
    0x46 => 0x5d82,
    0x47 => 0x5d82,
    0x48 => 0x5d82,
    0x49 => 0x5d82,
    0x4a => 0x5d82,
    0x4b => 0x5d82,
    0x4c => 0x5d82,
    0x4d => 0x5d82,
    0x4e => 0x5d82,
    0x4f => 0x5d82,
    0x50 => 0x5d82,
    0x51 => 0x5d82,
    0x52 => 0x5d82,
    0x53 => 0x5d82,
    0x54 => 0x5d82,
    0x55 => 0x5d82,
    0x56 => 0x5d82,
    0x57 => 0x5d82,
    0x58 => 0x5d82,
    0x59 => 0x5d82,
    0x5a => 0x5d82,
    0x5b => 0x5d82,
    0x5c => 0x5d82,
    0x5d => 0x5d82,
    0x5e => 0x5d82,
    0x5f => 0x5d82,
    0x60 => 0x5d83,
    0x61 => 0x5d83,
    0x62 => 0x5d83,
    0x63 => 0x5d83,
    0x64 => 0x5d83,
    0x65 => 0x5d83,
    0x66 => 0x5d83,
    0x67 => 0x5d83,
    0x68 => 0x5d83,
    0x69 => 0x5d83,
    0x6a => 0x5d83,
    0x6b => 0x5d83,
    0x6c => 0x5d83,
    0x6d => 0x5d83,
    0x6e => 0x5d83,
    0x6f => 0x5d83,
    0x70 => 0x5d83,
    0x71 => 0x5d83,
    0x72 => 0x5d83,
    0x73 => 0x5d83,
    0x74 => 0x5d83,
    0x75 => 0x5d83,
    0x76 => 0x5d83,
    0x77 => 0x5d83,
    0x78 => 0x5d83,
    0x79 => 0x5d83,
    0x7a => 0x5d83,
    0x7b => 0x5d83,
    0x7c => 0x5d83,
    0x7d => 0x5d83,
    0x7e => 0x5d83,
    0x7f => 0x5d83,
    0x80 => 0x5d84,
    0x81 => 0x5d84,
    0x82 => 0x5d84,
    0x83 => 0x5d84,
    0x84 => 0x5d84,
    0x85 => 0x5d84,
    0x86 => 0x5d84,
    0x87 => 0x5d84,
    0x88 => 0x5d84,
    0x89 => 0x5d84,
    0x8a => 0x5d84,
    0x8b => 0x5d84,
    0x8c => 0x5d84,
    0x8d => 0x5d84,
    0x8e => 0x5d84,
    0x8f => 0x5d84,
    0x90 => 0x5d84,
    0x91 => 0x5d84,
    0x92 => 0x5d84,
    0x93 => 0x5d84,
    0x94 => 0x5d84,
    0x95 => 0x5d84,
    0x96 => 0x5d84,
    0x97 => 0x5d84,
    0x98 => 0x5d84,
    0x99 => 0x5d84,
    0x9a => 0x5d84,
    0x9b => 0x5d84,
    0x9c => 0x5d84,
    0x9d => 0x5d84,
    0x9e => 0x5d84,
    0x9f => 0x5d84,
    0xa0 => 0x5d85,
    0xa1 => 0x5d85,
    0xa2 => 0x5d85,
    0xa3 => 0x5d85,
    0xa4 => 0x5d85,
    0xa5 => 0x5d85,
    0xa6 => 0x5d85,
    0xa7 => 0x5d85,
    0xa8 => 0x5d85,
    0xa9 => 0x5d85,
    0xaa => 0x5d85,
    0xab => 0x5d85,
    0xac => 0x5d85,
    0xad => 0x5d85,
    0xae => 0x5d85,
    0xaf => 0x5d85,
    0xb0 => 0x5d85,
    0xb1 => 0x5d85,
    0xb2 => 0x5d85,
    0xb3 => 0x5d85,
    0xb4 => 0x5d85,
    0xb5 => 0x5d85,
    0xb6 => 0x5d85,
    0xb7 => 0x5d85,
    0xb8 => 0x5d85,
    0xb9 => 0x5d85,
    0xba => 0x5d85,
    0xbb => 0x5d85,
    0xbc => 0x5d85,
    0xbd => 0x5d85,
    0xbe => 0x5d85,
    0xbf => 0x5d85,
    0xc0 => 0x5d86,
    0xc1 => 0x5d86,
    0xc2 => 0x5d86,
    0xc3 => 0x5d86,
    0xc4 => 0x5d86,
    0xc5 => 0x5d86,
    0xc6 => 0x5d86,
    0xc7 => 0x5d86,
    0xc8 => 0x5d86,
    0xc9 => 0x5d86,
    0xca => 0x5d86,
    0xcb => 0x5d86,
    0xcc => 0x5d86,
    0xcd => 0x5d86,
    0xce => 0x5d86,
    0xcf => 0x5d86,
    0xd0 => 0x5d86,
    0xd1 => 0x5d86,
    0xd2 => 0x5d86,
    0xd3 => 0x5d86,
    0xd4 => 0x5d86,
    0xd5 => 0x5d86,
    0xd6 => 0x5d86,
    0xd7 => 0x5d86,
    0xd8 => 0x5d86,
    0xd9 => 0x5d86,
    0xda => 0x5d86,
    0xdb => 0x5d86,
    0xdc => 0x5d86,
    0xdd => 0x5d86,
    0xde => 0x5d86,
    0xdf => 0x5d86,
    0xe0 => 0x5d87,
    0xe1 => 0x5d87,
    0xe2 => 0x5d87,
    0xe3 => 0x5d87,
    0xe4 => 0x5d87,
    0xe5 => 0x5d87,
    0xe6 => 0x5d87,
    0xe7 => 0x5d87,
    0xe8 => 0x5d87,
    0xe9 => 0x5d87,
    0xea => 0x5d87,
    0xeb => 0x5d87,
    0xec => 0x5d87,
    0xed => 0x5d87,
    0xee => 0x5d87,
    0xef => 0x5d87,
    0xf0 => 0x5d87,
    0xf1 => 0x5d87,
    0xf2 => 0x5d87,
    0xf3 => 0x5d87,
    0xf4 => 0x5d87,
    0xf5 => 0x5d87,
    0xf6 => 0x5d87,
    0xf7 => 0x5d87,
    0xf8 => 0x5d87,
    0xf9 => 0x5d87,
    0xfa => 0x5d87,
    0xfb => 0x5d87,
    0xfc => 0x5d87,
    0xfd => 0x5d87,
    0xfe => 0x5d87,
    0xff => 0x5d87,
    0x100 => 0x0,
    0x101 => 0x0,
    0x102 => 0x0,
    0x103 => 0x0,
    0x104 => 0x0,
    0x105 => 0x0,
    0x106 => 0x0,
    0x107 => 0x0,
    0x108 => 0x0,
    0x109 => 0x0,
    0x10a => 0x0,
    0x10b => 0x0,
    0x10c => 0x0,
    0x10d => 0x0,
    0x10e => 0x0,
    0x10f => 0x0,
    0x110 => 0x0,
    0x111 => 0x0,
    0x112 => 0x0,
    0x113 => 0x0,
    0x114 => 0x0,
    0x115 => 0x0,
    0x116 => 0x0,
    0x117 => 0x0,
    0x118 => 0x0,
    0x119 => 0x0,
    0x11a => 0x0,
    0x11b => 0x0,
    0x11c => 0x0,
    0x11d => 0x0,
    0x11e => 0x0,
    0x11f => 0x5d88,
    0x120 => 0x0,
    0x121 => 0x0,
    0x122 => 0x0,
    0x123 => 0x0,
    0x124 => 0x0,
    0x125 => 0x0,
    0x126 => 0x0,
    0x127 => 0x0,
    0x128 => 0x0,
    0x129 => 0x0,
    0x12a => 0x0,
    0x12b => 0x0,
    0x12c => 0x0,
    0x12d => 0x0,
    0x12e => 0x0,
    0x12f => 0x0,
    0x130 => 0x0,
    0x131 => 0x0,
    0x132 => 0x0,
    0x133 => 0x0,
    0x134 => 0x0,
    0x135 => 0x0,
    0x136 => 0x0,
    0x137 => 0x0,
    0x138 => 0x0,
    0x139 => 0x0,
    0x13a => 0x0,
    0x13b => 0x0,
    0x13c => 0x0,
    0x13d => 0x0,
    0x13e => 0x0,
    0x13f => 0x5d89,
    0x140 => 0x0,
    0x141 => 0x0,
    0x142 => 0x0,
    0x143 => 0x0,
    0x144 => 0x0,
    0x145 => 0x0,
    0x146 => 0x0,
    0x147 => 0x0,
    0x148 => 0x0,
    0x149 => 0x0,
    0x14a => 0x0,
    0x14b => 0x0,
    0x14c => 0x0,
    0x14d => 0x0,
    0x14e => 0x0,
    0x14f => 0x0,
    0x150 => 0x0,
    0x151 => 0x0,
    0x152 => 0x0,
    0x153 => 0x0,
    0x154 => 0x0,
    0x155 => 0x0,
    0x156 => 0x0,
    0x157 => 0x0,
    0x158 => 0x0,
    0x159 => 0x0,
    0x15a => 0x0,
    0x15b => 0x0,
    0x15c => 0x0,
    0x15d => 0x0,
    0x15e => 0x0,
    0x15f => 0x5d8a,
    0x160 => 0x0,
    0x161 => 0x0,
    0x162 => 0x0,
    0x163 => 0x0,
    0x164 => 0x0,
    0x165 => 0x0,
    0x166 => 0x0,
    0x167 => 0x0,
    0x168 => 0x0,
    0x169 => 0x0,
    0x16a => 0x0,
    0x16b => 0x0,
    0x16c => 0x0,
    0x16d => 0x0,
    0x16e => 0x0,
    0x16f => 0x0,
    0x170 => 0x0,
    0x171 => 0x0,
    0x172 => 0x0,
    0x173 => 0x0,
    0x174 => 0x0,
    0x175 => 0x0,
    0x176 => 0x0,
    0x177 => 0x0,
    0x178 => 0x0,
    0x179 => 0x0,
    0x17a => 0x0,
    0x17b => 0x0,
    0x17c => 0x0,
    0x17d => 0x0,
    0x17e => 0x0,
    0x17f => 0x5d8b,
    0x180 => 0x0,
    0x181 => 0x0,
    0x182 => 0x0,
    0x183 => 0x0,
    0x184 => 0x0,
    0x185 => 0x0,
    0x186 => 0x0,
    0x187 => 0x0,
    0x188 => 0x0,
    0x189 => 0x0,
    0x18a => 0x0,
    0x18b => 0x0,
    0x18c => 0x0,
    0x18d => 0x0,
    0x18e => 0x0,
    0x18f => 0x0,
    0x190 => 0x0,
    0x191 => 0x0,
    0x192 => 0x0,
    0x193 => 0x0,
    0x194 => 0x0,
    0x195 => 0x0,
    0x196 => 0x0,
    0x197 => 0x0,
    0x198 => 0x0,
    0x199 => 0x0,
    0x19a => 0x0,
    0x19b => 0x0,
    0x19c => 0x0,
    0x19d => 0x0,
    0x19e => 0x0,
    0x19f => 0x5d8c,
    0x1a0 => 0x0,
    0x1a1 => 0x0,
    0x1a2 => 0x0,
    0x1a3 => 0x0,
    0x1a4 => 0x0,
    0x1a5 => 0x0,
    0x1a6 => 0x0,
    0x1a7 => 0x0,
    0x1a8 => 0x0,
    0x1a9 => 0x0,
    0x1aa => 0x0,
    0x1ab => 0x0,
    0x1ac => 0x0,
    0x1ad => 0x0,
    0x1ae => 0x0,
    0x1af => 0x0,
    0x1b0 => 0x0,
    0x1b1 => 0x0,
    0x1b2 => 0x0,
    0x1b3 => 0x0,
    0x1b4 => 0x0,
    0x1b5 => 0x0,
    0x1b6 => 0x0,
    0x1b7 => 0x0,
    0x1b8 => 0x0,
    0x1b9 => 0x0,
    0x1ba => 0x0,
    0x1bb => 0x0,
    0x1bc => 0x0,
    0x1bd => 0x0,
    0x1be => 0x0,
    0x1bf => 0x5d8d,
    0x1c0 => 0x0,
    0x1c1 => 0x0,
    0x1c2 => 0x0,
    0x1c3 => 0x0,
    0x1c4 => 0x0,
    0x1c5 => 0x0,
    0x1c6 => 0x0,
    0x1c7 => 0x0,
    0x1c8 => 0x0,
    0x1c9 => 0x0,
    0x1ca => 0x0,
    0x1cb => 0x0,
    0x1cc => 0x0,
    0x1cd => 0x0,
    0x1ce => 0x0,
    0x1cf => 0x0,
    0x1d0 => 0x0,
    0x1d1 => 0x0,
    0x1d2 => 0x0,
    0x1d3 => 0x0,
    0x1d4 => 0x0,
    0x1d5 => 0x0,
    0x1d6 => 0x0,
    0x1d7 => 0x0,
    0x1d8 => 0x0,
    0x1d9 => 0x0,
    0x1da => 0x0,
    0x1db => 0x0,
    0x1dc => 0x0,
    0x1dd => 0x0,
    0x1de => 0x0,
    0x1df => 0x5d8e,
    0x1e0 => 0x0,
    0x1e1 => 0x0,
    0x1e2 => 0x0,
    0x1e3 => 0x0,
    0x1e4 => 0x0,
    0x1e5 => 0x0,
    0x1e6 => 0x0,
    0x1e7 => 0x0,
    0x1e8 => 0x0,
    0x1e9 => 0x0,
    0x1ea => 0x0,
    0x1eb => 0x0,
    0x1ec => 0x0,
    0x1ed => 0x0,
    0x1ee => 0x0,
    0x1ef => 0x0,
    0x1f0 => 0x0,
    0x1f1 => 0x0,
    0x1f2 => 0x0,
    0x1f3 => 0x0,
    0x1f4 => 0x0,
    0x1f5 => 0x0,
    0x1f6 => 0x0,
    0x1f7 => 0x0,
    0x1f8 => 0x0,
    0x1f9 => 0x0,
    0x1fa => 0x0,
    0x1fb => 0x0,
    0x1fc => 0x0,
    0x1fd => 0x0,
    0x1fe => 0x0,
    0x1ff => 0x5d8f,
    0x200 => 0x0,
    0x201 => 0x0,
    0x202 => 0x0,
    0x203 => 0x0,
    0x204 => 0x0,
    0x205 => 0x0,
    0x206 => 0x0,
    0x207 => 0x0,
    0x208 => 0x0,
    0x209 => 0x0,
    0x20a => 0x0,
    0x20b => 0x0,
    0x20c => 0x0,
    0x20d => 0x0,
    0x20e => 0x0,
    0x20f => 0x0,
    0x210 => 0x0,
    0x211 => 0x0,
    0x212 => 0x0,
    0x213 => 0x0,
    0x214 => 0x0,
    0x215 => 0x0,
    0x216 => 0x0,
    0x217 => 0x0,
    0x218 => 0x0,
    0x219 => 0x0,
    0x21a => 0x0,
    0x21b => 0x0,
    0x21c => 0x0,
    0x21d => 0x0,
    0x21e => 0x0,
    0x21f => 0x5e80,
    0x220 => 0x0,
    0x221 => 0x0,
    0x222 => 0x0,
    0x223 => 0x0,
    0x224 => 0x0,
    0x225 => 0x0,
    0x226 => 0x0,
    0x227 => 0x0,
    0x228 => 0x0,
    0x229 => 0x0,
    0x22a => 0x0,
    0x22b => 0x0,
    0x22c => 0x0,
    0x22d => 0x0,
    0x22e => 0x0,
    0x22f => 0x0,
    0x230 => 0x0,
    0x231 => 0x0,
    0x232 => 0x0,
    0x233 => 0x0,
    0x234 => 0x0,
    0x235 => 0x0,
    0x236 => 0x0,
    0x237 => 0x0,
    0x238 => 0x0,
    0x239 => 0x0,
    0x23a => 0x0,
    0x23b => 0x0,
    0x23c => 0x0,
    0x23d => 0x0,
    0x23e => 0x0,
    0x23f => 0x5e81,
    0x240 => 0x0,
    0x241 => 0x0,
    0x242 => 0x0,
    0x243 => 0x0,
    0x244 => 0x0,
    0x245 => 0x0,
    0x246 => 0x0,
    0x247 => 0x0,
    0x248 => 0x0,
    0x249 => 0x0,
    0x24a => 0x0,
    0x24b => 0x0,
    0x24c => 0x0,
    0x24d => 0x0,
    0x24e => 0x0,
    0x24f => 0x0,
    0x250 => 0x0,
    0x251 => 0x0,
    0x252 => 0x0,
    0x253 => 0x0,
    0x254 => 0x0,
    0x255 => 0x0,
    0x256 => 0x0,
    0x257 => 0x0,
    0x258 => 0x0,
    0x259 => 0x0,
    0x25a => 0x0,
    0x25b => 0x0,
    0x25c => 0x0,
    0x25d => 0x0,
    0x25e => 0x0,
    0x25f => 0x0,
    0x260 => 0x0,
    0x261 => 0x0,
    0x262 => 0x0,
    0x263 => 0x0,
    0x264 => 0x0,
    0x265 => 0x0,
    0x266 => 0x0,
    0x267 => 0x0,
    0x268 => 0x0,
    0x269 => 0x0,
    0x26a => 0x0,
    0x26b => 0x0,
    0x26c => 0x0,
    0x26d => 0x0,
    0x26e => 0x0,
    0x26f => 0x0,
    0x270 => 0x0,
    0x271 => 0x0,
    0x272 => 0x0,
    0x273 => 0x0,
    0x274 => 0x0,
    0x275 => 0x0,
    0x276 => 0x0,
    0x277 => 0x0,
    0x278 => 0x0,
    0x279 => 0x0,
    0x27a => 0x0,
    0x27b => 0x0,
    0x27c => 0x0,
    0x27d => 0x0,
    0x27e => 0x0,
    0x27f => 0x0,
    0x280 => 0x0,
    0x281 => 0x0,
    0x282 => 0x0,
    0x283 => 0x0,
    0x284 => 0x0,
    0x285 => 0x0,
    0x286 => 0x0,
    0x287 => 0x0,
    0x288 => 0x0,
    0x289 => 0x0,
    0x28a => 0x0,
    0x28b => 0x0,
    0x28c => 0x0,
    0x28d => 0x0,
    0x28e => 0x0,
    0x28f => 0x0,
    0x290 => 0x0,
    0x291 => 0x0,
    0x292 => 0x0,
    0x293 => 0x0,
    0x294 => 0x0,
    0x295 => 0x0,
    0x296 => 0x0,
    0x297 => 0x0,
    0x298 => 0x0,
    0x299 => 0x0,
    0x29a => 0x0,
    0x29b => 0x0,
    0x29c => 0x0,
    0x29d => 0x0,
    0x29e => 0x0,
    0x29f => 0x0,
    0x2a0 => 0x0,
    0x2a1 => 0x0,
    0x2a2 => 0x0,
    0x2a3 => 0x0,
    0x2a4 => 0x0,
    0x2a5 => 0x0,
    0x2a6 => 0x0,
    0x2a7 => 0x0,
    0x2a8 => 0x0,
    0x2a9 => 0x0,
    0x2aa => 0x0,
    0x2ab => 0x0,
    0x2ac => 0x0,
    0x2ad => 0x0,
    0x2ae => 0x0,
    0x2af => 0x0,
    0x2b0 => 0x0,
    0x2b1 => 0x0,
    0x2b2 => 0x0,
    0x2b3 => 0x0,
    0x2b4 => 0x0,
    0x2b5 => 0x0,
    0x2b6 => 0x0,
    0x2b7 => 0x0,
    0x2b8 => 0x0,
    0x2b9 => 0x0,
    0x2ba => 0x0,
    0x2bb => 0x0,
    0x2bc => 0x0,
    0x2bd => 0x0,
    0x2be => 0x0,
    0x2bf => 0x0,
    0x2c0 => 0x0,
    0x2c1 => 0x0,
    0x2c2 => 0x0,
    0x2c3 => 0x0,
    0x2c4 => 0x0,
    0x2c5 => 0x0,
    0x2c6 => 0x0,
    0x2c7 => 0x0,
    0x2c8 => 0x0,
    0x2c9 => 0x0,
    0x2ca => 0x0,
    0x2cb => 0x0,
    0x2cc => 0x0,
    0x2cd => 0x0,
    0x2ce => 0x0,
    0x2cf => 0x0,
    0x2d0 => 0x0,
    0x2d1 => 0x0,
    0x2d2 => 0x0,
    0x2d3 => 0x0,
    0x2d4 => 0x0,
    0x2d5 => 0x0,
    0x2d6 => 0x0,
    0x2d7 => 0x0,
    0x2d8 => 0x0,
    0x2d9 => 0x0,
    0x2da => 0x0,
    0x2db => 0x0,
    0x2dc => 0x0,
    0x2dd => 0x0,
    0x2de => 0x0,
    0x2df => 0x0,
    0x2e0 => 0x0,
    0x2e1 => 0x0,
    0x2e2 => 0x0,
    0x2e3 => 0x0,
    0x2e4 => 0x0,
    0x2e5 => 0x0,
    0x2e6 => 0x0,
    0x2e7 => 0x0,
    0x2e8 => 0x0,
    0x2e9 => 0x0,
    0x2ea => 0x0,
    0x2eb => 0x0,
    0x2ec => 0x0,
    0x2ed => 0x0,
    0x2ee => 0x0,
    0x2ef => 0x0,
    0x2f0 => 0x0,
    0x2f1 => 0x0,
    0x2f2 => 0x0,
    0x2f3 => 0x0,
    0x2f4 => 0x0,
    0x2f5 => 0x0,
    0x2f6 => 0x0,
    0x2f7 => 0x0,
    0x2f8 => 0x0,
    0x2f9 => 0x0,
    0x2fa => 0x0,
    0x2fb => 0x0,
    0x2fc => 0x0,
    0x2fd => 0x0,
    0x2fe => 0x0,
    0x2ff => 0x0,
    0x300 => 0x0,
    0x301 => 0x0,
    0x302 => 0x0,
    0x303 => 0x0,
    0x304 => 0x0,
    0x305 => 0x0,
    0x306 => 0x0,
    0x307 => 0x0,
    0x308 => 0x0,
    0x309 => 0x0,
    0x30a => 0x0,
    0x30b => 0x0,
    0x30c => 0x0,
    0x30d => 0x0,
    0x30e => 0x0,
    0x30f => 0x0,
    0x310 => 0x0,
    0x311 => 0x0,
    0x312 => 0x0,
    0x313 => 0x0,
    0x314 => 0x0,
    0x315 => 0x0,
    0x316 => 0x0,
    0x317 => 0x0,
    0x318 => 0x0,
    0x319 => 0x0,
    0x31a => 0x0,
    0x31b => 0x0,
    0x31c => 0x0,
    0x31d => 0x0,
    0x31e => 0x0,
    0x31f => 0x0,
    0x320 => 0x0,
    0x321 => 0x0,
    0x322 => 0x0,
    0x323 => 0x0,
    0x324 => 0x0,
    0x325 => 0x0,
    0x326 => 0x0,
    0x327 => 0x0,
    0x328 => 0x0,
    0x329 => 0x0,
    0x32a => 0x0,
    0x32b => 0x0,
    0x32c => 0x0,
    0x32d => 0x0,
    0x32e => 0x0,
    0x32f => 0x0,
    0x330 => 0x0,
    0x331 => 0x0,
    0x332 => 0x0,
    0x333 => 0x0,
    0x334 => 0x0,
    0x335 => 0x0,
    0x336 => 0x0,
    0x337 => 0x0,
    0x338 => 0x0,
    0x339 => 0x0,
    0x33a => 0x0,
    0x33b => 0x0,
    0x33c => 0x0,
    0x33d => 0x0,
    0x33e => 0x0,
    0x33f => 0x0,
    0x340 => 0x0,
    0x341 => 0x0,
    0x342 => 0x0,
    0x343 => 0x0,
    0x344 => 0x0,
    0x345 => 0x0,
    0x346 => 0x0,
    0x347 => 0x0,
    0x348 => 0x0,
    0x349 => 0x0,
    0x34a => 0x0,
    0x34b => 0x0,
    0x34c => 0x0,
    0x34d => 0x0,
    0x34e => 0x0,
    0x34f => 0x0,
    0x350 => 0x0,
    0x351 => 0x0,
    0x352 => 0x0,
    0x353 => 0x0,
    0x354 => 0x0,
    0x355 => 0x0,
    0x356 => 0x0,
    0x357 => 0x0,
    0x358 => 0x0,
    0x359 => 0x0,
    0x35a => 0x0,
    0x35b => 0x0,
    0x35c => 0x0,
    0x35d => 0x0,
    0x35e => 0x0,
    0x35f => 0x0,
    0x360 => 0x0,
    0x361 => 0x0,
    0x362 => 0x0,
    0x363 => 0x0,
    0x364 => 0x0,
    0x365 => 0x0,
    0x366 => 0x0,
    0x367 => 0x0,
    0x368 => 0x0,
    0x369 => 0x0,
    0x36a => 0x0,
    0x36b => 0x0,
    0x36c => 0x0,
    0x36d => 0x0,
    0x36e => 0x0,
    0x36f => 0x0,
    0x370 => 0x0,
    0x371 => 0x0,
    0x372 => 0x0,
    0x373 => 0x0,
    0x374 => 0x0,
    0x375 => 0x0,
    0x376 => 0x0,
    0x377 => 0x0,
    0x378 => 0x0,
    0x379 => 0x0,
    0x37a => 0x0,
    0x37b => 0x0,
    0x37c => 0x0,
    0x37d => 0x0,
    0x37e => 0x0,
    0x37f => 0x0,
    0x380 => 0x0,
    0x381 => 0x0,
    0x382 => 0x0,
    0x383 => 0x0,
    0x384 => 0x0,
    0x385 => 0x0,
    0x386 => 0x0,
    0x387 => 0x0,
    0x388 => 0x0,
    0x389 => 0x0,
    0x38a => 0x0,
    0x38b => 0x0,
    0x38c => 0x0,
    0x38d => 0x0,
    0x38e => 0x0,
    0x38f => 0x0,
    0x390 => 0x0,
    0x391 => 0x0,
    0x392 => 0x0,
    0x393 => 0x0,
    0x394 => 0x0,
    0x395 => 0x0,
    0x396 => 0x0,
    0x397 => 0x0,
    0x398 => 0x0,
    0x399 => 0x0,
    0x39a => 0x0,
    0x39b => 0x0,
    0x39c => 0x0,
    0x39d => 0x0,
    0x39e => 0x0,
    0x39f => 0x0,
    0x3a0 => 0x0,
    0x3a1 => 0x0,
    0x3a2 => 0x0,
    0x3a3 => 0x0,
    0x3a4 => 0x0,
    0x3a5 => 0x0,
    0x3a6 => 0x0,
    0x3a7 => 0x0,
    0x3a8 => 0x0,
    0x3a9 => 0x0,
    0x3aa => 0x0,
    0x3ab => 0x0,
    0x3ac => 0x0,
    0x3ad => 0x0,
    0x3ae => 0x0,
    0x3af => 0x0,
    0x3b0 => 0x0,
    0x3b1 => 0x0,
    0x3b2 => 0x0,
    0x3b3 => 0x0,
    0x3b4 => 0x0,
    0x3b5 => 0x0,
    0x3b6 => 0x0,
    0x3b7 => 0x0,
    0x3b8 => 0x0,
    0x3b9 => 0x0,
    0x3ba => 0x0,
    0x3bb => 0x0,
    0x3bc => 0x0,
    0x3bd => 0x0,
    0x3be => 0x0,
    0x3bf => 0x0,
    0x3c0 => 0x0,
    0x3c1 => 0x0,
    0x3c2 => 0x0,
    0x3c3 => 0x0,
    0x3c4 => 0x0,
    0x3c5 => 0x0,
    0x3c6 => 0x0,
    0x3c7 => 0x0,
    0x3c8 => 0x0,
    0x3c9 => 0x0,
    0x3ca => 0x0,
    0x3cb => 0x0,
    0x3cc => 0x0,
    0x3cd => 0x0,
    0x3ce => 0x0,
    0x3cf => 0x0,
    0x3d0 => 0x0,
    0x3d1 => 0x0,
    0x3d2 => 0x0,
    0x3d3 => 0x0,
    0x3d4 => 0x0,
    0x3d5 => 0x0,
    0x3d6 => 0x0,
    0x3d7 => 0x0,
    0x3d8 => 0x0,
    0x3d9 => 0x0,
    0x3da => 0x0,
    0x3db => 0x0,
    0x3dc => 0x0,
    0x3dd => 0x0,
    0x3de => 0x0,
    0x3df => 0x0,
    0x3e0 => 0x0,
    0x3e1 => 0x0,
    0x3e2 => 0x0,
    0x3e3 => 0x0,
    0x3e4 => 0x0,
    0x3e5 => 0x0,
    0x3e6 => 0x0,
    0x3e7 => 0x0,
    0x3e8 => 0x0,
    0x3e9 => 0x0,
    0x3ea => 0x0,
    0x3eb => 0x0,
    0x3ec => 0x0,
    0x3ed => 0x0,
    0x3ee => 0x0,
    0x3ef => 0x0,
    0x3f0 => 0x0,
    0x3f1 => 0x0,
    0x3f2 => 0x0,
    0x3f3 => 0x0,
    0x3f4 => 0x0,
    0x3f5 => 0x0,
    0x3f6 => 0x0,
    0x3f7 => 0x0,
    0x3f8 => 0x0,
    0x3f9 => 0x0,
    0x3fa => 0x0,
    0x3fb => 0x0,
    0x3fc => 0x0,
    0x3fd => 0x0,
    0x3fe => 0x0,
    0x3ff => 0x0,
    _ => 0,
  };
  return idx;
}

// CLZ-CLZ#0,CLZ-CLS#0,CLZ-CTZ#0,CLZ-CNT#0,CLZ-ABS#0,REV-RBIT#1,REV-REV16#1,REV-REV32#0,REV-REV64#0,AUT-PACIA#0,AUT-PACIA#1,AUT-PACIA#2,AUT-PACIA#3,AUT-PACIA#4,AUT-PACIA#5,AUT-PACIA#6,AUT-PACIA#7,AUT-PACIA#8,AUT-PACIA#9,AUT-PACIA#10,AUT-PACIA#11,AUT-PACIA#12,AUT-PACIA#13,AUT-PACIA#14,AUT-PACIA#15,AUT-PACIA#16,AUT-PACIA#17,AUT-PACIA#18,AUT-PACIA#19,AUT-PACIA#20,AUT-PACIA#21,AUT-PACIA#22,AUT-PACIA#23,AUT-PACIA#24,AUT-PACIA#25,AUT-PACIA#26,AUT-PACIA#27,AUT-PACIA#28,AUT-PACIA#29,AUT-PACIA#30,AUT-PACIA#31,AUT-PACIB#0,AUT-PACIB#1,AUT-PACIB#2,AUT-PACIB#3,AUT-PACIB#4,AUT-PACIB#5,AUT-PACIB#6,AUT-PACIB#7,AUT-PACIB#8,AUT-PACIB#9,AUT-PACIB#10,AUT-PACIB#11,AUT-PACIB#12,AUT-PACIB#13,AUT-PACIB#14,AUT-PACIB#15,AUT-PACIB#16,AUT-PACIB#17,AUT-PACIB#18,AUT-PACIB#19,AUT-PACIB#20,AUT-PACIB#21,AUT-PACIB#22,AUT-PACIB#23,AUT-PACIB#24,AUT-PACIB#25,AUT-PACIB#26,AUT-PACIB#27,AUT-PACIB#28,AUT-PACIB#29,AUT-PACIB#30,AUT-PACIB#31,AUT-PACDA#0,AUT-PACDA#1,AUT-PACDA#2,AUT-PACDA#3,AUT-PACDA#4,AUT-PACDA#5,AUT-PACDA#6,AUT-PACDA#7,AUT-PACDA#8,AUT-PACDA#9,AUT-PACDA#10,AUT-PACDA#11,AUT-PACDA#12,AUT-PACDA#13,AUT-PACDA#14,AUT-PACDA#15,AUT-PACDA#16,AUT-PACDA#17,AUT-PACDA#18,AUT-PACDA#19,AUT-PACDA#20,AUT-PACDA#21,AUT-PACDA#22,AUT-PACDA#23,AUT-PACDA#24,AUT-PACDA#25,AUT-PACDA#26,AUT-PACDA#27,AUT-PACDA#28,AUT-PACDA#29,AUT-PACDA#30,AUT-PACDA#31,AUT-PACDB#0,AUT-PACDB#1,AUT-PACDB#2,AUT-PACDB#3,AUT-PACDB#4,AUT-PACDB#5,AUT-PACDB#6,AUT-PACDB#7,AUT-PACDB#8,AUT-PACDB#9,AUT-PACDB#10,AUT-PACDB#11,AUT-PACDB#12,AUT-PACDB#13,AUT-PACDB#14,AUT-PACDB#15,AUT-PACDB#16,AUT-PACDB#17,AUT-PACDB#18,AUT-PACDB#19,AUT-PACDB#20,AUT-PACDB#21,AUT-PACDB#22,AUT-PACDB#23,AUT-PACDB#24,AUT-PACDB#25,AUT-PACDB#26,AUT-PACDB#27,AUT-PACDB#28,AUT-PACDB#29,AUT-PACDB#30,AUT-PACDB#31,AUT-AUTIA#0,AUT-AUTIA#1,AUT-AUTIA#2,AUT-AUTIA#3,AUT-AUTIA#4,AUT-AUTIA#5,AUT-AUTIA#6,AUT-AUTIA#7,AUT-AUTIA#8,AUT-AUTIA#9,AUT-AUTIA#10,AUT-AUTIA#11,AUT-AUTIA#12,AUT-AUTIA#13,AUT-AUTIA#14,AUT-AUTIA#15,AUT-AUTIA#16,AUT-AUTIA#17,AUT-AUTIA#18,AUT-AUTIA#19,AUT-AUTIA#20,AUT-AUTIA#21,AUT-AUTIA#22,AUT-AUTIA#23,AUT-AUTIA#24,AUT-AUTIA#25,AUT-AUTIA#26,AUT-AUTIA#27,AUT-AUTIA#28,AUT-AUTIA#29,AUT-AUTIA#30,AUT-AUTIA#31,AUT-AUTIB#0,AUT-AUTIB#1,AUT-AUTIB#2,AUT-AUTIB#3,AUT-AUTIB#4,AUT-AUTIB#5,AUT-AUTIB#6,AUT-AUTIB#7,AUT-AUTIB#8,AUT-AUTIB#9,AUT-AUTIB#10,AUT-AUTIB#11,AUT-AUTIB#12,AUT-AUTIB#13,AUT-AUTIB#14,AUT-AUTIB#15,AUT-AUTIB#16,AUT-AUTIB#17,AUT-AUTIB#18,AUT-AUTIB#19,AUT-AUTIB#20,AUT-AUTIB#21,AUT-AUTIB#22,AUT-AUTIB#23,AUT-AUTIB#24,AUT-AUTIB#25,AUT-AUTIB#26,AUT-AUTIB#27,AUT-AUTIB#28,AUT-AUTIB#29,AUT-AUTIB#30,AUT-AUTIB#31,AUT-AUTDA#0,AUT-AUTDA#1,AUT-AUTDA#2,AUT-AUTDA#3,AUT-AUTDA#4,AUT-AUTDA#5,AUT-AUTDA#6,AUT-AUTDA#7,AUT-AUTDA#8,AUT-AUTDA#9,AUT-AUTDA#10,AUT-AUTDA#11,AUT-AUTDA#12,AUT-AUTDA#13,AUT-AUTDA#14,AUT-AUTDA#15,AUT-AUTDA#16,AUT-AUTDA#17,AUT-AUTDA#18,AUT-AUTDA#19,AUT-AUTDA#20,AUT-AUTDA#21,AUT-AUTDA#22,AUT-AUTDA#23,AUT-AUTDA#24,AUT-AUTDA#25,AUT-AUTDA#26,AUT-AUTDA#27,AUT-AUTDA#28,AUT-AUTDA#29,AUT-AUTDA#30,AUT-AUTDA#31,AUT-AUTDB#0,AUT-AUTDB#1,AUT-AUTDB#2,AUT-AUTDB#3,AUT-AUTDB#4,AUT-AUTDB#5,AUT-AUTDB#6,AUT-AUTDB#7,AUT-AUTDB#8,AUT-AUTDB#9,AUT-AUTDB#10,AUT-AUTDB#11,AUT-AUTDB#12,AUT-AUTDB#13,AUT-AUTDB#14,AUT-AUTDB#15,AUT-AUTDB#16,AUT-AUTDB#17,AUT-AUTDB#18,AUT-AUTDB#19,AUT-AUTDB#20,AUT-AUTDB#21,AUT-AUTDB#22,AUT-AUTDB#23,AUT-AUTDB#24,AUT-AUTDB#25,AUT-AUTDB#26,AUT-AUTDB#27,AUT-AUTDB#28,AUT-AUTDB#29,AUT-AUTDB#30,AUT-AUTDB#31,AUT-PACIZA#0,AUT-PACIZB#0,AUT-PACDZA#0,AUT-PACDZB#0,AUT-AUTIZA#0,AUT-AUTIZB#0,AUT-AUTDZA#0,AUT-AUTDZB#0,XPAC-XPACI#0,XPAC-XPACD#0
pub const fn classify_impl_164(inst: u32) -> u32 {
  if (inst&0xe8000) != 0x0 { return 0; }
  let idx = match (inst >> 16) & 0x1 {
    0x0 => 0x1,
    0x1 => 0x2,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_164_1(inst), // CLZ-CLZ#0,CLZ-CLS#0,CLZ-CTZ#0,CLZ-CNT#0,CLZ-ABS#0,REV-RBIT#1,REV-REV16#1,REV-REV32#0,REV-REV64#0
    0x2 => return classify_impl_164_2(inst), // AUT-PACIA#0,AUT-PACIA#1,AUT-PACIA#2,AUT-PACIA#3,AUT-PACIA#4,AUT-PACIA#5,AUT-PACIA#6,AUT-PACIA#7,AUT-PACIA#8,AUT-PACIA#9,AUT-PACIA#10,AUT-PACIA#11,AUT-PACIA#12,AUT-PACIA#13,AUT-PACIA#14,AUT-PACIA#15,AUT-PACIA#16,AUT-PACIA#17,AUT-PACIA#18,AUT-PACIA#19,AUT-PACIA#20,AUT-PACIA#21,AUT-PACIA#22,AUT-PACIA#23,AUT-PACIA#24,AUT-PACIA#25,AUT-PACIA#26,AUT-PACIA#27,AUT-PACIA#28,AUT-PACIA#29,AUT-PACIA#30,AUT-PACIA#31,AUT-PACIB#0,AUT-PACIB#1,AUT-PACIB#2,AUT-PACIB#3,AUT-PACIB#4,AUT-PACIB#5,AUT-PACIB#6,AUT-PACIB#7,AUT-PACIB#8,AUT-PACIB#9,AUT-PACIB#10,AUT-PACIB#11,AUT-PACIB#12,AUT-PACIB#13,AUT-PACIB#14,AUT-PACIB#15,AUT-PACIB#16,AUT-PACIB#17,AUT-PACIB#18,AUT-PACIB#19,AUT-PACIB#20,AUT-PACIB#21,AUT-PACIB#22,AUT-PACIB#23,AUT-PACIB#24,AUT-PACIB#25,AUT-PACIB#26,AUT-PACIB#27,AUT-PACIB#28,AUT-PACIB#29,AUT-PACIB#30,AUT-PACIB#31,AUT-PACDA#0,AUT-PACDA#1,AUT-PACDA#2,AUT-PACDA#3,AUT-PACDA#4,AUT-PACDA#5,AUT-PACDA#6,AUT-PACDA#7,AUT-PACDA#8,AUT-PACDA#9,AUT-PACDA#10,AUT-PACDA#11,AUT-PACDA#12,AUT-PACDA#13,AUT-PACDA#14,AUT-PACDA#15,AUT-PACDA#16,AUT-PACDA#17,AUT-PACDA#18,AUT-PACDA#19,AUT-PACDA#20,AUT-PACDA#21,AUT-PACDA#22,AUT-PACDA#23,AUT-PACDA#24,AUT-PACDA#25,AUT-PACDA#26,AUT-PACDA#27,AUT-PACDA#28,AUT-PACDA#29,AUT-PACDA#30,AUT-PACDA#31,AUT-PACDB#0,AUT-PACDB#1,AUT-PACDB#2,AUT-PACDB#3,AUT-PACDB#4,AUT-PACDB#5,AUT-PACDB#6,AUT-PACDB#7,AUT-PACDB#8,AUT-PACDB#9,AUT-PACDB#10,AUT-PACDB#11,AUT-PACDB#12,AUT-PACDB#13,AUT-PACDB#14,AUT-PACDB#15,AUT-PACDB#16,AUT-PACDB#17,AUT-PACDB#18,AUT-PACDB#19,AUT-PACDB#20,AUT-PACDB#21,AUT-PACDB#22,AUT-PACDB#23,AUT-PACDB#24,AUT-PACDB#25,AUT-PACDB#26,AUT-PACDB#27,AUT-PACDB#28,AUT-PACDB#29,AUT-PACDB#30,AUT-PACDB#31,AUT-AUTIA#0,AUT-AUTIA#1,AUT-AUTIA#2,AUT-AUTIA#3,AUT-AUTIA#4,AUT-AUTIA#5,AUT-AUTIA#6,AUT-AUTIA#7,AUT-AUTIA#8,AUT-AUTIA#9,AUT-AUTIA#10,AUT-AUTIA#11,AUT-AUTIA#12,AUT-AUTIA#13,AUT-AUTIA#14,AUT-AUTIA#15,AUT-AUTIA#16,AUT-AUTIA#17,AUT-AUTIA#18,AUT-AUTIA#19,AUT-AUTIA#20,AUT-AUTIA#21,AUT-AUTIA#22,AUT-AUTIA#23,AUT-AUTIA#24,AUT-AUTIA#25,AUT-AUTIA#26,AUT-AUTIA#27,AUT-AUTIA#28,AUT-AUTIA#29,AUT-AUTIA#30,AUT-AUTIA#31,AUT-AUTIB#0,AUT-AUTIB#1,AUT-AUTIB#2,AUT-AUTIB#3,AUT-AUTIB#4,AUT-AUTIB#5,AUT-AUTIB#6,AUT-AUTIB#7,AUT-AUTIB#8,AUT-AUTIB#9,AUT-AUTIB#10,AUT-AUTIB#11,AUT-AUTIB#12,AUT-AUTIB#13,AUT-AUTIB#14,AUT-AUTIB#15,AUT-AUTIB#16,AUT-AUTIB#17,AUT-AUTIB#18,AUT-AUTIB#19,AUT-AUTIB#20,AUT-AUTIB#21,AUT-AUTIB#22,AUT-AUTIB#23,AUT-AUTIB#24,AUT-AUTIB#25,AUT-AUTIB#26,AUT-AUTIB#27,AUT-AUTIB#28,AUT-AUTIB#29,AUT-AUTIB#30,AUT-AUTIB#31,AUT-AUTDA#0,AUT-AUTDA#1,AUT-AUTDA#2,AUT-AUTDA#3,AUT-AUTDA#4,AUT-AUTDA#5,AUT-AUTDA#6,AUT-AUTDA#7,AUT-AUTDA#8,AUT-AUTDA#9,AUT-AUTDA#10,AUT-AUTDA#11,AUT-AUTDA#12,AUT-AUTDA#13,AUT-AUTDA#14,AUT-AUTDA#15,AUT-AUTDA#16,AUT-AUTDA#17,AUT-AUTDA#18,AUT-AUTDA#19,AUT-AUTDA#20,AUT-AUTDA#21,AUT-AUTDA#22,AUT-AUTDA#23,AUT-AUTDA#24,AUT-AUTDA#25,AUT-AUTDA#26,AUT-AUTDA#27,AUT-AUTDA#28,AUT-AUTDA#29,AUT-AUTDA#30,AUT-AUTDA#31,AUT-AUTDB#0,AUT-AUTDB#1,AUT-AUTDB#2,AUT-AUTDB#3,AUT-AUTDB#4,AUT-AUTDB#5,AUT-AUTDB#6,AUT-AUTDB#7,AUT-AUTDB#8,AUT-AUTDB#9,AUT-AUTDB#10,AUT-AUTDB#11,AUT-AUTDB#12,AUT-AUTDB#13,AUT-AUTDB#14,AUT-AUTDB#15,AUT-AUTDB#16,AUT-AUTDB#17,AUT-AUTDB#18,AUT-AUTDB#19,AUT-AUTDB#20,AUT-AUTDB#21,AUT-AUTDB#22,AUT-AUTDB#23,AUT-AUTDB#24,AUT-AUTDB#25,AUT-AUTDB#26,AUT-AUTDB#27,AUT-AUTDB#28,AUT-AUTDB#29,AUT-AUTDB#30,AUT-AUTDB#31,AUT-PACIZA#0,AUT-PACIZB#0,AUT-PACDZA#0,AUT-PACDZB#0,AUT-AUTIZA#0,AUT-AUTIZB#0,AUT-AUTDZA#0,AUT-AUTDZB#0,XPAC-XPACI#0,XPAC-XPACD#0
    _ => idx
  };
  return idx;
}


// ANDOREOR_IMM-ANDS_IMM#57,ANDOREOR_IMM-ANDS_IMM#58,ANDOREOR_IMM-ANDS_IMM#59,ANDOREOR_IMM-ANDS_IMM#60,ANDOREOR_IMM-ANDS_IMM#61,ANDOREOR_IMM-ANDS_IMM#62,ANDOREOR_IMM-ANDS_IMM#63,ANDOREOR_IMM-ANDS_IMM#64,ANDOREOR_IMM-ANDS_IMM#65,ANDOREOR_IMM-ANDS_IMM#66,ANDOREOR_IMM-ANDS_IMM#67,ANDOREOR_IMM-ANDS_IMM#68,ANDOREOR_IMM-ANDS_IMM#69,ANDOREOR_IMM-ANDS_IMM#70,ANDOREOR_IMM-ANDS_IMM#71,ANDOREOR_IMM-ANDS_IMM#72,ANDOREOR_IMM-ANDS_IMM#73,ANDOREOR_IMM-ANDS_IMM#74,ANDOREOR_IMM-ANDS_IMM#75,ANDOREOR_IMM-ANDS_IMM#76,ANDOREOR_IMM-ANDS_IMM#77,ANDOREOR_IMM-ANDS_IMM#78,ANDOREOR_IMM-ANDS_IMM#79,ANDOREOR_IMM-ANDS_IMM#80,ANDOREOR_IMM-ANDS_IMM#81,ANDOREOR_IMM-ANDS_IMM#82,ANDOREOR_IMM-ANDS_IMM#83,ANDOREOR_IMM-ANDS_IMM#84,ANDOREOR_IMM-ANDS_IMM#85,ANDOREOR_IMM-ANDS_IMM#86,ANDOREOR_IMM-ANDS_IMM#87,ANDOREOR_IMM-ANDS_IMM#88,ANDOREOR_IMM-ANDS_IMM#89,ANDOREOR_IMM-ANDS_IMM#90,ANDOREOR_IMM-ANDS_IMM#91,ANDOREOR_IMM-ANDS_IMM#92,ANDOREOR_IMM-ANDS_IMM#93,ANDOREOR_IMM-ANDS_IMM#94,ANDOREOR_IMM-ANDS_IMM#95,ANDOREOR_IMM-ANDS_IMM#96,ANDOREOR_IMM-ANDS_IMM#97,ANDOREOR_IMM-ANDS_IMM#98,ANDOREOR_IMM-ANDS_IMM#99,ANDOREOR_IMM-ANDS_IMM#100,ANDOREOR_IMM-ANDS_IMM#101,ANDOREOR_IMM-ANDS_IMM#102,ANDOREOR_IMM-ANDS_IMM#103,ANDOREOR_IMM-ANDS_IMM#104,ANDOREOR_IMM-ANDS_IMM#105,ANDOREOR_IMM-ANDS_IMM#106,ANDOREOR_IMM-ANDS_IMM#107,ANDOREOR_IMM-ANDS_IMM#108,ANDOREOR_IMM-ANDS_IMM#109,ANDOREOR_IMM-ANDS_IMM#110,ANDOREOR_IMM-ANDS_IMM#111,ANDOREOR_IMM-ANDS_IMM#112,ANDOREOR_IMM-ANDS_IMM#113
pub const fn classify_impl_165(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x503,
    0x1 => 0x503,
    0x2 => 0x503,
    0x3 => 0x503,
    0x4 => 0x503,
    0x5 => 0x503,
    0x6 => 0x503,
    0x7 => 0x503,
    0x8 => 0x503,
    0x9 => 0x503,
    0xa => 0x503,
    0xb => 0x503,
    0xc => 0x503,
    0xd => 0x503,
    0xe => 0x503,
    0xf => 0x503,
    0x10 => 0x503,
    0x11 => 0x503,
    0x12 => 0x503,
    0x13 => 0x503,
    0x14 => 0x503,
    0x15 => 0x503,
    0x16 => 0x503,
    0x17 => 0x503,
    0x18 => 0x503,
    0x19 => 0x503,
    0x1a => 0x503,
    0x1b => 0x503,
    0x1c => 0x503,
    0x1d => 0x503,
    0x1e => 0x503,
    0x1f => 0x0,
    0x20 => 0x503,
    0x21 => 0x503,
    0x22 => 0x503,
    0x23 => 0x503,
    0x24 => 0x503,
    0x25 => 0x503,
    0x26 => 0x503,
    0x27 => 0x503,
    0x28 => 0x503,
    0x29 => 0x503,
    0x2a => 0x503,
    0x2b => 0x503,
    0x2c => 0x503,
    0x2d => 0x503,
    0x2e => 0x503,
    0x2f => 0x0,
    0x30 => 0x503,
    0x31 => 0x503,
    0x32 => 0x503,
    0x33 => 0x503,
    0x34 => 0x503,
    0x35 => 0x503,
    0x36 => 0x503,
    0x37 => 0x0,
    0x38 => 0x503,
    0x39 => 0x503,
    0x3a => 0x503,
    0x3b => 0x0,
    0x3c => 0x503,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// ANDOREOR_IMM-ANDS_IMM#114,ANDOREOR_IMM-ANDS_IMM#115,ANDOREOR_IMM-ANDS_IMM#116,ANDOREOR_IMM-ANDS_IMM#117,ANDOREOR_IMM-ANDS_IMM#118,ANDOREOR_IMM-ANDS_IMM#119,ANDOREOR_IMM-ANDS_IMM#120,ANDOREOR_IMM-ANDS_IMM#121,ANDOREOR_IMM-ANDS_IMM#122,ANDOREOR_IMM-ANDS_IMM#123,ANDOREOR_IMM-ANDS_IMM#124,ANDOREOR_IMM-ANDS_IMM#125,ANDOREOR_IMM-ANDS_IMM#126,ANDOREOR_IMM-ANDS_IMM#127,ANDOREOR_IMM-ANDS_IMM#128,ANDOREOR_IMM-ANDS_IMM#129,ANDOREOR_IMM-ANDS_IMM#130,ANDOREOR_IMM-ANDS_IMM#131,ANDOREOR_IMM-ANDS_IMM#132,ANDOREOR_IMM-ANDS_IMM#133,ANDOREOR_IMM-ANDS_IMM#134,ANDOREOR_IMM-ANDS_IMM#135,ANDOREOR_IMM-ANDS_IMM#136,ANDOREOR_IMM-ANDS_IMM#137,ANDOREOR_IMM-ANDS_IMM#138,ANDOREOR_IMM-ANDS_IMM#139,ANDOREOR_IMM-ANDS_IMM#140,ANDOREOR_IMM-ANDS_IMM#141,ANDOREOR_IMM-ANDS_IMM#142,ANDOREOR_IMM-ANDS_IMM#143,ANDOREOR_IMM-ANDS_IMM#144,ANDOREOR_IMM-ANDS_IMM#145,ANDOREOR_IMM-ANDS_IMM#146,ANDOREOR_IMM-ANDS_IMM#147,ANDOREOR_IMM-ANDS_IMM#148,ANDOREOR_IMM-ANDS_IMM#149,ANDOREOR_IMM-ANDS_IMM#150,ANDOREOR_IMM-ANDS_IMM#151,ANDOREOR_IMM-ANDS_IMM#152,ANDOREOR_IMM-ANDS_IMM#153,ANDOREOR_IMM-ANDS_IMM#154,ANDOREOR_IMM-ANDS_IMM#155,ANDOREOR_IMM-ANDS_IMM#156,ANDOREOR_IMM-ANDS_IMM#157,ANDOREOR_IMM-ANDS_IMM#158,ANDOREOR_IMM-ANDS_IMM#159,ANDOREOR_IMM-ANDS_IMM#160,ANDOREOR_IMM-ANDS_IMM#161,ANDOREOR_IMM-ANDS_IMM#162,ANDOREOR_IMM-ANDS_IMM#163,ANDOREOR_IMM-ANDS_IMM#164,ANDOREOR_IMM-ANDS_IMM#165,ANDOREOR_IMM-ANDS_IMM#166,ANDOREOR_IMM-ANDS_IMM#167,ANDOREOR_IMM-ANDS_IMM#168,ANDOREOR_IMM-ANDS_IMM#169,ANDOREOR_IMM-ANDS_IMM#170,ANDOREOR_IMM-ANDS_IMM#171,ANDOREOR_IMM-ANDS_IMM#172,ANDOREOR_IMM-ANDS_IMM#173,ANDOREOR_IMM-ANDS_IMM#174,ANDOREOR_IMM-ANDS_IMM#175,ANDOREOR_IMM-ANDS_IMM#176
pub const fn classify_impl_166(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x503,
    0x1 => 0x503,
    0x2 => 0x503,
    0x3 => 0x503,
    0x4 => 0x503,
    0x5 => 0x503,
    0x6 => 0x503,
    0x7 => 0x503,
    0x8 => 0x503,
    0x9 => 0x503,
    0xa => 0x503,
    0xb => 0x503,
    0xc => 0x503,
    0xd => 0x503,
    0xe => 0x503,
    0xf => 0x503,
    0x10 => 0x503,
    0x11 => 0x503,
    0x12 => 0x503,
    0x13 => 0x503,
    0x14 => 0x503,
    0x15 => 0x503,
    0x16 => 0x503,
    0x17 => 0x503,
    0x18 => 0x503,
    0x19 => 0x503,
    0x1a => 0x503,
    0x1b => 0x503,
    0x1c => 0x503,
    0x1d => 0x503,
    0x1e => 0x503,
    0x1f => 0x503,
    0x20 => 0x503,
    0x21 => 0x503,
    0x22 => 0x503,
    0x23 => 0x503,
    0x24 => 0x503,
    0x25 => 0x503,
    0x26 => 0x503,
    0x27 => 0x503,
    0x28 => 0x503,
    0x29 => 0x503,
    0x2a => 0x503,
    0x2b => 0x503,
    0x2c => 0x503,
    0x2d => 0x503,
    0x2e => 0x503,
    0x2f => 0x503,
    0x30 => 0x503,
    0x31 => 0x503,
    0x32 => 0x503,
    0x33 => 0x503,
    0x34 => 0x503,
    0x35 => 0x503,
    0x36 => 0x503,
    0x37 => 0x503,
    0x38 => 0x503,
    0x39 => 0x503,
    0x3a => 0x503,
    0x3b => 0x503,
    0x3c => 0x503,
    0x3d => 0x503,
    0x3e => 0x503,
    0x3f => 0x0,
    _ => 0,
  };
  return idx;
}


// MEMU-STURX#0,MEMU-STRX_POST#0,MEMU-STTRX#0,MEMU-STRX_PRE#0
pub const fn classify_impl_167(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x182c,
    0x1 => 0x182d,
    0x2 => 0x182e,
    0x3 => 0x182f,
    _ => 0,
  };
  return idx;
}


// LS64V-ST64BV0#0,LS64V-ST64BV0#1,LS64V-ST64BV0#2
pub const fn classify_impl_168_1(inst: u32) -> u32 {
  if (inst&0x1) != 0x0 { return 0; }
  let idx = match (inst >> 3) & 0x3 {
    0x0 => 0x6b00,
    0x1 => 0x6b00,
    0x2 => 0x6b00,
    0x3 => 0x0,
    _ => 0,
  };
  return idx;
}


// LS64V-ST64BV#0,LS64V-ST64BV#1,LS64V-ST64BV#2
pub const fn classify_impl_168_2(inst: u32) -> u32 {
  if (inst&0x1) != 0x0 { return 0; }
  let idx = match (inst >> 3) & 0x3 {
    0x0 => 0x6b01,
    0x1 => 0x6b01,
    0x2 => 0x6b01,
    0x3 => 0x0,
    _ => 0,
  };
  return idx;
}

// MEM_REG-STR_REG#0,LDRAUT-LDRAA#0,LDRAUT-LDRAA_PRE#0,SWP-SWP#1,LDATOMIC-LDADDX#0,LDATOMIC-LDCLRX#0,LDATOMIC-LDEORX#0,LDATOMIC-LDSETX#0,LDATOMIC-LDSMAXX#0,LDATOMIC-LDSMINX#0,LDATOMIC-LDUMAXX#0,LDATOMIC-LDUMINX#0,LS64V-ST64BV0#0,LS64V-ST64BV0#1,LS64V-ST64BV0#2,LS64V-ST64BV#0,LS64V-ST64BV#1,LS64V-ST64BV#2
pub const fn classify_impl_168(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x6160,
    0x1 => 0x5e00,
    0x2 => 0x0,
    0x3 => 0x5e01,
    0x4 => 0x6161,
    0x5 => 0x5e00,
    0x6 => 0x0,
    0x7 => 0x5e01,
    0x8 => 0x6162,
    0x9 => 0x5e00,
    0xa => 0x0,
    0xb => 0x5e01,
    0xc => 0x6163,
    0xd => 0x5e00,
    0xe => 0x0,
    0xf => 0x5e01,
    0x10 => 0x6164,
    0x11 => 0x5e00,
    0x12 => 0x190b,
    0x13 => 0x5e01,
    0x14 => 0x6165,
    0x15 => 0x5e00,
    0x16 => 0x190b,
    0x17 => 0x5e01,
    0x18 => 0x6166,
    0x19 => 0x5e00,
    0x1a => 0x190b,
    0x1b => 0x5e01,
    0x1c => 0x6167,
    0x1d => 0x5e00,
    0x1e => 0x190b,
    0x1f => 0x5e01,
    0x20 => 0x6088,
    0x21 => 0x5e00,
    0x22 => 0x0,
    0x23 => 0x5e01,
    0x24 => 0x0,
    0x25 => 0x5e00,
    0x26 => 0x0,
    0x27 => 0x5e01,
    0x28 => 0x1,
    0x29 => 0x5e00,
    0x2a => 0x0,
    0x2b => 0x5e01,
    0x2c => 0x2,
    0x2d => 0x5e00,
    0x2e => 0x0,
    0x2f => 0x5e01,
    0x30 => 0x0,
    0x31 => 0x5e00,
    0x32 => 0x190b,
    0x33 => 0x5e01,
    0x34 => 0x0,
    0x35 => 0x5e00,
    0x36 => 0x190b,
    0x37 => 0x5e01,
    0x38 => 0x0,
    0x39 => 0x5e00,
    0x3a => 0x190b,
    0x3b => 0x5e01,
    0x3c => 0x0,
    0x3d => 0x5e00,
    0x3e => 0x190b,
    0x3f => 0x5e01,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_168_1(inst), // LS64V-ST64BV0#0,LS64V-ST64BV0#1,LS64V-ST64BV0#2
    0x2 => return classify_impl_168_2(inst), // LS64V-ST64BV#0,LS64V-ST64BV#1,LS64V-ST64BV#2
    _ => idx
  };
  return idx;
}


// LS64-ST64B#0,LS64-ST64B#1,LS64-ST64B#2
pub const fn classify_impl_169_1(inst: u32) -> u32 {
  if (inst&0xf0001) != 0xf0000 { return 0; }
  let idx = match (inst >> 3) & 0x3 {
    0x0 => 0x6a80,
    0x1 => 0x6a80,
    0x2 => 0x6a80,
    0x3 => 0x0,
    _ => 0,
  };
  return idx;
}


// LS64V-ST64BV0#0,LS64V-ST64BV0#1,LS64V-ST64BV0#2
pub const fn classify_impl_169_2(inst: u32) -> u32 {
  if (inst&0x1) != 0x0 { return 0; }
  let idx = match (inst >> 3) & 0x3 {
    0x0 => 0x6b00,
    0x1 => 0x6b00,
    0x2 => 0x6b00,
    0x3 => 0x0,
    _ => 0,
  };
  return idx;
}


// LS64V-ST64BV#0,LS64V-ST64BV#1,LS64V-ST64BV#2
pub const fn classify_impl_169_3(inst: u32) -> u32 {
  if (inst&0x1) != 0x0 { return 0; }
  let idx = match (inst >> 3) & 0x3 {
    0x0 => 0x6b01,
    0x1 => 0x6b01,
    0x2 => 0x6b01,
    0x3 => 0x0,
    _ => 0,
  };
  return idx;
}


// LS64-LD64B#0,LS64-LD64B#1,LS64-LD64B#2
pub const fn classify_impl_169_4(inst: u32) -> u32 {
  if (inst&0xf0001) != 0xf0000 { return 0; }
  let idx = match (inst >> 3) & 0x3 {
    0x0 => 0x6a81,
    0x1 => 0x6a81,
    0x2 => 0x6a81,
    0x3 => 0x0,
    _ => 0,
  };
  return idx;
}

// MEM_REG-STR_REG#0,LDRAUT-LDRAA#0,LDRAUT-LDRAA_PRE#0,SWP-SWP#1,LDATOMIC-LDADDX#0,LDATOMIC-LDCLRX#0,LDATOMIC-LDEORX#0,LDATOMIC-LDSETX#0,LDATOMIC-LDSMAXX#0,LDATOMIC-LDSMINX#0,LDATOMIC-LDUMAXX#0,LDATOMIC-LDUMINX#0,LS64-ST64B#0,LS64-ST64B#1,LS64-ST64B#2,LS64-LD64B#0,LS64-LD64B#1,LS64-LD64B#2,LS64V-ST64BV0#0,LS64V-ST64BV0#1,LS64V-ST64BV0#2,LS64V-ST64BV#0,LS64V-ST64BV#1,LS64V-ST64BV#2
pub const fn classify_impl_169(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x6160,
    0x1 => 0x5e00,
    0x2 => 0x0,
    0x3 => 0x5e01,
    0x4 => 0x6161,
    0x5 => 0x5e00,
    0x6 => 0x0,
    0x7 => 0x5e01,
    0x8 => 0x6162,
    0x9 => 0x5e00,
    0xa => 0x0,
    0xb => 0x5e01,
    0xc => 0x6163,
    0xd => 0x5e00,
    0xe => 0x0,
    0xf => 0x5e01,
    0x10 => 0x6164,
    0x11 => 0x5e00,
    0x12 => 0x190b,
    0x13 => 0x5e01,
    0x14 => 0x6165,
    0x15 => 0x5e00,
    0x16 => 0x190b,
    0x17 => 0x5e01,
    0x18 => 0x6166,
    0x19 => 0x5e00,
    0x1a => 0x190b,
    0x1b => 0x5e01,
    0x1c => 0x6167,
    0x1d => 0x5e00,
    0x1e => 0x190b,
    0x1f => 0x5e01,
    0x20 => 0x6088,
    0x21 => 0x5e00,
    0x22 => 0x0,
    0x23 => 0x5e01,
    0x24 => 0x1,
    0x25 => 0x5e00,
    0x26 => 0x0,
    0x27 => 0x5e01,
    0x28 => 0x2,
    0x29 => 0x5e00,
    0x2a => 0x0,
    0x2b => 0x5e01,
    0x2c => 0x3,
    0x2d => 0x5e00,
    0x2e => 0x0,
    0x2f => 0x5e01,
    0x30 => 0x0,
    0x31 => 0x5e00,
    0x32 => 0x190b,
    0x33 => 0x5e01,
    0x34 => 0x4,
    0x35 => 0x5e00,
    0x36 => 0x190b,
    0x37 => 0x5e01,
    0x38 => 0x0,
    0x39 => 0x5e00,
    0x3a => 0x190b,
    0x3b => 0x5e01,
    0x3c => 0x0,
    0x3d => 0x5e00,
    0x3e => 0x190b,
    0x3f => 0x5e01,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_169_1(inst), // LS64-ST64B#0,LS64-ST64B#1,LS64-ST64B#2
    0x2 => return classify_impl_169_2(inst), // LS64V-ST64BV0#0,LS64V-ST64BV0#1,LS64V-ST64BV0#2
    0x3 => return classify_impl_169_3(inst), // LS64V-ST64BV#0,LS64V-ST64BV#1,LS64V-ST64BV#2
    0x4 => return classify_impl_169_4(inst), // LS64-LD64B#0,LS64-LD64B#1,LS64-LD64B#2
    _ => idx
  };
  return idx;
}


// MEMU-LDURX#0,MEMU-LDRX_POST#0,MEMU-LDTRX#0,MEMU-LDRX_PRE#0
pub const fn classify_impl_16a(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x1830,
    0x1 => 0x1831,
    0x2 => 0x1832,
    0x3 => 0x1833,
    _ => 0,
  };
  return idx;
}


// MEM_REG-LDR_REG#0,LDRAUT-LDRAA#0,LDRAUT-LDRAA_PRE#0,SWP-SWPL#1,LDATOMIC-LDADDLX#0,LDATOMIC-LDCLRLX#0,LDATOMIC-LDEORLX#0,LDATOMIC-LDSETLX#0,LDATOMIC-LDSMAXLX#0,LDATOMIC-LDSMINLX#0,LDATOMIC-LDUMAXLX#0,LDATOMIC-LDUMINLX#0
pub const fn classify_impl_16b(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x6168,
    0x1 => 0x5e00,
    0x2 => 0x0,
    0x3 => 0x5e01,
    0x4 => 0x6169,
    0x5 => 0x5e00,
    0x6 => 0x0,
    0x7 => 0x5e01,
    0x8 => 0x616a,
    0x9 => 0x5e00,
    0xa => 0x0,
    0xb => 0x5e01,
    0xc => 0x616b,
    0xd => 0x5e00,
    0xe => 0x0,
    0xf => 0x5e01,
    0x10 => 0x616c,
    0x11 => 0x5e00,
    0x12 => 0x190c,
    0x13 => 0x5e01,
    0x14 => 0x616d,
    0x15 => 0x5e00,
    0x16 => 0x190c,
    0x17 => 0x5e01,
    0x18 => 0x616e,
    0x19 => 0x5e00,
    0x1a => 0x190c,
    0x1b => 0x5e01,
    0x1c => 0x616f,
    0x1d => 0x5e00,
    0x1e => 0x190c,
    0x1f => 0x5e01,
    0x20 => 0x6089,
    0x21 => 0x5e00,
    0x22 => 0x0,
    0x23 => 0x5e01,
    0x24 => 0x0,
    0x25 => 0x5e00,
    0x26 => 0x0,
    0x27 => 0x5e01,
    0x28 => 0x0,
    0x29 => 0x5e00,
    0x2a => 0x0,
    0x2b => 0x5e01,
    0x2c => 0x0,
    0x2d => 0x5e00,
    0x2e => 0x0,
    0x2f => 0x5e01,
    0x30 => 0x0,
    0x31 => 0x5e00,
    0x32 => 0x190c,
    0x33 => 0x5e01,
    0x34 => 0x0,
    0x35 => 0x5e00,
    0x36 => 0x190c,
    0x37 => 0x5e01,
    0x38 => 0x0,
    0x39 => 0x5e00,
    0x3a => 0x190c,
    0x3b => 0x5e01,
    0x3c => 0x0,
    0x3d => 0x5e00,
    0x3e => 0x190c,
    0x3f => 0x5e01,
    _ => 0,
  };
  return idx;
}


// MEMU-PRFUM#0
pub const fn classify_impl_16c(inst: u32) -> u32 {
  if (inst&0xc00) != 0x0 { return 0; }
  return 0x1834;
}


// MEM_REG-PRFM_REG#0,LDRAUT-LDRAB#0,LDRAUT-LDRAB_PRE#0,SWP-SWPA#1,LDATOMIC-LDADDAX#0,LDATOMIC-LDCLRAX#0,LDATOMIC-LDEORAX#0,LDATOMIC-LDSETAX#0,LDATOMIC-LDSMAXAX#0,LDATOMIC-LDSMINAX#0,LDATOMIC-LDUMAXAX#0,LDATOMIC-LDUMINAX#0
pub const fn classify_impl_16d(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x6170,
    0x1 => 0x5e02,
    0x2 => 0x0,
    0x3 => 0x5e03,
    0x4 => 0x6171,
    0x5 => 0x5e02,
    0x6 => 0x0,
    0x7 => 0x5e03,
    0x8 => 0x6172,
    0x9 => 0x5e02,
    0xa => 0x0,
    0xb => 0x5e03,
    0xc => 0x6173,
    0xd => 0x5e02,
    0xe => 0x0,
    0xf => 0x5e03,
    0x10 => 0x6174,
    0x11 => 0x5e02,
    0x12 => 0x190d,
    0x13 => 0x5e03,
    0x14 => 0x6175,
    0x15 => 0x5e02,
    0x16 => 0x190d,
    0x17 => 0x5e03,
    0x18 => 0x6176,
    0x19 => 0x5e02,
    0x1a => 0x190d,
    0x1b => 0x5e03,
    0x1c => 0x6177,
    0x1d => 0x5e02,
    0x1e => 0x190d,
    0x1f => 0x5e03,
    0x20 => 0x608a,
    0x21 => 0x5e02,
    0x22 => 0x0,
    0x23 => 0x5e03,
    0x24 => 0x0,
    0x25 => 0x5e02,
    0x26 => 0x0,
    0x27 => 0x5e03,
    0x28 => 0x0,
    0x29 => 0x5e02,
    0x2a => 0x0,
    0x2b => 0x5e03,
    0x2c => 0x0,
    0x2d => 0x5e02,
    0x2e => 0x0,
    0x2f => 0x5e03,
    0x30 => 0x0,
    0x31 => 0x5e02,
    0x32 => 0x190d,
    0x33 => 0x5e03,
    0x34 => 0x0,
    0x35 => 0x5e02,
    0x36 => 0x190d,
    0x37 => 0x5e03,
    0x38 => 0x0,
    0x39 => 0x5e02,
    0x3a => 0x190d,
    0x3b => 0x5e03,
    0x3c => 0x0,
    0x3d => 0x5e02,
    0x3e => 0x190d,
    0x3f => 0x5e03,
    _ => 0,
  };
  return idx;
}


// RCPC-LDAPRX#0
pub const fn classify_impl_16e_1(inst: u32) -> u32 {
  if (inst&0xf0000) != 0xf0000 { return 0; }
  return 0x6203;
}

// MEM_REG-PRFM_REG#0,LDRAUT-LDRAB#0,LDRAUT-LDRAB_PRE#0,SWP-SWPA#1,LDATOMIC-LDADDAX#0,LDATOMIC-LDCLRAX#0,LDATOMIC-LDEORAX#0,LDATOMIC-LDSETAX#0,LDATOMIC-LDSMAXAX#0,LDATOMIC-LDSMINAX#0,LDATOMIC-LDUMAXAX#0,LDATOMIC-LDUMINAX#0,RCPC-LDAPRX#0
pub const fn classify_impl_16e(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x6170,
    0x1 => 0x5e02,
    0x2 => 0x0,
    0x3 => 0x5e03,
    0x4 => 0x6171,
    0x5 => 0x5e02,
    0x6 => 0x0,
    0x7 => 0x5e03,
    0x8 => 0x6172,
    0x9 => 0x5e02,
    0xa => 0x0,
    0xb => 0x5e03,
    0xc => 0x6173,
    0xd => 0x5e02,
    0xe => 0x0,
    0xf => 0x5e03,
    0x10 => 0x6174,
    0x11 => 0x5e02,
    0x12 => 0x190d,
    0x13 => 0x5e03,
    0x14 => 0x6175,
    0x15 => 0x5e02,
    0x16 => 0x190d,
    0x17 => 0x5e03,
    0x18 => 0x6176,
    0x19 => 0x5e02,
    0x1a => 0x190d,
    0x1b => 0x5e03,
    0x1c => 0x6177,
    0x1d => 0x5e02,
    0x1e => 0x190d,
    0x1f => 0x5e03,
    0x20 => 0x608a,
    0x21 => 0x5e02,
    0x22 => 0x0,
    0x23 => 0x5e03,
    0x24 => 0x0,
    0x25 => 0x5e02,
    0x26 => 0x0,
    0x27 => 0x5e03,
    0x28 => 0x0,
    0x29 => 0x5e02,
    0x2a => 0x0,
    0x2b => 0x5e03,
    0x2c => 0x0,
    0x2d => 0x5e02,
    0x2e => 0x0,
    0x2f => 0x5e03,
    0x30 => 0x1,
    0x31 => 0x5e02,
    0x32 => 0x190d,
    0x33 => 0x5e03,
    0x34 => 0x0,
    0x35 => 0x5e02,
    0x36 => 0x190d,
    0x37 => 0x5e03,
    0x38 => 0x0,
    0x39 => 0x5e02,
    0x3a => 0x190d,
    0x3b => 0x5e03,
    0x3c => 0x0,
    0x3d => 0x5e02,
    0x3e => 0x190d,
    0x3f => 0x5e03,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_16e_1(inst), // RCPC-LDAPRX#0
    _ => idx
  };
  return idx;
}


// LDRAUT-LDRAB#0,LDRAUT-LDRAB_PRE#0,SWP-SWPAL#1,LDATOMIC-LDADDALX#0,LDATOMIC-LDCLRALX#0,LDATOMIC-LDEORALX#0,LDATOMIC-LDSETALX#0,LDATOMIC-LDSMAXALX#0,LDATOMIC-LDSMINALX#0,LDATOMIC-LDUMAXALX#0,LDATOMIC-LDUMINALX#0
pub const fn classify_impl_16f(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3f {
    0x0 => 0x6178,
    0x1 => 0x5e02,
    0x2 => 0x0,
    0x3 => 0x5e03,
    0x4 => 0x6179,
    0x5 => 0x5e02,
    0x6 => 0x0,
    0x7 => 0x5e03,
    0x8 => 0x617a,
    0x9 => 0x5e02,
    0xa => 0x0,
    0xb => 0x5e03,
    0xc => 0x617b,
    0xd => 0x5e02,
    0xe => 0x0,
    0xf => 0x5e03,
    0x10 => 0x617c,
    0x11 => 0x5e02,
    0x12 => 0x0,
    0x13 => 0x5e03,
    0x14 => 0x617d,
    0x15 => 0x5e02,
    0x16 => 0x0,
    0x17 => 0x5e03,
    0x18 => 0x617e,
    0x19 => 0x5e02,
    0x1a => 0x0,
    0x1b => 0x5e03,
    0x1c => 0x617f,
    0x1d => 0x5e02,
    0x1e => 0x0,
    0x1f => 0x5e03,
    0x20 => 0x608b,
    0x21 => 0x5e02,
    0x22 => 0x0,
    0x23 => 0x5e03,
    0x24 => 0x0,
    0x25 => 0x5e02,
    0x26 => 0x0,
    0x27 => 0x5e03,
    0x28 => 0x0,
    0x29 => 0x5e02,
    0x2a => 0x0,
    0x2b => 0x5e03,
    0x2c => 0x0,
    0x2d => 0x5e02,
    0x2e => 0x0,
    0x2f => 0x5e03,
    0x30 => 0x0,
    0x31 => 0x5e02,
    0x32 => 0x0,
    0x33 => 0x5e03,
    0x34 => 0x0,
    0x35 => 0x5e02,
    0x36 => 0x0,
    0x37 => 0x5e03,
    0x38 => 0x0,
    0x39 => 0x5e02,
    0x3a => 0x0,
    0x3b => 0x5e03,
    0x3c => 0x0,
    0x3d => 0x5e02,
    0x3e => 0x0,
    0x3f => 0x5e03,
    _ => 0,
  };
  return idx;
}


// MEMU_FP-STUR_FP#4,MEMU_FP-STR_FP_POST#4,MEMU_FP-STR_FP_PRE#4
pub const fn classify_impl_170(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x1a80,
    0x1 => 0x1a81,
    0x2 => 0x0,
    0x3 => 0x1a82,
    _ => 0,
  };
  return idx;
}


// MEM_REG_FP-STR_REG_FP#4
pub const fn classify_impl_171(inst: u32) -> u32 {
  if (inst&0x4c00) != 0x4800 { return 0; }
  return 0x1b80;
}


// MEMU_FP-LDUR_FP#4,MEMU_FP-LDR_FP_POST#4,MEMU_FP-LDR_FP_PRE#4
pub const fn classify_impl_172(inst: u32) -> u32 {
  let idx = match (inst >> 10) & 0x3 {
    0x0 => 0x1a83,
    0x1 => 0x1a84,
    0x2 => 0x0,
    0x3 => 0x1a85,
    _ => 0,
  };
  return idx;
}


// MEM_REG_FP-LDR_REG_FP#4
pub const fn classify_impl_173(inst: u32) -> u32 {
  if (inst&0x4c00) != 0x4800 { return 0; }
  return 0x1b81;
}

// *
pub const fn classify_impl(inst: u32) -> u32 {
  let idx = match (inst >> 20) & 0xfff {
    0x0 => 0x1,
    0x1 => 0x0,
    0x2 => 0x0,
    0x3 => 0x0,
    0x4 => 0x0,
    0x5 => 0x0,
    0x6 => 0x0,
    0x7 => 0x0,
    0x8 => 0x0,
    0x9 => 0x0,
    0xa => 0x0,
    0xb => 0x0,
    0xc => 0x0,
    0xd => 0x0,
    0xe => 0x0,
    0xf => 0x0,
    0x10 => 0x0,
    0x11 => 0x0,
    0x12 => 0x0,
    0x13 => 0x0,
    0x14 => 0x0,
    0x15 => 0x0,
    0x16 => 0x0,
    0x17 => 0x0,
    0x18 => 0x0,
    0x19 => 0x0,
    0x1a => 0x0,
    0x1b => 0x0,
    0x1c => 0x0,
    0x1d => 0x0,
    0x1e => 0x0,
    0x1f => 0x0,
    0x20 => 0x0,
    0x21 => 0x0,
    0x22 => 0x0,
    0x23 => 0x0,
    0x24 => 0x0,
    0x25 => 0x0,
    0x26 => 0x0,
    0x27 => 0x0,
    0x28 => 0x0,
    0x29 => 0x0,
    0x2a => 0x0,
    0x2b => 0x0,
    0x2c => 0x0,
    0x2d => 0x0,
    0x2e => 0x0,
    0x2f => 0x0,
    0x30 => 0x0,
    0x31 => 0x0,
    0x32 => 0x0,
    0x33 => 0x0,
    0x34 => 0x0,
    0x35 => 0x0,
    0x36 => 0x0,
    0x37 => 0x0,
    0x38 => 0x0,
    0x39 => 0x0,
    0x3a => 0x0,
    0x3b => 0x0,
    0x3c => 0x0,
    0x3d => 0x0,
    0x3e => 0x0,
    0x3f => 0x0,
    0x40 => 0x0,
    0x41 => 0x0,
    0x42 => 0x0,
    0x43 => 0x0,
    0x44 => 0x0,
    0x45 => 0x0,
    0x46 => 0x0,
    0x47 => 0x0,
    0x48 => 0x0,
    0x49 => 0x0,
    0x4a => 0x0,
    0x4b => 0x0,
    0x4c => 0x0,
    0x4d => 0x0,
    0x4e => 0x0,
    0x4f => 0x0,
    0x50 => 0x0,
    0x51 => 0x0,
    0x52 => 0x0,
    0x53 => 0x0,
    0x54 => 0x0,
    0x55 => 0x0,
    0x56 => 0x0,
    0x57 => 0x0,
    0x58 => 0x0,
    0x59 => 0x0,
    0x5a => 0x0,
    0x5b => 0x0,
    0x5c => 0x0,
    0x5d => 0x0,
    0x5e => 0x0,
    0x5f => 0x0,
    0x60 => 0x0,
    0x61 => 0x0,
    0x62 => 0x0,
    0x63 => 0x0,
    0x64 => 0x0,
    0x65 => 0x0,
    0x66 => 0x0,
    0x67 => 0x0,
    0x68 => 0x0,
    0x69 => 0x0,
    0x6a => 0x0,
    0x6b => 0x0,
    0x6c => 0x0,
    0x6d => 0x0,
    0x6e => 0x0,
    0x6f => 0x0,
    0x70 => 0x0,
    0x71 => 0x0,
    0x72 => 0x0,
    0x73 => 0x0,
    0x74 => 0x0,
    0x75 => 0x0,
    0x76 => 0x0,
    0x77 => 0x0,
    0x78 => 0x0,
    0x79 => 0x0,
    0x7a => 0x0,
    0x7b => 0x0,
    0x7c => 0x0,
    0x7d => 0x0,
    0x7e => 0x0,
    0x7f => 0x0,
    0x80 => 0x2,
    0x81 => 0x2,
    0x82 => 0x3,
    0x83 => 0x3,
    0x84 => 0x4,
    0x85 => 0x4,
    0x86 => 0x5,
    0x87 => 0x5,
    0x88 => 0x6,
    0x89 => 0x6,
    0x8a => 0x7,
    0x8b => 0x7,
    0x8c => 0x8,
    0x8d => 0x8,
    0x8e => 0x9,
    0x8f => 0x9,
    0x90 => 0x0,
    0x91 => 0x0,
    0x92 => 0x0,
    0x93 => 0x0,
    0x94 => 0x0,
    0x95 => 0x0,
    0x96 => 0x0,
    0x97 => 0x0,
    0x98 => 0x0,
    0x99 => 0x0,
    0x9a => 0x0,
    0x9b => 0x0,
    0x9c => 0x0,
    0x9d => 0x0,
    0x9e => 0x0,
    0x9f => 0x0,
    0xa0 => 0xa,
    0xa1 => 0xa,
    0xa2 => 0xb,
    0xa3 => 0xb,
    0xa4 => 0xa,
    0xa5 => 0xa,
    0xa6 => 0xb,
    0xa7 => 0xb,
    0xa8 => 0xa,
    0xa9 => 0xa,
    0xaa => 0xb,
    0xab => 0xb,
    0xac => 0xa,
    0xad => 0xa,
    0xae => 0xb,
    0xaf => 0xb,
    0xb0 => 0xc,
    0xb1 => 0xc,
    0xb2 => 0xd,
    0xb3 => 0xd,
    0xb4 => 0xe,
    0xb5 => 0xe,
    0xb6 => 0x0,
    0xb7 => 0x0,
    0xb8 => 0xf,
    0xb9 => 0xf,
    0xba => 0x0,
    0xbb => 0x0,
    0xbc => 0x0,
    0xbd => 0x0,
    0xbe => 0x0,
    0xbf => 0x0,
    0xc0 => 0x10,
    0xc1 => 0x0,
    0xc2 => 0x0,
    0xc3 => 0x0,
    0xc4 => 0x11,
    0xc5 => 0x0,
    0xc6 => 0x0,
    0xc7 => 0x0,
    0xc8 => 0x12,
    0xc9 => 0x12,
    0xca => 0x0,
    0xcb => 0x0,
    0xcc => 0x13,
    0xcd => 0x13,
    0xce => 0x0,
    0xcf => 0x0,
    0xd0 => 0x14,
    0xd1 => 0x0,
    0xd2 => 0x15,
    0xd3 => 0x0,
    0xd4 => 0x16,
    0xd5 => 0x0,
    0xd6 => 0x17,
    0xd7 => 0x0,
    0xd8 => 0x18,
    0xd9 => 0x18,
    0xda => 0x19,
    0xdb => 0x19,
    0xdc => 0x1a,
    0xdd => 0x1a,
    0xde => 0x1b,
    0xdf => 0x1b,
    0xe0 => 0x1c,
    0xe1 => 0x1c,
    0xe2 => 0x1d,
    0xe3 => 0x1e,
    0xe4 => 0x1f,
    0xe5 => 0x1f,
    0xe6 => 0x20,
    0xe7 => 0x21,
    0xe8 => 0x22,
    0xe9 => 0x22,
    0xea => 0x23,
    0xeb => 0x24,
    0xec => 0x25,
    0xed => 0x25,
    0xee => 0x26,
    0xef => 0x27,
    0xf0 => 0x28,
    0xf1 => 0x29,
    0xf2 => 0x2a,
    0xf3 => 0x2b,
    0xf4 => 0x2c,
    0xf5 => 0x2c,
    0xf6 => 0x2c,
    0xf7 => 0x2c,
    0xf8 => 0x2d,
    0xf9 => 0x2d,
    0xfa => 0x2e,
    0xfb => 0x2e,
    0xfc => 0x2f,
    0xfd => 0x2f,
    0xfe => 0x2f,
    0xff => 0x2f,
    0x100 => 0x480,
    0x101 => 0x480,
    0x102 => 0x480,
    0x103 => 0x480,
    0x104 => 0x480,
    0x105 => 0x480,
    0x106 => 0x480,
    0x107 => 0x480,
    0x108 => 0x480,
    0x109 => 0x480,
    0x10a => 0x480,
    0x10b => 0x480,
    0x10c => 0x480,
    0x10d => 0x480,
    0x10e => 0x480,
    0x10f => 0x480,
    0x110 => 0x380,
    0x111 => 0x380,
    0x112 => 0x380,
    0x113 => 0x380,
    0x114 => 0x380,
    0x115 => 0x380,
    0x116 => 0x380,
    0x117 => 0x380,
    0x118 => 0x0,
    0x119 => 0x0,
    0x11a => 0x0,
    0x11b => 0x0,
    0x11c => 0x30,
    0x11d => 0x0,
    0x11e => 0x0,
    0x11f => 0x0,
    0x120 => 0x31,
    0x121 => 0x31,
    0x122 => 0x31,
    0x123 => 0x31,
    0x124 => 0x0,
    0x125 => 0x0,
    0x126 => 0x0,
    0x127 => 0x0,
    0x128 => 0x1300,
    0x129 => 0x1300,
    0x12a => 0x1300,
    0x12b => 0x1300,
    0x12c => 0x0,
    0x12d => 0x0,
    0x12e => 0x0,
    0x12f => 0x0,
    0x130 => 0x32,
    0x131 => 0x32,
    0x132 => 0x0,
    0x133 => 0x0,
    0x134 => 0x0,
    0x135 => 0x0,
    0x136 => 0x0,
    0x137 => 0x0,
    0x138 => 0x33,
    0x139 => 0x33,
    0x13a => 0x0,
    0x13b => 0x0,
    0x13c => 0x0,
    0x13d => 0x0,
    0x13e => 0x0,
    0x13f => 0x0,
    0x140 => 0x880,
    0x141 => 0x880,
    0x142 => 0x880,
    0x143 => 0x880,
    0x144 => 0x880,
    0x145 => 0x880,
    0x146 => 0x880,
    0x147 => 0x880,
    0x148 => 0x880,
    0x149 => 0x880,
    0x14a => 0x880,
    0x14b => 0x880,
    0x14c => 0x880,
    0x14d => 0x880,
    0x14e => 0x880,
    0x14f => 0x880,
    0x150 => 0x880,
    0x151 => 0x880,
    0x152 => 0x880,
    0x153 => 0x880,
    0x154 => 0x880,
    0x155 => 0x880,
    0x156 => 0x880,
    0x157 => 0x880,
    0x158 => 0x880,
    0x159 => 0x880,
    0x15a => 0x880,
    0x15b => 0x880,
    0x15c => 0x880,
    0x15d => 0x880,
    0x15e => 0x880,
    0x15f => 0x880,
    0x160 => 0x880,
    0x161 => 0x880,
    0x162 => 0x880,
    0x163 => 0x880,
    0x164 => 0x880,
    0x165 => 0x880,
    0x166 => 0x880,
    0x167 => 0x880,
    0x168 => 0x880,
    0x169 => 0x880,
    0x16a => 0x880,
    0x16b => 0x880,
    0x16c => 0x880,
    0x16d => 0x880,
    0x16e => 0x880,
    0x16f => 0x880,
    0x170 => 0x880,
    0x171 => 0x880,
    0x172 => 0x880,
    0x173 => 0x880,
    0x174 => 0x880,
    0x175 => 0x880,
    0x176 => 0x880,
    0x177 => 0x880,
    0x178 => 0x880,
    0x179 => 0x880,
    0x17a => 0x880,
    0x17b => 0x880,
    0x17c => 0x880,
    0x17d => 0x880,
    0x17e => 0x880,
    0x17f => 0x880,
    0x180 => 0x1980,
    0x181 => 0x1980,
    0x182 => 0x1980,
    0x183 => 0x1980,
    0x184 => 0x1980,
    0x185 => 0x1980,
    0x186 => 0x1980,
    0x187 => 0x1980,
    0x188 => 0x1980,
    0x189 => 0x1980,
    0x18a => 0x1980,
    0x18b => 0x1980,
    0x18c => 0x1980,
    0x18d => 0x1980,
    0x18e => 0x1980,
    0x18f => 0x1980,
    0x190 => 0x34,
    0x191 => 0x34,
    0x192 => 0x0,
    0x193 => 0x0,
    0x194 => 0x35,
    0x195 => 0x35,
    0x196 => 0x0,
    0x197 => 0x0,
    0x198 => 0x36,
    0x199 => 0x36,
    0x19a => 0x0,
    0x19b => 0x0,
    0x19c => 0x37,
    0x19d => 0x37,
    0x19e => 0x0,
    0x19f => 0x0,
    0x1a0 => 0x38,
    0x1a1 => 0x38,
    0x1a2 => 0x0,
    0x1a3 => 0x0,
    0x1a4 => 0x0,
    0x1a5 => 0x0,
    0x1a6 => 0x0,
    0x1a7 => 0x0,
    0x1a8 => 0x39,
    0x1a9 => 0x39,
    0x1aa => 0x0,
    0x1ab => 0x0,
    0x1ac => 0x3a,
    0x1ad => 0x3a,
    0x1ae => 0x0,
    0x1af => 0x0,
    0x1b0 => 0x3b,
    0x1b1 => 0x3b,
    0x1b2 => 0x0,
    0x1b3 => 0x0,
    0x1b4 => 0x0,
    0x1b5 => 0x0,
    0x1b6 => 0x0,
    0x1b7 => 0x0,
    0x1b8 => 0x0,
    0x1b9 => 0x0,
    0x1ba => 0x0,
    0x1bb => 0x0,
    0x1bc => 0x0,
    0x1bd => 0x0,
    0x1be => 0x0,
    0x1bf => 0x0,
    0x1c0 => 0x1c00,
    0x1c1 => 0x1c00,
    0x1c2 => 0x1c00,
    0x1c3 => 0x1c00,
    0x1c4 => 0x1c00,
    0x1c5 => 0x1c00,
    0x1c6 => 0x1c00,
    0x1c7 => 0x1c00,
    0x1c8 => 0x1c00,
    0x1c9 => 0x1c00,
    0x1ca => 0x1c00,
    0x1cb => 0x1c00,
    0x1cc => 0x1c00,
    0x1cd => 0x1c00,
    0x1ce => 0x1c00,
    0x1cf => 0x1c00,
    0x1d0 => 0x3c,
    0x1d1 => 0x3c,
    0x1d2 => 0x0,
    0x1d3 => 0x0,
    0x1d4 => 0x3d,
    0x1d5 => 0x3d,
    0x1d6 => 0x0,
    0x1d7 => 0x0,
    0x1d8 => 0x3e,
    0x1d9 => 0x3e,
    0x1da => 0x0,
    0x1db => 0x0,
    0x1dc => 0x3f,
    0x1dd => 0x3f,
    0x1de => 0x0,
    0x1df => 0x0,
    0x1e0 => 0x40,
    0x1e1 => 0x41,
    0x1e2 => 0x42,
    0x1e3 => 0x43,
    0x1e4 => 0x44,
    0x1e5 => 0x45,
    0x1e6 => 0x46,
    0x1e7 => 0x47,
    0x1e8 => 0x0,
    0x1e9 => 0x0,
    0x1ea => 0x0,
    0x1eb => 0x0,
    0x1ec => 0x48,
    0x1ed => 0x49,
    0x1ee => 0x4a,
    0x1ef => 0x4b,
    0x1f0 => 0x4c,
    0x1f1 => 0x4c,
    0x1f2 => 0x4d,
    0x1f3 => 0x4d,
    0x1f4 => 0x4e,
    0x1f5 => 0x4e,
    0x1f6 => 0x4f,
    0x1f7 => 0x4f,
    0x1f8 => 0x0,
    0x1f9 => 0x0,
    0x1fa => 0x0,
    0x1fb => 0x0,
    0x1fc => 0x50,
    0x1fd => 0x50,
    0x1fe => 0x51,
    0x1ff => 0x51,
    0x200 => 0x0,
    0x201 => 0x0,
    0x202 => 0x0,
    0x203 => 0x0,
    0x204 => 0x0,
    0x205 => 0x0,
    0x206 => 0x0,
    0x207 => 0x0,
    0x208 => 0x0,
    0x209 => 0x0,
    0x20a => 0x0,
    0x20b => 0x0,
    0x20c => 0x0,
    0x20d => 0x0,
    0x20e => 0x0,
    0x20f => 0x0,
    0x210 => 0x0,
    0x211 => 0x0,
    0x212 => 0x0,
    0x213 => 0x0,
    0x214 => 0x0,
    0x215 => 0x0,
    0x216 => 0x0,
    0x217 => 0x0,
    0x218 => 0x0,
    0x219 => 0x0,
    0x21a => 0x0,
    0x21b => 0x0,
    0x21c => 0x0,
    0x21d => 0x0,
    0x21e => 0x0,
    0x21f => 0x0,
    0x220 => 0x0,
    0x221 => 0x0,
    0x222 => 0x0,
    0x223 => 0x0,
    0x224 => 0x0,
    0x225 => 0x0,
    0x226 => 0x0,
    0x227 => 0x0,
    0x228 => 0x0,
    0x229 => 0x0,
    0x22a => 0x0,
    0x22b => 0x0,
    0x22c => 0x0,
    0x22d => 0x0,
    0x22e => 0x0,
    0x22f => 0x0,
    0x230 => 0x0,
    0x231 => 0x0,
    0x232 => 0x0,
    0x233 => 0x0,
    0x234 => 0x0,
    0x235 => 0x0,
    0x236 => 0x0,
    0x237 => 0x0,
    0x238 => 0x0,
    0x239 => 0x0,
    0x23a => 0x0,
    0x23b => 0x0,
    0x23c => 0x0,
    0x23d => 0x0,
    0x23e => 0x0,
    0x23f => 0x0,
    0x240 => 0x0,
    0x241 => 0x0,
    0x242 => 0x0,
    0x243 => 0x0,
    0x244 => 0x0,
    0x245 => 0x0,
    0x246 => 0x0,
    0x247 => 0x0,
    0x248 => 0x0,
    0x249 => 0x0,
    0x24a => 0x0,
    0x24b => 0x0,
    0x24c => 0x0,
    0x24d => 0x0,
    0x24e => 0x0,
    0x24f => 0x0,
    0x250 => 0x0,
    0x251 => 0x0,
    0x252 => 0x0,
    0x253 => 0x0,
    0x254 => 0x0,
    0x255 => 0x0,
    0x256 => 0x0,
    0x257 => 0x0,
    0x258 => 0x0,
    0x259 => 0x0,
    0x25a => 0x0,
    0x25b => 0x0,
    0x25c => 0x0,
    0x25d => 0x0,
    0x25e => 0x0,
    0x25f => 0x0,
    0x260 => 0x0,
    0x261 => 0x0,
    0x262 => 0x0,
    0x263 => 0x0,
    0x264 => 0x0,
    0x265 => 0x0,
    0x266 => 0x0,
    0x267 => 0x0,
    0x268 => 0x0,
    0x269 => 0x0,
    0x26a => 0x0,
    0x26b => 0x0,
    0x26c => 0x0,
    0x26d => 0x0,
    0x26e => 0x0,
    0x26f => 0x0,
    0x270 => 0x0,
    0x271 => 0x0,
    0x272 => 0x0,
    0x273 => 0x0,
    0x274 => 0x0,
    0x275 => 0x0,
    0x276 => 0x0,
    0x277 => 0x0,
    0x278 => 0x0,
    0x279 => 0x0,
    0x27a => 0x0,
    0x27b => 0x0,
    0x27c => 0x0,
    0x27d => 0x0,
    0x27e => 0x0,
    0x27f => 0x0,
    0x280 => 0x1700,
    0x281 => 0x1700,
    0x282 => 0x1700,
    0x283 => 0x1700,
    0x284 => 0x1701,
    0x285 => 0x1701,
    0x286 => 0x1701,
    0x287 => 0x1701,
    0x288 => 0x1780,
    0x289 => 0x1780,
    0x28a => 0x1780,
    0x28b => 0x1780,
    0x28c => 0x1781,
    0x28d => 0x1781,
    0x28e => 0x1781,
    0x28f => 0x1781,
    0x290 => 0x1782,
    0x291 => 0x1782,
    0x292 => 0x1782,
    0x293 => 0x1782,
    0x294 => 0x1783,
    0x295 => 0x1783,
    0x296 => 0x1783,
    0x297 => 0x1783,
    0x298 => 0x1784,
    0x299 => 0x1784,
    0x29a => 0x1784,
    0x29b => 0x1784,
    0x29c => 0x1785,
    0x29d => 0x1785,
    0x29e => 0x1785,
    0x29f => 0x1785,
    0x2a0 => 0x52,
    0x2a1 => 0x52,
    0x2a2 => 0x53,
    0x2a3 => 0x53,
    0x2a4 => 0x52,
    0x2a5 => 0x52,
    0x2a6 => 0x53,
    0x2a7 => 0x53,
    0x2a8 => 0x52,
    0x2a9 => 0x52,
    0x2aa => 0x53,
    0x2ab => 0x53,
    0x2ac => 0x52,
    0x2ad => 0x52,
    0x2ae => 0x53,
    0x2af => 0x53,
    0x2b0 => 0x54,
    0x2b1 => 0x54,
    0x2b2 => 0x55,
    0x2b3 => 0x55,
    0x2b4 => 0x56,
    0x2b5 => 0x56,
    0x2b6 => 0x0,
    0x2b7 => 0x0,
    0x2b8 => 0x57,
    0x2b9 => 0x57,
    0x2ba => 0x0,
    0x2bb => 0x0,
    0x2bc => 0x0,
    0x2bd => 0x0,
    0x2be => 0x0,
    0x2bf => 0x0,
    0x2c0 => 0x1a00,
    0x2c1 => 0x1a00,
    0x2c2 => 0x1a00,
    0x2c3 => 0x1a00,
    0x2c4 => 0x1a01,
    0x2c5 => 0x1a01,
    0x2c6 => 0x1a01,
    0x2c7 => 0x1a01,
    0x2c8 => 0x1a02,
    0x2c9 => 0x1a02,
    0x2ca => 0x1a02,
    0x2cb => 0x1a02,
    0x2cc => 0x1a03,
    0x2cd => 0x1a03,
    0x2ce => 0x1a03,
    0x2cf => 0x1a03,
    0x2d0 => 0x1a04,
    0x2d1 => 0x1a04,
    0x2d2 => 0x1a04,
    0x2d3 => 0x1a04,
    0x2d4 => 0x1a05,
    0x2d5 => 0x1a05,
    0x2d6 => 0x1a05,
    0x2d7 => 0x1a05,
    0x2d8 => 0x1a06,
    0x2d9 => 0x1a06,
    0x2da => 0x1a06,
    0x2db => 0x1a06,
    0x2dc => 0x1a07,
    0x2dd => 0x1a07,
    0x2de => 0x1a07,
    0x2df => 0x1a07,
    0x2e0 => 0x58,
    0x2e1 => 0x58,
    0x2e2 => 0x59,
    0x2e3 => 0x5a,
    0x2e4 => 0x5b,
    0x2e5 => 0x5b,
    0x2e6 => 0x5c,
    0x2e7 => 0x5d,
    0x2e8 => 0x5e,
    0x2e9 => 0x5e,
    0x2ea => 0x5f,
    0x2eb => 0x60,
    0x2ec => 0x61,
    0x2ed => 0x61,
    0x2ee => 0x62,
    0x2ef => 0x63,
    0x2f0 => 0x64,
    0x2f1 => 0x65,
    0x2f2 => 0x66,
    0x2f3 => 0x67,
    0x2f4 => 0x68,
    0x2f5 => 0x68,
    0x2f6 => 0x69,
    0x2f7 => 0x69,
    0x2f8 => 0x6a,
    0x2f9 => 0x6a,
    0x2fa => 0x6b,
    0x2fb => 0x6b,
    0x2fc => 0x0,
    0x2fd => 0x0,
    0x2fe => 0x0,
    0x2ff => 0x0,
    0x300 => 0x480,
    0x301 => 0x480,
    0x302 => 0x480,
    0x303 => 0x480,
    0x304 => 0x480,
    0x305 => 0x480,
    0x306 => 0x480,
    0x307 => 0x480,
    0x308 => 0x480,
    0x309 => 0x480,
    0x30a => 0x480,
    0x30b => 0x480,
    0x30c => 0x480,
    0x30d => 0x480,
    0x30e => 0x480,
    0x30f => 0x480,
    0x310 => 0x381,
    0x311 => 0x381,
    0x312 => 0x381,
    0x313 => 0x381,
    0x314 => 0x381,
    0x315 => 0x381,
    0x316 => 0x381,
    0x317 => 0x381,
    0x318 => 0x0,
    0x319 => 0x0,
    0x31a => 0x0,
    0x31b => 0x0,
    0x31c => 0x0,
    0x31d => 0x0,
    0x31e => 0x0,
    0x31f => 0x0,
    0x320 => 0x6c,
    0x321 => 0x6c,
    0x322 => 0x6c,
    0x323 => 0x6c,
    0x324 => 0x0,
    0x325 => 0x0,
    0x326 => 0x0,
    0x327 => 0x0,
    0x328 => 0x0,
    0x329 => 0x0,
    0x32a => 0x0,
    0x32b => 0x0,
    0x32c => 0x0,
    0x32d => 0x0,
    0x32e => 0x0,
    0x32f => 0x0,
    0x330 => 0x6d,
    0x331 => 0x6d,
    0x332 => 0x0,
    0x333 => 0x0,
    0x334 => 0x0,
    0x335 => 0x0,
    0x336 => 0x0,
    0x337 => 0x0,
    0x338 => 0x0,
    0x339 => 0x0,
    0x33a => 0x0,
    0x33b => 0x0,
    0x33c => 0x0,
    0x33d => 0x0,
    0x33e => 0x0,
    0x33f => 0x0,
    0x340 => 0xa80,
    0x341 => 0xa80,
    0x342 => 0xa80,
    0x343 => 0xa80,
    0x344 => 0xa80,
    0x345 => 0xa80,
    0x346 => 0xa80,
    0x347 => 0xa80,
    0x348 => 0xa80,
    0x349 => 0xa80,
    0x34a => 0xa80,
    0x34b => 0xa80,
    0x34c => 0xa80,
    0x34d => 0xa80,
    0x34e => 0xa80,
    0x34f => 0xa80,
    0x350 => 0xa81,
    0x351 => 0xa81,
    0x352 => 0xa81,
    0x353 => 0xa81,
    0x354 => 0xa81,
    0x355 => 0xa81,
    0x356 => 0xa81,
    0x357 => 0xa81,
    0x358 => 0xa81,
    0x359 => 0xa81,
    0x35a => 0xa81,
    0x35b => 0xa81,
    0x35c => 0xa81,
    0x35d => 0xa81,
    0x35e => 0xa81,
    0x35f => 0xa81,
    0x360 => 0xb00,
    0x361 => 0xb00,
    0x362 => 0xb00,
    0x363 => 0xb00,
    0x364 => 0xb00,
    0x365 => 0xb00,
    0x366 => 0xb00,
    0x367 => 0xb00,
    0x368 => 0xb00,
    0x369 => 0xb00,
    0x36a => 0xb00,
    0x36b => 0xb00,
    0x36c => 0xb00,
    0x36d => 0xb00,
    0x36e => 0xb00,
    0x36f => 0xb00,
    0x370 => 0xb01,
    0x371 => 0xb01,
    0x372 => 0xb01,
    0x373 => 0xb01,
    0x374 => 0xb01,
    0x375 => 0xb01,
    0x376 => 0xb01,
    0x377 => 0xb01,
    0x378 => 0xb01,
    0x379 => 0xb01,
    0x37a => 0xb01,
    0x37b => 0xb01,
    0x37c => 0xb01,
    0x37d => 0xb01,
    0x37e => 0xb01,
    0x37f => 0xb01,
    0x380 => 0x6e,
    0x381 => 0x6e,
    0x382 => 0x6f,
    0x383 => 0x6f,
    0x384 => 0x70,
    0x385 => 0x70,
    0x386 => 0x71,
    0x387 => 0x71,
    0x388 => 0x72,
    0x389 => 0x72,
    0x38a => 0x73,
    0x38b => 0x74,
    0x38c => 0x75,
    0x38d => 0x75,
    0x38e => 0x76,
    0x38f => 0x76,
    0x390 => 0x1880,
    0x391 => 0x1880,
    0x392 => 0x1880,
    0x393 => 0x1880,
    0x394 => 0x1881,
    0x395 => 0x1881,
    0x396 => 0x1881,
    0x397 => 0x1881,
    0x398 => 0x1882,
    0x399 => 0x1882,
    0x39a => 0x1882,
    0x39b => 0x1882,
    0x39c => 0x1883,
    0x39d => 0x1883,
    0x39e => 0x1883,
    0x39f => 0x1883,
    0x3a0 => 0x77,
    0x3a1 => 0x78,
    0x3a2 => 0x0,
    0x3a3 => 0x0,
    0x3a4 => 0x79,
    0x3a5 => 0x79,
    0x3a6 => 0x0,
    0x3a7 => 0x0,
    0x3a8 => 0x0,
    0x3a9 => 0x0,
    0x3aa => 0x0,
    0x3ab => 0x0,
    0x3ac => 0x0,
    0x3ad => 0x0,
    0x3ae => 0x0,
    0x3af => 0x0,
    0x3b0 => 0x0,
    0x3b1 => 0x0,
    0x3b2 => 0x0,
    0x3b3 => 0x0,
    0x3b4 => 0x0,
    0x3b5 => 0x0,
    0x3b6 => 0x0,
    0x3b7 => 0x0,
    0x3b8 => 0x0,
    0x3b9 => 0x0,
    0x3ba => 0x0,
    0x3bb => 0x0,
    0x3bc => 0x0,
    0x3bd => 0x0,
    0x3be => 0x0,
    0x3bf => 0x0,
    0x3c0 => 0x7a,
    0x3c1 => 0x7a,
    0x3c2 => 0x7b,
    0x3c3 => 0x7b,
    0x3c4 => 0x7c,
    0x3c5 => 0x7c,
    0x3c6 => 0x7d,
    0x3c7 => 0x7d,
    0x3c8 => 0x7e,
    0x3c9 => 0x7e,
    0x3ca => 0x7f,
    0x3cb => 0x7f,
    0x3cc => 0x80,
    0x3cd => 0x80,
    0x3ce => 0x81,
    0x3cf => 0x81,
    0x3d0 => 0x1b00,
    0x3d1 => 0x1b00,
    0x3d2 => 0x1b00,
    0x3d3 => 0x1b00,
    0x3d4 => 0x1b01,
    0x3d5 => 0x1b01,
    0x3d6 => 0x1b01,
    0x3d7 => 0x1b01,
    0x3d8 => 0x1b00,
    0x3d9 => 0x1b00,
    0x3da => 0x1b00,
    0x3db => 0x1b00,
    0x3dc => 0x1b01,
    0x3dd => 0x1b01,
    0x3de => 0x1b01,
    0x3df => 0x1b01,
    0x3e0 => 0x0,
    0x3e1 => 0x0,
    0x3e2 => 0x0,
    0x3e3 => 0x0,
    0x3e4 => 0x0,
    0x3e5 => 0x0,
    0x3e6 => 0x0,
    0x3e7 => 0x0,
    0x3e8 => 0x0,
    0x3e9 => 0x0,
    0x3ea => 0x0,
    0x3eb => 0x0,
    0x3ec => 0x0,
    0x3ed => 0x0,
    0x3ee => 0x0,
    0x3ef => 0x0,
    0x3f0 => 0x0,
    0x3f1 => 0x0,
    0x3f2 => 0x0,
    0x3f3 => 0x0,
    0x3f4 => 0x0,
    0x3f5 => 0x0,
    0x3f6 => 0x0,
    0x3f7 => 0x0,
    0x3f8 => 0x0,
    0x3f9 => 0x0,
    0x3fa => 0x0,
    0x3fb => 0x0,
    0x3fc => 0x0,
    0x3fd => 0x0,
    0x3fe => 0x0,
    0x3ff => 0x0,
    0x400 => 0x0,
    0x401 => 0x0,
    0x402 => 0x0,
    0x403 => 0x0,
    0x404 => 0x0,
    0x405 => 0x0,
    0x406 => 0x0,
    0x407 => 0x0,
    0x408 => 0x0,
    0x409 => 0x0,
    0x40a => 0x0,
    0x40b => 0x0,
    0x40c => 0x0,
    0x40d => 0x0,
    0x40e => 0x0,
    0x40f => 0x0,
    0x410 => 0x0,
    0x411 => 0x0,
    0x412 => 0x0,
    0x413 => 0x0,
    0x414 => 0x0,
    0x415 => 0x0,
    0x416 => 0x0,
    0x417 => 0x0,
    0x418 => 0x0,
    0x419 => 0x0,
    0x41a => 0x0,
    0x41b => 0x0,
    0x41c => 0x0,
    0x41d => 0x0,
    0x41e => 0x0,
    0x41f => 0x0,
    0x420 => 0x0,
    0x421 => 0x0,
    0x422 => 0x0,
    0x423 => 0x0,
    0x424 => 0x0,
    0x425 => 0x0,
    0x426 => 0x0,
    0x427 => 0x0,
    0x428 => 0x0,
    0x429 => 0x0,
    0x42a => 0x0,
    0x42b => 0x0,
    0x42c => 0x0,
    0x42d => 0x0,
    0x42e => 0x0,
    0x42f => 0x0,
    0x430 => 0x0,
    0x431 => 0x0,
    0x432 => 0x0,
    0x433 => 0x0,
    0x434 => 0x0,
    0x435 => 0x0,
    0x436 => 0x0,
    0x437 => 0x0,
    0x438 => 0x0,
    0x439 => 0x0,
    0x43a => 0x0,
    0x43b => 0x0,
    0x43c => 0x0,
    0x43d => 0x0,
    0x43e => 0x0,
    0x43f => 0x0,
    0x440 => 0x0,
    0x441 => 0x0,
    0x442 => 0x0,
    0x443 => 0x0,
    0x444 => 0x0,
    0x445 => 0x0,
    0x446 => 0x0,
    0x447 => 0x0,
    0x448 => 0x0,
    0x449 => 0x0,
    0x44a => 0x0,
    0x44b => 0x0,
    0x44c => 0x0,
    0x44d => 0x0,
    0x44e => 0x0,
    0x44f => 0x0,
    0x450 => 0x0,
    0x451 => 0x0,
    0x452 => 0x0,
    0x453 => 0x0,
    0x454 => 0x0,
    0x455 => 0x0,
    0x456 => 0x0,
    0x457 => 0x0,
    0x458 => 0x0,
    0x459 => 0x0,
    0x45a => 0x0,
    0x45b => 0x0,
    0x45c => 0x0,
    0x45d => 0x0,
    0x45e => 0x0,
    0x45f => 0x0,
    0x460 => 0x0,
    0x461 => 0x0,
    0x462 => 0x0,
    0x463 => 0x0,
    0x464 => 0x0,
    0x465 => 0x0,
    0x466 => 0x0,
    0x467 => 0x0,
    0x468 => 0x0,
    0x469 => 0x0,
    0x46a => 0x0,
    0x46b => 0x0,
    0x46c => 0x0,
    0x46d => 0x0,
    0x46e => 0x0,
    0x46f => 0x0,
    0x470 => 0x0,
    0x471 => 0x0,
    0x472 => 0x0,
    0x473 => 0x0,
    0x474 => 0x0,
    0x475 => 0x0,
    0x476 => 0x0,
    0x477 => 0x0,
    0x478 => 0x0,
    0x479 => 0x0,
    0x47a => 0x0,
    0x47b => 0x0,
    0x47c => 0x0,
    0x47d => 0x0,
    0x47e => 0x0,
    0x47f => 0x0,
    0x480 => 0x82,
    0x481 => 0x82,
    0x482 => 0x3,
    0x483 => 0x3,
    0x484 => 0x83,
    0x485 => 0x83,
    0x486 => 0x5,
    0x487 => 0x5,
    0x488 => 0x84,
    0x489 => 0x84,
    0x48a => 0x85,
    0x48b => 0x85,
    0x48c => 0x86,
    0x48d => 0x86,
    0x48e => 0x87,
    0x48f => 0x87,
    0x490 => 0x0,
    0x491 => 0x0,
    0x492 => 0x0,
    0x493 => 0x0,
    0x494 => 0x0,
    0x495 => 0x0,
    0x496 => 0x0,
    0x497 => 0x0,
    0x498 => 0x0,
    0x499 => 0x0,
    0x49a => 0x0,
    0x49b => 0x0,
    0x49c => 0x0,
    0x49d => 0x0,
    0x49e => 0x0,
    0x49f => 0x0,
    0x4a0 => 0x88,
    0x4a1 => 0x88,
    0x4a2 => 0x89,
    0x4a3 => 0x89,
    0x4a4 => 0x88,
    0x4a5 => 0x88,
    0x4a6 => 0x89,
    0x4a7 => 0x89,
    0x4a8 => 0x88,
    0x4a9 => 0x88,
    0x4aa => 0x89,
    0x4ab => 0x89,
    0x4ac => 0x88,
    0x4ad => 0x88,
    0x4ae => 0x89,
    0x4af => 0x89,
    0x4b0 => 0x8a,
    0x4b1 => 0x8a,
    0x4b2 => 0x8b,
    0x4b3 => 0x8b,
    0x4b4 => 0x8c,
    0x4b5 => 0x8c,
    0x4b6 => 0x0,
    0x4b7 => 0x0,
    0x4b8 => 0x8d,
    0x4b9 => 0x8d,
    0x4ba => 0x0,
    0x4bb => 0x0,
    0x4bc => 0x0,
    0x4bd => 0x0,
    0x4be => 0x0,
    0x4bf => 0x0,
    0x4c0 => 0x8e,
    0x4c1 => 0x0,
    0x4c2 => 0x0,
    0x4c3 => 0x0,
    0x4c4 => 0x8f,
    0x4c5 => 0x0,
    0x4c6 => 0x0,
    0x4c7 => 0x0,
    0x4c8 => 0x90,
    0x4c9 => 0x90,
    0x4ca => 0x0,
    0x4cb => 0x0,
    0x4cc => 0x91,
    0x4cd => 0x91,
    0x4ce => 0x0,
    0x4cf => 0x0,
    0x4d0 => 0x14,
    0x4d1 => 0x0,
    0x4d2 => 0x15,
    0x4d3 => 0x0,
    0x4d4 => 0x16,
    0x4d5 => 0x0,
    0x4d6 => 0x17,
    0x4d7 => 0x0,
    0x4d8 => 0x18,
    0x4d9 => 0x18,
    0x4da => 0x19,
    0x4db => 0x19,
    0x4dc => 0x1a,
    0x4dd => 0x1a,
    0x4de => 0x1b,
    0x4df => 0x1b,
    0x4e0 => 0x92,
    0x4e1 => 0x92,
    0x4e2 => 0x93,
    0x4e3 => 0x94,
    0x4e4 => 0x95,
    0x4e5 => 0x95,
    0x4e6 => 0x96,
    0x4e7 => 0x97,
    0x4e8 => 0x98,
    0x4e9 => 0x98,
    0x4ea => 0x99,
    0x4eb => 0x9a,
    0x4ec => 0x9b,
    0x4ed => 0x9b,
    0x4ee => 0x9c,
    0x4ef => 0x9d,
    0x4f0 => 0x9e,
    0x4f1 => 0x9f,
    0x4f2 => 0xa0,
    0x4f3 => 0xa1,
    0x4f4 => 0xa2,
    0x4f5 => 0xa3,
    0x4f6 => 0xa4,
    0x4f7 => 0xa5,
    0x4f8 => 0xa6,
    0x4f9 => 0xa6,
    0x4fa => 0xa7,
    0x4fb => 0xa7,
    0x4fc => 0xa8,
    0x4fd => 0xa8,
    0x4fe => 0xa9,
    0x4ff => 0xa9,
    0x500 => 0x480,
    0x501 => 0x480,
    0x502 => 0x480,
    0x503 => 0x480,
    0x504 => 0x480,
    0x505 => 0x480,
    0x506 => 0x480,
    0x507 => 0x480,
    0x508 => 0x480,
    0x509 => 0x480,
    0x50a => 0x480,
    0x50b => 0x480,
    0x50c => 0x480,
    0x50d => 0x480,
    0x50e => 0x480,
    0x50f => 0x480,
    0x510 => 0x382,
    0x511 => 0x382,
    0x512 => 0x382,
    0x513 => 0x382,
    0x514 => 0x382,
    0x515 => 0x382,
    0x516 => 0x382,
    0x517 => 0x382,
    0x518 => 0x0,
    0x519 => 0x0,
    0x51a => 0x0,
    0x51b => 0x0,
    0x51c => 0x0,
    0x51d => 0x0,
    0x51e => 0x0,
    0x51f => 0x0,
    0x520 => 0xaa,
    0x521 => 0xaa,
    0x522 => 0xaa,
    0x523 => 0xaa,
    0x524 => 0x0,
    0x525 => 0x0,
    0x526 => 0x0,
    0x527 => 0x0,
    0x528 => 0x1301,
    0x529 => 0x1301,
    0x52a => 0x1301,
    0x52b => 0x1301,
    0x52c => 0x0,
    0x52d => 0x0,
    0x52e => 0x0,
    0x52f => 0x0,
    0x530 => 0xab,
    0x531 => 0xab,
    0x532 => 0x0,
    0x533 => 0x0,
    0x534 => 0x0,
    0x535 => 0x0,
    0x536 => 0x0,
    0x537 => 0x0,
    0x538 => 0x0,
    0x539 => 0x0,
    0x53a => 0x0,
    0x53b => 0x0,
    0x53c => 0x0,
    0x53d => 0x0,
    0x53e => 0x0,
    0x53f => 0x0,
    0x540 => 0xac,
    0x541 => 0xac,
    0x542 => 0xac,
    0x543 => 0xac,
    0x544 => 0xac,
    0x545 => 0xac,
    0x546 => 0xac,
    0x547 => 0xac,
    0x548 => 0xac,
    0x549 => 0xac,
    0x54a => 0xac,
    0x54b => 0xac,
    0x54c => 0xac,
    0x54d => 0xac,
    0x54e => 0xac,
    0x54f => 0xac,
    0x550 => 0x0,
    0x551 => 0x0,
    0x552 => 0x0,
    0x553 => 0x0,
    0x554 => 0x0,
    0x555 => 0x0,
    0x556 => 0x0,
    0x557 => 0x0,
    0x558 => 0x0,
    0x559 => 0x0,
    0x55a => 0x0,
    0x55b => 0x0,
    0x55c => 0x0,
    0x55d => 0x0,
    0x55e => 0x0,
    0x55f => 0x0,
    0x560 => 0x0,
    0x561 => 0x0,
    0x562 => 0x0,
    0x563 => 0x0,
    0x564 => 0x0,
    0x565 => 0x0,
    0x566 => 0x0,
    0x567 => 0x0,
    0x568 => 0x0,
    0x569 => 0x0,
    0x56a => 0x0,
    0x56b => 0x0,
    0x56c => 0x0,
    0x56d => 0x0,
    0x56e => 0x0,
    0x56f => 0x0,
    0x570 => 0x0,
    0x571 => 0x0,
    0x572 => 0x0,
    0x573 => 0x0,
    0x574 => 0x0,
    0x575 => 0x0,
    0x576 => 0x0,
    0x577 => 0x0,
    0x578 => 0x0,
    0x579 => 0x0,
    0x57a => 0x0,
    0x57b => 0x0,
    0x57c => 0x0,
    0x57d => 0x0,
    0x57e => 0x0,
    0x57f => 0x0,
    0x580 => 0x1981,
    0x581 => 0x1981,
    0x582 => 0x1981,
    0x583 => 0x1981,
    0x584 => 0x1981,
    0x585 => 0x1981,
    0x586 => 0x1981,
    0x587 => 0x1981,
    0x588 => 0x1981,
    0x589 => 0x1981,
    0x58a => 0x1981,
    0x58b => 0x1981,
    0x58c => 0x1981,
    0x58d => 0x1981,
    0x58e => 0x1981,
    0x58f => 0x1981,
    0x590 => 0xad,
    0x591 => 0xad,
    0x592 => 0x0,
    0x593 => 0x0,
    0x594 => 0xae,
    0x595 => 0xae,
    0x596 => 0x0,
    0x597 => 0x0,
    0x598 => 0xaf,
    0x599 => 0xaf,
    0x59a => 0x0,
    0x59b => 0x0,
    0x59c => 0xb0,
    0x59d => 0xb0,
    0x59e => 0x0,
    0x59f => 0x0,
    0x5a0 => 0xb1,
    0x5a1 => 0xb1,
    0x5a2 => 0x0,
    0x5a3 => 0x0,
    0x5a4 => 0x0,
    0x5a5 => 0x0,
    0x5a6 => 0x0,
    0x5a7 => 0x0,
    0x5a8 => 0xb2,
    0x5a9 => 0xb2,
    0x5aa => 0x0,
    0x5ab => 0x0,
    0x5ac => 0xb3,
    0x5ad => 0x0,
    0x5ae => 0x0,
    0x5af => 0x0,
    0x5b0 => 0x0,
    0x5b1 => 0x0,
    0x5b2 => 0x0,
    0x5b3 => 0x0,
    0x5b4 => 0x0,
    0x5b5 => 0x0,
    0x5b6 => 0x0,
    0x5b7 => 0x0,
    0x5b8 => 0x0,
    0x5b9 => 0x0,
    0x5ba => 0x0,
    0x5bb => 0x0,
    0x5bc => 0x0,
    0x5bd => 0x0,
    0x5be => 0x0,
    0x5bf => 0x0,
    0x5c0 => 0x1c00,
    0x5c1 => 0x1c00,
    0x5c2 => 0x1c00,
    0x5c3 => 0x1c00,
    0x5c4 => 0x1c00,
    0x5c5 => 0x1c00,
    0x5c6 => 0x1c00,
    0x5c7 => 0x1c00,
    0x5c8 => 0x1c00,
    0x5c9 => 0x1c00,
    0x5ca => 0x1c00,
    0x5cb => 0x1c00,
    0x5cc => 0x1c00,
    0x5cd => 0x1c00,
    0x5ce => 0x1c00,
    0x5cf => 0x1c00,
    0x5d0 => 0x0,
    0x5d1 => 0x0,
    0x5d2 => 0x0,
    0x5d3 => 0x0,
    0x5d4 => 0x0,
    0x5d5 => 0x0,
    0x5d6 => 0x0,
    0x5d7 => 0x0,
    0x5d8 => 0x0,
    0x5d9 => 0x0,
    0x5da => 0x0,
    0x5db => 0x0,
    0x5dc => 0x0,
    0x5dd => 0x0,
    0x5de => 0x0,
    0x5df => 0x0,
    0x5e0 => 0xb4,
    0x5e1 => 0xb4,
    0x5e2 => 0xb5,
    0x5e3 => 0xb6,
    0x5e4 => 0xb7,
    0x5e5 => 0xb7,
    0x5e6 => 0xb8,
    0x5e7 => 0xb9,
    0x5e8 => 0x0,
    0x5e9 => 0x0,
    0x5ea => 0xba,
    0x5eb => 0xbb,
    0x5ec => 0xbc,
    0x5ed => 0xbc,
    0x5ee => 0xbd,
    0x5ef => 0xbe,
    0x5f0 => 0xbf,
    0x5f1 => 0xc0,
    0x5f2 => 0xc1,
    0x5f3 => 0xc2,
    0x5f4 => 0xc3,
    0x5f5 => 0xc4,
    0x5f6 => 0xc5,
    0x5f7 => 0xc6,
    0x5f8 => 0xc7,
    0x5f9 => 0xc7,
    0x5fa => 0xc8,
    0x5fb => 0xc8,
    0x5fc => 0xc9,
    0x5fd => 0xc9,
    0x5fe => 0x0,
    0x5ff => 0x0,
    0x600 => 0x0,
    0x601 => 0x0,
    0x602 => 0x0,
    0x603 => 0x0,
    0x604 => 0x0,
    0x605 => 0x0,
    0x606 => 0x0,
    0x607 => 0x0,
    0x608 => 0x0,
    0x609 => 0x0,
    0x60a => 0x0,
    0x60b => 0x0,
    0x60c => 0x0,
    0x60d => 0x0,
    0x60e => 0x0,
    0x60f => 0x0,
    0x610 => 0x0,
    0x611 => 0x0,
    0x612 => 0x0,
    0x613 => 0x0,
    0x614 => 0x0,
    0x615 => 0x0,
    0x616 => 0x0,
    0x617 => 0x0,
    0x618 => 0x0,
    0x619 => 0x0,
    0x61a => 0x0,
    0x61b => 0x0,
    0x61c => 0x0,
    0x61d => 0x0,
    0x61e => 0x0,
    0x61f => 0x0,
    0x620 => 0x0,
    0x621 => 0x0,
    0x622 => 0x0,
    0x623 => 0x0,
    0x624 => 0x0,
    0x625 => 0x0,
    0x626 => 0x0,
    0x627 => 0x0,
    0x628 => 0x0,
    0x629 => 0x0,
    0x62a => 0x0,
    0x62b => 0x0,
    0x62c => 0x0,
    0x62d => 0x0,
    0x62e => 0x0,
    0x62f => 0x0,
    0x630 => 0x0,
    0x631 => 0x0,
    0x632 => 0x0,
    0x633 => 0x0,
    0x634 => 0x0,
    0x635 => 0x0,
    0x636 => 0x0,
    0x637 => 0x0,
    0x638 => 0x0,
    0x639 => 0x0,
    0x63a => 0x0,
    0x63b => 0x0,
    0x63c => 0x0,
    0x63d => 0x0,
    0x63e => 0x0,
    0x63f => 0x0,
    0x640 => 0x0,
    0x641 => 0x0,
    0x642 => 0x0,
    0x643 => 0x0,
    0x644 => 0x0,
    0x645 => 0x0,
    0x646 => 0x0,
    0x647 => 0x0,
    0x648 => 0x0,
    0x649 => 0x0,
    0x64a => 0x0,
    0x64b => 0x0,
    0x64c => 0x0,
    0x64d => 0x0,
    0x64e => 0x0,
    0x64f => 0x0,
    0x650 => 0x0,
    0x651 => 0x0,
    0x652 => 0x0,
    0x653 => 0x0,
    0x654 => 0x0,
    0x655 => 0x0,
    0x656 => 0x0,
    0x657 => 0x0,
    0x658 => 0x0,
    0x659 => 0x0,
    0x65a => 0x0,
    0x65b => 0x0,
    0x65c => 0x0,
    0x65d => 0x0,
    0x65e => 0x0,
    0x65f => 0x0,
    0x660 => 0x0,
    0x661 => 0x0,
    0x662 => 0x0,
    0x663 => 0x0,
    0x664 => 0x0,
    0x665 => 0x0,
    0x666 => 0x0,
    0x667 => 0x0,
    0x668 => 0x0,
    0x669 => 0x0,
    0x66a => 0x0,
    0x66b => 0x0,
    0x66c => 0x0,
    0x66d => 0x0,
    0x66e => 0x0,
    0x66f => 0x0,
    0x670 => 0x0,
    0x671 => 0x0,
    0x672 => 0x0,
    0x673 => 0x0,
    0x674 => 0x0,
    0x675 => 0x0,
    0x676 => 0x0,
    0x677 => 0x0,
    0x678 => 0x0,
    0x679 => 0x0,
    0x67a => 0x0,
    0x67b => 0x0,
    0x67c => 0x0,
    0x67d => 0x0,
    0x67e => 0x0,
    0x67f => 0x0,
    0x680 => 0x0,
    0x681 => 0x0,
    0x682 => 0x0,
    0x683 => 0x0,
    0x684 => 0x0,
    0x685 => 0x0,
    0x686 => 0x0,
    0x687 => 0x0,
    0x688 => 0x1786,
    0x689 => 0x1786,
    0x68a => 0x1786,
    0x68b => 0x1786,
    0x68c => 0x1787,
    0x68d => 0x1787,
    0x68e => 0x1787,
    0x68f => 0x1787,
    0x690 => 0x1788,
    0x691 => 0x1788,
    0x692 => 0x1788,
    0x693 => 0x1788,
    0x694 => 0x1789,
    0x695 => 0x1789,
    0x696 => 0x1789,
    0x697 => 0x1789,
    0x698 => 0x178a,
    0x699 => 0x178a,
    0x69a => 0x178a,
    0x69b => 0x178a,
    0x69c => 0x178b,
    0x69d => 0x178b,
    0x69e => 0x178b,
    0x69f => 0x178b,
    0x6a0 => 0xca,
    0x6a1 => 0xca,
    0x6a2 => 0xcb,
    0x6a3 => 0xcb,
    0x6a4 => 0xca,
    0x6a5 => 0xca,
    0x6a6 => 0xcb,
    0x6a7 => 0xcb,
    0x6a8 => 0xca,
    0x6a9 => 0xca,
    0x6aa => 0xcb,
    0x6ab => 0xcb,
    0x6ac => 0xca,
    0x6ad => 0xca,
    0x6ae => 0xcb,
    0x6af => 0xcb,
    0x6b0 => 0xcc,
    0x6b1 => 0xcc,
    0x6b2 => 0xcd,
    0x6b3 => 0xcd,
    0x6b4 => 0xce,
    0x6b5 => 0xce,
    0x6b6 => 0x0,
    0x6b7 => 0x0,
    0x6b8 => 0xcf,
    0x6b9 => 0xcf,
    0x6ba => 0x0,
    0x6bb => 0x0,
    0x6bc => 0x0,
    0x6bd => 0x0,
    0x6be => 0x0,
    0x6bf => 0x0,
    0x6c0 => 0x1a00,
    0x6c1 => 0x1a00,
    0x6c2 => 0x1a00,
    0x6c3 => 0x1a00,
    0x6c4 => 0x1a01,
    0x6c5 => 0x1a01,
    0x6c6 => 0x1a01,
    0x6c7 => 0x1a01,
    0x6c8 => 0x1a02,
    0x6c9 => 0x1a02,
    0x6ca => 0x1a02,
    0x6cb => 0x1a02,
    0x6cc => 0x1a03,
    0x6cd => 0x1a03,
    0x6ce => 0x1a03,
    0x6cf => 0x1a03,
    0x6d0 => 0x1a04,
    0x6d1 => 0x1a04,
    0x6d2 => 0x1a04,
    0x6d3 => 0x1a04,
    0x6d4 => 0x1a05,
    0x6d5 => 0x1a05,
    0x6d6 => 0x1a05,
    0x6d7 => 0x1a05,
    0x6d8 => 0x1a06,
    0x6d9 => 0x1a06,
    0x6da => 0x1a06,
    0x6db => 0x1a06,
    0x6dc => 0x1a07,
    0x6dd => 0x1a07,
    0x6de => 0x1a07,
    0x6df => 0x1a07,
    0x6e0 => 0xd0,
    0x6e1 => 0xd0,
    0x6e2 => 0xd1,
    0x6e3 => 0xd2,
    0x6e4 => 0xd3,
    0x6e5 => 0xd3,
    0x6e6 => 0xd4,
    0x6e7 => 0xd5,
    0x6e8 => 0xd6,
    0x6e9 => 0xd6,
    0x6ea => 0xd7,
    0x6eb => 0xd8,
    0x6ec => 0xd9,
    0x6ed => 0xd9,
    0x6ee => 0xda,
    0x6ef => 0xdb,
    0x6f0 => 0xdc,
    0x6f1 => 0xdd,
    0x6f2 => 0xde,
    0x6f3 => 0xdf,
    0x6f4 => 0xe0,
    0x6f5 => 0xe1,
    0x6f6 => 0xe2,
    0x6f7 => 0xe3,
    0x6f8 => 0xe4,
    0x6f9 => 0xe4,
    0x6fa => 0xe5,
    0x6fb => 0xe5,
    0x6fc => 0xe6,
    0x6fd => 0xe6,
    0x6fe => 0x0,
    0x6ff => 0x0,
    0x700 => 0x480,
    0x701 => 0x480,
    0x702 => 0x480,
    0x703 => 0x480,
    0x704 => 0x480,
    0x705 => 0x480,
    0x706 => 0x480,
    0x707 => 0x480,
    0x708 => 0x480,
    0x709 => 0x480,
    0x70a => 0x480,
    0x70b => 0x480,
    0x70c => 0x480,
    0x70d => 0x480,
    0x70e => 0x480,
    0x70f => 0x480,
    0x710 => 0x383,
    0x711 => 0x383,
    0x712 => 0x383,
    0x713 => 0x383,
    0x714 => 0x383,
    0x715 => 0x383,
    0x716 => 0x383,
    0x717 => 0x383,
    0x718 => 0x0,
    0x719 => 0x0,
    0x71a => 0x0,
    0x71b => 0x0,
    0x71c => 0x0,
    0x71d => 0x0,
    0x71e => 0x0,
    0x71f => 0x0,
    0x720 => 0xe7,
    0x721 => 0xe7,
    0x722 => 0xe7,
    0x723 => 0xe7,
    0x724 => 0x0,
    0x725 => 0x0,
    0x726 => 0x0,
    0x727 => 0x0,
    0x728 => 0x1302,
    0x729 => 0x1302,
    0x72a => 0x1302,
    0x72b => 0x1302,
    0x72c => 0x0,
    0x72d => 0x0,
    0x72e => 0x0,
    0x72f => 0x0,
    0x730 => 0x0,
    0x731 => 0x0,
    0x732 => 0x0,
    0x733 => 0x0,
    0x734 => 0x0,
    0x735 => 0x0,
    0x736 => 0x0,
    0x737 => 0x0,
    0x738 => 0x0,
    0x739 => 0x0,
    0x73a => 0x0,
    0x73b => 0x0,
    0x73c => 0x0,
    0x73d => 0x0,
    0x73e => 0x0,
    0x73f => 0x0,
    0x740 => 0x0,
    0x741 => 0x0,
    0x742 => 0x0,
    0x743 => 0x0,
    0x744 => 0x0,
    0x745 => 0x0,
    0x746 => 0x0,
    0x747 => 0x0,
    0x748 => 0x0,
    0x749 => 0x0,
    0x74a => 0x0,
    0x74b => 0x0,
    0x74c => 0x0,
    0x74d => 0x0,
    0x74e => 0x0,
    0x74f => 0x0,
    0x750 => 0x0,
    0x751 => 0x0,
    0x752 => 0x0,
    0x753 => 0x0,
    0x754 => 0x0,
    0x755 => 0x0,
    0x756 => 0x0,
    0x757 => 0x0,
    0x758 => 0x0,
    0x759 => 0x0,
    0x75a => 0x0,
    0x75b => 0x0,
    0x75c => 0x0,
    0x75d => 0x0,
    0x75e => 0x0,
    0x75f => 0x0,
    0x760 => 0x0,
    0x761 => 0x0,
    0x762 => 0x0,
    0x763 => 0x0,
    0x764 => 0x0,
    0x765 => 0x0,
    0x766 => 0x0,
    0x767 => 0x0,
    0x768 => 0x0,
    0x769 => 0x0,
    0x76a => 0x0,
    0x76b => 0x0,
    0x76c => 0x0,
    0x76d => 0x0,
    0x76e => 0x0,
    0x76f => 0x0,
    0x770 => 0x0,
    0x771 => 0x0,
    0x772 => 0x0,
    0x773 => 0x0,
    0x774 => 0x0,
    0x775 => 0x0,
    0x776 => 0x0,
    0x777 => 0x0,
    0x778 => 0x0,
    0x779 => 0x0,
    0x77a => 0x0,
    0x77b => 0x0,
    0x77c => 0x0,
    0x77d => 0x0,
    0x77e => 0x0,
    0x77f => 0x0,
    0x780 => 0xe8,
    0x781 => 0xe8,
    0x782 => 0xe9,
    0x783 => 0xe9,
    0x784 => 0xea,
    0x785 => 0xea,
    0x786 => 0xeb,
    0x787 => 0xeb,
    0x788 => 0xec,
    0x789 => 0xec,
    0x78a => 0xed,
    0x78b => 0xee,
    0x78c => 0xef,
    0x78d => 0xef,
    0x78e => 0xf0,
    0x78f => 0xf0,
    0x790 => 0x1884,
    0x791 => 0x1884,
    0x792 => 0x1884,
    0x793 => 0x1884,
    0x794 => 0x1885,
    0x795 => 0x1885,
    0x796 => 0x1885,
    0x797 => 0x1885,
    0x798 => 0x1886,
    0x799 => 0x1886,
    0x79a => 0x1886,
    0x79b => 0x1886,
    0x79c => 0x1887,
    0x79d => 0x1887,
    0x79e => 0x1887,
    0x79f => 0x1887,
    0x7a0 => 0xf1,
    0x7a1 => 0xf1,
    0x7a2 => 0x0,
    0x7a3 => 0x0,
    0x7a4 => 0xf2,
    0x7a5 => 0xf2,
    0x7a6 => 0x0,
    0x7a7 => 0x0,
    0x7a8 => 0x0,
    0x7a9 => 0x0,
    0x7aa => 0x0,
    0x7ab => 0x0,
    0x7ac => 0x0,
    0x7ad => 0x0,
    0x7ae => 0x0,
    0x7af => 0x0,
    0x7b0 => 0x0,
    0x7b1 => 0x0,
    0x7b2 => 0x0,
    0x7b3 => 0x0,
    0x7b4 => 0x0,
    0x7b5 => 0x0,
    0x7b6 => 0x0,
    0x7b7 => 0x0,
    0x7b8 => 0x0,
    0x7b9 => 0x0,
    0x7ba => 0x0,
    0x7bb => 0x0,
    0x7bc => 0x0,
    0x7bd => 0x0,
    0x7be => 0x0,
    0x7bf => 0x0,
    0x7c0 => 0xf3,
    0x7c1 => 0xf3,
    0x7c2 => 0xf4,
    0x7c3 => 0xf4,
    0x7c4 => 0xf5,
    0x7c5 => 0xf5,
    0x7c6 => 0xf6,
    0x7c7 => 0xf6,
    0x7c8 => 0x0,
    0x7c9 => 0x0,
    0x7ca => 0x0,
    0x7cb => 0x0,
    0x7cc => 0x0,
    0x7cd => 0x0,
    0x7ce => 0x0,
    0x7cf => 0x0,
    0x7d0 => 0x1b00,
    0x7d1 => 0x1b00,
    0x7d2 => 0x1b00,
    0x7d3 => 0x1b00,
    0x7d4 => 0x1b01,
    0x7d5 => 0x1b01,
    0x7d6 => 0x1b01,
    0x7d7 => 0x1b01,
    0x7d8 => 0x0,
    0x7d9 => 0x0,
    0x7da => 0x0,
    0x7db => 0x0,
    0x7dc => 0x0,
    0x7dd => 0x0,
    0x7de => 0x0,
    0x7df => 0x0,
    0x7e0 => 0x0,
    0x7e1 => 0x0,
    0x7e2 => 0xf7,
    0x7e3 => 0xf8,
    0x7e4 => 0xf9,
    0x7e5 => 0xf9,
    0x7e6 => 0xfa,
    0x7e7 => 0xfb,
    0x7e8 => 0xfc,
    0x7e9 => 0xfc,
    0x7ea => 0xfd,
    0x7eb => 0xfe,
    0x7ec => 0xff,
    0x7ed => 0xff,
    0x7ee => 0x100,
    0x7ef => 0x101,
    0x7f0 => 0x102,
    0x7f1 => 0x103,
    0x7f2 => 0x104,
    0x7f3 => 0x105,
    0x7f4 => 0x106,
    0x7f5 => 0x107,
    0x7f6 => 0x108,
    0x7f7 => 0x109,
    0x7f8 => 0x10a,
    0x7f9 => 0x10a,
    0x7fa => 0x10b,
    0x7fb => 0x10b,
    0x7fc => 0x10c,
    0x7fd => 0x10c,
    0x7fe => 0x0,
    0x7ff => 0x0,
    0x800 => 0x0,
    0x801 => 0x0,
    0x802 => 0x0,
    0x803 => 0x0,
    0x804 => 0x0,
    0x805 => 0x0,
    0x806 => 0x0,
    0x807 => 0x0,
    0x808 => 0x0,
    0x809 => 0x0,
    0x80a => 0x0,
    0x80b => 0x0,
    0x80c => 0x0,
    0x80d => 0x0,
    0x80e => 0x0,
    0x80f => 0x0,
    0x810 => 0x0,
    0x811 => 0x0,
    0x812 => 0x0,
    0x813 => 0x0,
    0x814 => 0x0,
    0x815 => 0x0,
    0x816 => 0x0,
    0x817 => 0x0,
    0x818 => 0x0,
    0x819 => 0x0,
    0x81a => 0x0,
    0x81b => 0x0,
    0x81c => 0x0,
    0x81d => 0x0,
    0x81e => 0x0,
    0x81f => 0x0,
    0x820 => 0x0,
    0x821 => 0x0,
    0x822 => 0x0,
    0x823 => 0x0,
    0x824 => 0x0,
    0x825 => 0x0,
    0x826 => 0x0,
    0x827 => 0x0,
    0x828 => 0x0,
    0x829 => 0x0,
    0x82a => 0x0,
    0x82b => 0x0,
    0x82c => 0x0,
    0x82d => 0x0,
    0x82e => 0x0,
    0x82f => 0x0,
    0x830 => 0x0,
    0x831 => 0x0,
    0x832 => 0x0,
    0x833 => 0x0,
    0x834 => 0x0,
    0x835 => 0x0,
    0x836 => 0x0,
    0x837 => 0x0,
    0x838 => 0x0,
    0x839 => 0x0,
    0x83a => 0x0,
    0x83b => 0x0,
    0x83c => 0x0,
    0x83d => 0x0,
    0x83e => 0x0,
    0x83f => 0x0,
    0x840 => 0x0,
    0x841 => 0x0,
    0x842 => 0x0,
    0x843 => 0x0,
    0x844 => 0x0,
    0x845 => 0x0,
    0x846 => 0x0,
    0x847 => 0x0,
    0x848 => 0x0,
    0x849 => 0x0,
    0x84a => 0x0,
    0x84b => 0x0,
    0x84c => 0x0,
    0x84d => 0x0,
    0x84e => 0x0,
    0x84f => 0x0,
    0x850 => 0x0,
    0x851 => 0x0,
    0x852 => 0x0,
    0x853 => 0x0,
    0x854 => 0x0,
    0x855 => 0x0,
    0x856 => 0x0,
    0x857 => 0x0,
    0x858 => 0x0,
    0x859 => 0x0,
    0x85a => 0x0,
    0x85b => 0x0,
    0x85c => 0x0,
    0x85d => 0x0,
    0x85e => 0x0,
    0x85f => 0x0,
    0x860 => 0x0,
    0x861 => 0x0,
    0x862 => 0x0,
    0x863 => 0x0,
    0x864 => 0x0,
    0x865 => 0x0,
    0x866 => 0x0,
    0x867 => 0x0,
    0x868 => 0x0,
    0x869 => 0x0,
    0x86a => 0x0,
    0x86b => 0x0,
    0x86c => 0x0,
    0x86d => 0x0,
    0x86e => 0x0,
    0x86f => 0x0,
    0x870 => 0x0,
    0x871 => 0x0,
    0x872 => 0x0,
    0x873 => 0x0,
    0x874 => 0x0,
    0x875 => 0x0,
    0x876 => 0x0,
    0x877 => 0x0,
    0x878 => 0x0,
    0x879 => 0x0,
    0x87a => 0x0,
    0x87b => 0x0,
    0x87c => 0x0,
    0x87d => 0x0,
    0x87e => 0x0,
    0x87f => 0x0,
    0x880 => 0x10d,
    0x881 => 0x10d,
    0x882 => 0x10e,
    0x883 => 0x10e,
    0x884 => 0x10f,
    0x885 => 0x10f,
    0x886 => 0x110,
    0x887 => 0x110,
    0x888 => 0x111,
    0x889 => 0x111,
    0x88a => 0x112,
    0x88b => 0x112,
    0x88c => 0x113,
    0x88d => 0x113,
    0x88e => 0x114,
    0x88f => 0x114,
    0x890 => 0x0,
    0x891 => 0x0,
    0x892 => 0x0,
    0x893 => 0x0,
    0x894 => 0x0,
    0x895 => 0x0,
    0x896 => 0x0,
    0x897 => 0x0,
    0x898 => 0x0,
    0x899 => 0x0,
    0x89a => 0x0,
    0x89b => 0x0,
    0x89c => 0x0,
    0x89d => 0x0,
    0x89e => 0x0,
    0x89f => 0x0,
    0x8a0 => 0x580,
    0x8a1 => 0x580,
    0x8a2 => 0x581,
    0x8a3 => 0x581,
    0x8a4 => 0x580,
    0x8a5 => 0x580,
    0x8a6 => 0x581,
    0x8a7 => 0x581,
    0x8a8 => 0x580,
    0x8a9 => 0x580,
    0x8aa => 0x581,
    0x8ab => 0x581,
    0x8ac => 0x580,
    0x8ad => 0x580,
    0x8ae => 0x581,
    0x8af => 0x581,
    0x8b0 => 0x400,
    0x8b1 => 0x400,
    0x8b2 => 0xd,
    0x8b3 => 0xd,
    0x8b4 => 0x400,
    0x8b5 => 0x400,
    0x8b6 => 0x0,
    0x8b7 => 0x0,
    0x8b8 => 0x400,
    0x8b9 => 0x400,
    0x8ba => 0x0,
    0x8bb => 0x0,
    0x8bc => 0x0,
    0x8bd => 0x0,
    0x8be => 0x0,
    0x8bf => 0x0,
    0x8c0 => 0x0,
    0x8c1 => 0x0,
    0x8c2 => 0x0,
    0x8c3 => 0x0,
    0x8c4 => 0x0,
    0x8c5 => 0x0,
    0x8c6 => 0x0,
    0x8c7 => 0x0,
    0x8c8 => 0x0,
    0x8c9 => 0x0,
    0x8ca => 0x0,
    0x8cb => 0x0,
    0x8cc => 0x0,
    0x8cd => 0x0,
    0x8ce => 0x0,
    0x8cf => 0x0,
    0x8d0 => 0x0,
    0x8d1 => 0x0,
    0x8d2 => 0x0,
    0x8d3 => 0x0,
    0x8d4 => 0x0,
    0x8d5 => 0x0,
    0x8d6 => 0x0,
    0x8d7 => 0x0,
    0x8d8 => 0x0,
    0x8d9 => 0x0,
    0x8da => 0x0,
    0x8db => 0x0,
    0x8dc => 0x0,
    0x8dd => 0x0,
    0x8de => 0x0,
    0x8df => 0x0,
    0x8e0 => 0x0,
    0x8e1 => 0x0,
    0x8e2 => 0x0,
    0x8e3 => 0x0,
    0x8e4 => 0x0,
    0x8e5 => 0x0,
    0x8e6 => 0x0,
    0x8e7 => 0x0,
    0x8e8 => 0x0,
    0x8e9 => 0x0,
    0x8ea => 0x0,
    0x8eb => 0x0,
    0x8ec => 0x0,
    0x8ed => 0x0,
    0x8ee => 0x0,
    0x8ef => 0x0,
    0x8f0 => 0x0,
    0x8f1 => 0x0,
    0x8f2 => 0x0,
    0x8f3 => 0x0,
    0x8f4 => 0x0,
    0x8f5 => 0x0,
    0x8f6 => 0x0,
    0x8f7 => 0x0,
    0x8f8 => 0x0,
    0x8f9 => 0x0,
    0x8fa => 0x0,
    0x8fb => 0x0,
    0x8fc => 0x0,
    0x8fd => 0x0,
    0x8fe => 0x0,
    0x8ff => 0x0,
    0x900 => 0x481,
    0x901 => 0x481,
    0x902 => 0x481,
    0x903 => 0x481,
    0x904 => 0x481,
    0x905 => 0x481,
    0x906 => 0x481,
    0x907 => 0x481,
    0x908 => 0x481,
    0x909 => 0x481,
    0x90a => 0x481,
    0x90b => 0x481,
    0x90c => 0x481,
    0x90d => 0x481,
    0x90e => 0x481,
    0x90f => 0x481,
    0x910 => 0x380,
    0x911 => 0x380,
    0x912 => 0x380,
    0x913 => 0x380,
    0x914 => 0x380,
    0x915 => 0x380,
    0x916 => 0x380,
    0x917 => 0x380,
    0x918 => 0x115,
    0x919 => 0x115,
    0x91a => 0x115,
    0x91b => 0x115,
    0x91c => 0x30,
    0x91d => 0x0,
    0x91e => 0x0,
    0x91f => 0x0,
    0x920 => 0x116,
    0x921 => 0x116,
    0x922 => 0x116,
    0x923 => 0x116,
    0x924 => 0x117,
    0x925 => 0x117,
    0x926 => 0x117,
    0x927 => 0x117,
    0x928 => 0x1300,
    0x929 => 0x1300,
    0x92a => 0x1300,
    0x92b => 0x1300,
    0x92c => 0x1300,
    0x92d => 0x1300,
    0x92e => 0x1300,
    0x92f => 0x1300,
    0x930 => 0x0,
    0x931 => 0x0,
    0x932 => 0x0,
    0x933 => 0x0,
    0x934 => 0x900,
    0x935 => 0x900,
    0x936 => 0x900,
    0x937 => 0x900,
    0x938 => 0x0,
    0x939 => 0x0,
    0x93a => 0x0,
    0x93b => 0x0,
    0x93c => 0x1280,
    0x93d => 0x1280,
    0x93e => 0x0,
    0x93f => 0x0,
    0x940 => 0x881,
    0x941 => 0x881,
    0x942 => 0x881,
    0x943 => 0x881,
    0x944 => 0x881,
    0x945 => 0x881,
    0x946 => 0x881,
    0x947 => 0x881,
    0x948 => 0x881,
    0x949 => 0x881,
    0x94a => 0x881,
    0x94b => 0x881,
    0x94c => 0x881,
    0x94d => 0x881,
    0x94e => 0x881,
    0x94f => 0x881,
    0x950 => 0x881,
    0x951 => 0x881,
    0x952 => 0x881,
    0x953 => 0x881,
    0x954 => 0x881,
    0x955 => 0x881,
    0x956 => 0x881,
    0x957 => 0x881,
    0x958 => 0x881,
    0x959 => 0x881,
    0x95a => 0x881,
    0x95b => 0x881,
    0x95c => 0x881,
    0x95d => 0x881,
    0x95e => 0x881,
    0x95f => 0x881,
    0x960 => 0x881,
    0x961 => 0x881,
    0x962 => 0x881,
    0x963 => 0x881,
    0x964 => 0x881,
    0x965 => 0x881,
    0x966 => 0x881,
    0x967 => 0x881,
    0x968 => 0x881,
    0x969 => 0x881,
    0x96a => 0x881,
    0x96b => 0x881,
    0x96c => 0x881,
    0x96d => 0x881,
    0x96e => 0x881,
    0x96f => 0x881,
    0x970 => 0x881,
    0x971 => 0x881,
    0x972 => 0x881,
    0x973 => 0x881,
    0x974 => 0x881,
    0x975 => 0x881,
    0x976 => 0x881,
    0x977 => 0x881,
    0x978 => 0x881,
    0x979 => 0x881,
    0x97a => 0x881,
    0x97b => 0x881,
    0x97c => 0x881,
    0x97d => 0x881,
    0x97e => 0x881,
    0x97f => 0x881,
    0x980 => 0x1982,
    0x981 => 0x1982,
    0x982 => 0x1982,
    0x983 => 0x1982,
    0x984 => 0x1982,
    0x985 => 0x1982,
    0x986 => 0x1982,
    0x987 => 0x1982,
    0x988 => 0x1982,
    0x989 => 0x1982,
    0x98a => 0x1982,
    0x98b => 0x1982,
    0x98c => 0x1982,
    0x98d => 0x1982,
    0x98e => 0x1982,
    0x98f => 0x1982,
    0x990 => 0x118,
    0x991 => 0x118,
    0x992 => 0x0,
    0x993 => 0x0,
    0x994 => 0x119,
    0x995 => 0x119,
    0x996 => 0x0,
    0x997 => 0x0,
    0x998 => 0x11a,
    0x999 => 0x11a,
    0x99a => 0x0,
    0x99b => 0x0,
    0x99c => 0x0,
    0x99d => 0x0,
    0x99e => 0x0,
    0x99f => 0x0,
    0x9a0 => 0x38,
    0x9a1 => 0x38,
    0x9a2 => 0x0,
    0x9a3 => 0x0,
    0x9a4 => 0x0,
    0x9a5 => 0x0,
    0x9a6 => 0x0,
    0x9a7 => 0x0,
    0x9a8 => 0x39,
    0x9a9 => 0x39,
    0x9aa => 0x0,
    0x9ab => 0x0,
    0x9ac => 0x11b,
    0x9ad => 0x11b,
    0x9ae => 0x0,
    0x9af => 0x0,
    0x9b0 => 0x3b,
    0x9b1 => 0x3b,
    0x9b2 => 0x11c,
    0x9b3 => 0x11c,
    0x9b4 => 0x11d,
    0x9b5 => 0x11d,
    0x9b6 => 0x0,
    0x9b7 => 0x0,
    0x9b8 => 0x0,
    0x9b9 => 0x0,
    0x9ba => 0x11e,
    0x9bb => 0x11e,
    0x9bc => 0x11f,
    0x9bd => 0x11f,
    0x9be => 0x0,
    0x9bf => 0x0,
    0x9c0 => 0x1c00,
    0x9c1 => 0x1c00,
    0x9c2 => 0x1c00,
    0x9c3 => 0x1c00,
    0x9c4 => 0x1c00,
    0x9c5 => 0x1c00,
    0x9c6 => 0x1c00,
    0x9c7 => 0x1c00,
    0x9c8 => 0x1c00,
    0x9c9 => 0x1c00,
    0x9ca => 0x1c00,
    0x9cb => 0x1c00,
    0x9cc => 0x1c00,
    0x9cd => 0x1c00,
    0x9ce => 0x1c00,
    0x9cf => 0x1c00,
    0x9d0 => 0x0,
    0x9d1 => 0x0,
    0x9d2 => 0x0,
    0x9d3 => 0x0,
    0x9d4 => 0x0,
    0x9d5 => 0x0,
    0x9d6 => 0x0,
    0x9d7 => 0x0,
    0x9d8 => 0x0,
    0x9d9 => 0x0,
    0x9da => 0x0,
    0x9db => 0x0,
    0x9dc => 0x0,
    0x9dd => 0x0,
    0x9de => 0x0,
    0x9df => 0x0,
    0x9e0 => 0x120,
    0x9e1 => 0x121,
    0x9e2 => 0x122,
    0x9e3 => 0x123,
    0x9e4 => 0x124,
    0x9e5 => 0x125,
    0x9e6 => 0x126,
    0x9e7 => 0x127,
    0x9e8 => 0x0,
    0x9e9 => 0x0,
    0x9ea => 0x128,
    0x9eb => 0x0,
    0x9ec => 0x129,
    0x9ed => 0x12a,
    0x9ee => 0x12b,
    0x9ef => 0x12c,
    0x9f0 => 0x0,
    0x9f1 => 0x0,
    0x9f2 => 0x0,
    0x9f3 => 0x0,
    0x9f4 => 0x0,
    0x9f5 => 0x0,
    0x9f6 => 0x0,
    0x9f7 => 0x0,
    0x9f8 => 0x0,
    0x9f9 => 0x0,
    0x9fa => 0x0,
    0x9fb => 0x0,
    0x9fc => 0x0,
    0x9fd => 0x0,
    0x9fe => 0x0,
    0x9ff => 0x0,
    0xa00 => 0x0,
    0xa01 => 0x0,
    0xa02 => 0x0,
    0xa03 => 0x0,
    0xa04 => 0x0,
    0xa05 => 0x0,
    0xa06 => 0x0,
    0xa07 => 0x0,
    0xa08 => 0x0,
    0xa09 => 0x0,
    0xa0a => 0x0,
    0xa0b => 0x0,
    0xa0c => 0x0,
    0xa0d => 0x0,
    0xa0e => 0x0,
    0xa0f => 0x0,
    0xa10 => 0x0,
    0xa11 => 0x0,
    0xa12 => 0x0,
    0xa13 => 0x0,
    0xa14 => 0x0,
    0xa15 => 0x0,
    0xa16 => 0x0,
    0xa17 => 0x0,
    0xa18 => 0x0,
    0xa19 => 0x0,
    0xa1a => 0x0,
    0xa1b => 0x0,
    0xa1c => 0x0,
    0xa1d => 0x0,
    0xa1e => 0x0,
    0xa1f => 0x0,
    0xa20 => 0x0,
    0xa21 => 0x0,
    0xa22 => 0x0,
    0xa23 => 0x0,
    0xa24 => 0x0,
    0xa25 => 0x0,
    0xa26 => 0x0,
    0xa27 => 0x0,
    0xa28 => 0x0,
    0xa29 => 0x0,
    0xa2a => 0x0,
    0xa2b => 0x0,
    0xa2c => 0x0,
    0xa2d => 0x0,
    0xa2e => 0x0,
    0xa2f => 0x0,
    0xa30 => 0x0,
    0xa31 => 0x0,
    0xa32 => 0x0,
    0xa33 => 0x0,
    0xa34 => 0x0,
    0xa35 => 0x0,
    0xa36 => 0x0,
    0xa37 => 0x0,
    0xa38 => 0x0,
    0xa39 => 0x0,
    0xa3a => 0x0,
    0xa3b => 0x0,
    0xa3c => 0x0,
    0xa3d => 0x0,
    0xa3e => 0x0,
    0xa3f => 0x0,
    0xa40 => 0x0,
    0xa41 => 0x0,
    0xa42 => 0x0,
    0xa43 => 0x0,
    0xa44 => 0x0,
    0xa45 => 0x0,
    0xa46 => 0x0,
    0xa47 => 0x0,
    0xa48 => 0x0,
    0xa49 => 0x0,
    0xa4a => 0x0,
    0xa4b => 0x0,
    0xa4c => 0x0,
    0xa4d => 0x0,
    0xa4e => 0x0,
    0xa4f => 0x0,
    0xa50 => 0x0,
    0xa51 => 0x0,
    0xa52 => 0x0,
    0xa53 => 0x0,
    0xa54 => 0x0,
    0xa55 => 0x0,
    0xa56 => 0x0,
    0xa57 => 0x0,
    0xa58 => 0x0,
    0xa59 => 0x0,
    0xa5a => 0x0,
    0xa5b => 0x0,
    0xa5c => 0x0,
    0xa5d => 0x0,
    0xa5e => 0x0,
    0xa5f => 0x0,
    0xa60 => 0x0,
    0xa61 => 0x0,
    0xa62 => 0x0,
    0xa63 => 0x0,
    0xa64 => 0x0,
    0xa65 => 0x0,
    0xa66 => 0x0,
    0xa67 => 0x0,
    0xa68 => 0x0,
    0xa69 => 0x0,
    0xa6a => 0x0,
    0xa6b => 0x0,
    0xa6c => 0x0,
    0xa6d => 0x0,
    0xa6e => 0x0,
    0xa6f => 0x0,
    0xa70 => 0x0,
    0xa71 => 0x0,
    0xa72 => 0x0,
    0xa73 => 0x0,
    0xa74 => 0x0,
    0xa75 => 0x0,
    0xa76 => 0x0,
    0xa77 => 0x0,
    0xa78 => 0x0,
    0xa79 => 0x0,
    0xa7a => 0x0,
    0xa7b => 0x0,
    0xa7c => 0x0,
    0xa7d => 0x0,
    0xa7e => 0x0,
    0xa7f => 0x0,
    0xa80 => 0x1702,
    0xa81 => 0x1702,
    0xa82 => 0x1702,
    0xa83 => 0x1702,
    0xa84 => 0x1703,
    0xa85 => 0x1703,
    0xa86 => 0x1703,
    0xa87 => 0x1703,
    0xa88 => 0x178c,
    0xa89 => 0x178c,
    0xa8a => 0x178c,
    0xa8b => 0x178c,
    0xa8c => 0x178d,
    0xa8d => 0x178d,
    0xa8e => 0x178d,
    0xa8f => 0x178d,
    0xa90 => 0x178e,
    0xa91 => 0x178e,
    0xa92 => 0x178e,
    0xa93 => 0x178e,
    0xa94 => 0x178f,
    0xa95 => 0x178f,
    0xa96 => 0x178f,
    0xa97 => 0x178f,
    0xa98 => 0x1790,
    0xa99 => 0x1790,
    0xa9a => 0x1790,
    0xa9b => 0x1790,
    0xa9c => 0x1791,
    0xa9d => 0x1791,
    0xa9e => 0x1791,
    0xa9f => 0x1791,
    0xaa0 => 0x582,
    0xaa1 => 0x582,
    0xaa2 => 0x583,
    0xaa3 => 0x583,
    0xaa4 => 0x582,
    0xaa5 => 0x582,
    0xaa6 => 0x583,
    0xaa7 => 0x583,
    0xaa8 => 0x582,
    0xaa9 => 0x582,
    0xaaa => 0x583,
    0xaab => 0x583,
    0xaac => 0x582,
    0xaad => 0x582,
    0xaae => 0x583,
    0xaaf => 0x583,
    0xab0 => 0x401,
    0xab1 => 0x401,
    0xab2 => 0x55,
    0xab3 => 0x55,
    0xab4 => 0x401,
    0xab5 => 0x401,
    0xab6 => 0x0,
    0xab7 => 0x0,
    0xab8 => 0x401,
    0xab9 => 0x401,
    0xaba => 0x0,
    0xabb => 0x0,
    0xabc => 0x0,
    0xabd => 0x0,
    0xabe => 0x0,
    0xabf => 0x0,
    0xac0 => 0x1a00,
    0xac1 => 0x1a00,
    0xac2 => 0x1a00,
    0xac3 => 0x1a00,
    0xac4 => 0x1a01,
    0xac5 => 0x1a01,
    0xac6 => 0x1a01,
    0xac7 => 0x1a01,
    0xac8 => 0x1a02,
    0xac9 => 0x1a02,
    0xaca => 0x1a02,
    0xacb => 0x1a02,
    0xacc => 0x1a03,
    0xacd => 0x1a03,
    0xace => 0x1a03,
    0xacf => 0x1a03,
    0xad0 => 0x1a04,
    0xad1 => 0x1a04,
    0xad2 => 0x1a04,
    0xad3 => 0x1a04,
    0xad4 => 0x1a05,
    0xad5 => 0x1a05,
    0xad6 => 0x1a05,
    0xad7 => 0x1a05,
    0xad8 => 0x1a06,
    0xad9 => 0x1a06,
    0xada => 0x1a06,
    0xadb => 0x1a06,
    0xadc => 0x1a07,
    0xadd => 0x1a07,
    0xade => 0x1a07,
    0xadf => 0x1a07,
    0xae0 => 0x0,
    0xae1 => 0x0,
    0xae2 => 0x0,
    0xae3 => 0x0,
    0xae4 => 0x0,
    0xae5 => 0x0,
    0xae6 => 0x0,
    0xae7 => 0x0,
    0xae8 => 0x0,
    0xae9 => 0x0,
    0xaea => 0x0,
    0xaeb => 0x0,
    0xaec => 0x0,
    0xaed => 0x0,
    0xaee => 0x0,
    0xaef => 0x0,
    0xaf0 => 0x0,
    0xaf1 => 0x0,
    0xaf2 => 0x0,
    0xaf3 => 0x0,
    0xaf4 => 0x0,
    0xaf5 => 0x0,
    0xaf6 => 0x0,
    0xaf7 => 0x0,
    0xaf8 => 0x0,
    0xaf9 => 0x0,
    0xafa => 0x0,
    0xafb => 0x0,
    0xafc => 0x0,
    0xafd => 0x0,
    0xafe => 0x0,
    0xaff => 0x0,
    0xb00 => 0x481,
    0xb01 => 0x481,
    0xb02 => 0x481,
    0xb03 => 0x481,
    0xb04 => 0x481,
    0xb05 => 0x481,
    0xb06 => 0x481,
    0xb07 => 0x481,
    0xb08 => 0x481,
    0xb09 => 0x481,
    0xb0a => 0x481,
    0xb0b => 0x481,
    0xb0c => 0x481,
    0xb0d => 0x481,
    0xb0e => 0x481,
    0xb0f => 0x481,
    0xb10 => 0x381,
    0xb11 => 0x381,
    0xb12 => 0x381,
    0xb13 => 0x381,
    0xb14 => 0x381,
    0xb15 => 0x381,
    0xb16 => 0x381,
    0xb17 => 0x381,
    0xb18 => 0x0,
    0xb19 => 0x0,
    0xb1a => 0x0,
    0xb1b => 0x0,
    0xb1c => 0x0,
    0xb1d => 0x0,
    0xb1e => 0x0,
    0xb1f => 0x0,
    0xb20 => 0x12d,
    0xb21 => 0x12d,
    0xb22 => 0x12d,
    0xb23 => 0x12d,
    0xb24 => 0x12e,
    0xb25 => 0x12e,
    0xb26 => 0x12e,
    0xb27 => 0x12e,
    0xb28 => 0x0,
    0xb29 => 0x0,
    0xb2a => 0x0,
    0xb2b => 0x0,
    0xb2c => 0x0,
    0xb2d => 0x0,
    0xb2e => 0x0,
    0xb2f => 0x0,
    0xb30 => 0x0,
    0xb31 => 0x0,
    0xb32 => 0x0,
    0xb33 => 0x0,
    0xb34 => 0x901,
    0xb35 => 0x901,
    0xb36 => 0x901,
    0xb37 => 0x901,
    0xb38 => 0x0,
    0xb39 => 0x0,
    0xb3a => 0x0,
    0xb3b => 0x0,
    0xb3c => 0x0,
    0xb3d => 0x0,
    0xb3e => 0x0,
    0xb3f => 0x0,
    0xb40 => 0xa80,
    0xb41 => 0xa80,
    0xb42 => 0xa80,
    0xb43 => 0xa80,
    0xb44 => 0xa80,
    0xb45 => 0xa80,
    0xb46 => 0xa80,
    0xb47 => 0xa80,
    0xb48 => 0xa80,
    0xb49 => 0xa80,
    0xb4a => 0xa80,
    0xb4b => 0xa80,
    0xb4c => 0xa80,
    0xb4d => 0xa80,
    0xb4e => 0xa80,
    0xb4f => 0xa80,
    0xb50 => 0xa81,
    0xb51 => 0xa81,
    0xb52 => 0xa81,
    0xb53 => 0xa81,
    0xb54 => 0xa81,
    0xb55 => 0xa81,
    0xb56 => 0xa81,
    0xb57 => 0xa81,
    0xb58 => 0xa81,
    0xb59 => 0xa81,
    0xb5a => 0xa81,
    0xb5b => 0xa81,
    0xb5c => 0xa81,
    0xb5d => 0xa81,
    0xb5e => 0xa81,
    0xb5f => 0xa81,
    0xb60 => 0xb00,
    0xb61 => 0xb00,
    0xb62 => 0xb00,
    0xb63 => 0xb00,
    0xb64 => 0xb00,
    0xb65 => 0xb00,
    0xb66 => 0xb00,
    0xb67 => 0xb00,
    0xb68 => 0xb00,
    0xb69 => 0xb00,
    0xb6a => 0xb00,
    0xb6b => 0xb00,
    0xb6c => 0xb00,
    0xb6d => 0xb00,
    0xb6e => 0xb00,
    0xb6f => 0xb00,
    0xb70 => 0xb01,
    0xb71 => 0xb01,
    0xb72 => 0xb01,
    0xb73 => 0xb01,
    0xb74 => 0xb01,
    0xb75 => 0xb01,
    0xb76 => 0xb01,
    0xb77 => 0xb01,
    0xb78 => 0xb01,
    0xb79 => 0xb01,
    0xb7a => 0xb01,
    0xb7b => 0xb01,
    0xb7c => 0xb01,
    0xb7d => 0xb01,
    0xb7e => 0xb01,
    0xb7f => 0xb01,
    0xb80 => 0x12f,
    0xb81 => 0x12f,
    0xb82 => 0x130,
    0xb83 => 0x130,
    0xb84 => 0x131,
    0xb85 => 0x131,
    0xb86 => 0x132,
    0xb87 => 0x132,
    0xb88 => 0x133,
    0xb89 => 0x133,
    0xb8a => 0x134,
    0xb8b => 0x135,
    0xb8c => 0x0,
    0xb8d => 0x0,
    0xb8e => 0x136,
    0xb8f => 0x136,
    0xb90 => 0x1888,
    0xb91 => 0x1888,
    0xb92 => 0x1888,
    0xb93 => 0x1888,
    0xb94 => 0x1889,
    0xb95 => 0x1889,
    0xb96 => 0x1889,
    0xb97 => 0x1889,
    0xb98 => 0x188a,
    0xb99 => 0x188a,
    0xb9a => 0x188a,
    0xb9b => 0x188a,
    0xb9c => 0x0,
    0xb9d => 0x0,
    0xb9e => 0x0,
    0xb9f => 0x0,
    0xba0 => 0x137,
    0xba1 => 0x137,
    0xba2 => 0x0,
    0xba3 => 0x0,
    0xba4 => 0x79,
    0xba5 => 0x79,
    0xba6 => 0x0,
    0xba7 => 0x0,
    0xba8 => 0x0,
    0xba9 => 0x0,
    0xbaa => 0x0,
    0xbab => 0x0,
    0xbac => 0x138,
    0xbad => 0x138,
    0xbae => 0x0,
    0xbaf => 0x0,
    0xbb0 => 0x0,
    0xbb1 => 0x0,
    0xbb2 => 0x0,
    0xbb3 => 0x0,
    0xbb4 => 0x0,
    0xbb5 => 0x0,
    0xbb6 => 0x0,
    0xbb7 => 0x0,
    0xbb8 => 0x0,
    0xbb9 => 0x0,
    0xbba => 0x0,
    0xbbb => 0x0,
    0xbbc => 0x0,
    0xbbd => 0x0,
    0xbbe => 0x0,
    0xbbf => 0x0,
    0xbc0 => 0x139,
    0xbc1 => 0x139,
    0xbc2 => 0x13a,
    0xbc3 => 0x13a,
    0xbc4 => 0x13b,
    0xbc5 => 0x13b,
    0xbc6 => 0x13c,
    0xbc7 => 0x13c,
    0xbc8 => 0x0,
    0xbc9 => 0x0,
    0xbca => 0x0,
    0xbcb => 0x0,
    0xbcc => 0x0,
    0xbcd => 0x0,
    0xbce => 0x0,
    0xbcf => 0x0,
    0xbd0 => 0x1b00,
    0xbd1 => 0x1b00,
    0xbd2 => 0x1b00,
    0xbd3 => 0x1b00,
    0xbd4 => 0x1b01,
    0xbd5 => 0x1b01,
    0xbd6 => 0x1b01,
    0xbd7 => 0x1b01,
    0xbd8 => 0x0,
    0xbd9 => 0x0,
    0xbda => 0x0,
    0xbdb => 0x0,
    0xbdc => 0x0,
    0xbdd => 0x0,
    0xbde => 0x0,
    0xbdf => 0x0,
    0xbe0 => 0x0,
    0xbe1 => 0x0,
    0xbe2 => 0x0,
    0xbe3 => 0x0,
    0xbe4 => 0x0,
    0xbe5 => 0x0,
    0xbe6 => 0x0,
    0xbe7 => 0x0,
    0xbe8 => 0x0,
    0xbe9 => 0x0,
    0xbea => 0x0,
    0xbeb => 0x0,
    0xbec => 0x0,
    0xbed => 0x0,
    0xbee => 0x0,
    0xbef => 0x0,
    0xbf0 => 0x0,
    0xbf1 => 0x0,
    0xbf2 => 0x0,
    0xbf3 => 0x0,
    0xbf4 => 0x0,
    0xbf5 => 0x0,
    0xbf6 => 0x0,
    0xbf7 => 0x0,
    0xbf8 => 0x0,
    0xbf9 => 0x0,
    0xbfa => 0x0,
    0xbfb => 0x0,
    0xbfc => 0x0,
    0xbfd => 0x0,
    0xbfe => 0x0,
    0xbff => 0x0,
    0xc00 => 0x0,
    0xc01 => 0x0,
    0xc02 => 0x0,
    0xc03 => 0x0,
    0xc04 => 0x0,
    0xc05 => 0x0,
    0xc06 => 0x0,
    0xc07 => 0x0,
    0xc08 => 0x0,
    0xc09 => 0x0,
    0xc0a => 0x0,
    0xc0b => 0x0,
    0xc0c => 0x0,
    0xc0d => 0x0,
    0xc0e => 0x0,
    0xc0f => 0x0,
    0xc10 => 0x0,
    0xc11 => 0x0,
    0xc12 => 0x0,
    0xc13 => 0x0,
    0xc14 => 0x0,
    0xc15 => 0x0,
    0xc16 => 0x0,
    0xc17 => 0x0,
    0xc18 => 0x0,
    0xc19 => 0x0,
    0xc1a => 0x0,
    0xc1b => 0x0,
    0xc1c => 0x0,
    0xc1d => 0x0,
    0xc1e => 0x0,
    0xc1f => 0x0,
    0xc20 => 0x0,
    0xc21 => 0x0,
    0xc22 => 0x0,
    0xc23 => 0x0,
    0xc24 => 0x0,
    0xc25 => 0x0,
    0xc26 => 0x0,
    0xc27 => 0x0,
    0xc28 => 0x0,
    0xc29 => 0x0,
    0xc2a => 0x0,
    0xc2b => 0x0,
    0xc2c => 0x0,
    0xc2d => 0x0,
    0xc2e => 0x0,
    0xc2f => 0x0,
    0xc30 => 0x0,
    0xc31 => 0x0,
    0xc32 => 0x0,
    0xc33 => 0x0,
    0xc34 => 0x0,
    0xc35 => 0x0,
    0xc36 => 0x0,
    0xc37 => 0x0,
    0xc38 => 0x0,
    0xc39 => 0x0,
    0xc3a => 0x0,
    0xc3b => 0x0,
    0xc3c => 0x0,
    0xc3d => 0x0,
    0xc3e => 0x0,
    0xc3f => 0x0,
    0xc40 => 0x0,
    0xc41 => 0x0,
    0xc42 => 0x0,
    0xc43 => 0x0,
    0xc44 => 0x0,
    0xc45 => 0x0,
    0xc46 => 0x0,
    0xc47 => 0x0,
    0xc48 => 0x0,
    0xc49 => 0x0,
    0xc4a => 0x0,
    0xc4b => 0x0,
    0xc4c => 0x0,
    0xc4d => 0x0,
    0xc4e => 0x0,
    0xc4f => 0x0,
    0xc50 => 0x0,
    0xc51 => 0x0,
    0xc52 => 0x0,
    0xc53 => 0x0,
    0xc54 => 0x0,
    0xc55 => 0x0,
    0xc56 => 0x0,
    0xc57 => 0x0,
    0xc58 => 0x0,
    0xc59 => 0x0,
    0xc5a => 0x0,
    0xc5b => 0x0,
    0xc5c => 0x0,
    0xc5d => 0x0,
    0xc5e => 0x0,
    0xc5f => 0x0,
    0xc60 => 0x0,
    0xc61 => 0x0,
    0xc62 => 0x0,
    0xc63 => 0x0,
    0xc64 => 0x0,
    0xc65 => 0x0,
    0xc66 => 0x0,
    0xc67 => 0x0,
    0xc68 => 0x0,
    0xc69 => 0x0,
    0xc6a => 0x0,
    0xc6b => 0x0,
    0xc6c => 0x0,
    0xc6d => 0x0,
    0xc6e => 0x0,
    0xc6f => 0x0,
    0xc70 => 0x0,
    0xc71 => 0x0,
    0xc72 => 0x0,
    0xc73 => 0x0,
    0xc74 => 0x0,
    0xc75 => 0x0,
    0xc76 => 0x0,
    0xc77 => 0x0,
    0xc78 => 0x0,
    0xc79 => 0x0,
    0xc7a => 0x0,
    0xc7b => 0x0,
    0xc7c => 0x0,
    0xc7d => 0x0,
    0xc7e => 0x0,
    0xc7f => 0x0,
    0xc80 => 0x13d,
    0xc81 => 0x13d,
    0xc82 => 0x13e,
    0xc83 => 0x13e,
    0xc84 => 0x13f,
    0xc85 => 0x13f,
    0xc86 => 0x140,
    0xc87 => 0x140,
    0xc88 => 0x141,
    0xc89 => 0x141,
    0xc8a => 0x142,
    0xc8b => 0x142,
    0xc8c => 0x143,
    0xc8d => 0x143,
    0xc8e => 0x144,
    0xc8f => 0x144,
    0xc90 => 0x0,
    0xc91 => 0x0,
    0xc92 => 0x0,
    0xc93 => 0x0,
    0xc94 => 0x0,
    0xc95 => 0x0,
    0xc96 => 0x0,
    0xc97 => 0x0,
    0xc98 => 0x0,
    0xc99 => 0x0,
    0xc9a => 0x0,
    0xc9b => 0x0,
    0xc9c => 0x0,
    0xc9d => 0x0,
    0xc9e => 0x0,
    0xc9f => 0x0,
    0xca0 => 0x584,
    0xca1 => 0x584,
    0xca2 => 0x585,
    0xca3 => 0x585,
    0xca4 => 0x584,
    0xca5 => 0x584,
    0xca6 => 0x585,
    0xca7 => 0x585,
    0xca8 => 0x584,
    0xca9 => 0x584,
    0xcaa => 0x585,
    0xcab => 0x585,
    0xcac => 0x584,
    0xcad => 0x584,
    0xcae => 0x585,
    0xcaf => 0x585,
    0xcb0 => 0x402,
    0xcb1 => 0x402,
    0xcb2 => 0x8b,
    0xcb3 => 0x8b,
    0xcb4 => 0x402,
    0xcb5 => 0x402,
    0xcb6 => 0x0,
    0xcb7 => 0x0,
    0xcb8 => 0x402,
    0xcb9 => 0x402,
    0xcba => 0x0,
    0xcbb => 0x0,
    0xcbc => 0x0,
    0xcbd => 0x0,
    0xcbe => 0x0,
    0xcbf => 0x0,
    0xcc0 => 0x0,
    0xcc1 => 0x0,
    0xcc2 => 0x0,
    0xcc3 => 0x0,
    0xcc4 => 0x0,
    0xcc5 => 0x0,
    0xcc6 => 0x0,
    0xcc7 => 0x0,
    0xcc8 => 0x0,
    0xcc9 => 0x0,
    0xcca => 0x0,
    0xccb => 0x0,
    0xccc => 0x0,
    0xccd => 0x0,
    0xcce => 0x0,
    0xccf => 0x0,
    0xcd0 => 0x0,
    0xcd1 => 0x0,
    0xcd2 => 0x0,
    0xcd3 => 0x0,
    0xcd4 => 0x0,
    0xcd5 => 0x0,
    0xcd6 => 0x0,
    0xcd7 => 0x0,
    0xcd8 => 0x0,
    0xcd9 => 0x0,
    0xcda => 0x0,
    0xcdb => 0x0,
    0xcdc => 0x0,
    0xcdd => 0x0,
    0xcde => 0x0,
    0xcdf => 0x0,
    0xce0 => 0x145,
    0xce1 => 0x145,
    0xce2 => 0x146,
    0xce3 => 0x146,
    0xce4 => 0x147,
    0xce5 => 0x147,
    0xce6 => 0x148,
    0xce7 => 0x148,
    0xce8 => 0x7080,
    0xce9 => 0x7080,
    0xcea => 0x0,
    0xceb => 0x0,
    0xcec => 0x149,
    0xced => 0x0,
    0xcee => 0x0,
    0xcef => 0x0,
    0xcf0 => 0x0,
    0xcf1 => 0x0,
    0xcf2 => 0x0,
    0xcf3 => 0x0,
    0xcf4 => 0x0,
    0xcf5 => 0x0,
    0xcf6 => 0x0,
    0xcf7 => 0x0,
    0xcf8 => 0x0,
    0xcf9 => 0x0,
    0xcfa => 0x0,
    0xcfb => 0x0,
    0xcfc => 0x0,
    0xcfd => 0x0,
    0xcfe => 0x0,
    0xcff => 0x0,
    0xd00 => 0x481,
    0xd01 => 0x481,
    0xd02 => 0x481,
    0xd03 => 0x481,
    0xd04 => 0x481,
    0xd05 => 0x481,
    0xd06 => 0x481,
    0xd07 => 0x481,
    0xd08 => 0x481,
    0xd09 => 0x481,
    0xd0a => 0x481,
    0xd0b => 0x481,
    0xd0c => 0x481,
    0xd0d => 0x481,
    0xd0e => 0x481,
    0xd0f => 0x481,
    0xd10 => 0x382,
    0xd11 => 0x382,
    0xd12 => 0x382,
    0xd13 => 0x382,
    0xd14 => 0x382,
    0xd15 => 0x382,
    0xd16 => 0x382,
    0xd17 => 0x382,
    0xd18 => 0x14a,
    0xd19 => 0x14a,
    0xd1a => 0x14a,
    0xd1b => 0x14a,
    0xd1c => 0x0,
    0xd1d => 0x0,
    0xd1e => 0x0,
    0xd1f => 0x0,
    0xd20 => 0x14b,
    0xd21 => 0x14b,
    0xd22 => 0x14b,
    0xd23 => 0x14b,
    0xd24 => 0x14c,
    0xd25 => 0x14c,
    0xd26 => 0x14c,
    0xd27 => 0x14c,
    0xd28 => 0x1301,
    0xd29 => 0x1301,
    0xd2a => 0x1301,
    0xd2b => 0x1301,
    0xd2c => 0x1301,
    0xd2d => 0x1301,
    0xd2e => 0x1301,
    0xd2f => 0x1301,
    0xd30 => 0x0,
    0xd31 => 0x0,
    0xd32 => 0x0,
    0xd33 => 0x0,
    0xd34 => 0x902,
    0xd35 => 0x902,
    0xd36 => 0x902,
    0xd37 => 0x902,
    0xd38 => 0x0,
    0xd39 => 0x0,
    0xd3a => 0x0,
    0xd3b => 0x0,
    0xd3c => 0x0,
    0xd3d => 0x0,
    0xd3e => 0x0,
    0xd3f => 0x0,
    0xd40 => 0x14d,
    0xd41 => 0x14d,
    0xd42 => 0x14e,
    0xd43 => 0x14e,
    0xd44 => 0x14f,
    0xd45 => 0x14f,
    0xd46 => 0x150,
    0xd47 => 0x150,
    0xd48 => 0x0,
    0xd49 => 0x0,
    0xd4a => 0x151,
    0xd4b => 0x151,
    0xd4c => 0x0,
    0xd4d => 0x0,
    0xd4e => 0x0,
    0xd4f => 0x0,
    0xd50 => 0x152,
    0xd51 => 0x1400,
    0xd52 => 0x153,
    0xd53 => 0x1401,
    0xd54 => 0x0,
    0xd55 => 0x0,
    0xd56 => 0x0,
    0xd57 => 0x0,
    0xd58 => 0x0,
    0xd59 => 0x0,
    0xd5a => 0x0,
    0xd5b => 0x0,
    0xd5c => 0x0,
    0xd5d => 0x0,
    0xd5e => 0x0,
    0xd5f => 0x0,
    0xd60 => 0x0,
    0xd61 => 0x154,
    0xd62 => 0x0,
    0xd63 => 0x155,
    0xd64 => 0x0,
    0xd65 => 0x156,
    0xd66 => 0x0,
    0xd67 => 0x0,
    0xd68 => 0x0,
    0xd69 => 0x157,
    0xd6a => 0x0,
    0xd6b => 0x158,
    0xd6c => 0x0,
    0xd6d => 0x0,
    0xd6e => 0x0,
    0xd6f => 0x0,
    0xd70 => 0x0,
    0xd71 => 0x159,
    0xd72 => 0x0,
    0xd73 => 0x15a,
    0xd74 => 0x0,
    0xd75 => 0x0,
    0xd76 => 0x0,
    0xd77 => 0x0,
    0xd78 => 0x0,
    0xd79 => 0x0,
    0xd7a => 0x0,
    0xd7b => 0x0,
    0xd7c => 0x0,
    0xd7d => 0x0,
    0xd7e => 0x0,
    0xd7f => 0x0,
    0xd80 => 0x1983,
    0xd81 => 0x1983,
    0xd82 => 0x1983,
    0xd83 => 0x1983,
    0xd84 => 0x1983,
    0xd85 => 0x1983,
    0xd86 => 0x1983,
    0xd87 => 0x1983,
    0xd88 => 0x1983,
    0xd89 => 0x1983,
    0xd8a => 0x1983,
    0xd8b => 0x1983,
    0xd8c => 0x1983,
    0xd8d => 0x1983,
    0xd8e => 0x1983,
    0xd8f => 0x1983,
    0xd90 => 0x15b,
    0xd91 => 0x15b,
    0xd92 => 0x15c,
    0xd93 => 0x15d,
    0xd94 => 0x15e,
    0xd95 => 0x15e,
    0xd96 => 0x15f,
    0xd97 => 0x15f,
    0xd98 => 0x0,
    0xd99 => 0x0,
    0xd9a => 0x160,
    0xd9b => 0x161,
    0xd9c => 0x0,
    0xd9d => 0x0,
    0xd9e => 0x162,
    0xd9f => 0x163,
    0xda0 => 0xb1,
    0xda1 => 0xb1,
    0xda2 => 0x0,
    0xda3 => 0x0,
    0xda4 => 0x0,
    0xda5 => 0x0,
    0xda6 => 0x0,
    0xda7 => 0x0,
    0xda8 => 0xb2,
    0xda9 => 0xb2,
    0xdaa => 0x0,
    0xdab => 0x0,
    0xdac => 0x164,
    0xdad => 0x0,
    0xdae => 0x0,
    0xdaf => 0x0,
    0xdb0 => 0x0,
    0xdb1 => 0x0,
    0xdb2 => 0x0,
    0xdb3 => 0x0,
    0xdb4 => 0x0,
    0xdb5 => 0x0,
    0xdb6 => 0x0,
    0xdb7 => 0x0,
    0xdb8 => 0x0,
    0xdb9 => 0x0,
    0xdba => 0x0,
    0xdbb => 0x0,
    0xdbc => 0x0,
    0xdbd => 0x0,
    0xdbe => 0x0,
    0xdbf => 0x0,
    0xdc0 => 0x0,
    0xdc1 => 0x0,
    0xdc2 => 0x0,
    0xdc3 => 0x0,
    0xdc4 => 0x0,
    0xdc5 => 0x0,
    0xdc6 => 0x0,
    0xdc7 => 0x0,
    0xdc8 => 0x0,
    0xdc9 => 0x0,
    0xdca => 0x0,
    0xdcb => 0x0,
    0xdcc => 0x0,
    0xdcd => 0x0,
    0xdce => 0x0,
    0xdcf => 0x0,
    0xdd0 => 0x0,
    0xdd1 => 0x0,
    0xdd2 => 0x0,
    0xdd3 => 0x0,
    0xdd4 => 0x0,
    0xdd5 => 0x0,
    0xdd6 => 0x0,
    0xdd7 => 0x0,
    0xdd8 => 0x0,
    0xdd9 => 0x0,
    0xdda => 0x0,
    0xddb => 0x0,
    0xddc => 0x0,
    0xddd => 0x0,
    0xdde => 0x0,
    0xddf => 0x0,
    0xde0 => 0x0,
    0xde1 => 0x0,
    0xde2 => 0x0,
    0xde3 => 0x0,
    0xde4 => 0x0,
    0xde5 => 0x0,
    0xde6 => 0x0,
    0xde7 => 0x0,
    0xde8 => 0x0,
    0xde9 => 0x0,
    0xdea => 0x0,
    0xdeb => 0x0,
    0xdec => 0x0,
    0xded => 0x0,
    0xdee => 0x0,
    0xdef => 0x0,
    0xdf0 => 0x0,
    0xdf1 => 0x0,
    0xdf2 => 0x0,
    0xdf3 => 0x0,
    0xdf4 => 0x0,
    0xdf5 => 0x0,
    0xdf6 => 0x0,
    0xdf7 => 0x0,
    0xdf8 => 0x0,
    0xdf9 => 0x0,
    0xdfa => 0x0,
    0xdfb => 0x0,
    0xdfc => 0x0,
    0xdfd => 0x0,
    0xdfe => 0x0,
    0xdff => 0x0,
    0xe00 => 0x0,
    0xe01 => 0x0,
    0xe02 => 0x0,
    0xe03 => 0x0,
    0xe04 => 0x0,
    0xe05 => 0x0,
    0xe06 => 0x0,
    0xe07 => 0x0,
    0xe08 => 0x0,
    0xe09 => 0x0,
    0xe0a => 0x0,
    0xe0b => 0x0,
    0xe0c => 0x0,
    0xe0d => 0x0,
    0xe0e => 0x0,
    0xe0f => 0x0,
    0xe10 => 0x0,
    0xe11 => 0x0,
    0xe12 => 0x0,
    0xe13 => 0x0,
    0xe14 => 0x0,
    0xe15 => 0x0,
    0xe16 => 0x0,
    0xe17 => 0x0,
    0xe18 => 0x0,
    0xe19 => 0x0,
    0xe1a => 0x0,
    0xe1b => 0x0,
    0xe1c => 0x0,
    0xe1d => 0x0,
    0xe1e => 0x0,
    0xe1f => 0x0,
    0xe20 => 0x0,
    0xe21 => 0x0,
    0xe22 => 0x0,
    0xe23 => 0x0,
    0xe24 => 0x0,
    0xe25 => 0x0,
    0xe26 => 0x0,
    0xe27 => 0x0,
    0xe28 => 0x0,
    0xe29 => 0x0,
    0xe2a => 0x0,
    0xe2b => 0x0,
    0xe2c => 0x0,
    0xe2d => 0x0,
    0xe2e => 0x0,
    0xe2f => 0x0,
    0xe30 => 0x0,
    0xe31 => 0x0,
    0xe32 => 0x0,
    0xe33 => 0x0,
    0xe34 => 0x0,
    0xe35 => 0x0,
    0xe36 => 0x0,
    0xe37 => 0x0,
    0xe38 => 0x0,
    0xe39 => 0x0,
    0xe3a => 0x0,
    0xe3b => 0x0,
    0xe3c => 0x0,
    0xe3d => 0x0,
    0xe3e => 0x0,
    0xe3f => 0x0,
    0xe40 => 0x0,
    0xe41 => 0x0,
    0xe42 => 0x0,
    0xe43 => 0x0,
    0xe44 => 0x0,
    0xe45 => 0x0,
    0xe46 => 0x0,
    0xe47 => 0x0,
    0xe48 => 0x0,
    0xe49 => 0x0,
    0xe4a => 0x0,
    0xe4b => 0x0,
    0xe4c => 0x0,
    0xe4d => 0x0,
    0xe4e => 0x0,
    0xe4f => 0x0,
    0xe50 => 0x0,
    0xe51 => 0x0,
    0xe52 => 0x0,
    0xe53 => 0x0,
    0xe54 => 0x0,
    0xe55 => 0x0,
    0xe56 => 0x0,
    0xe57 => 0x0,
    0xe58 => 0x0,
    0xe59 => 0x0,
    0xe5a => 0x0,
    0xe5b => 0x0,
    0xe5c => 0x0,
    0xe5d => 0x0,
    0xe5e => 0x0,
    0xe5f => 0x0,
    0xe60 => 0x0,
    0xe61 => 0x0,
    0xe62 => 0x0,
    0xe63 => 0x0,
    0xe64 => 0x0,
    0xe65 => 0x0,
    0xe66 => 0x0,
    0xe67 => 0x0,
    0xe68 => 0x0,
    0xe69 => 0x0,
    0xe6a => 0x0,
    0xe6b => 0x0,
    0xe6c => 0x0,
    0xe6d => 0x0,
    0xe6e => 0x0,
    0xe6f => 0x0,
    0xe70 => 0x0,
    0xe71 => 0x0,
    0xe72 => 0x0,
    0xe73 => 0x0,
    0xe74 => 0x0,
    0xe75 => 0x0,
    0xe76 => 0x0,
    0xe77 => 0x0,
    0xe78 => 0x0,
    0xe79 => 0x0,
    0xe7a => 0x0,
    0xe7b => 0x0,
    0xe7c => 0x0,
    0xe7d => 0x0,
    0xe7e => 0x0,
    0xe7f => 0x0,
    0xe80 => 0x0,
    0xe81 => 0x0,
    0xe82 => 0x0,
    0xe83 => 0x0,
    0xe84 => 0x0,
    0xe85 => 0x0,
    0xe86 => 0x0,
    0xe87 => 0x0,
    0xe88 => 0x0,
    0xe89 => 0x0,
    0xe8a => 0x0,
    0xe8b => 0x0,
    0xe8c => 0x0,
    0xe8d => 0x0,
    0xe8e => 0x0,
    0xe8f => 0x0,
    0xe90 => 0x0,
    0xe91 => 0x0,
    0xe92 => 0x0,
    0xe93 => 0x0,
    0xe94 => 0x0,
    0xe95 => 0x0,
    0xe96 => 0x0,
    0xe97 => 0x0,
    0xe98 => 0x0,
    0xe99 => 0x0,
    0xe9a => 0x0,
    0xe9b => 0x0,
    0xe9c => 0x0,
    0xe9d => 0x0,
    0xe9e => 0x0,
    0xe9f => 0x0,
    0xea0 => 0x586,
    0xea1 => 0x586,
    0xea2 => 0x587,
    0xea3 => 0x587,
    0xea4 => 0x586,
    0xea5 => 0x586,
    0xea6 => 0x587,
    0xea7 => 0x587,
    0xea8 => 0x586,
    0xea9 => 0x586,
    0xeaa => 0x587,
    0xeab => 0x587,
    0xeac => 0x586,
    0xead => 0x586,
    0xeae => 0x587,
    0xeaf => 0x587,
    0xeb0 => 0x403,
    0xeb1 => 0x403,
    0xeb2 => 0xcd,
    0xeb3 => 0xcd,
    0xeb4 => 0x403,
    0xeb5 => 0x403,
    0xeb6 => 0x0,
    0xeb7 => 0x0,
    0xeb8 => 0x403,
    0xeb9 => 0x403,
    0xeba => 0x0,
    0xebb => 0x0,
    0xebc => 0x0,
    0xebd => 0x0,
    0xebe => 0x0,
    0xebf => 0x0,
    0xec0 => 0x0,
    0xec1 => 0x0,
    0xec2 => 0x0,
    0xec3 => 0x0,
    0xec4 => 0x0,
    0xec5 => 0x0,
    0xec6 => 0x0,
    0xec7 => 0x0,
    0xec8 => 0x0,
    0xec9 => 0x0,
    0xeca => 0x0,
    0xecb => 0x0,
    0xecc => 0x0,
    0xecd => 0x0,
    0xece => 0x0,
    0xecf => 0x0,
    0xed0 => 0x0,
    0xed1 => 0x0,
    0xed2 => 0x0,
    0xed3 => 0x0,
    0xed4 => 0x0,
    0xed5 => 0x0,
    0xed6 => 0x0,
    0xed7 => 0x0,
    0xed8 => 0x0,
    0xed9 => 0x0,
    0xeda => 0x0,
    0xedb => 0x0,
    0xedc => 0x0,
    0xedd => 0x0,
    0xede => 0x0,
    0xedf => 0x0,
    0xee0 => 0x0,
    0xee1 => 0x0,
    0xee2 => 0x0,
    0xee3 => 0x0,
    0xee4 => 0x0,
    0xee5 => 0x0,
    0xee6 => 0x0,
    0xee7 => 0x0,
    0xee8 => 0x0,
    0xee9 => 0x0,
    0xeea => 0x0,
    0xeeb => 0x0,
    0xeec => 0x0,
    0xeed => 0x0,
    0xeee => 0x0,
    0xeef => 0x0,
    0xef0 => 0x0,
    0xef1 => 0x0,
    0xef2 => 0x0,
    0xef3 => 0x0,
    0xef4 => 0x0,
    0xef5 => 0x0,
    0xef6 => 0x0,
    0xef7 => 0x0,
    0xef8 => 0x0,
    0xef9 => 0x0,
    0xefa => 0x0,
    0xefb => 0x0,
    0xefc => 0x0,
    0xefd => 0x0,
    0xefe => 0x0,
    0xeff => 0x0,
    0xf00 => 0x481,
    0xf01 => 0x481,
    0xf02 => 0x481,
    0xf03 => 0x481,
    0xf04 => 0x481,
    0xf05 => 0x481,
    0xf06 => 0x481,
    0xf07 => 0x481,
    0xf08 => 0x481,
    0xf09 => 0x481,
    0xf0a => 0x481,
    0xf0b => 0x481,
    0xf0c => 0x481,
    0xf0d => 0x481,
    0xf0e => 0x481,
    0xf0f => 0x481,
    0xf10 => 0x383,
    0xf11 => 0x383,
    0xf12 => 0x383,
    0xf13 => 0x383,
    0xf14 => 0x383,
    0xf15 => 0x383,
    0xf16 => 0x383,
    0xf17 => 0x383,
    0xf18 => 0x0,
    0xf19 => 0x0,
    0xf1a => 0x0,
    0xf1b => 0x0,
    0xf1c => 0x0,
    0xf1d => 0x0,
    0xf1e => 0x0,
    0xf1f => 0x0,
    0xf20 => 0x165,
    0xf21 => 0x165,
    0xf22 => 0x165,
    0xf23 => 0x165,
    0xf24 => 0x166,
    0xf25 => 0x166,
    0xf26 => 0x166,
    0xf27 => 0x166,
    0xf28 => 0x1302,
    0xf29 => 0x1302,
    0xf2a => 0x1302,
    0xf2b => 0x1302,
    0xf2c => 0x1302,
    0xf2d => 0x1302,
    0xf2e => 0x1302,
    0xf2f => 0x1302,
    0xf30 => 0x0,
    0xf31 => 0x0,
    0xf32 => 0x0,
    0xf33 => 0x0,
    0xf34 => 0x0,
    0xf35 => 0x0,
    0xf36 => 0x0,
    0xf37 => 0x0,
    0xf38 => 0x0,
    0xf39 => 0x0,
    0xf3a => 0x0,
    0xf3b => 0x0,
    0xf3c => 0x0,
    0xf3d => 0x0,
    0xf3e => 0x0,
    0xf3f => 0x0,
    0xf40 => 0x0,
    0xf41 => 0x0,
    0xf42 => 0x0,
    0xf43 => 0x0,
    0xf44 => 0x0,
    0xf45 => 0x0,
    0xf46 => 0x0,
    0xf47 => 0x0,
    0xf48 => 0x0,
    0xf49 => 0x0,
    0xf4a => 0x0,
    0xf4b => 0x0,
    0xf4c => 0x0,
    0xf4d => 0x0,
    0xf4e => 0x0,
    0xf4f => 0x0,
    0xf50 => 0x0,
    0xf51 => 0x0,
    0xf52 => 0x0,
    0xf53 => 0x0,
    0xf54 => 0x0,
    0xf55 => 0x0,
    0xf56 => 0x0,
    0xf57 => 0x0,
    0xf58 => 0x0,
    0xf59 => 0x0,
    0xf5a => 0x0,
    0xf5b => 0x0,
    0xf5c => 0x0,
    0xf5d => 0x0,
    0xf5e => 0x0,
    0xf5f => 0x0,
    0xf60 => 0x0,
    0xf61 => 0x0,
    0xf62 => 0x0,
    0xf63 => 0x0,
    0xf64 => 0x0,
    0xf65 => 0x0,
    0xf66 => 0x0,
    0xf67 => 0x0,
    0xf68 => 0x0,
    0xf69 => 0x0,
    0xf6a => 0x0,
    0xf6b => 0x0,
    0xf6c => 0x0,
    0xf6d => 0x0,
    0xf6e => 0x0,
    0xf6f => 0x0,
    0xf70 => 0x0,
    0xf71 => 0x0,
    0xf72 => 0x0,
    0xf73 => 0x0,
    0xf74 => 0x0,
    0xf75 => 0x0,
    0xf76 => 0x0,
    0xf77 => 0x0,
    0xf78 => 0x0,
    0xf79 => 0x0,
    0xf7a => 0x0,
    0xf7b => 0x0,
    0xf7c => 0x0,
    0xf7d => 0x0,
    0xf7e => 0x0,
    0xf7f => 0x0,
    0xf80 => 0x167,
    0xf81 => 0x167,
    0xf82 => 0x168,
    0xf83 => 0x169,
    0xf84 => 0x16a,
    0xf85 => 0x16a,
    0xf86 => 0x16b,
    0xf87 => 0x16b,
    0xf88 => 0x16c,
    0xf89 => 0x16c,
    0xf8a => 0x16d,
    0xf8b => 0x16e,
    0xf8c => 0x0,
    0xf8d => 0x0,
    0xf8e => 0x16f,
    0xf8f => 0x16f,
    0xf90 => 0x188b,
    0xf91 => 0x188b,
    0xf92 => 0x188b,
    0xf93 => 0x188b,
    0xf94 => 0x188c,
    0xf95 => 0x188c,
    0xf96 => 0x188c,
    0xf97 => 0x188c,
    0xf98 => 0x188d,
    0xf99 => 0x188d,
    0xf9a => 0x188d,
    0xf9b => 0x188d,
    0xf9c => 0x0,
    0xf9d => 0x0,
    0xf9e => 0x0,
    0xf9f => 0x0,
    0xfa0 => 0xf1,
    0xfa1 => 0xf1,
    0xfa2 => 0x0,
    0xfa3 => 0x0,
    0xfa4 => 0xf2,
    0xfa5 => 0xf2,
    0xfa6 => 0x0,
    0xfa7 => 0x0,
    0xfa8 => 0x0,
    0xfa9 => 0x0,
    0xfaa => 0x0,
    0xfab => 0x0,
    0xfac => 0x0,
    0xfad => 0x0,
    0xfae => 0x0,
    0xfaf => 0x0,
    0xfb0 => 0x0,
    0xfb1 => 0x0,
    0xfb2 => 0x0,
    0xfb3 => 0x0,
    0xfb4 => 0x0,
    0xfb5 => 0x0,
    0xfb6 => 0x0,
    0xfb7 => 0x0,
    0xfb8 => 0x0,
    0xfb9 => 0x0,
    0xfba => 0x0,
    0xfbb => 0x0,
    0xfbc => 0x0,
    0xfbd => 0x0,
    0xfbe => 0x0,
    0xfbf => 0x0,
    0xfc0 => 0x170,
    0xfc1 => 0x170,
    0xfc2 => 0x171,
    0xfc3 => 0x171,
    0xfc4 => 0x172,
    0xfc5 => 0x172,
    0xfc6 => 0x173,
    0xfc7 => 0x173,
    0xfc8 => 0x0,
    0xfc9 => 0x0,
    0xfca => 0x0,
    0xfcb => 0x0,
    0xfcc => 0x0,
    0xfcd => 0x0,
    0xfce => 0x0,
    0xfcf => 0x0,
    0xfd0 => 0x1b00,
    0xfd1 => 0x1b00,
    0xfd2 => 0x1b00,
    0xfd3 => 0x1b00,
    0xfd4 => 0x1b01,
    0xfd5 => 0x1b01,
    0xfd6 => 0x1b01,
    0xfd7 => 0x1b01,
    0xfd8 => 0x0,
    0xfd9 => 0x0,
    0xfda => 0x0,
    0xfdb => 0x0,
    0xfdc => 0x0,
    0xfdd => 0x0,
    0xfde => 0x0,
    0xfdf => 0x0,
    0xfe0 => 0x0,
    0xfe1 => 0x0,
    0xfe2 => 0x0,
    0xfe3 => 0x0,
    0xfe4 => 0x0,
    0xfe5 => 0x0,
    0xfe6 => 0x0,
    0xfe7 => 0x0,
    0xfe8 => 0x0,
    0xfe9 => 0x0,
    0xfea => 0x0,
    0xfeb => 0x0,
    0xfec => 0x0,
    0xfed => 0x0,
    0xfee => 0x0,
    0xfef => 0x0,
    0xff0 => 0x0,
    0xff1 => 0x0,
    0xff2 => 0x0,
    0xff3 => 0x0,
    0xff4 => 0x0,
    0xff5 => 0x0,
    0xff6 => 0x0,
    0xff7 => 0x0,
    0xff8 => 0x0,
    0xff9 => 0x0,
    0xffa => 0x0,
    0xffb => 0x0,
    0xffc => 0x0,
    0xffd => 0x0,
    0xffe => 0x0,
    0xfff => 0x0,
    _ => 0,
  };
  match idx {
    0x1 => return classify_impl_1(inst), // UDF-UDF#0
    0x2 => return classify_impl_2(inst), // MEMX-STXRB#0,MEMX-STLXRB#0
    0x3 => return classify_impl_3(inst), // CASP-CASP#0,CASP-CASPL#0
    0x4 => return classify_impl_4(inst), // MEMX-LDXRB#0,MEMX-LDAXRB#0
    0x5 => return classify_impl_5(inst), // CASP-CASPA#0,CASP-CASPAL#0
    0x6 => return classify_impl_6(inst), // MEMOR-STLLRB#0,MEMOR-STLRB#0
    0x7 => return classify_impl_7(inst), // CAS-CASB#0,CAS-CASLB#0
    0x8 => return classify_impl_8(inst), // MEMOR-LDLARB#0,MEMOR-LDARB#0
    0x9 => return classify_impl_9(inst), // CAS-CASAB#0,CAS-CASALB#0
    0xa => return classify_impl_a(inst), // ANDOREOR_SHIFT-AND_SHIFT#0
    0xb => return classify_impl_b(inst), // ANDOREOR_SHIFT-BIC_SHIFT#0
    0xc => return classify_impl_c(inst), // ADDSUB_SHIFT-ADD_SHIFT#0
    0xd => return classify_impl_d(inst), // ADDSUB_EXT-ADD_EXT#0,ADDSUB_EXT-ADD_EXT#1,ADDSUB_EXT-ADD_EXT#2,ADDSUB_EXT-ADD_EXT#3,ADDSUB_EXT-ADD_EXT#4
    0xe => return classify_impl_e(inst), // ADDSUB_SHIFT-ADD_SHIFT#1
    0xf => return classify_impl_f(inst), // ADDSUB_SHIFT-ADD_SHIFT#2
    0x10 => return classify_impl_10(inst), // MEMSIMD_MULT-ST4#0,MEMSIMD_MULT-ST4#1,MEMSIMD_MULT-ST4#2,MEMSIMD_MULT-ST1_4#0,MEMSIMD_MULT-ST1_4#1,MEMSIMD_MULT-ST1_4#2,MEMSIMD_MULT-ST1_4#3,MEMSIMD_MULT-ST3#0,MEMSIMD_MULT-ST3#1,MEMSIMD_MULT-ST3#2,MEMSIMD_MULT-ST1_3#0,MEMSIMD_MULT-ST1_3#1,MEMSIMD_MULT-ST1_3#2,MEMSIMD_MULT-ST1_3#3,MEMSIMD_MULT-ST1_1#0,MEMSIMD_MULT-ST1_1#1,MEMSIMD_MULT-ST1_1#2,MEMSIMD_MULT-ST1_1#3,MEMSIMD_MULT-ST2#0,MEMSIMD_MULT-ST2#1,MEMSIMD_MULT-ST2#2,MEMSIMD_MULT-ST1_2#0,MEMSIMD_MULT-ST1_2#1,MEMSIMD_MULT-ST1_2#2,MEMSIMD_MULT-ST1_2#3
    0x11 => return classify_impl_11(inst), // MEMSIMD_MULT-LD4#0,MEMSIMD_MULT-LD4#1,MEMSIMD_MULT-LD4#2,MEMSIMD_MULT-LD1_4#0,MEMSIMD_MULT-LD1_4#1,MEMSIMD_MULT-LD1_4#2,MEMSIMD_MULT-LD1_4#3,MEMSIMD_MULT-LD3#0,MEMSIMD_MULT-LD3#1,MEMSIMD_MULT-LD3#2,MEMSIMD_MULT-LD1_3#0,MEMSIMD_MULT-LD1_3#1,MEMSIMD_MULT-LD1_3#2,MEMSIMD_MULT-LD1_3#3,MEMSIMD_MULT-LD1_1#0,MEMSIMD_MULT-LD1_1#1,MEMSIMD_MULT-LD1_1#2,MEMSIMD_MULT-LD1_1#3,MEMSIMD_MULT-LD2#0,MEMSIMD_MULT-LD2#1,MEMSIMD_MULT-LD2#2,MEMSIMD_MULT-LD1_2#0,MEMSIMD_MULT-LD1_2#1,MEMSIMD_MULT-LD1_2#2,MEMSIMD_MULT-LD1_2#3
    0x12 => return classify_impl_12(inst), // MEMSIMD_MULT_POST-ST4_POST#0,MEMSIMD_MULT_POST-ST4_POST#1,MEMSIMD_MULT_POST-ST4_POST#2,MEMSIMD_MULT_POST-ST1_4_POST#0,MEMSIMD_MULT_POST-ST1_4_POST#1,MEMSIMD_MULT_POST-ST1_4_POST#2,MEMSIMD_MULT_POST-ST1_4_POST#3,MEMSIMD_MULT_POST-ST3_POST#0,MEMSIMD_MULT_POST-ST3_POST#1,MEMSIMD_MULT_POST-ST3_POST#2,MEMSIMD_MULT_POST-ST1_3_POST#0,MEMSIMD_MULT_POST-ST1_3_POST#1,MEMSIMD_MULT_POST-ST1_3_POST#2,MEMSIMD_MULT_POST-ST1_3_POST#3,MEMSIMD_MULT_POST-ST1_1_POST#0,MEMSIMD_MULT_POST-ST1_1_POST#1,MEMSIMD_MULT_POST-ST1_1_POST#2,MEMSIMD_MULT_POST-ST1_1_POST#3,MEMSIMD_MULT_POST-ST2_POST#0,MEMSIMD_MULT_POST-ST2_POST#1,MEMSIMD_MULT_POST-ST2_POST#2,MEMSIMD_MULT_POST-ST1_2_POST#0,MEMSIMD_MULT_POST-ST1_2_POST#1,MEMSIMD_MULT_POST-ST1_2_POST#2,MEMSIMD_MULT_POST-ST1_2_POST#3
    0x13 => return classify_impl_13(inst), // MEMSIMD_MULT_POST-LD4_POST#0,MEMSIMD_MULT_POST-LD4_POST#1,MEMSIMD_MULT_POST-LD4_POST#2,MEMSIMD_MULT_POST-LD1_4_POST#0,MEMSIMD_MULT_POST-LD1_4_POST#1,MEMSIMD_MULT_POST-LD1_4_POST#2,MEMSIMD_MULT_POST-LD1_4_POST#3,MEMSIMD_MULT_POST-LD3_POST#0,MEMSIMD_MULT_POST-LD3_POST#1,MEMSIMD_MULT_POST-LD3_POST#2,MEMSIMD_MULT_POST-LD1_3_POST#0,MEMSIMD_MULT_POST-LD1_3_POST#1,MEMSIMD_MULT_POST-LD1_3_POST#2,MEMSIMD_MULT_POST-LD1_3_POST#3,MEMSIMD_MULT_POST-LD1_1_POST#0,MEMSIMD_MULT_POST-LD1_1_POST#1,MEMSIMD_MULT_POST-LD1_1_POST#2,MEMSIMD_MULT_POST-LD1_1_POST#3,MEMSIMD_MULT_POST-LD2_POST#0,MEMSIMD_MULT_POST-LD2_POST#1,MEMSIMD_MULT_POST-LD2_POST#2,MEMSIMD_MULT_POST-LD1_2_POST#0,MEMSIMD_MULT_POST-LD1_2_POST#1,MEMSIMD_MULT_POST-LD1_2_POST#2,MEMSIMD_MULT_POST-LD1_2_POST#3
    0x14 => return classify_impl_14(inst), // MEMSIMD_SINGLE-ST1B#0,MEMSIMD_SINGLE-ST1B#1,MEMSIMD_SINGLE-ST1B#2,MEMSIMD_SINGLE-ST1B#3,MEMSIMD_SINGLE-ST1B#4,MEMSIMD_SINGLE-ST1B#5,MEMSIMD_SINGLE-ST1B#6,MEMSIMD_SINGLE-ST1B#7,MEMSIMD_SINGLE-ST3B#0,MEMSIMD_SINGLE-ST3B#1,MEMSIMD_SINGLE-ST3B#2,MEMSIMD_SINGLE-ST3B#3,MEMSIMD_SINGLE-ST3B#4,MEMSIMD_SINGLE-ST3B#5,MEMSIMD_SINGLE-ST3B#6,MEMSIMD_SINGLE-ST3B#7,MEMSIMD_SINGLE-ST1H#0,MEMSIMD_SINGLE-ST1H#1,MEMSIMD_SINGLE-ST1H#2,MEMSIMD_SINGLE-ST1H#3,MEMSIMD_SINGLE-ST3H#0,MEMSIMD_SINGLE-ST3H#1,MEMSIMD_SINGLE-ST3H#2,MEMSIMD_SINGLE-ST3H#3,MEMSIMD_SINGLE-ST1S#0,MEMSIMD_SINGLE-ST1S#1,MEMSIMD_SINGLE-ST1D#0,MEMSIMD_SINGLE-ST3S#0,MEMSIMD_SINGLE-ST3S#1,MEMSIMD_SINGLE-ST3D#0
    0x15 => return classify_impl_15(inst), // MEMSIMD_SINGLE-ST2B#0,MEMSIMD_SINGLE-ST2B#1,MEMSIMD_SINGLE-ST2B#2,MEMSIMD_SINGLE-ST2B#3,MEMSIMD_SINGLE-ST2B#4,MEMSIMD_SINGLE-ST2B#5,MEMSIMD_SINGLE-ST2B#6,MEMSIMD_SINGLE-ST2B#7,MEMSIMD_SINGLE-ST4B#0,MEMSIMD_SINGLE-ST4B#1,MEMSIMD_SINGLE-ST4B#2,MEMSIMD_SINGLE-ST4B#3,MEMSIMD_SINGLE-ST4B#4,MEMSIMD_SINGLE-ST4B#5,MEMSIMD_SINGLE-ST4B#6,MEMSIMD_SINGLE-ST4B#7,MEMSIMD_SINGLE-ST2H#0,MEMSIMD_SINGLE-ST2H#1,MEMSIMD_SINGLE-ST2H#2,MEMSIMD_SINGLE-ST2H#3,MEMSIMD_SINGLE-ST4H#0,MEMSIMD_SINGLE-ST4H#1,MEMSIMD_SINGLE-ST4H#2,MEMSIMD_SINGLE-ST4H#3,MEMSIMD_SINGLE-ST2S#0,MEMSIMD_SINGLE-ST2S#1,MEMSIMD_SINGLE-ST2D#0,MEMSIMD_SINGLE-ST4S#0,MEMSIMD_SINGLE-ST4S#1,MEMSIMD_SINGLE-ST4D#0
    0x16 => return classify_impl_16(inst), // MEMSIMD_SINGLE-LD1B#0,MEMSIMD_SINGLE-LD1B#1,MEMSIMD_SINGLE-LD1B#2,MEMSIMD_SINGLE-LD1B#3,MEMSIMD_SINGLE-LD1B#4,MEMSIMD_SINGLE-LD1B#5,MEMSIMD_SINGLE-LD1B#6,MEMSIMD_SINGLE-LD1B#7,MEMSIMD_SINGLE-LD3B#0,MEMSIMD_SINGLE-LD3B#1,MEMSIMD_SINGLE-LD3B#2,MEMSIMD_SINGLE-LD3B#3,MEMSIMD_SINGLE-LD3B#4,MEMSIMD_SINGLE-LD3B#5,MEMSIMD_SINGLE-LD3B#6,MEMSIMD_SINGLE-LD3B#7,MEMSIMD_SINGLE-LD1H#0,MEMSIMD_SINGLE-LD1H#1,MEMSIMD_SINGLE-LD1H#2,MEMSIMD_SINGLE-LD1H#3,MEMSIMD_SINGLE-LD3H#0,MEMSIMD_SINGLE-LD3H#1,MEMSIMD_SINGLE-LD3H#2,MEMSIMD_SINGLE-LD3H#3,MEMSIMD_SINGLE-LD1S#0,MEMSIMD_SINGLE-LD1S#1,MEMSIMD_SINGLE-LD1D#0,MEMSIMD_SINGLE-LD3S#0,MEMSIMD_SINGLE-LD3S#1,MEMSIMD_SINGLE-LD3D#0,MEMSIMD_REP-LD1R#0,MEMSIMD_REP-LD3R#0
    0x17 => return classify_impl_17(inst), // MEMSIMD_SINGLE-LD2B#0,MEMSIMD_SINGLE-LD2B#1,MEMSIMD_SINGLE-LD2B#2,MEMSIMD_SINGLE-LD2B#3,MEMSIMD_SINGLE-LD2B#4,MEMSIMD_SINGLE-LD2B#5,MEMSIMD_SINGLE-LD2B#6,MEMSIMD_SINGLE-LD2B#7,MEMSIMD_SINGLE-LD4B#0,MEMSIMD_SINGLE-LD4B#1,MEMSIMD_SINGLE-LD4B#2,MEMSIMD_SINGLE-LD4B#3,MEMSIMD_SINGLE-LD4B#4,MEMSIMD_SINGLE-LD4B#5,MEMSIMD_SINGLE-LD4B#6,MEMSIMD_SINGLE-LD4B#7,MEMSIMD_SINGLE-LD2H#0,MEMSIMD_SINGLE-LD2H#1,MEMSIMD_SINGLE-LD2H#2,MEMSIMD_SINGLE-LD2H#3,MEMSIMD_SINGLE-LD4H#0,MEMSIMD_SINGLE-LD4H#1,MEMSIMD_SINGLE-LD4H#2,MEMSIMD_SINGLE-LD4H#3,MEMSIMD_SINGLE-LD2S#0,MEMSIMD_SINGLE-LD2S#1,MEMSIMD_SINGLE-LD2D#0,MEMSIMD_SINGLE-LD4S#0,MEMSIMD_SINGLE-LD4S#1,MEMSIMD_SINGLE-LD4D#0,MEMSIMD_REP-LD2R#0,MEMSIMD_REP-LD4R#0
    0x18 => return classify_impl_18(inst), // MEMSIMD_SINGLE_POST-ST1B_POST#0,MEMSIMD_SINGLE_POST-ST1B_POST#1,MEMSIMD_SINGLE_POST-ST1B_POST#2,MEMSIMD_SINGLE_POST-ST1B_POST#3,MEMSIMD_SINGLE_POST-ST1B_POST#4,MEMSIMD_SINGLE_POST-ST1B_POST#5,MEMSIMD_SINGLE_POST-ST1B_POST#6,MEMSIMD_SINGLE_POST-ST1B_POST#7,MEMSIMD_SINGLE_POST-ST3B_POST#0,MEMSIMD_SINGLE_POST-ST3B_POST#1,MEMSIMD_SINGLE_POST-ST3B_POST#2,MEMSIMD_SINGLE_POST-ST3B_POST#3,MEMSIMD_SINGLE_POST-ST3B_POST#4,MEMSIMD_SINGLE_POST-ST3B_POST#5,MEMSIMD_SINGLE_POST-ST3B_POST#6,MEMSIMD_SINGLE_POST-ST3B_POST#7,MEMSIMD_SINGLE_POST-ST1H_POST#0,MEMSIMD_SINGLE_POST-ST1H_POST#1,MEMSIMD_SINGLE_POST-ST1H_POST#2,MEMSIMD_SINGLE_POST-ST1H_POST#3,MEMSIMD_SINGLE_POST-ST3H_POST#0,MEMSIMD_SINGLE_POST-ST3H_POST#1,MEMSIMD_SINGLE_POST-ST3H_POST#2,MEMSIMD_SINGLE_POST-ST3H_POST#3,MEMSIMD_SINGLE_POST-ST1S_POST#0,MEMSIMD_SINGLE_POST-ST1S_POST#1,MEMSIMD_SINGLE_POST-ST1D_POST#0,MEMSIMD_SINGLE_POST-ST3S_POST#0,MEMSIMD_SINGLE_POST-ST3S_POST#1,MEMSIMD_SINGLE_POST-ST3D_POST#0
    0x19 => return classify_impl_19(inst), // MEMSIMD_SINGLE_POST-ST2B_POST#0,MEMSIMD_SINGLE_POST-ST2B_POST#1,MEMSIMD_SINGLE_POST-ST2B_POST#2,MEMSIMD_SINGLE_POST-ST2B_POST#3,MEMSIMD_SINGLE_POST-ST2B_POST#4,MEMSIMD_SINGLE_POST-ST2B_POST#5,MEMSIMD_SINGLE_POST-ST2B_POST#6,MEMSIMD_SINGLE_POST-ST2B_POST#7,MEMSIMD_SINGLE_POST-ST4B_POST#0,MEMSIMD_SINGLE_POST-ST4B_POST#1,MEMSIMD_SINGLE_POST-ST4B_POST#2,MEMSIMD_SINGLE_POST-ST4B_POST#3,MEMSIMD_SINGLE_POST-ST4B_POST#4,MEMSIMD_SINGLE_POST-ST4B_POST#5,MEMSIMD_SINGLE_POST-ST4B_POST#6,MEMSIMD_SINGLE_POST-ST4B_POST#7,MEMSIMD_SINGLE_POST-ST2H_POST#0,MEMSIMD_SINGLE_POST-ST2H_POST#1,MEMSIMD_SINGLE_POST-ST2H_POST#2,MEMSIMD_SINGLE_POST-ST2H_POST#3,MEMSIMD_SINGLE_POST-ST4H_POST#0,MEMSIMD_SINGLE_POST-ST4H_POST#1,MEMSIMD_SINGLE_POST-ST4H_POST#2,MEMSIMD_SINGLE_POST-ST4H_POST#3,MEMSIMD_SINGLE_POST-ST2S_POST#0,MEMSIMD_SINGLE_POST-ST2S_POST#1,MEMSIMD_SINGLE_POST-ST2D_POST#0,MEMSIMD_SINGLE_POST-ST4S_POST#0,MEMSIMD_SINGLE_POST-ST4S_POST#1,MEMSIMD_SINGLE_POST-ST4D_POST#0
    0x1a => return classify_impl_1a(inst), // MEMSIMD_SINGLE_POST-LD1B_POST#0,MEMSIMD_SINGLE_POST-LD1B_POST#1,MEMSIMD_SINGLE_POST-LD1B_POST#2,MEMSIMD_SINGLE_POST-LD1B_POST#3,MEMSIMD_SINGLE_POST-LD1B_POST#4,MEMSIMD_SINGLE_POST-LD1B_POST#5,MEMSIMD_SINGLE_POST-LD1B_POST#6,MEMSIMD_SINGLE_POST-LD1B_POST#7,MEMSIMD_SINGLE_POST-LD3B_POST#0,MEMSIMD_SINGLE_POST-LD3B_POST#1,MEMSIMD_SINGLE_POST-LD3B_POST#2,MEMSIMD_SINGLE_POST-LD3B_POST#3,MEMSIMD_SINGLE_POST-LD3B_POST#4,MEMSIMD_SINGLE_POST-LD3B_POST#5,MEMSIMD_SINGLE_POST-LD3B_POST#6,MEMSIMD_SINGLE_POST-LD3B_POST#7,MEMSIMD_SINGLE_POST-LD1H_POST#0,MEMSIMD_SINGLE_POST-LD1H_POST#1,MEMSIMD_SINGLE_POST-LD1H_POST#2,MEMSIMD_SINGLE_POST-LD1H_POST#3,MEMSIMD_SINGLE_POST-LD3H_POST#0,MEMSIMD_SINGLE_POST-LD3H_POST#1,MEMSIMD_SINGLE_POST-LD3H_POST#2,MEMSIMD_SINGLE_POST-LD3H_POST#3,MEMSIMD_SINGLE_POST-LD1S_POST#0,MEMSIMD_SINGLE_POST-LD1S_POST#1,MEMSIMD_SINGLE_POST-LD1D_POST#0,MEMSIMD_SINGLE_POST-LD3S_POST#0,MEMSIMD_SINGLE_POST-LD3S_POST#1,MEMSIMD_SINGLE_POST-LD3D_POST#0,MEMSIMD_REP_POST-LD1R_POST#0,MEMSIMD_REP_POST-LD3R_POST#0
    0x1b => return classify_impl_1b(inst), // MEMSIMD_SINGLE_POST-LD2B_POST#0,MEMSIMD_SINGLE_POST-LD2B_POST#1,MEMSIMD_SINGLE_POST-LD2B_POST#2,MEMSIMD_SINGLE_POST-LD2B_POST#3,MEMSIMD_SINGLE_POST-LD2B_POST#4,MEMSIMD_SINGLE_POST-LD2B_POST#5,MEMSIMD_SINGLE_POST-LD2B_POST#6,MEMSIMD_SINGLE_POST-LD2B_POST#7,MEMSIMD_SINGLE_POST-LD4B_POST#0,MEMSIMD_SINGLE_POST-LD4B_POST#1,MEMSIMD_SINGLE_POST-LD4B_POST#2,MEMSIMD_SINGLE_POST-LD4B_POST#3,MEMSIMD_SINGLE_POST-LD4B_POST#4,MEMSIMD_SINGLE_POST-LD4B_POST#5,MEMSIMD_SINGLE_POST-LD4B_POST#6,MEMSIMD_SINGLE_POST-LD4B_POST#7,MEMSIMD_SINGLE_POST-LD2H_POST#0,MEMSIMD_SINGLE_POST-LD2H_POST#1,MEMSIMD_SINGLE_POST-LD2H_POST#2,MEMSIMD_SINGLE_POST-LD2H_POST#3,MEMSIMD_SINGLE_POST-LD4H_POST#0,MEMSIMD_SINGLE_POST-LD4H_POST#1,MEMSIMD_SINGLE_POST-LD4H_POST#2,MEMSIMD_SINGLE_POST-LD4H_POST#3,MEMSIMD_SINGLE_POST-LD2S_POST#0,MEMSIMD_SINGLE_POST-LD2S_POST#1,MEMSIMD_SINGLE_POST-LD2D_POST#0,MEMSIMD_SINGLE_POST-LD4S_POST#0,MEMSIMD_SINGLE_POST-LD4S_POST#1,MEMSIMD_SINGLE_POST-LD4D_POST#0,MEMSIMD_REP_POST-LD2R_POST#0,MEMSIMD_REP_POST-LD4R_POST#0
    0x1c => return classify_impl_1c(inst), // DUP_VEC-DUP_ELEM#0,DUP_VEC-DUP_ELEM#1,DUP_VEC-DUP_ELEM#2,DUP_VEC-DUP_ELEM#3,DUP_VEC-DUP_ELEM#4,DUP_VEC-DUP_ELEM#5,DUP_VEC-DUP_ELEM#6,DUP_VEC-DUP_ELEM#7,DUP_VEC-DUP_ELEM#8,DUP_VEC-DUP_ELEM#9,DUP_VEC-DUP_ELEM#10,DUP_VEC-DUP_ELEM#11,DUP_VEC-DUP_ELEM#12,DUP_VEC-DUP_ELEM#13,DUP_VEC-DUP_GP#0,DUP_VEC-DUP_GP#1,DUP_VEC-DUP_GP#2,DUP_VEC-DUP_GP#3,DUP_VEC-DUP_GP#4,DUP_VEC-DUP_GP#5,DUP_VEC-DUP_GP#6,DUP_VEC-DUP_GP#7,DUP_VEC-DUP_GP#8,DUP_VEC-DUP_GP#9,DUP_VEC-DUP_GP#10,DUP_VEC-DUP_GP#11,DUP_VEC-DUP_GP#12,DUP_VEC-DUP_GP#13,MOV_TOGP-SMOV#0,MOV_TOGP-SMOV#1,MOV_TOGP-SMOV#2,MOV_TOGP-SMOV#3,MOV_TOGP-SMOV#4,MOV_TOGP-SMOV#5,MOV_TOGP-SMOV#6,MOV_TOGP-SMOV#7,MOV_TOGP-SMOV#8,MOV_TOGP-SMOV#9,MOV_TOGP-SMOV#10,MOV_TOGP-SMOV#11,MOV_TOGP-UMOV#0,MOV_TOGP-UMOV#1,MOV_TOGP-UMOV#2,MOV_TOGP-UMOV#3,MOV_TOGP-UMOV#4,MOV_TOGP-UMOV#5,MOV_TOGP-UMOV#6,MOV_TOGP-UMOV#7,MOV_TOGP-UMOV#8,MOV_TOGP-UMOV#9,MOV_TOGP-UMOV#10,MOV_TOGP-UMOV#11,MOV_TOGP-UMOV#12,MOV_TOGP-UMOV#13,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#0,ZIP-TRN1#0,ZIP-ZIP1#0,ZIP-UZP2#0,ZIP-TRN2#0,ZIP-ZIP2#0
    0x1d => return classify_impl_1d(inst), // HADDSUB_VEC-SHADD#0,HADDSUB_VEC-SRHADD#0,HADDSUB_VEC-SHSUB#0,QADDSUB_VEC-SQADD#0,QADDSUB_VEC-SQSUB#0,CMGT_VEC-CMGTV#0,CMGT_VEC-CMGEV#0,CMEQ_VEC-CMTSTV#0,CMZERO_VEC-CMGT_ZERO_VEC#0,CMZERO_VEC-CMEQ_ZERO_VEC#0,CMZERO_VEC-CMLT_ZERO_VEC#0,ARITH1_VEC-SUQADD_VEC#0,ARITH1_VEC-SQABS_VEC#0,ARITH1_VEC-ABS_VEC#0,ADDLP_VEC-SADDLP#0,ADDLP_VEC-SADALP#0,CLZ_VEC-CLS_VEC#0,BIT_VEC-CNT_VEC#0,REV_VEC-REV64_VEC#0,REV_VEC-REV16_VEC#0,XTN_VEC-XTN_VEC#0,XTN_VEC-SQXTN_VEC#0,SHL_REG_VEC-SSHL#0,SHL_REG_VEC-SQSHL#0,SHL_REG_VEC-SRSHL#0,SHL_REG_VEC-SQRSHL#0,MINMAX_VEC-SMAX#0,MINMAX_VEC-SMIN#0,MINMAX_VEC-SMAXP#0,MINMAX_VEC-SMINP#0,ABD_VEC-SABD#0,ABD_VEC-SABA#0,ADDSUB_VEC-ADD_VEC#0,ADDP_VEC-ADDP#0,MUL_VEC-MLA_VEC#0,MUL_VEC-MUL_VEC#0,FMINMAX_VEC-FMAXNM_VEC#0,FMINMAX_VEC-FMAX_VEC#0,FCMP_REG_VEC-FCMEQ_VEC#0,FADDSUB_VEC-FADD_VEC#0,FRECP_STEP_VEC-FRECPSV#0,FMUL_VEC-FMULXV#0,FMLA_VEC-FMLAV#0,ANDOREOR_VEC-ANDV#0,ADDSUBL_VEC-SADDL#0,ADDSUBL_VEC-SSUBL#0,ADDSUBW_VEC-SADDW#0,ADDSUBW_VEC-SSUBW#0,ADDSUBHN_VEC-ADDHN#0,ADDSUBHN_VEC-SUBHN#0,ABDL_VEC-SABAL#0,ABDL_VEC-SABDL#0,MULL_VEC-SMLAL#0,MULL_VEC-SMLSL#0,MULL_VEC-SMULL#0,PMULL_VEC-PMULL#0,FCVT_VEC-FCVTNS_VEC#0,FCVT_VEC-FCVTMS_VEC#0,FCVT_VEC-FCVTAS_VEC#0,FCVTL_VEC-FCVTL_VEC#0,FCVT_FROMINT_VEC-SCVTF_VEC#0,FCVTN_VEC-FCVTN#0,FRINT_VEC-FRINTN_VEC#0,FRINT_VEC-FRINTM_VEC#0,FRINTTS_VEC-FRINT32Z_VEC#0,FRINTTS_VEC-FRINT64Z_VEC#0,FHM_VEC-FMLAL_VEC#0
    0x1e => return classify_impl_1e(inst), // HADDSUB_VEC-SHADD#0,HADDSUB_VEC-SRHADD#0,HADDSUB_VEC-SHSUB#0,QADDSUB_VEC-SQADD#0,QADDSUB_VEC-SQSUB#0,CMGT_VEC-CMGTV#0,CMGT_VEC-CMGEV#0,CMEQ_VEC-CMTSTV#0,SHL_REG_VEC-SSHL#0,SHL_REG_VEC-SQSHL#0,SHL_REG_VEC-SRSHL#0,SHL_REG_VEC-SQRSHL#0,MINMAX_VEC-SMAX#0,MINMAX_VEC-SMIN#0,MINMAX_VEC-SMAXP#0,MINMAX_VEC-SMINP#0,ABD_VEC-SABD#0,ABD_VEC-SABA#0,ADDSUB_VEC-ADD_VEC#0,ADDP_VEC-ADDP#0,MUL_VEC-MLA_VEC#0,MUL_VEC-MUL_VEC#0,FMINMAX_VEC-FMAXNM_VEC#0,FMINMAX_VEC-FMAX_VEC#0,FCMP_REG_VEC-FCMEQ_VEC#0,FADDSUB_VEC-FADD_VEC#0,FRECP_STEP_VEC-FRECPSV#0,FMUL_VEC-FMULXV#0,FMLA_VEC-FMLAV#0,ANDOREOR_VEC-ANDV#0,ADDSUBL_VEC-SADDL#0,ADDSUBL_VEC-SSUBL#0,ADDSUBW_VEC-SADDW#0,ADDSUBW_VEC-SSUBW#0,ADDSUBHN_VEC-ADDHN#0,ADDSUBHN_VEC-SUBHN#0,ABDL_VEC-SABAL#0,ABDL_VEC-SABDL#0,MULL_VEC-SMLAL#0,MULL_VEC-SMLSL#0,MULL_VEC-SMULL#0,PMULL_VEC-PMULL#0,INT_HORZ_VEC-SADDLV#0,INT_HORZ_VEC-SMAXV#0,INT_HORZ_VEC-SMINV#0,INT_HORZ_VEC-ADDV#0,FP_HORZ_VEC-FMAXNMV_FP16#0,FP_HORZ_VEC-FMAXV_FP16#0,FHM_VEC-FMLAL_VEC#0
    0x1f => return classify_impl_1f(inst), // ZIP-UZP1#1,ZIP-TRN1#1,ZIP-ZIP1#1,ZIP-UZP2#1,ZIP-TRN2#1,ZIP-ZIP2#1,FP16_3REG_VEC-FMAXNM_VEC_FP16#0,FP16_3REG_VEC-FMLA_VEC_FP16#0,FP16_3REG_VEC-FADD_VEC_FP16#0,FP16_3REG_VEC-FMULX_VEC_FP16#0,FP16_3REG_VEC-FCMEQ_VEC_FP16#0,FP16_3REG_VEC-FMAX_VEC_FP16#0,FP16_3REG_VEC-FRECPS_VEC_FP16#0
    0x20 => return classify_impl_20(inst), // HADDSUB_VEC-SHADD#1,HADDSUB_VEC-SRHADD#1,HADDSUB_VEC-SHSUB#1,QADDSUB_VEC-SQADD#1,QADDSUB_VEC-SQSUB#1,CMGT_VEC-CMGTV#1,CMGT_VEC-CMGEV#1,CMEQ_VEC-CMTSTV#1,CMZERO_VEC-CMGT_ZERO_VEC#1,CMZERO_VEC-CMEQ_ZERO_VEC#1,CMZERO_VEC-CMLT_ZERO_VEC#1,ARITH1_VEC-SUQADD_VEC#1,ARITH1_VEC-SQABS_VEC#1,ARITH1_VEC-ABS_VEC#1,ADDLP_VEC-SADDLP#1,ADDLP_VEC-SADALP#1,CLZ_VEC-CLS_VEC#1,REV_VEC-REV64_VEC#1,XTN_VEC-XTN_VEC#1,XTN_VEC-SQXTN_VEC#1,SHL_REG_VEC-SSHL#1,SHL_REG_VEC-SQSHL#1,SHL_REG_VEC-SRSHL#1,SHL_REG_VEC-SQRSHL#1,MINMAX_VEC-SMAX#1,MINMAX_VEC-SMIN#1,MINMAX_VEC-SMAXP#1,MINMAX_VEC-SMINP#1,ABD_VEC-SABD#1,ABD_VEC-SABA#1,ADDSUB_VEC-ADD_VEC#1,ADDP_VEC-ADDP#1,MUL_VEC-MLA_VEC#1,MUL_VEC-MUL_VEC#1,SQDMULH_VEC-SQDMULH#0,ANDOREOR_VEC-BICV#0,ADDSUBL_VEC-SADDL#1,ADDSUBL_VEC-SSUBL#1,ADDSUBW_VEC-SADDW#1,ADDSUBW_VEC-SSUBW#1,ADDSUBHN_VEC-ADDHN#1,ADDSUBHN_VEC-SUBHN#1,ABDL_VEC-SABAL#1,ABDL_VEC-SABDL#1,MULL_VEC-SMLAL#1,MULL_VEC-SMLSL#1,MULL_VEC-SMULL#1,SQDMULL_VEC-SQDMLAL#0,SQDMULL_VEC-SQDMLSL#0,SQDMULL_VEC-SQDMULL#0,FCVTL_VEC-FCVTL_VEC#0,FCVTN_VEC-FCVTN#1
    0x21 => return classify_impl_21(inst), // HADDSUB_VEC-SHADD#1,HADDSUB_VEC-SRHADD#1,HADDSUB_VEC-SHSUB#1,QADDSUB_VEC-SQADD#1,QADDSUB_VEC-SQSUB#1,CMGT_VEC-CMGTV#1,CMGT_VEC-CMGEV#1,CMEQ_VEC-CMTSTV#1,SHL_REG_VEC-SSHL#1,SHL_REG_VEC-SQSHL#1,SHL_REG_VEC-SRSHL#1,SHL_REG_VEC-SQRSHL#1,MINMAX_VEC-SMAX#1,MINMAX_VEC-SMIN#1,MINMAX_VEC-SMAXP#1,MINMAX_VEC-SMINP#1,ABD_VEC-SABD#1,ABD_VEC-SABA#1,ADDSUB_VEC-ADD_VEC#1,ADDP_VEC-ADDP#1,MUL_VEC-MLA_VEC#1,MUL_VEC-MUL_VEC#1,SQDMULH_VEC-SQDMULH#0,FP16_2REG_VEC-FRINTN_VEC_FP16#0,FP16_2REG_VEC-FRINTM_VEC_FP16#0,FP16_2REG_VEC-FCVTNS_VEC_FP16#0,FP16_2REG_VEC-FCVTMS_VEC_FP16#0,FP16_2REG_VEC-FCVTAS_VEC_FP16#0,FP16_2REG_VEC-SCVTF_VEC_FP16#0,ANDOREOR_VEC-BICV#0,ADDSUBL_VEC-SADDL#1,ADDSUBL_VEC-SSUBL#1,ADDSUBW_VEC-SADDW#1,ADDSUBW_VEC-SSUBW#1,ADDSUBHN_VEC-ADDHN#1,ADDSUBHN_VEC-SUBHN#1,ABDL_VEC-SABAL#1,ABDL_VEC-SABDL#1,MULL_VEC-SMLAL#1,MULL_VEC-SMLSL#1,MULL_VEC-SMULL#1,SQDMULL_VEC-SQDMLAL#0,SQDMULL_VEC-SQDMLSL#0,SQDMULL_VEC-SQDMULL#0,INT_HORZ_VEC-SADDLV#1,INT_HORZ_VEC-SMAXV#1,INT_HORZ_VEC-SMINV#1,INT_HORZ_VEC-ADDV#1
    0x22 => return classify_impl_22(inst), // ZIP-UZP1#2,ZIP-TRN1#2,ZIP-ZIP1#2,ZIP-UZP2#2,ZIP-TRN2#2,ZIP-ZIP2#2,DOT_VEC-SDOT_VEC#0,DOT_VEC-USDOT_VEC#0
    0x23 => return classify_impl_23(inst), // HADDSUB_VEC-SHADD#2,HADDSUB_VEC-SRHADD#2,HADDSUB_VEC-SHSUB#2,QADDSUB_VEC-SQADD#2,QADDSUB_VEC-SQSUB#2,CMGT_VEC-CMGTV#2,CMGT_VEC-CMGEV#2,CMEQ_VEC-CMTSTV#2,CMZERO_VEC-CMGT_ZERO_VEC#2,CMZERO_VEC-CMEQ_ZERO_VEC#2,CMZERO_VEC-CMLT_ZERO_VEC#2,ARITH1_VEC-SUQADD_VEC#2,ARITH1_VEC-SQABS_VEC#2,ARITH1_VEC-ABS_VEC#2,ADDLP_VEC-SADDLP#2,ADDLP_VEC-SADALP#2,CLZ_VEC-CLS_VEC#2,REV_VEC-REV64_VEC#2,XTN_VEC-XTN_VEC#2,XTN_VEC-SQXTN_VEC#2,SHL_REG_VEC-SSHL#2,SHL_REG_VEC-SQSHL#2,SHL_REG_VEC-SRSHL#2,SHL_REG_VEC-SQRSHL#2,MINMAX_VEC-SMAX#2,MINMAX_VEC-SMIN#2,MINMAX_VEC-SMAXP#2,MINMAX_VEC-SMINP#2,ABD_VEC-SABD#2,ABD_VEC-SABA#2,ADDSUB_VEC-ADD_VEC#2,ADDP_VEC-ADDP#2,MUL_VEC-MLA_VEC#2,MUL_VEC-MUL_VEC#2,SQDMULH_VEC-SQDMULH#1,FMINMAX_VEC-FMINNM_VEC#0,FMINMAX_VEC-FMIN_VEC#0,FCMP_ZERO_VEC-FCMGT_ZERO_VEC#0,FCMP_ZERO_VEC-FCMEQ_ZERO_VEC#0,FCMP_ZERO_VEC-FCMLT_ZERO_VEC#0,FARITH1_VEC-FABS_VEC#0,FADDSUB_VEC-FSUB_VEC#0,FRECP_VEC-URECPE_VEC#0,FRECP_VEC-FRECPE_VEC#0,FRECP_STEP_VEC-FRSQRTSV#0,FMLA_VEC-FMLSV#0,ANDOREOR_VEC-ORRV#0,ADDSUBL_VEC-SADDL#2,ADDSUBL_VEC-SSUBL#2,ADDSUBW_VEC-SADDW#2,ADDSUBW_VEC-SSUBW#2,ADDSUBHN_VEC-ADDHN#2,ADDSUBHN_VEC-SUBHN#2,ABDL_VEC-SABAL#2,ABDL_VEC-SABDL#2,MULL_VEC-SMLAL#2,MULL_VEC-SMLSL#2,MULL_VEC-SMULL#2,SQDMULL_VEC-SQDMLAL#1,SQDMULL_VEC-SQDMLSL#1,SQDMULL_VEC-SQDMULL#1,FCVT_VEC-FCVTPS_VEC#0,FCVT_VEC-FCVTZS_VEC#0,FCVTN_VEC-BFCVTN#0,FRINT_VEC-FRINTP_VEC#0,FRINT_VEC-FRINTZ_VEC#0,FHM_VEC-FMLSL_VEC#0
    0x24 => return classify_impl_24(inst), // HADDSUB_VEC-SHADD#2,HADDSUB_VEC-SRHADD#2,HADDSUB_VEC-SHSUB#2,QADDSUB_VEC-SQADD#2,QADDSUB_VEC-SQSUB#2,CMGT_VEC-CMGTV#2,CMGT_VEC-CMGEV#2,CMEQ_VEC-CMTSTV#2,SHL_REG_VEC-SSHL#2,SHL_REG_VEC-SQSHL#2,SHL_REG_VEC-SRSHL#2,SHL_REG_VEC-SQRSHL#2,MINMAX_VEC-SMAX#2,MINMAX_VEC-SMIN#2,MINMAX_VEC-SMAXP#2,MINMAX_VEC-SMINP#2,ABD_VEC-SABD#2,ABD_VEC-SABA#2,ADDSUB_VEC-ADD_VEC#2,ADDP_VEC-ADDP#2,MUL_VEC-MLA_VEC#2,MUL_VEC-MUL_VEC#2,SQDMULH_VEC-SQDMULH#1,FMINMAX_VEC-FMINNM_VEC#0,FMINMAX_VEC-FMIN_VEC#0,FADDSUB_VEC-FSUB_VEC#0,FRECP_STEP_VEC-FRSQRTSV#0,FMLA_VEC-FMLSV#0,ANDOREOR_VEC-ORRV#0,ADDSUBL_VEC-SADDL#2,ADDSUBL_VEC-SSUBL#2,ADDSUBW_VEC-SADDW#2,ADDSUBW_VEC-SSUBW#2,ADDSUBHN_VEC-ADDHN#2,ADDSUBHN_VEC-SUBHN#2,ABDL_VEC-SABAL#2,ABDL_VEC-SABDL#2,MULL_VEC-SMLAL#2,MULL_VEC-SMLSL#2,MULL_VEC-SMULL#2,SQDMULL_VEC-SQDMLAL#1,SQDMULL_VEC-SQDMLSL#1,SQDMULL_VEC-SQDMULL#1,FP_HORZ_VEC-FMINNMV_FP16#0,FP_HORZ_VEC-FMINV_FP16#0,FHM_VEC-FMLSL_VEC#0
    0x25 => return classify_impl_25(inst), // FP16_3REG_VEC-FMINNM_VEC_FP16#0,FP16_3REG_VEC-FMLS_VEC_FP16#0,FP16_3REG_VEC-FSUB_VEC_FP16#0,FP16_3REG_VEC-FMIN_VEC_FP16#0,FP16_3REG_VEC-FRSQRTS_VEC_FP16#0
    0x26 => return classify_impl_26(inst), // ANDOREOR_VEC-ORNV#0,PMULL_VEC-PMULL64#0
    0x27 => return classify_impl_27(inst), // FP16_2REG_VEC-FCMGT_ZERO_VEC_FP16#0,FP16_2REG_VEC-FCMEQ_ZERO_VEC_FP16#0,FP16_2REG_VEC-FCMLT_ZERO_VEC_FP16#0,FP16_2REG_VEC-FABS_VEC_FP16#0,FP16_2REG_VEC-FRINTP_VEC_FP16#0,FP16_2REG_VEC-FRINTZ_VEC_FP16#0,FP16_2REG_VEC-FCVTPS_VEC_FP16#0,FP16_2REG_VEC-FCVTZS_VEC_FP16#0,FP16_2REG_VEC-FRECPE_VEC_FP16#0,ANDOREOR_VEC-ORNV#0,PMULL_VEC-PMULL64#0
    0x28 => return classify_impl_28(inst), // SHR_VEC_IMM-SSHR#0,SHR_VEC_IMM-SSRA#0,SHR_VEC_IMM-SRSHR#0,SHR_VEC_IMM-SRSRA#0,QSHL_VEC_IMM-SQSHL_IMM#0,SHRN_VEC_IMM-SHRN#0,SHRN_VEC_IMM-RSHRN#0,SHRN_VEC_IMM-SQSHRN#0,SHRN_VEC_IMM-SQRSHRN#0,SHLL_VEC_IMM-SSHLL#0,SHIFT_VEC_IMM-SHL#0,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0,SIMD_IMM-MOVI32#0,SIMD_IMM-MOVI32#1,SIMD_IMM-MOVI32#2,SIMD_IMM-MOVI32#3,SIMD_IMM-ORRI32#0,SIMD_IMM-ORRI32#1,SIMD_IMM-ORRI32#2,SIMD_IMM-ORRI32#3,SIMD_IMM-MOVI16#0,SIMD_IMM-MOVI16#1,SIMD_IMM-ORRI16#0,SIMD_IMM-ORRI16#1,SIMD_IMM-MOVI32_MSL#0,SIMD_IMM-MOVI32_MSL#1,SIMD_IMM-MOVI8#0,SIMD_IMM-FMOV32#0,SIMD_IMM-FMOV16#0
    0x29 => return classify_impl_29(inst), // SHR_VEC_IMM-SSHR#1,SHR_VEC_IMM-SSHR#2,SHR_VEC_IMM-SSRA#1,SHR_VEC_IMM-SSRA#2,SHR_VEC_IMM-SRSHR#1,SHR_VEC_IMM-SRSHR#2,SHR_VEC_IMM-SRSRA#1,SHR_VEC_IMM-SRSRA#2,QSHL_VEC_IMM-SQSHL_IMM#1,QSHL_VEC_IMM-SQSHL_IMM#2,SHRN_VEC_IMM-SHRN#1,SHRN_VEC_IMM-SHRN#2,SHRN_VEC_IMM-RSHRN#1,SHRN_VEC_IMM-RSHRN#2,SHRN_VEC_IMM-SQSHRN#1,SHRN_VEC_IMM-SQSHRN#2,SHRN_VEC_IMM-SQRSHRN#1,SHRN_VEC_IMM-SQRSHRN#2,SHLL_VEC_IMM-SSHLL#1,SHLL_VEC_IMM-SSHLL#2,SHIFT_VEC_IMM-SHL#1,SHIFT_VEC_IMM-SHL#2,FCVT_VEC_FIXED-SCVTF_VEC_FIX_FP16#0,FCVT_VEC_FIXED-SCVTF_VEC_FIX_FP16#1,FCVT_VEC_FIXED-FCVTZS_VEC_FIX_FP16#0,FCVT_VEC_FIXED-FCVTZS_VEC_FIX_FP16#1,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
    0x2a => return classify_impl_2a(inst), // SHR_VEC_IMM-SSHR#3,SHR_VEC_IMM-SSHR#4,SHR_VEC_IMM-SSRA#3,SHR_VEC_IMM-SSRA#4,SHR_VEC_IMM-SRSHR#3,SHR_VEC_IMM-SRSHR#4,SHR_VEC_IMM-SRSRA#3,SHR_VEC_IMM-SRSRA#4,QSHL_VEC_IMM-SQSHL_IMM#3,QSHL_VEC_IMM-SQSHL_IMM#4,SHRN_VEC_IMM-SHRN#3,SHRN_VEC_IMM-SHRN#4,SHRN_VEC_IMM-RSHRN#3,SHRN_VEC_IMM-RSHRN#4,SHRN_VEC_IMM-SQSHRN#3,SHRN_VEC_IMM-SQSHRN#4,SHRN_VEC_IMM-SQRSHRN#3,SHRN_VEC_IMM-SQRSHRN#4,SHLL_VEC_IMM-SSHLL#3,SHLL_VEC_IMM-SSHLL#4,SHIFT_VEC_IMM-SHL#3,SHIFT_VEC_IMM-SHL#4,FCVT_VEC_FIXED-SCVTF_VEC_FIX#0,FCVT_VEC_FIXED-SCVTF_VEC_FIX#1,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#0,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#1,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
    0x2b => return classify_impl_2b(inst), // SHR_VEC_IMM-SSHR#5,SHR_VEC_IMM-SSHR#6,SHR_VEC_IMM-SSRA#5,SHR_VEC_IMM-SSRA#6,SHR_VEC_IMM-SRSHR#5,SHR_VEC_IMM-SRSHR#6,SHR_VEC_IMM-SRSRA#5,SHR_VEC_IMM-SRSRA#6,QSHL_VEC_IMM-SQSHL_IMM#5,QSHL_VEC_IMM-SQSHL_IMM#6,SHRN_VEC_IMM-SHRN#5,SHRN_VEC_IMM-SHRN#6,SHRN_VEC_IMM-RSHRN#5,SHRN_VEC_IMM-RSHRN#6,SHRN_VEC_IMM-SQSHRN#5,SHRN_VEC_IMM-SQSHRN#6,SHRN_VEC_IMM-SQRSHRN#5,SHRN_VEC_IMM-SQRSHRN#6,SHLL_VEC_IMM-SSHLL#5,SHLL_VEC_IMM-SSHLL#6,SHIFT_VEC_IMM-SHL#5,SHIFT_VEC_IMM-SHL#6,FCVT_VEC_FIXED-SCVTF_VEC_FIX#2,FCVT_VEC_FIXED-SCVTF_VEC_FIX#3,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#2,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#3,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
    0x2c => return classify_impl_2c(inst), // MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL_ELEM#0,MULL_ELEM-SQDMLAL_ELEM#0,MULL_ELEM-SMLSL_ELEM#0,MULL_ELEM-SQDMLSL_ELEM#0,MULL_ELEM-SMULL_ELEM#0,MULL_ELEM-SQDMULL_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
    0x2d => return classify_impl_2d(inst), // MUL_ELEM-MUL_ELEM#1,MUL_ELEM-SQDMULH_ELEM#1,MUL_ELEM-SQRDMULH_ELEM#1,MULL_ELEM-SMLAL_ELEM#1,MULL_ELEM-SQDMLAL_ELEM#1,MULL_ELEM-SMLSL_ELEM#1,MULL_ELEM-SQDMLSL_ELEM#1,MULL_ELEM-SMULL_ELEM#1,MULL_ELEM-SQDMULL_ELEM#1,FMUL_ELEM-FMLA_ELEM#0,FMUL_ELEM-FMLS_ELEM#0,FMUL_ELEM-FMUL_ELEM#0,DOT_ELEM-SDOT_ELEM#0,DOT_ELEM-USDOT_ELEM#0,FHM_ELEM-FMLAL_ELEM#0,FHM_ELEM-FMLSL_ELEM#0
    0x2e => return classify_impl_2e(inst), // MUL_ELEM-MUL_ELEM#1,MUL_ELEM-SQDMULH_ELEM#1,MUL_ELEM-SQRDMULH_ELEM#1,MULL_ELEM-SMLAL_ELEM#1,MULL_ELEM-SQDMLAL_ELEM#1,MULL_ELEM-SMLSL_ELEM#1,MULL_ELEM-SQDMLSL_ELEM#1,MULL_ELEM-SMULL_ELEM#1,MULL_ELEM-SQDMULL_ELEM#1,FMUL_ELEM-FMLA_ELEM#1,FMUL_ELEM-FMLS_ELEM#1,FMUL_ELEM-FMUL_ELEM#1,DOT_ELEM-SDOT_ELEM#0,DOT_ELEM-USDOT_ELEM#0,FHM_ELEM-FMLAL_ELEM#0,FHM_ELEM-FMLSL_ELEM#0
    0x2f => return classify_impl_2f(inst), // FMLAL_ELEM-BFMLALB_ELEM#0
    0x30 => return classify_impl_30(inst), // MINMAX_IMM-SMAX_GP_IMM#0,MINMAX_IMM-UMAX_GP_IMM#0,MINMAX_IMM-SMIN_GP_IMM#0,MINMAX_IMM-UMIN_GP_IMM#0
    0x31 => return classify_impl_31(inst), // ANDOREOR_IMM-AND_IMM#0,ANDOREOR_IMM-AND_IMM#1,ANDOREOR_IMM-AND_IMM#2,ANDOREOR_IMM-AND_IMM#3,ANDOREOR_IMM-AND_IMM#4,ANDOREOR_IMM-AND_IMM#5,ANDOREOR_IMM-AND_IMM#6,ANDOREOR_IMM-AND_IMM#7,ANDOREOR_IMM-AND_IMM#8,ANDOREOR_IMM-AND_IMM#9,ANDOREOR_IMM-AND_IMM#10,ANDOREOR_IMM-AND_IMM#11,ANDOREOR_IMM-AND_IMM#12,ANDOREOR_IMM-AND_IMM#13,ANDOREOR_IMM-AND_IMM#14,ANDOREOR_IMM-AND_IMM#15,ANDOREOR_IMM-AND_IMM#16,ANDOREOR_IMM-AND_IMM#17,ANDOREOR_IMM-AND_IMM#18,ANDOREOR_IMM-AND_IMM#19,ANDOREOR_IMM-AND_IMM#20,ANDOREOR_IMM-AND_IMM#21,ANDOREOR_IMM-AND_IMM#22,ANDOREOR_IMM-AND_IMM#23,ANDOREOR_IMM-AND_IMM#24,ANDOREOR_IMM-AND_IMM#25,ANDOREOR_IMM-AND_IMM#26,ANDOREOR_IMM-AND_IMM#27,ANDOREOR_IMM-AND_IMM#28,ANDOREOR_IMM-AND_IMM#29,ANDOREOR_IMM-AND_IMM#30,ANDOREOR_IMM-AND_IMM#31,ANDOREOR_IMM-AND_IMM#32,ANDOREOR_IMM-AND_IMM#33,ANDOREOR_IMM-AND_IMM#34,ANDOREOR_IMM-AND_IMM#35,ANDOREOR_IMM-AND_IMM#36,ANDOREOR_IMM-AND_IMM#37,ANDOREOR_IMM-AND_IMM#38,ANDOREOR_IMM-AND_IMM#39,ANDOREOR_IMM-AND_IMM#40,ANDOREOR_IMM-AND_IMM#41,ANDOREOR_IMM-AND_IMM#42,ANDOREOR_IMM-AND_IMM#43,ANDOREOR_IMM-AND_IMM#44,ANDOREOR_IMM-AND_IMM#45,ANDOREOR_IMM-AND_IMM#46,ANDOREOR_IMM-AND_IMM#47,ANDOREOR_IMM-AND_IMM#48,ANDOREOR_IMM-AND_IMM#49,ANDOREOR_IMM-AND_IMM#50,ANDOREOR_IMM-AND_IMM#51,ANDOREOR_IMM-AND_IMM#52,ANDOREOR_IMM-AND_IMM#53,ANDOREOR_IMM-AND_IMM#54,ANDOREOR_IMM-AND_IMM#55,ANDOREOR_IMM-AND_IMM#56
    0x32 => return classify_impl_32(inst), // BFM-SBFM#0
    0x33 => return classify_impl_33(inst), // EXTR-EXTR#0
    0x34 => return classify_impl_34(inst), // RCPCU-STLURB#0,CPY-CPYFP#0,CPY-CPYFPWT#0,CPY-CPYFPRT#0,CPY-CPYFPT#0,CPY-CPYFPWN#0,CPY-CPYFPWTWN#0,CPY-CPYFPRTWN#0,CPY-CPYFPTWN#0,CPY-CPYFPRN#0,CPY-CPYFPWTRN#0,CPY-CPYFPRTRN#0,CPY-CPYFPTRN#0,CPY-CPYFPN#0,CPY-CPYFPWTN#0,CPY-CPYFPRTN#0,CPY-CPYFPTN#0
    0x35 => return classify_impl_35(inst), // RCPCU-LDAPURB#0,CPY-CPYFM#0,CPY-CPYFMWT#0,CPY-CPYFMRT#0,CPY-CPYFMT#0,CPY-CPYFMWN#0,CPY-CPYFMWTWN#0,CPY-CPYFMRTWN#0,CPY-CPYFMTWN#0,CPY-CPYFMRN#0,CPY-CPYFMWTRN#0,CPY-CPYFMRTRN#0,CPY-CPYFMTRN#0,CPY-CPYFMN#0,CPY-CPYFMWTN#0,CPY-CPYFMRTN#0,CPY-CPYFMTN#0
    0x36 => return classify_impl_36(inst), // RCPCU-LDAPURSB#0,CPY-CPYFE#0,CPY-CPYFEWT#0,CPY-CPYFERT#0,CPY-CPYFET#0,CPY-CPYFEWN#0,CPY-CPYFEWTWN#0,CPY-CPYFERTWN#0,CPY-CPYFETWN#0,CPY-CPYFERN#0,CPY-CPYFEWTRN#0,CPY-CPYFERTRN#0,CPY-CPYFETRN#0,CPY-CPYFEN#0,CPY-CPYFEWTN#0,CPY-CPYFERTN#0,CPY-CPYFETN#0
    0x37 => return classify_impl_37(inst), // RCPCU-LDAPURSBW#0,SET-SETP#0,SET-SETPT#0,SET-SETPN#0,SET-SETPTN#0,SET-SETM#0,SET-SETMT#0,SET-SETMN#0,SET-SETMTN#0,SET-SETE#0,SET-SETET#0,SET-SETEN#0,SET-SETETN#0
    0x38 => return classify_impl_38(inst), // ADCSBC-ADC#0
    0x39 => return classify_impl_39(inst), // CSEL-CSEL#0,CSEL-CSINC#0
    0x3a => return classify_impl_3a(inst), // SHIFTV-LSLV#0,SHIFTV-LSRV#0,SHIFTV-ASRV#0,SHIFTV-RORV#0,MINMAX_REG-SMAX_GP#0,MINMAX_REG-UMAX_GP#0,MINMAX_REG-SMIN_GP#0,MINMAX_REG-UMIN_GP#0,DIV-UDIV#0,DIV-SDIV#0,CRC32-CRC32B#0,CRC32-CRC32H#0,CRC32-CRC32W#0,CRC32-CRC32CB#0,CRC32-CRC32CH#0,CRC32-CRC32CW#0
    0x3b => return classify_impl_3b(inst), // MUL-MADD#0,MUL-MSUB#0
    0x3c => return classify_impl_3c(inst), // CPY-CPYP#0,CPY-CPYPWT#0,CPY-CPYPRT#0,CPY-CPYPT#0,CPY-CPYPWN#0,CPY-CPYPWTWN#0,CPY-CPYPRTWN#0,CPY-CPYPTWN#0,CPY-CPYPRN#0,CPY-CPYPWTRN#0,CPY-CPYPRTRN#0,CPY-CPYPTRN#0,CPY-CPYPN#0,CPY-CPYPWTN#0,CPY-CPYPRTN#0,CPY-CPYPTN#0
    0x3d => return classify_impl_3d(inst), // CPY-CPYM#0,CPY-CPYMWT#0,CPY-CPYMRT#0,CPY-CPYMT#0,CPY-CPYMWN#0,CPY-CPYMWTWN#0,CPY-CPYMRTWN#0,CPY-CPYMTWN#0,CPY-CPYMRN#0,CPY-CPYMWTRN#0,CPY-CPYMRTRN#0,CPY-CPYMTRN#0,CPY-CPYMN#0,CPY-CPYMWTN#0,CPY-CPYMRTN#0,CPY-CPYMTN#0
    0x3e => return classify_impl_3e(inst), // CPY-CPYE#0,CPY-CPYEWT#0,CPY-CPYERT#0,CPY-CPYET#0,CPY-CPYEWN#0,CPY-CPYEWTWN#0,CPY-CPYERTWN#0,CPY-CPYETWN#0,CPY-CPYERN#0,CPY-CPYEWTRN#0,CPY-CPYERTRN#0,CPY-CPYETRN#0,CPY-CPYEN#0,CPY-CPYEWTN#0,CPY-CPYERTN#0,CPY-CPYETN#0
    0x3f => return classify_impl_3f(inst), // SET-SETGP#0,SET-SETGPT#0,SET-SETGPN#0,SET-SETGPTN#0,SET-SETGM#0,SET-SETGMT#0,SET-SETGMN#0,SET-SETGMTN#0,SET-SETGE#0,SET-SETGET#0,SET-SETGEN#0,SET-SETGETN#0
    0x40 => return classify_impl_40(inst), // FCVT_FROMFIXED-SCVTF_FIX#0,FCVT_FROMFIXED-UCVTF_FIX#0
    0x41 => return classify_impl_41(inst), // FCVT_TOFIXED-FCVTZS_FIX#0,FCVT_TOFIXED-FCVTZU_FIX#0
    0x42 => return classify_impl_42(inst), // FCVT_TOINT-FCVTNS#0,FCVT_TOINT-FCVTNU#0,FCVT_TOINT-FCVTAS#0,FCVT_TOINT-FCVTAU#0,FCVT_TOINT-FCVTPS#0,FCVT_TOINT-FCVTPU#0,FCVT_FROMINT-SCVTF#0,FCVT_FROMINT-UCVTF#0,FMOV_TOGP-FMOV_TOGP#0,FMOV_FROMGP-FMOV_FROM#0,FCVT_FP-FCVT#0,FCVT_FP-FCVT#1,FRINT-FRINTN#0,FRINT-FRINTP#0,FRINT-FRINTM#0,FRINT-FRINTZ#0,FRINT-FRINTA#0,FRINT-FRINTX#0,FRINT-FRINTI#0,FRINTTS-FRINT32Z#0,FRINTTS-FRINT32X#0,FRINTTS-FRINT64Z#0,FRINTTS-FRINT64X#0,FARITH1-FMOV#0,FARITH1-FABS#0,FARITH1-FNEG#0,FARITH1-FSQRT#0,FMOV_IMM-FMOV_IMM#0,FARITH2-FMUL#0,FARITH2-FDIV#0,FARITH2-FADD#0,FARITH2-FSUB#0,FARITH2-FMAX#0,FARITH2-FMIN#0,FARITH2-FMAXNM#0,FARITH2-FMINNM#0,FARITH2-FNMUL#0,FCMP-FCMP#0,FCMP-FCMP_ZERO#0,FCMP-FCMPE#0,FCMP-FCMPE_ZERO#0,FCCMP-FCCMP#0,FCCMP-FCCMPE#0,FCSEL-FCSEL#0
    0x43 => return classify_impl_43(inst), // FCVT_TOINT-FCVTMS#0,FCVT_TOINT-FCVTMU#0,FCVT_TOINT-FCVTZS#0,FCVT_TOINT-FCVTZU#0,FMOV_IMM-FMOV_IMM#0,FARITH2-FMUL#0,FARITH2-FDIV#0,FARITH2-FADD#0,FARITH2-FSUB#0,FARITH2-FMAX#0,FARITH2-FMIN#0,FARITH2-FMAXNM#0,FARITH2-FMINNM#0,FARITH2-FNMUL#0,FCMP-FCMP#0,FCMP-FCMP_ZERO#0,FCMP-FCMPE#0,FCMP-FCMPE_ZERO#0,FCCMP-FCCMP#0,FCCMP-FCCMPE#0,FCSEL-FCSEL#0
    0x44 => return classify_impl_44(inst), // FCVT_FROMFIXED-SCVTF_FIX#1,FCVT_FROMFIXED-UCVTF_FIX#1
    0x45 => return classify_impl_45(inst), // FCVT_TOFIXED-FCVTZS_FIX#1,FCVT_TOFIXED-FCVTZU_FIX#1
    0x46 => return classify_impl_46(inst), // FCVT_TOINT-FCVTNS#1,FCVT_TOINT-FCVTNU#1,FCVT_TOINT-FCVTAS#1,FCVT_TOINT-FCVTAU#1,FCVT_TOINT-FCVTPS#1,FCVT_TOINT-FCVTPU#1,FCVT_FROMINT-SCVTF#1,FCVT_FROMINT-UCVTF#1,FCVT_FP-FCVT#2,FCVT_FP-FCVT#3,FCVT_FP-BFCVT#0,FRINT-FRINTN#1,FRINT-FRINTP#1,FRINT-FRINTM#1,FRINT-FRINTZ#1,FRINT-FRINTA#1,FRINT-FRINTX#1,FRINT-FRINTI#1,FRINTTS-FRINT32Z#1,FRINTTS-FRINT32X#1,FRINTTS-FRINT64Z#1,FRINTTS-FRINT64X#1,FARITH1-FMOV#1,FARITH1-FABS#1,FARITH1-FNEG#1,FARITH1-FSQRT#1,FMOV_IMM-FMOV_IMM#1,FARITH2-FMUL#1,FARITH2-FDIV#1,FARITH2-FADD#1,FARITH2-FSUB#1,FARITH2-FMAX#1,FARITH2-FMIN#1,FARITH2-FMAXNM#1,FARITH2-FMINNM#1,FARITH2-FNMUL#1,FCMP-FCMP#1,FCMP-FCMP_ZERO#1,FCMP-FCMPE#1,FCMP-FCMPE_ZERO#1,FCCMP-FCCMP#1,FCCMP-FCCMPE#1,FCSEL-FCSEL#1
    0x47 => return classify_impl_47(inst), // FCVT_TOINT-FCVTMS#1,FCVT_TOINT-FCVTMU#1,FCVT_TOINT-FCVTZS#1,FCVT_TOINT-FCVTZU#1,FJCVTZS-FJCVTZS#0,FMOV_IMM-FMOV_IMM#1,FARITH2-FMUL#1,FARITH2-FDIV#1,FARITH2-FADD#1,FARITH2-FSUB#1,FARITH2-FMAX#1,FARITH2-FMIN#1,FARITH2-FMAXNM#1,FARITH2-FMINNM#1,FARITH2-FNMUL#1,FCMP-FCMP#1,FCMP-FCMP_ZERO#1,FCMP-FCMPE#1,FCMP-FCMPE_ZERO#1,FCCMP-FCCMP#1,FCCMP-FCCMPE#1,FCSEL-FCSEL#1
    0x48 => return classify_impl_48(inst), // FCVT_FROMFIXED-SCVTF_FIX_FP16#0,FCVT_FROMFIXED-UCVTF_FIX_FP16#0
    0x49 => return classify_impl_49(inst), // FCVT_TOFIXED-FCVTZS_FIX_FP16#0,FCVT_TOFIXED-FCVTZU_FIX_FP16#0
    0x4a => return classify_impl_4a(inst), // FCVT_TOINT-FCVTNS_FP16#0,FCVT_TOINT-FCVTNU_FP16#0,FCVT_TOINT-FCVTAS_FP16#0,FCVT_TOINT-FCVTAU_FP16#0,FCVT_TOINT-FCVTPS_FP16#0,FCVT_TOINT-FCVTPU_FP16#0,FCVT_FROMINT-SCVTF_FP16#0,FCVT_FROMINT-UCVTF_FP16#0,FMOV_TOGP-FMOV_TOGP_FP16#0,FMOV_FROMGP-FMOV_FROM_FP16#0,FCVT_FP-FCVT#4,FCVT_FP-FCVT#5,FRINT-FRINTN_FP16#0,FRINT-FRINTP_FP16#0,FRINT-FRINTM_FP16#0,FRINT-FRINTZ_FP16#0,FRINT-FRINTA_FP16#0,FRINT-FRINTX_FP16#0,FRINT-FRINTI_FP16#0,FARITH1-FMOV_FP16#0,FARITH1-FABS_FP16#0,FARITH1-FNEG_FP16#0,FARITH1-FSQRT_FP16#0,FMOV_IMM-FMOV_IMM_FP16#0,FARITH2-FMUL_FP16#0,FARITH2-FDIV_FP16#0,FARITH2-FADD_FP16#0,FARITH2-FSUB_FP16#0,FARITH2-FMAX_FP16#0,FARITH2-FMIN_FP16#0,FARITH2-FMAXNM_FP16#0,FARITH2-FMINNM_FP16#0,FARITH2-FNMUL_FP16#0,FCMP-FCMP_FP16#0,FCMP-FCMP_FP16_ZERO#0,FCMP-FCMPE_FP16#0,FCMP-FCMPE_FP16_ZERO#0,FCCMP-FCCMP_FP16#0,FCCMP-FCCMPE_FP16#0,FCSEL-FCSEL_FP16#0
    0x4b => return classify_impl_4b(inst), // FCVT_TOINT-FCVTMS_FP16#0,FCVT_TOINT-FCVTMU_FP16#0,FCVT_TOINT-FCVTZS_FP16#0,FCVT_TOINT-FCVTZU_FP16#0,FMOV_IMM-FMOV_IMM_FP16#0,FARITH2-FMUL_FP16#0,FARITH2-FDIV_FP16#0,FARITH2-FADD_FP16#0,FARITH2-FSUB_FP16#0,FARITH2-FMAX_FP16#0,FARITH2-FMIN_FP16#0,FARITH2-FMAXNM_FP16#0,FARITH2-FMINNM_FP16#0,FARITH2-FNMUL_FP16#0,FCMP-FCMP_FP16#0,FCMP-FCMP_FP16_ZERO#0,FCMP-FCMPE_FP16#0,FCMP-FCMPE_FP16_ZERO#0,FCCMP-FCCMP_FP16#0,FCCMP-FCCMPE_FP16#0,FCSEL-FCSEL_FP16#0
    0x4c => return classify_impl_4c(inst), // FMADD-FMADD#0,FMADD-FMSUB#0
    0x4d => return classify_impl_4d(inst), // FMADD-FNMADD#0,FMADD-FNMSUB#0
    0x4e => return classify_impl_4e(inst), // FMADD-FMADD#1,FMADD-FMSUB#1
    0x4f => return classify_impl_4f(inst), // FMADD-FNMADD#1,FMADD-FNMSUB#1
    0x50 => return classify_impl_50(inst), // FMADD-FMADD_FP16#0,FMADD-FMSUB_FP16#0
    0x51 => return classify_impl_51(inst), // FMADD-FNMADD_FP16#0,FMADD-FNMSUB_FP16#0
    0x52 => return classify_impl_52(inst), // ANDOREOR_SHIFT-ORR_SHIFT#0
    0x53 => return classify_impl_53(inst), // ANDOREOR_SHIFT-ORN_SHIFT#0
    0x54 => return classify_impl_54(inst), // ADDSUB_SHIFT-ADDS_SHIFT#0
    0x55 => return classify_impl_55(inst), // ADDSUB_EXT-ADDS_EXT#0,ADDSUB_EXT-ADDS_EXT#1,ADDSUB_EXT-ADDS_EXT#2,ADDSUB_EXT-ADDS_EXT#3,ADDSUB_EXT-ADDS_EXT#4
    0x56 => return classify_impl_56(inst), // ADDSUB_SHIFT-ADDS_SHIFT#1
    0x57 => return classify_impl_57(inst), // ADDSUB_SHIFT-ADDS_SHIFT#2
    0x58 => return classify_impl_58(inst), // EXT-EXT#0
    0x59 => return classify_impl_59(inst), // HADDSUB_VEC-UHADD#0,HADDSUB_VEC-URHADD#0,HADDSUB_VEC-UHSUB#0,QADDSUB_VEC-UQADD#0,QADDSUB_VEC-UQSUB#0,CMGT_VEC-CMHIV#0,CMGT_VEC-CMHSV#0,CMEQ_VEC-CMEQV#0,CMZERO_VEC-CMGE_ZERO_VEC#0,CMZERO_VEC-CMLE_ZERO_VEC#0,ARITH1_VEC-USQADD_VEC#0,ARITH1_VEC-SQNEG_VEC#0,ARITH1_VEC-NEG_VEC#0,ADDLP_VEC-UADDLP#0,ADDLP_VEC-UADALP#0,CLZ_VEC-CLZ_VEC#0,BIT_VEC-NOT_VEC#0,REV_VEC-REV32_VEC#0,XTN_VEC-SQXTUN_VEC#0,XTN_VEC-UQXTN_VEC#0,SHL_REG_VEC-USHL#0,SHL_REG_VEC-UQSHL#0,SHL_REG_VEC-URSHL#0,SHL_REG_VEC-UQRSHL#0,MINMAX_VEC-UMAX#0,MINMAX_VEC-UMIN#0,MINMAX_VEC-UMAXP#0,MINMAX_VEC-UMINP#0,ABD_VEC-UABD#0,ABD_VEC-UABA#0,ADDSUB_VEC-SUB_VEC#0,MUL_VEC-MLS_VEC#0,MUL_VEC-PMUL_VEC#0,FMINMAX_VEC-FMAXNMP_VEC#0,FMINMAX_VEC-FMAXP_VEC#0,FCMP_REG_VEC-FCMGE_VEC#0,FCMP_REG_VEC-FACGE_VEC#0,FADDSUB_VEC-FADDP_VEC#0,FMUL_VEC-FMULV#0,FDIV_VEC-FDIVV#0,ANDOREOR_VEC-EORV#0,ADDSUBL_VEC-UADDL#0,ADDSUBL_VEC-USUBL#0,ADDSUBW_VEC-UADDW#0,ADDSUBW_VEC-USUBW#0,ADDSUBHN_VEC-RADDHN#0,ADDSUBHN_VEC-RSUBHN#0,ABDL_VEC-UABAL#0,ABDL_VEC-UABDL#0,MULL_VEC-UMLAL#0,MULL_VEC-UMLSL#0,MULL_VEC-UMULL#0,SHLL_VEC_ESZ-SHLL_VEC_ESZ#0,FCVT_VEC-FCVTNU_VEC#0,FCVT_VEC-FCVTMU_VEC#0,FCVT_VEC-FCVTAU_VEC#0,FCVT_FROMINT_VEC-UCVTF_VEC#0,FRINT_VEC-FRINTA_VEC#0,FRINT_VEC-FRINTX_VEC#0,FRINTTS_VEC-FRINT32X_VEC#0,FRINTTS_VEC-FRINT64X_VEC#0,FHM_VEC-FMLAL2_VEC#0
    0x5a => return classify_impl_5a(inst), // HADDSUB_VEC-UHADD#0,HADDSUB_VEC-URHADD#0,HADDSUB_VEC-UHSUB#0,QADDSUB_VEC-UQADD#0,QADDSUB_VEC-UQSUB#0,CMGT_VEC-CMHIV#0,CMGT_VEC-CMHSV#0,CMEQ_VEC-CMEQV#0,SHL_REG_VEC-USHL#0,SHL_REG_VEC-UQSHL#0,SHL_REG_VEC-URSHL#0,SHL_REG_VEC-UQRSHL#0,MINMAX_VEC-UMAX#0,MINMAX_VEC-UMIN#0,MINMAX_VEC-UMAXP#0,MINMAX_VEC-UMINP#0,ABD_VEC-UABD#0,ABD_VEC-UABA#0,ADDSUB_VEC-SUB_VEC#0,MUL_VEC-MLS_VEC#0,MUL_VEC-PMUL_VEC#0,FMINMAX_VEC-FMAXNMP_VEC#0,FMINMAX_VEC-FMAXP_VEC#0,FCMP_REG_VEC-FCMGE_VEC#0,FCMP_REG_VEC-FACGE_VEC#0,FADDSUB_VEC-FADDP_VEC#0,FMUL_VEC-FMULV#0,FDIV_VEC-FDIVV#0,ANDOREOR_VEC-EORV#0,ADDSUBL_VEC-UADDL#0,ADDSUBL_VEC-USUBL#0,ADDSUBW_VEC-UADDW#0,ADDSUBW_VEC-USUBW#0,ADDSUBHN_VEC-RADDHN#0,ADDSUBHN_VEC-RSUBHN#0,ABDL_VEC-UABAL#0,ABDL_VEC-UABDL#0,MULL_VEC-UMLAL#0,MULL_VEC-UMLSL#0,MULL_VEC-UMULL#0,INT_HORZ_VEC-UADDLV#0,INT_HORZ_VEC-UMAXV#0,INT_HORZ_VEC-UMINV#0,FHM_VEC-FMLAL2_VEC#0
    0x5b => return classify_impl_5b(inst), // FP16_3REG_VEC-FMAXNMP_VEC_FP16#0,FP16_3REG_VEC-FADDP_VEC_FP16#0,FP16_3REG_VEC-FMUL_VEC_FP16#0,FP16_3REG_VEC-FCMGE_VEC_FP16#0,FP16_3REG_VEC-FACGE_VEC_FP16#0,FP16_3REG_VEC-FMAXP_VEC_FP16#0,FP16_3REG_VEC-FDIV_VEC_FP16#0,SQRDMLAH_VEC-SQRDMLAH#0,SQRDMLAH_VEC-SQRDMLSH#0,DOT_VEC-BFDOT_VEC#0,FCMLA_VEC-FCMLA_VEC#0,FCMLA_VEC-FCMLA_VEC#1,FCMLA_VEC-FCADD_VEC#0
    0x5c => return classify_impl_5c(inst), // HADDSUB_VEC-UHADD#1,HADDSUB_VEC-URHADD#1,HADDSUB_VEC-UHSUB#1,QADDSUB_VEC-UQADD#1,QADDSUB_VEC-UQSUB#1,CMGT_VEC-CMHIV#1,CMGT_VEC-CMHSV#1,CMEQ_VEC-CMEQV#1,CMZERO_VEC-CMGE_ZERO_VEC#1,CMZERO_VEC-CMLE_ZERO_VEC#1,ARITH1_VEC-USQADD_VEC#1,ARITH1_VEC-SQNEG_VEC#1,ARITH1_VEC-NEG_VEC#1,ADDLP_VEC-UADDLP#1,ADDLP_VEC-UADALP#1,CLZ_VEC-CLZ_VEC#1,BIT_VEC-RBIT_VEC#0,REV_VEC-REV32_VEC#1,XTN_VEC-SQXTUN_VEC#1,XTN_VEC-UQXTN_VEC#1,SHL_REG_VEC-USHL#1,SHL_REG_VEC-UQSHL#1,SHL_REG_VEC-URSHL#1,SHL_REG_VEC-UQRSHL#1,MINMAX_VEC-UMAX#1,MINMAX_VEC-UMIN#1,MINMAX_VEC-UMAXP#1,MINMAX_VEC-UMINP#1,ABD_VEC-UABD#1,ABD_VEC-UABA#1,ADDSUB_VEC-SUB_VEC#1,MUL_VEC-MLS_VEC#1,SQDMULH_VEC-SQRDMULH#0,ANDOREOR_VEC-BSLV#0,ADDSUBL_VEC-UADDL#1,ADDSUBL_VEC-USUBL#1,ADDSUBW_VEC-UADDW#1,ADDSUBW_VEC-USUBW#1,ADDSUBHN_VEC-RADDHN#1,ADDSUBHN_VEC-RSUBHN#1,ABDL_VEC-UABAL#1,ABDL_VEC-UABDL#1,MULL_VEC-UMLAL#1,MULL_VEC-UMLSL#1,MULL_VEC-UMULL#1,SHLL_VEC_ESZ-SHLL_VEC_ESZ#1,FCVTN_VEC-FCVTXN#0
    0x5d => return classify_impl_5d(inst), // HADDSUB_VEC-UHADD#1,HADDSUB_VEC-URHADD#1,HADDSUB_VEC-UHSUB#1,QADDSUB_VEC-UQADD#1,QADDSUB_VEC-UQSUB#1,CMGT_VEC-CMHIV#1,CMGT_VEC-CMHSV#1,CMEQ_VEC-CMEQV#1,SHL_REG_VEC-USHL#1,SHL_REG_VEC-UQSHL#1,SHL_REG_VEC-URSHL#1,SHL_REG_VEC-UQRSHL#1,MINMAX_VEC-UMAX#1,MINMAX_VEC-UMIN#1,MINMAX_VEC-UMAXP#1,MINMAX_VEC-UMINP#1,ABD_VEC-UABD#1,ABD_VEC-UABA#1,ADDSUB_VEC-SUB_VEC#1,MUL_VEC-MLS_VEC#1,SQDMULH_VEC-SQRDMULH#0,FP16_2REG_VEC-FRINTA_VEC_FP16#0,FP16_2REG_VEC-FRINTX_VEC_FP16#0,FP16_2REG_VEC-FCVTNU_VEC_FP16#0,FP16_2REG_VEC-FCVTMU_VEC_FP16#0,FP16_2REG_VEC-FCVTAU_VEC_FP16#0,FP16_2REG_VEC-UCVTF_VEC_FP16#0,ANDOREOR_VEC-BSLV#0,ADDSUBL_VEC-UADDL#1,ADDSUBL_VEC-USUBL#1,ADDSUBW_VEC-UADDW#1,ADDSUBW_VEC-USUBW#1,ADDSUBHN_VEC-RADDHN#1,ADDSUBHN_VEC-RSUBHN#1,ABDL_VEC-UABAL#1,ABDL_VEC-UABDL#1,MULL_VEC-UMLAL#1,MULL_VEC-UMLSL#1,MULL_VEC-UMULL#1,INT_HORZ_VEC-UADDLV#1,INT_HORZ_VEC-UMAXV#1,INT_HORZ_VEC-UMINV#1
    0x5e => return classify_impl_5e(inst), // SQRDMLAH_VEC-SQRDMLAH#1,SQRDMLAH_VEC-SQRDMLSH#1,DOT_VEC-UDOT_VEC#0,FCMLA_VEC-FCMLA_VEC#2,FCMLA_VEC-FCMLA_VEC#3,FCMLA_VEC-FCADD_VEC#1
    0x5f => return classify_impl_5f(inst), // HADDSUB_VEC-UHADD#2,HADDSUB_VEC-URHADD#2,HADDSUB_VEC-UHSUB#2,QADDSUB_VEC-UQADD#2,QADDSUB_VEC-UQSUB#2,CMGT_VEC-CMHIV#2,CMGT_VEC-CMHSV#2,CMEQ_VEC-CMEQV#2,CMZERO_VEC-CMGE_ZERO_VEC#2,CMZERO_VEC-CMLE_ZERO_VEC#2,ARITH1_VEC-USQADD_VEC#2,ARITH1_VEC-SQNEG_VEC#2,ARITH1_VEC-NEG_VEC#2,ADDLP_VEC-UADDLP#2,ADDLP_VEC-UADALP#2,CLZ_VEC-CLZ_VEC#2,XTN_VEC-SQXTUN_VEC#2,XTN_VEC-UQXTN_VEC#2,SHL_REG_VEC-USHL#2,SHL_REG_VEC-UQSHL#2,SHL_REG_VEC-URSHL#2,SHL_REG_VEC-UQRSHL#2,MINMAX_VEC-UMAX#2,MINMAX_VEC-UMIN#2,MINMAX_VEC-UMAXP#2,MINMAX_VEC-UMINP#2,ABD_VEC-UABD#2,ABD_VEC-UABA#2,ADDSUB_VEC-SUB_VEC#2,MUL_VEC-MLS_VEC#2,SQDMULH_VEC-SQRDMULH#1,FMINMAX_VEC-FMINNMP_VEC#0,FMINMAX_VEC-FMINP_VEC#0,FCMP_REG_VEC-FCMGT_VEC#0,FCMP_REG_VEC-FACGT_VEC#0,FCMP_ZERO_VEC-FCMGE_ZERO_VEC#0,FCMP_ZERO_VEC-FCMLE_ZERO_VEC#0,FARITH1_VEC-FNEG_VEC#0,FARITH1_VEC-FSQRT_VEC#0,FADDSUB_VEC-FABD_VEC#0,FRECP_VEC-URSQRTE_VEC#0,FRECP_VEC-FRSQRTE_VEC#0,ANDOREOR_VEC-BITV#0,ADDSUBL_VEC-UADDL#2,ADDSUBL_VEC-USUBL#2,ADDSUBW_VEC-UADDW#2,ADDSUBW_VEC-USUBW#2,ADDSUBHN_VEC-RADDHN#2,ADDSUBHN_VEC-RSUBHN#2,ABDL_VEC-UABAL#2,ABDL_VEC-UABDL#2,MULL_VEC-UMLAL#2,MULL_VEC-UMLSL#2,MULL_VEC-UMULL#2,SHLL_VEC_ESZ-SHLL_VEC_ESZ#2,FCVT_VEC-FCVTPU_VEC#0,FCVT_VEC-FCVTZU_VEC#0,FRINT_VEC-FRINTI_VEC#0,FHM_VEC-FMLSL2_VEC#0
    0x60 => return classify_impl_60(inst), // HADDSUB_VEC-UHADD#2,HADDSUB_VEC-URHADD#2,HADDSUB_VEC-UHSUB#2,QADDSUB_VEC-UQADD#2,QADDSUB_VEC-UQSUB#2,CMGT_VEC-CMHIV#2,CMGT_VEC-CMHSV#2,CMEQ_VEC-CMEQV#2,SHL_REG_VEC-USHL#2,SHL_REG_VEC-UQSHL#2,SHL_REG_VEC-URSHL#2,SHL_REG_VEC-UQRSHL#2,MINMAX_VEC-UMAX#2,MINMAX_VEC-UMIN#2,MINMAX_VEC-UMAXP#2,MINMAX_VEC-UMINP#2,ABD_VEC-UABD#2,ABD_VEC-UABA#2,ADDSUB_VEC-SUB_VEC#2,MUL_VEC-MLS_VEC#2,SQDMULH_VEC-SQRDMULH#1,FMINMAX_VEC-FMINNMP_VEC#0,FMINMAX_VEC-FMINP_VEC#0,FCMP_REG_VEC-FCMGT_VEC#0,FCMP_REG_VEC-FACGT_VEC#0,FADDSUB_VEC-FABD_VEC#0,ANDOREOR_VEC-BITV#0,ADDSUBL_VEC-UADDL#2,ADDSUBL_VEC-USUBL#2,ADDSUBW_VEC-UADDW#2,ADDSUBW_VEC-USUBW#2,ADDSUBHN_VEC-RADDHN#2,ADDSUBHN_VEC-RSUBHN#2,ABDL_VEC-UABAL#2,ABDL_VEC-UABDL#2,MULL_VEC-UMLAL#2,MULL_VEC-UMLSL#2,MULL_VEC-UMULL#2,FHM_VEC-FMLSL2_VEC#0
    0x61 => return classify_impl_61(inst), // FP16_3REG_VEC-FMINNMP_VEC_FP16#0,FP16_3REG_VEC-FABD_VEC_FP16#0,FP16_3REG_VEC-FCMGT_VEC_FP16#0,FP16_3REG_VEC-FACGT_VEC_FP16#0,FP16_3REG_VEC-FMINP_VEC_FP16#0,FMLAL_VEC-BFMLALB_VEC#0
    0x62 => return classify_impl_62(inst), // ANDOREOR_VEC-BIFV#0
    0x63 => return classify_impl_63(inst), // FP16_2REG_VEC-FCMGE_ZERO_VEC_FP16#0,FP16_2REG_VEC-FCMLE_ZERO_VEC_FP16#0,FP16_2REG_VEC-FNEG_VEC_FP16#0,FP16_2REG_VEC-FRINTI_VEC_FP16#0,FP16_2REG_VEC-FCVTPU_VEC_FP16#0,FP16_2REG_VEC-FCVTZU_VEC_FP16#0,FP16_2REG_VEC-FRSQRTE_VEC_FP16#0,FP16_2REG_VEC-FSQRT_VEC_FP16#0,ANDOREOR_VEC-BIFV#0
    0x64 => return classify_impl_64(inst), // SHR_VEC_IMM-USHR#0,SHR_VEC_IMM-USRA#0,SHR_VEC_IMM-URSHR#0,SHR_VEC_IMM-URSRA#0,QSHL_VEC_IMM-SQSHLU_IMM#0,QSHL_VEC_IMM-UQSHL_IMM#0,SHRN_VEC_IMM-SQSHRUN#0,SHRN_VEC_IMM-SQRSHRUN#0,SHRN_VEC_IMM-UQSHRN#0,SHRN_VEC_IMM-UQRSHRN#0,SHLL_VEC_IMM-USHLL#0,SHIFT_VEC_IMM-SRI#0,SHIFT_VEC_IMM-SLI#0,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0,SIMD_IMM-MVNI32#0,SIMD_IMM-MVNI32#1,SIMD_IMM-MVNI32#2,SIMD_IMM-MVNI32#3,SIMD_IMM-BICI32#0,SIMD_IMM-BICI32#1,SIMD_IMM-BICI32#2,SIMD_IMM-BICI32#3,SIMD_IMM-MVNI16#0,SIMD_IMM-MVNI16#1,SIMD_IMM-BICI16#0,SIMD_IMM-BICI16#1,SIMD_IMM-MVNI32_MSL#0,SIMD_IMM-MVNI32_MSL#1,SIMD_IMM-MOVI64#0
    0x65 => return classify_impl_65(inst), // SHR_VEC_IMM-USHR#1,SHR_VEC_IMM-USHR#2,SHR_VEC_IMM-USRA#1,SHR_VEC_IMM-USRA#2,SHR_VEC_IMM-URSHR#1,SHR_VEC_IMM-URSHR#2,SHR_VEC_IMM-URSRA#1,SHR_VEC_IMM-URSRA#2,QSHL_VEC_IMM-SQSHLU_IMM#1,QSHL_VEC_IMM-SQSHLU_IMM#2,QSHL_VEC_IMM-UQSHL_IMM#1,QSHL_VEC_IMM-UQSHL_IMM#2,SHRN_VEC_IMM-SQSHRUN#1,SHRN_VEC_IMM-SQSHRUN#2,SHRN_VEC_IMM-SQRSHRUN#1,SHRN_VEC_IMM-SQRSHRUN#2,SHRN_VEC_IMM-UQSHRN#1,SHRN_VEC_IMM-UQSHRN#2,SHRN_VEC_IMM-UQRSHRN#1,SHRN_VEC_IMM-UQRSHRN#2,SHLL_VEC_IMM-USHLL#1,SHLL_VEC_IMM-USHLL#2,SHIFT_VEC_IMM-SRI#1,SHIFT_VEC_IMM-SRI#2,SHIFT_VEC_IMM-SLI#1,SHIFT_VEC_IMM-SLI#2,FCVT_VEC_FIXED-UCVTF_VEC_FIX_FP16#0,FCVT_VEC_FIXED-UCVTF_VEC_FIX_FP16#1,FCVT_VEC_FIXED-FCVTZU_VEC_FIX_FP16#0,FCVT_VEC_FIXED-FCVTZU_VEC_FIX_FP16#1,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
    0x66 => return classify_impl_66(inst), // SHR_VEC_IMM-USHR#3,SHR_VEC_IMM-USHR#4,SHR_VEC_IMM-USRA#3,SHR_VEC_IMM-USRA#4,SHR_VEC_IMM-URSHR#3,SHR_VEC_IMM-URSHR#4,SHR_VEC_IMM-URSRA#3,SHR_VEC_IMM-URSRA#4,QSHL_VEC_IMM-SQSHLU_IMM#3,QSHL_VEC_IMM-SQSHLU_IMM#4,QSHL_VEC_IMM-UQSHL_IMM#3,QSHL_VEC_IMM-UQSHL_IMM#4,SHRN_VEC_IMM-SQSHRUN#3,SHRN_VEC_IMM-SQSHRUN#4,SHRN_VEC_IMM-SQRSHRUN#3,SHRN_VEC_IMM-SQRSHRUN#4,SHRN_VEC_IMM-UQSHRN#3,SHRN_VEC_IMM-UQSHRN#4,SHRN_VEC_IMM-UQRSHRN#3,SHRN_VEC_IMM-UQRSHRN#4,SHLL_VEC_IMM-USHLL#3,SHLL_VEC_IMM-USHLL#4,SHIFT_VEC_IMM-SRI#3,SHIFT_VEC_IMM-SRI#4,SHIFT_VEC_IMM-SLI#3,SHIFT_VEC_IMM-SLI#4,FCVT_VEC_FIXED-UCVTF_VEC_FIX#0,FCVT_VEC_FIXED-UCVTF_VEC_FIX#1,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#0,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#1,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
    0x67 => return classify_impl_67(inst), // SHR_VEC_IMM-USHR#5,SHR_VEC_IMM-USHR#6,SHR_VEC_IMM-USRA#5,SHR_VEC_IMM-USRA#6,SHR_VEC_IMM-URSHR#5,SHR_VEC_IMM-URSHR#6,SHR_VEC_IMM-URSRA#5,SHR_VEC_IMM-URSRA#6,QSHL_VEC_IMM-SQSHLU_IMM#5,QSHL_VEC_IMM-SQSHLU_IMM#6,QSHL_VEC_IMM-UQSHL_IMM#5,QSHL_VEC_IMM-UQSHL_IMM#6,SHRN_VEC_IMM-SQSHRUN#5,SHRN_VEC_IMM-SQSHRUN#6,SHRN_VEC_IMM-SQRSHRUN#5,SHRN_VEC_IMM-SQRSHRUN#6,SHRN_VEC_IMM-UQSHRN#5,SHRN_VEC_IMM-UQSHRN#6,SHRN_VEC_IMM-UQRSHRN#5,SHRN_VEC_IMM-UQRSHRN#6,SHLL_VEC_IMM-USHLL#5,SHLL_VEC_IMM-USHLL#6,SHIFT_VEC_IMM-SRI#5,SHIFT_VEC_IMM-SRI#6,SHIFT_VEC_IMM-SLI#5,SHIFT_VEC_IMM-SLI#6,FCVT_VEC_FIXED-UCVTF_VEC_FIX#2,FCVT_VEC_FIXED-UCVTF_VEC_FIX#3,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#2,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#3,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
    0x68 => return classify_impl_68(inst), // MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL_ELEM#0,MULL_ELEM-UMLSL_ELEM#0,MULL_ELEM-UMULL_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#0
    0x69 => return classify_impl_69(inst), // MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL_ELEM#0,MULL_ELEM-UMLSL_ELEM#0,MULL_ELEM-UMULL_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#1
    0x6a => return classify_impl_6a(inst), // MUL_ELEM-MLA_ELEM#1,MUL_ELEM-MLS_ELEM#1,MUL_ELEM-SQRDMLAH_ELEM#1,MUL_ELEM-SQRDMLSH_ELEM#1,MULL_ELEM-UMLAL_ELEM#1,MULL_ELEM-UMLSL_ELEM#1,MULL_ELEM-UMULL_ELEM#1,FMUL_ELEM-FMULX_ELEM#0,DOT_ELEM-UDOT_ELEM#0,FHM_ELEM-FMLAL2_ELEM#0,FHM_ELEM-FMLSL2_ELEM#0
    0x6b => return classify_impl_6b(inst), // MUL_ELEM-MLA_ELEM#1,MUL_ELEM-MLS_ELEM#1,MUL_ELEM-SQRDMLAH_ELEM#1,MUL_ELEM-SQRDMLSH_ELEM#1,MULL_ELEM-UMLAL_ELEM#1,MULL_ELEM-UMLSL_ELEM#1,MULL_ELEM-UMULL_ELEM#1,FMUL_ELEM-FMULX_ELEM#1,DOT_ELEM-UDOT_ELEM#0,FHM_ELEM-FMLAL2_ELEM#0,FHM_ELEM-FMLSL2_ELEM#0
    0x6c => return classify_impl_6c(inst), // ANDOREOR_IMM-ORR_IMM#0,ANDOREOR_IMM-ORR_IMM#1,ANDOREOR_IMM-ORR_IMM#2,ANDOREOR_IMM-ORR_IMM#3,ANDOREOR_IMM-ORR_IMM#4,ANDOREOR_IMM-ORR_IMM#5,ANDOREOR_IMM-ORR_IMM#6,ANDOREOR_IMM-ORR_IMM#7,ANDOREOR_IMM-ORR_IMM#8,ANDOREOR_IMM-ORR_IMM#9,ANDOREOR_IMM-ORR_IMM#10,ANDOREOR_IMM-ORR_IMM#11,ANDOREOR_IMM-ORR_IMM#12,ANDOREOR_IMM-ORR_IMM#13,ANDOREOR_IMM-ORR_IMM#14,ANDOREOR_IMM-ORR_IMM#15,ANDOREOR_IMM-ORR_IMM#16,ANDOREOR_IMM-ORR_IMM#17,ANDOREOR_IMM-ORR_IMM#18,ANDOREOR_IMM-ORR_IMM#19,ANDOREOR_IMM-ORR_IMM#20,ANDOREOR_IMM-ORR_IMM#21,ANDOREOR_IMM-ORR_IMM#22,ANDOREOR_IMM-ORR_IMM#23,ANDOREOR_IMM-ORR_IMM#24,ANDOREOR_IMM-ORR_IMM#25,ANDOREOR_IMM-ORR_IMM#26,ANDOREOR_IMM-ORR_IMM#27,ANDOREOR_IMM-ORR_IMM#28,ANDOREOR_IMM-ORR_IMM#29,ANDOREOR_IMM-ORR_IMM#30,ANDOREOR_IMM-ORR_IMM#31,ANDOREOR_IMM-ORR_IMM#32,ANDOREOR_IMM-ORR_IMM#33,ANDOREOR_IMM-ORR_IMM#34,ANDOREOR_IMM-ORR_IMM#35,ANDOREOR_IMM-ORR_IMM#36,ANDOREOR_IMM-ORR_IMM#37,ANDOREOR_IMM-ORR_IMM#38,ANDOREOR_IMM-ORR_IMM#39,ANDOREOR_IMM-ORR_IMM#40,ANDOREOR_IMM-ORR_IMM#41,ANDOREOR_IMM-ORR_IMM#42,ANDOREOR_IMM-ORR_IMM#43,ANDOREOR_IMM-ORR_IMM#44,ANDOREOR_IMM-ORR_IMM#45,ANDOREOR_IMM-ORR_IMM#46,ANDOREOR_IMM-ORR_IMM#47,ANDOREOR_IMM-ORR_IMM#48,ANDOREOR_IMM-ORR_IMM#49,ANDOREOR_IMM-ORR_IMM#50,ANDOREOR_IMM-ORR_IMM#51,ANDOREOR_IMM-ORR_IMM#52,ANDOREOR_IMM-ORR_IMM#53,ANDOREOR_IMM-ORR_IMM#54,ANDOREOR_IMM-ORR_IMM#55,ANDOREOR_IMM-ORR_IMM#56
    0x6d => return classify_impl_6d(inst), // BFM-BFM#0
    0x6e => return classify_impl_6e(inst), // MEMU-STURB#0,MEMU-STRB_POST#0,MEMU-STTRB#0,MEMU-STRB_PRE#0
    0x6f => return classify_impl_6f(inst), // MEM_REG-STRB_REG#0,SWP-SWPB#0,LDATOMIC-LDADDB#0,LDATOMIC-LDCLRB#0,LDATOMIC-LDEORB#0,LDATOMIC-LDSETB#0,LDATOMIC-LDSMAXB#0,LDATOMIC-LDSMINB#0,LDATOMIC-LDUMAXB#0,LDATOMIC-LDUMINB#0
    0x70 => return classify_impl_70(inst), // MEMU-LDURB#0,MEMU-LDRB_POST#0,MEMU-LDTRB#0,MEMU-LDRB_PRE#0
    0x71 => return classify_impl_71(inst), // MEM_REG-LDRB_REG#0,SWP-SWPLB#0,LDATOMIC-LDADDLB#0,LDATOMIC-LDCLRLB#0,LDATOMIC-LDEORLB#0,LDATOMIC-LDSETLB#0,LDATOMIC-LDSMAXLB#0,LDATOMIC-LDSMINLB#0,LDATOMIC-LDUMAXLB#0,LDATOMIC-LDUMINLB#0
    0x72 => return classify_impl_72(inst), // MEMU-LDURSB#0,MEMU-LDRSB_POST#0,MEMU-LDTRSB#0,MEMU-LDRSB_PRE#0
    0x73 => return classify_impl_73(inst), // MEM_REG-LDRSB_REG#0,SWP-SWPAB#0,LDATOMIC-LDADDAB#0,LDATOMIC-LDCLRAB#0,LDATOMIC-LDEORAB#0,LDATOMIC-LDSETAB#0,LDATOMIC-LDSMAXAB#0,LDATOMIC-LDSMINAB#0,LDATOMIC-LDUMAXAB#0,LDATOMIC-LDUMINAB#0
    0x74 => return classify_impl_74(inst), // MEM_REG-LDRSB_REG#0,SWP-SWPAB#0,LDATOMIC-LDADDAB#0,LDATOMIC-LDCLRAB#0,LDATOMIC-LDEORAB#0,LDATOMIC-LDSETAB#0,LDATOMIC-LDSMAXAB#0,LDATOMIC-LDSMINAB#0,LDATOMIC-LDUMAXAB#0,LDATOMIC-LDUMINAB#0,RCPC-LDAPRB#0
    0x75 => return classify_impl_75(inst), // MEMU-LDURSBW#0,MEMU-LDRSBW_POST#0,MEMU-LDTRSBW#0,MEMU-LDRSBW_PRE#0
    0x76 => return classify_impl_76(inst), // MEM_REG-LDRSBW_REG#0,SWP-SWPALB#0,LDATOMIC-LDADDALB#0,LDATOMIC-LDCLRALB#0,LDATOMIC-LDEORALB#0,LDATOMIC-LDSETALB#0,LDATOMIC-LDSMAXALB#0,LDATOMIC-LDSMINALB#0,LDATOMIC-LDUMAXALB#0,LDATOMIC-LDUMINALB#0
    0x77 => return classify_impl_77(inst), // ADCSBC-ADCS#0,SETF-SETF8#0,SETF-SETF16#0
    0x78 => return classify_impl_78(inst), // ADCSBC-ADCS#0
    0x79 => return classify_impl_79(inst), // CCMP_IMM-CCMN_IMM#0,CCMP_REG-CCMN_REG#0
    0x7a => return classify_impl_7a(inst), // MEMU_FP-STUR_FP#0,MEMU_FP-STR_FP_POST#0,MEMU_FP-STR_FP_PRE#0
    0x7b => return classify_impl_7b(inst), // MEM_REG_FP-STR_REG_FP#0
    0x7c => return classify_impl_7c(inst), // MEMU_FP-LDUR_FP#0,MEMU_FP-LDR_FP_POST#0,MEMU_FP-LDR_FP_PRE#0
    0x7d => return classify_impl_7d(inst), // MEM_REG_FP-LDR_REG_FP#0
    0x7e => return classify_impl_7e(inst), // MEMU_FP-STUR_FP#1,MEMU_FP-STR_FP_POST#1,MEMU_FP-STR_FP_PRE#1
    0x7f => return classify_impl_7f(inst), // MEM_REG_FP-STR_REG_FP#1
    0x80 => return classify_impl_80(inst), // MEMU_FP-LDUR_FP#1,MEMU_FP-LDR_FP_POST#1,MEMU_FP-LDR_FP_PRE#1
    0x81 => return classify_impl_81(inst), // MEM_REG_FP-LDR_REG_FP#1
    0x82 => return classify_impl_82(inst), // MEMX-STXRH#0,MEMX-STLXRH#0
    0x83 => return classify_impl_83(inst), // MEMX-LDXRH#0,MEMX-LDAXRH#0
    0x84 => return classify_impl_84(inst), // MEMOR-STLLRH#0,MEMOR-STLRH#0
    0x85 => return classify_impl_85(inst), // CAS-CASH#0,CAS-CASLH#0
    0x86 => return classify_impl_86(inst), // MEMOR-LDLARH#0,MEMOR-LDARH#0
    0x87 => return classify_impl_87(inst), // CAS-CASAH#0,CAS-CASALH#0
    0x88 => return classify_impl_88(inst), // ANDOREOR_SHIFT-EOR_SHIFT#0
    0x89 => return classify_impl_89(inst), // ANDOREOR_SHIFT-EON_SHIFT#0
    0x8a => return classify_impl_8a(inst), // ADDSUB_SHIFT-SUB_SHIFT#0
    0x8b => return classify_impl_8b(inst), // ADDSUB_EXT-SUB_EXT#0,ADDSUB_EXT-SUB_EXT#1,ADDSUB_EXT-SUB_EXT#2,ADDSUB_EXT-SUB_EXT#3,ADDSUB_EXT-SUB_EXT#4
    0x8c => return classify_impl_8c(inst), // ADDSUB_SHIFT-SUB_SHIFT#1
    0x8d => return classify_impl_8d(inst), // ADDSUB_SHIFT-SUB_SHIFT#2
    0x8e => return classify_impl_8e(inst), // MEMSIMD_MULT-ST4#3,MEMSIMD_MULT-ST4#4,MEMSIMD_MULT-ST4#5,MEMSIMD_MULT-ST4#6,MEMSIMD_MULT-ST1_4#4,MEMSIMD_MULT-ST1_4#5,MEMSIMD_MULT-ST1_4#6,MEMSIMD_MULT-ST1_4#7,MEMSIMD_MULT-ST3#3,MEMSIMD_MULT-ST3#4,MEMSIMD_MULT-ST3#5,MEMSIMD_MULT-ST3#6,MEMSIMD_MULT-ST1_3#4,MEMSIMD_MULT-ST1_3#5,MEMSIMD_MULT-ST1_3#6,MEMSIMD_MULT-ST1_3#7,MEMSIMD_MULT-ST1_1#4,MEMSIMD_MULT-ST1_1#5,MEMSIMD_MULT-ST1_1#6,MEMSIMD_MULT-ST1_1#7,MEMSIMD_MULT-ST2#3,MEMSIMD_MULT-ST2#4,MEMSIMD_MULT-ST2#5,MEMSIMD_MULT-ST2#6,MEMSIMD_MULT-ST1_2#4,MEMSIMD_MULT-ST1_2#5,MEMSIMD_MULT-ST1_2#6,MEMSIMD_MULT-ST1_2#7
    0x8f => return classify_impl_8f(inst), // MEMSIMD_MULT-LD4#3,MEMSIMD_MULT-LD4#4,MEMSIMD_MULT-LD4#5,MEMSIMD_MULT-LD4#6,MEMSIMD_MULT-LD1_4#4,MEMSIMD_MULT-LD1_4#5,MEMSIMD_MULT-LD1_4#6,MEMSIMD_MULT-LD1_4#7,MEMSIMD_MULT-LD3#3,MEMSIMD_MULT-LD3#4,MEMSIMD_MULT-LD3#5,MEMSIMD_MULT-LD3#6,MEMSIMD_MULT-LD1_3#4,MEMSIMD_MULT-LD1_3#5,MEMSIMD_MULT-LD1_3#6,MEMSIMD_MULT-LD1_3#7,MEMSIMD_MULT-LD1_1#4,MEMSIMD_MULT-LD1_1#5,MEMSIMD_MULT-LD1_1#6,MEMSIMD_MULT-LD1_1#7,MEMSIMD_MULT-LD2#3,MEMSIMD_MULT-LD2#4,MEMSIMD_MULT-LD2#5,MEMSIMD_MULT-LD2#6,MEMSIMD_MULT-LD1_2#4,MEMSIMD_MULT-LD1_2#5,MEMSIMD_MULT-LD1_2#6,MEMSIMD_MULT-LD1_2#7
    0x90 => return classify_impl_90(inst), // MEMSIMD_MULT_POST-ST4_POST#3,MEMSIMD_MULT_POST-ST4_POST#4,MEMSIMD_MULT_POST-ST4_POST#5,MEMSIMD_MULT_POST-ST4_POST#6,MEMSIMD_MULT_POST-ST1_4_POST#4,MEMSIMD_MULT_POST-ST1_4_POST#5,MEMSIMD_MULT_POST-ST1_4_POST#6,MEMSIMD_MULT_POST-ST1_4_POST#7,MEMSIMD_MULT_POST-ST3_POST#3,MEMSIMD_MULT_POST-ST3_POST#4,MEMSIMD_MULT_POST-ST3_POST#5,MEMSIMD_MULT_POST-ST3_POST#6,MEMSIMD_MULT_POST-ST1_3_POST#4,MEMSIMD_MULT_POST-ST1_3_POST#5,MEMSIMD_MULT_POST-ST1_3_POST#6,MEMSIMD_MULT_POST-ST1_3_POST#7,MEMSIMD_MULT_POST-ST1_1_POST#4,MEMSIMD_MULT_POST-ST1_1_POST#5,MEMSIMD_MULT_POST-ST1_1_POST#6,MEMSIMD_MULT_POST-ST1_1_POST#7,MEMSIMD_MULT_POST-ST2_POST#3,MEMSIMD_MULT_POST-ST2_POST#4,MEMSIMD_MULT_POST-ST2_POST#5,MEMSIMD_MULT_POST-ST2_POST#6,MEMSIMD_MULT_POST-ST1_2_POST#4,MEMSIMD_MULT_POST-ST1_2_POST#5,MEMSIMD_MULT_POST-ST1_2_POST#6,MEMSIMD_MULT_POST-ST1_2_POST#7
    0x91 => return classify_impl_91(inst), // MEMSIMD_MULT_POST-LD4_POST#3,MEMSIMD_MULT_POST-LD4_POST#4,MEMSIMD_MULT_POST-LD4_POST#5,MEMSIMD_MULT_POST-LD4_POST#6,MEMSIMD_MULT_POST-LD1_4_POST#4,MEMSIMD_MULT_POST-LD1_4_POST#5,MEMSIMD_MULT_POST-LD1_4_POST#6,MEMSIMD_MULT_POST-LD1_4_POST#7,MEMSIMD_MULT_POST-LD3_POST#3,MEMSIMD_MULT_POST-LD3_POST#4,MEMSIMD_MULT_POST-LD3_POST#5,MEMSIMD_MULT_POST-LD3_POST#6,MEMSIMD_MULT_POST-LD1_3_POST#4,MEMSIMD_MULT_POST-LD1_3_POST#5,MEMSIMD_MULT_POST-LD1_3_POST#6,MEMSIMD_MULT_POST-LD1_3_POST#7,MEMSIMD_MULT_POST-LD1_1_POST#4,MEMSIMD_MULT_POST-LD1_1_POST#5,MEMSIMD_MULT_POST-LD1_1_POST#6,MEMSIMD_MULT_POST-LD1_1_POST#7,MEMSIMD_MULT_POST-LD2_POST#3,MEMSIMD_MULT_POST-LD2_POST#4,MEMSIMD_MULT_POST-LD2_POST#5,MEMSIMD_MULT_POST-LD2_POST#6,MEMSIMD_MULT_POST-LD1_2_POST#4,MEMSIMD_MULT_POST-LD1_2_POST#5,MEMSIMD_MULT_POST-LD1_2_POST#6,MEMSIMD_MULT_POST-LD1_2_POST#7
    0x92 => return classify_impl_92(inst), // DUP_VEC-DUP_ELEM#14,DUP_VEC-DUP_ELEM#15,DUP_VEC-DUP_ELEM#16,DUP_VEC-DUP_ELEM#17,DUP_VEC-DUP_ELEM#18,DUP_VEC-DUP_ELEM#19,DUP_VEC-DUP_ELEM#20,DUP_VEC-DUP_ELEM#21,DUP_VEC-DUP_ELEM#22,DUP_VEC-DUP_ELEM#23,DUP_VEC-DUP_ELEM#24,DUP_VEC-DUP_ELEM#25,DUP_VEC-DUP_ELEM#26,DUP_VEC-DUP_ELEM#27,DUP_VEC-DUP_ELEM#28,DUP_VEC-DUP_GP#14,DUP_VEC-DUP_GP#15,DUP_VEC-DUP_GP#16,DUP_VEC-DUP_GP#17,DUP_VEC-DUP_GP#18,DUP_VEC-DUP_GP#19,DUP_VEC-DUP_GP#20,DUP_VEC-DUP_GP#21,DUP_VEC-DUP_GP#22,DUP_VEC-DUP_GP#23,DUP_VEC-DUP_GP#24,DUP_VEC-DUP_GP#25,DUP_VEC-DUP_GP#26,DUP_VEC-DUP_GP#27,DUP_VEC-DUP_GP#28,INS-INS_GP#0,INS-INS_GP#1,INS-INS_GP#2,INS-INS_GP#3,INS-INS_GP#4,INS-INS_GP#5,INS-INS_GP#6,INS-INS_GP#7,INS-INS_GP#8,INS-INS_GP#9,INS-INS_GP#10,INS-INS_GP#11,INS-INS_GP#12,INS-INS_GP#13,INS-INS_GP#14,MOV_TOGP-SMOV#12,MOV_TOGP-SMOV#13,MOV_TOGP-SMOV#14,MOV_TOGP-SMOV#15,MOV_TOGP-SMOV#16,MOV_TOGP-SMOV#17,MOV_TOGP-SMOV#18,MOV_TOGP-SMOV#19,MOV_TOGP-SMOV#20,MOV_TOGP-SMOV#21,MOV_TOGP-SMOV#22,MOV_TOGP-SMOV#23,MOV_TOGP-SMOV#24,MOV_TOGP-SMOV#25,MOV_TOGP-UMOV#14,TBL-TBL1#0,TBL-TBX1#0,TBL-TBL2#0,TBL-TBX2#0,TBL-TBL3#0,TBL-TBX3#0,TBL-TBL4#0,TBL-TBX4#0,ZIP-UZP1#3,ZIP-TRN1#3,ZIP-ZIP1#3,ZIP-UZP2#3,ZIP-TRN2#3,ZIP-ZIP2#3
    0x93 => return classify_impl_93(inst), // HADDSUB_VEC-SHADD#0,HADDSUB_VEC-SRHADD#0,HADDSUB_VEC-SHSUB#0,QADDSUB_VEC-SQADD#3,QADDSUB_VEC-SQSUB#3,CMGT_VEC-CMGTV#3,CMGT_VEC-CMGEV#3,CMEQ_VEC-CMTSTV#3,CMZERO_VEC-CMGT_ZERO_VEC#3,CMZERO_VEC-CMEQ_ZERO_VEC#3,CMZERO_VEC-CMLT_ZERO_VEC#3,ARITH1_VEC-SUQADD_VEC#3,ARITH1_VEC-SQABS_VEC#3,ARITH1_VEC-ABS_VEC#3,ADDLP_VEC-SADDLP#0,ADDLP_VEC-SADALP#0,CLZ_VEC-CLS_VEC#0,BIT_VEC-CNT_VEC#0,REV_VEC-REV64_VEC#0,REV_VEC-REV16_VEC#0,XTN_VEC-XTN2_VEC#0,XTN_VEC-SQXTN2_VEC#0,SHL_REG_VEC-SSHL#3,SHL_REG_VEC-SQSHL#3,SHL_REG_VEC-SRSHL#3,SHL_REG_VEC-SQRSHL#3,MINMAX_VEC-SMAX#0,MINMAX_VEC-SMIN#0,MINMAX_VEC-SMAXP#0,MINMAX_VEC-SMINP#0,ABD_VEC-SABD#0,ABD_VEC-SABA#0,ADDSUB_VEC-ADD_VEC#3,ADDP_VEC-ADDP#3,MUL_VEC-MLA_VEC#0,MUL_VEC-MUL_VEC#0,FMINMAX_VEC-FMAXNM_VEC#1,FMINMAX_VEC-FMAX_VEC#1,FCMP_REG_VEC-FCMEQ_VEC#1,FADDSUB_VEC-FADD_VEC#1,FRECP_STEP_VEC-FRECPSV#1,FMUL_VEC-FMULXV#1,FMLA_VEC-FMLAV#1,ANDOREOR_VEC-ANDV#0,ADDSUBL_VEC-SADDL2#0,ADDSUBL_VEC-SSUBL2#0,ADDSUBW_VEC-SADDW2#0,ADDSUBW_VEC-SSUBW2#0,ADDSUBHN_VEC-ADDHN2#0,ADDSUBHN_VEC-SUBHN2#0,ABDL_VEC-SABAL2#0,ABDL_VEC-SABDL2#0,MULL_VEC-SMLAL2#0,MULL_VEC-SMLSL2#0,MULL_VEC-SMULL2#0,PMULL_VEC-PMULL2#0,FCVT_VEC-FCVTNS_VEC#1,FCVT_VEC-FCVTMS_VEC#1,FCVT_VEC-FCVTAS_VEC#1,FCVTL_VEC-FCVTL2_VEC#0,FCVT_FROMINT_VEC-SCVTF_VEC#1,FCVTN_VEC-FCVTN2#0,FRINT_VEC-FRINTN_VEC#1,FRINT_VEC-FRINTM_VEC#1,FRINTTS_VEC-FRINT32Z_VEC#1,FRINTTS_VEC-FRINT64Z_VEC#1,FHM_VEC-FMLAL_VEC#0,AES-AESE#0,AES-AESD#0,AES-AESMC#0,AES-AESIMC#0
    0x94 => return classify_impl_94(inst), // HADDSUB_VEC-SHADD#0,HADDSUB_VEC-SRHADD#0,HADDSUB_VEC-SHSUB#0,QADDSUB_VEC-SQADD#3,QADDSUB_VEC-SQSUB#3,CMGT_VEC-CMGTV#3,CMGT_VEC-CMGEV#3,CMEQ_VEC-CMTSTV#3,SHL_REG_VEC-SSHL#3,SHL_REG_VEC-SQSHL#3,SHL_REG_VEC-SRSHL#3,SHL_REG_VEC-SQRSHL#3,MINMAX_VEC-SMAX#0,MINMAX_VEC-SMIN#0,MINMAX_VEC-SMAXP#0,MINMAX_VEC-SMINP#0,ABD_VEC-SABD#0,ABD_VEC-SABA#0,ADDSUB_VEC-ADD_VEC#3,ADDP_VEC-ADDP#3,MUL_VEC-MLA_VEC#0,MUL_VEC-MUL_VEC#0,FMINMAX_VEC-FMAXNM_VEC#1,FMINMAX_VEC-FMAX_VEC#1,FCMP_REG_VEC-FCMEQ_VEC#1,FADDSUB_VEC-FADD_VEC#1,FRECP_STEP_VEC-FRECPSV#1,FMUL_VEC-FMULXV#1,FMLA_VEC-FMLAV#1,ANDOREOR_VEC-ANDV#0,ADDSUBL_VEC-SADDL2#0,ADDSUBL_VEC-SSUBL2#0,ADDSUBW_VEC-SADDW2#0,ADDSUBW_VEC-SSUBW2#0,ADDSUBHN_VEC-ADDHN2#0,ADDSUBHN_VEC-SUBHN2#0,ABDL_VEC-SABAL2#0,ABDL_VEC-SABDL2#0,MULL_VEC-SMLAL2#0,MULL_VEC-SMLSL2#0,MULL_VEC-SMULL2#0,PMULL_VEC-PMULL2#0,INT_HORZ_VEC-SADDLV#2,INT_HORZ_VEC-SMAXV#2,INT_HORZ_VEC-SMINV#2,INT_HORZ_VEC-ADDV#2,FP_HORZ_VEC-FMAXNMV_FP16#1,FP_HORZ_VEC-FMAXV_FP16#1,FHM_VEC-FMLAL_VEC#0
    0x95 => return classify_impl_95(inst), // ZIP-UZP1#4,ZIP-TRN1#4,ZIP-ZIP1#4,ZIP-UZP2#4,ZIP-TRN2#4,ZIP-ZIP2#4,FP16_3REG_VEC-FMAXNM_VEC_FP16#0,FP16_3REG_VEC-FMLA_VEC_FP16#0,FP16_3REG_VEC-FADD_VEC_FP16#0,FP16_3REG_VEC-FMULX_VEC_FP16#0,FP16_3REG_VEC-FCMEQ_VEC_FP16#0,FP16_3REG_VEC-FMAX_VEC_FP16#0,FP16_3REG_VEC-FRECPS_VEC_FP16#0
    0x96 => return classify_impl_96(inst), // HADDSUB_VEC-SHADD#1,HADDSUB_VEC-SRHADD#1,HADDSUB_VEC-SHSUB#1,QADDSUB_VEC-SQADD#4,QADDSUB_VEC-SQSUB#4,CMGT_VEC-CMGTV#4,CMGT_VEC-CMGEV#4,CMEQ_VEC-CMTSTV#4,CMZERO_VEC-CMGT_ZERO_VEC#4,CMZERO_VEC-CMEQ_ZERO_VEC#4,CMZERO_VEC-CMLT_ZERO_VEC#4,ARITH1_VEC-SUQADD_VEC#4,ARITH1_VEC-SQABS_VEC#4,ARITH1_VEC-ABS_VEC#4,ADDLP_VEC-SADDLP#1,ADDLP_VEC-SADALP#1,CLZ_VEC-CLS_VEC#1,REV_VEC-REV64_VEC#1,XTN_VEC-XTN2_VEC#1,XTN_VEC-SQXTN2_VEC#1,SHL_REG_VEC-SSHL#4,SHL_REG_VEC-SQSHL#4,SHL_REG_VEC-SRSHL#4,SHL_REG_VEC-SQRSHL#4,MINMAX_VEC-SMAX#1,MINMAX_VEC-SMIN#1,MINMAX_VEC-SMAXP#1,MINMAX_VEC-SMINP#1,ABD_VEC-SABD#1,ABD_VEC-SABA#1,ADDSUB_VEC-ADD_VEC#4,ADDP_VEC-ADDP#4,MUL_VEC-MLA_VEC#1,MUL_VEC-MUL_VEC#1,SQDMULH_VEC-SQDMULH#0,FMINMAX_VEC-FMAXNM_VEC#2,FMINMAX_VEC-FMAX_VEC#2,FCMP_REG_VEC-FCMEQ_VEC#2,FADDSUB_VEC-FADD_VEC#2,FRECP_STEP_VEC-FRECPSV#2,FMUL_VEC-FMULXV#2,FMLA_VEC-FMLAV#2,ANDOREOR_VEC-BICV#0,ADDSUBL_VEC-SADDL2#1,ADDSUBL_VEC-SSUBL2#1,ADDSUBW_VEC-SADDW2#1,ADDSUBW_VEC-SSUBW2#1,ADDSUBHN_VEC-ADDHN2#1,ADDSUBHN_VEC-SUBHN2#1,ABDL_VEC-SABAL2#1,ABDL_VEC-SABDL2#1,MULL_VEC-SMLAL2#1,MULL_VEC-SMLSL2#1,MULL_VEC-SMULL2#1,SQDMULL_VEC-SQDMLAL2#0,SQDMULL_VEC-SQDMLSL2#0,SQDMULL_VEC-SQDMULL2#0,FCVT_VEC-FCVTNS_VEC#2,FCVT_VEC-FCVTMS_VEC#2,FCVT_VEC-FCVTAS_VEC#2,FCVTL_VEC-FCVTL2_VEC#0,FCVT_FROMINT_VEC-SCVTF_VEC#2,FCVTN_VEC-FCVTN2#1,FRINT_VEC-FRINTN_VEC#2,FRINT_VEC-FRINTM_VEC#2,FRINTTS_VEC-FRINT32Z_VEC#2,FRINTTS_VEC-FRINT64Z_VEC#2
    0x97 => return classify_impl_97(inst), // HADDSUB_VEC-SHADD#1,HADDSUB_VEC-SRHADD#1,HADDSUB_VEC-SHSUB#1,QADDSUB_VEC-SQADD#4,QADDSUB_VEC-SQSUB#4,CMGT_VEC-CMGTV#4,CMGT_VEC-CMGEV#4,CMEQ_VEC-CMTSTV#4,SHL_REG_VEC-SSHL#4,SHL_REG_VEC-SQSHL#4,SHL_REG_VEC-SRSHL#4,SHL_REG_VEC-SQRSHL#4,MINMAX_VEC-SMAX#1,MINMAX_VEC-SMIN#1,MINMAX_VEC-SMAXP#1,MINMAX_VEC-SMINP#1,ABD_VEC-SABD#1,ABD_VEC-SABA#1,ADDSUB_VEC-ADD_VEC#4,ADDP_VEC-ADDP#4,MUL_VEC-MLA_VEC#1,MUL_VEC-MUL_VEC#1,SQDMULH_VEC-SQDMULH#0,FMINMAX_VEC-FMAXNM_VEC#2,FMINMAX_VEC-FMAX_VEC#2,FCMP_REG_VEC-FCMEQ_VEC#2,FADDSUB_VEC-FADD_VEC#2,FRECP_STEP_VEC-FRECPSV#2,FMUL_VEC-FMULXV#2,FMLA_VEC-FMLAV#2,FP16_2REG_VEC-FRINTN_VEC_FP16#0,FP16_2REG_VEC-FRINTM_VEC_FP16#0,FP16_2REG_VEC-FCVTNS_VEC_FP16#0,FP16_2REG_VEC-FCVTMS_VEC_FP16#0,FP16_2REG_VEC-FCVTAS_VEC_FP16#0,FP16_2REG_VEC-SCVTF_VEC_FP16#0,ANDOREOR_VEC-BICV#0,ADDSUBL_VEC-SADDL2#1,ADDSUBL_VEC-SSUBL2#1,ADDSUBW_VEC-SADDW2#1,ADDSUBW_VEC-SSUBW2#1,ADDSUBHN_VEC-ADDHN2#1,ADDSUBHN_VEC-SUBHN2#1,ABDL_VEC-SABAL2#1,ABDL_VEC-SABDL2#1,MULL_VEC-SMLAL2#1,MULL_VEC-SMLSL2#1,MULL_VEC-SMULL2#1,SQDMULL_VEC-SQDMLAL2#0,SQDMULL_VEC-SQDMLSL2#0,SQDMULL_VEC-SQDMULL2#0,INT_HORZ_VEC-SADDLV#3,INT_HORZ_VEC-SMAXV#3,INT_HORZ_VEC-SMINV#3,INT_HORZ_VEC-ADDV#3
    0x98 => return classify_impl_98(inst), // ZIP-UZP1#5,ZIP-TRN1#5,ZIP-ZIP1#5,ZIP-UZP2#5,ZIP-TRN2#5,ZIP-ZIP2#5,DOT_VEC-SDOT_VEC#1,DOT_VEC-USDOT_VEC#1,DOT_VEC-SMMLA_VEC#0,DOT_VEC-USMMLA_VEC#0
    0x99 => return classify_impl_99(inst), // HADDSUB_VEC-SHADD#2,HADDSUB_VEC-SRHADD#2,HADDSUB_VEC-SHSUB#2,QADDSUB_VEC-SQADD#5,QADDSUB_VEC-SQSUB#5,CMGT_VEC-CMGTV#5,CMGT_VEC-CMGEV#5,CMEQ_VEC-CMTSTV#5,CMZERO_VEC-CMGT_ZERO_VEC#5,CMZERO_VEC-CMEQ_ZERO_VEC#5,CMZERO_VEC-CMLT_ZERO_VEC#5,ARITH1_VEC-SUQADD_VEC#5,ARITH1_VEC-SQABS_VEC#5,ARITH1_VEC-ABS_VEC#5,ADDLP_VEC-SADDLP#2,ADDLP_VEC-SADALP#2,CLZ_VEC-CLS_VEC#2,REV_VEC-REV64_VEC#2,XTN_VEC-XTN2_VEC#2,XTN_VEC-SQXTN2_VEC#2,SHL_REG_VEC-SSHL#5,SHL_REG_VEC-SQSHL#5,SHL_REG_VEC-SRSHL#5,SHL_REG_VEC-SQRSHL#5,MINMAX_VEC-SMAX#2,MINMAX_VEC-SMIN#2,MINMAX_VEC-SMAXP#2,MINMAX_VEC-SMINP#2,ABD_VEC-SABD#2,ABD_VEC-SABA#2,ADDSUB_VEC-ADD_VEC#5,ADDP_VEC-ADDP#5,MUL_VEC-MLA_VEC#2,MUL_VEC-MUL_VEC#2,SQDMULH_VEC-SQDMULH#1,FMINMAX_VEC-FMINNM_VEC#1,FMINMAX_VEC-FMIN_VEC#1,FCMP_ZERO_VEC-FCMGT_ZERO_VEC#1,FCMP_ZERO_VEC-FCMEQ_ZERO_VEC#1,FCMP_ZERO_VEC-FCMLT_ZERO_VEC#1,FARITH1_VEC-FABS_VEC#1,FADDSUB_VEC-FSUB_VEC#1,FRECP_VEC-URECPE_VEC#1,FRECP_VEC-FRECPE_VEC#1,FRECP_STEP_VEC-FRSQRTSV#1,FMLA_VEC-FMLSV#1,ANDOREOR_VEC-ORRV#0,ADDSUBL_VEC-SADDL2#2,ADDSUBL_VEC-SSUBL2#2,ADDSUBW_VEC-SADDW2#2,ADDSUBW_VEC-SSUBW2#2,ADDSUBHN_VEC-ADDHN2#2,ADDSUBHN_VEC-SUBHN2#2,ABDL_VEC-SABAL2#2,ABDL_VEC-SABDL2#2,MULL_VEC-SMLAL2#2,MULL_VEC-SMLSL2#2,MULL_VEC-SMULL2#2,SQDMULL_VEC-SQDMLAL2#1,SQDMULL_VEC-SQDMLSL2#1,SQDMULL_VEC-SQDMULL2#1,FCVT_VEC-FCVTPS_VEC#1,FCVT_VEC-FCVTZS_VEC#1,FCVTN_VEC-BFCVTN2#0,FRINT_VEC-FRINTP_VEC#1,FRINT_VEC-FRINTZ_VEC#1,FHM_VEC-FMLSL_VEC#0
    0x9a => return classify_impl_9a(inst), // HADDSUB_VEC-SHADD#2,HADDSUB_VEC-SRHADD#2,HADDSUB_VEC-SHSUB#2,QADDSUB_VEC-SQADD#5,QADDSUB_VEC-SQSUB#5,CMGT_VEC-CMGTV#5,CMGT_VEC-CMGEV#5,CMEQ_VEC-CMTSTV#5,SHL_REG_VEC-SSHL#5,SHL_REG_VEC-SQSHL#5,SHL_REG_VEC-SRSHL#5,SHL_REG_VEC-SQRSHL#5,MINMAX_VEC-SMAX#2,MINMAX_VEC-SMIN#2,MINMAX_VEC-SMAXP#2,MINMAX_VEC-SMINP#2,ABD_VEC-SABD#2,ABD_VEC-SABA#2,ADDSUB_VEC-ADD_VEC#5,ADDP_VEC-ADDP#5,MUL_VEC-MLA_VEC#2,MUL_VEC-MUL_VEC#2,SQDMULH_VEC-SQDMULH#1,FMINMAX_VEC-FMINNM_VEC#1,FMINMAX_VEC-FMIN_VEC#1,FADDSUB_VEC-FSUB_VEC#1,FRECP_STEP_VEC-FRSQRTSV#1,FMLA_VEC-FMLSV#1,ANDOREOR_VEC-ORRV#0,ADDSUBL_VEC-SADDL2#2,ADDSUBL_VEC-SSUBL2#2,ADDSUBW_VEC-SADDW2#2,ADDSUBW_VEC-SSUBW2#2,ADDSUBHN_VEC-ADDHN2#2,ADDSUBHN_VEC-SUBHN2#2,ABDL_VEC-SABAL2#2,ABDL_VEC-SABDL2#2,MULL_VEC-SMLAL2#2,MULL_VEC-SMLSL2#2,MULL_VEC-SMULL2#2,SQDMULL_VEC-SQDMLAL2#1,SQDMULL_VEC-SQDMLSL2#1,SQDMULL_VEC-SQDMULL2#1,INT_HORZ_VEC-SADDLV#4,INT_HORZ_VEC-SMAXV#4,INT_HORZ_VEC-SMINV#4,INT_HORZ_VEC-ADDV#4,FP_HORZ_VEC-FMINNMV_FP16#1,FP_HORZ_VEC-FMINV_FP16#1,FHM_VEC-FMLSL_VEC#0
    0x9b => return classify_impl_9b(inst), // ZIP-UZP1#6,ZIP-TRN1#6,ZIP-ZIP1#6,ZIP-UZP2#6,ZIP-TRN2#6,ZIP-ZIP2#6,FP16_3REG_VEC-FMINNM_VEC_FP16#0,FP16_3REG_VEC-FMLS_VEC_FP16#0,FP16_3REG_VEC-FSUB_VEC_FP16#0,FP16_3REG_VEC-FMIN_VEC_FP16#0,FP16_3REG_VEC-FRSQRTS_VEC_FP16#0
    0x9c => return classify_impl_9c(inst), // QADDSUB_VEC-SQADD#6,QADDSUB_VEC-SQSUB#6,CMGT_VEC-CMGTV#6,CMGT_VEC-CMGEV#6,CMEQ_VEC-CMTSTV#6,CMZERO_VEC-CMGT_ZERO_VEC#6,CMZERO_VEC-CMEQ_ZERO_VEC#6,CMZERO_VEC-CMLT_ZERO_VEC#6,ARITH1_VEC-SUQADD_VEC#6,ARITH1_VEC-SQABS_VEC#6,ARITH1_VEC-ABS_VEC#6,SHL_REG_VEC-SSHL#6,SHL_REG_VEC-SQSHL#6,SHL_REG_VEC-SRSHL#6,SHL_REG_VEC-SQRSHL#6,ADDSUB_VEC-ADD_VEC#6,ADDP_VEC-ADDP#6,FMINMAX_VEC-FMINNM_VEC#2,FMINMAX_VEC-FMIN_VEC#2,FCMP_ZERO_VEC-FCMGT_ZERO_VEC#2,FCMP_ZERO_VEC-FCMEQ_ZERO_VEC#2,FCMP_ZERO_VEC-FCMLT_ZERO_VEC#2,FARITH1_VEC-FABS_VEC#2,FADDSUB_VEC-FSUB_VEC#2,FRECP_VEC-FRECPE_VEC#2,FRECP_STEP_VEC-FRSQRTSV#2,FMLA_VEC-FMLSV#2,ANDOREOR_VEC-ORNV#0,PMULL_VEC-PMULL264#0,FCVT_VEC-FCVTPS_VEC#2,FCVT_VEC-FCVTZS_VEC#2,FRINT_VEC-FRINTP_VEC#2,FRINT_VEC-FRINTZ_VEC#2
    0x9d => return classify_impl_9d(inst), // QADDSUB_VEC-SQADD#6,QADDSUB_VEC-SQSUB#6,CMGT_VEC-CMGTV#6,CMGT_VEC-CMGEV#6,CMEQ_VEC-CMTSTV#6,SHL_REG_VEC-SSHL#6,SHL_REG_VEC-SQSHL#6,SHL_REG_VEC-SRSHL#6,SHL_REG_VEC-SQRSHL#6,ADDSUB_VEC-ADD_VEC#6,ADDP_VEC-ADDP#6,FMINMAX_VEC-FMINNM_VEC#2,FMINMAX_VEC-FMIN_VEC#2,FADDSUB_VEC-FSUB_VEC#2,FRECP_STEP_VEC-FRSQRTSV#2,FMLA_VEC-FMLSV#2,FP16_2REG_VEC-FCMGT_ZERO_VEC_FP16#0,FP16_2REG_VEC-FCMEQ_ZERO_VEC_FP16#0,FP16_2REG_VEC-FCMLT_ZERO_VEC_FP16#0,FP16_2REG_VEC-FABS_VEC_FP16#0,FP16_2REG_VEC-FRINTP_VEC_FP16#0,FP16_2REG_VEC-FRINTZ_VEC_FP16#0,FP16_2REG_VEC-FCVTPS_VEC_FP16#0,FP16_2REG_VEC-FCVTZS_VEC_FP16#0,FP16_2REG_VEC-FRECPE_VEC_FP16#0,ANDOREOR_VEC-ORNV#0,PMULL_VEC-PMULL264#0
    0x9e => return classify_impl_9e(inst), // SHR_VEC_IMM-SSHR#7,SHR_VEC_IMM-SSRA#7,SHR_VEC_IMM-SRSHR#7,SHR_VEC_IMM-SRSRA#7,QSHL_VEC_IMM-SQSHL_IMM#7,SHRN_VEC_IMM-SHRN2#0,SHRN_VEC_IMM-RSHRN2#0,SHRN_VEC_IMM-SQSHRN2#0,SHRN_VEC_IMM-SQRSHRN2#0,SHLL_VEC_IMM-SSHLL2#0,SHIFT_VEC_IMM-SHL#7,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0,SIMD_IMM-MOVI32#4,SIMD_IMM-MOVI32#5,SIMD_IMM-MOVI32#6,SIMD_IMM-MOVI32#7,SIMD_IMM-ORRI32#4,SIMD_IMM-ORRI32#5,SIMD_IMM-ORRI32#6,SIMD_IMM-ORRI32#7,SIMD_IMM-MOVI16#2,SIMD_IMM-MOVI16#3,SIMD_IMM-ORRI16#2,SIMD_IMM-ORRI16#3,SIMD_IMM-MOVI32_MSL#2,SIMD_IMM-MOVI32_MSL#3,SIMD_IMM-MOVI8#1,SIMD_IMM-FMOV32#1,SIMD_IMM-FMOV16#1
    0x9f => return classify_impl_9f(inst), // SHR_VEC_IMM-SSHR#8,SHR_VEC_IMM-SSHR#9,SHR_VEC_IMM-SSRA#8,SHR_VEC_IMM-SSRA#9,SHR_VEC_IMM-SRSHR#8,SHR_VEC_IMM-SRSHR#9,SHR_VEC_IMM-SRSRA#8,SHR_VEC_IMM-SRSRA#9,QSHL_VEC_IMM-SQSHL_IMM#8,QSHL_VEC_IMM-SQSHL_IMM#9,SHRN_VEC_IMM-SHRN2#1,SHRN_VEC_IMM-SHRN2#2,SHRN_VEC_IMM-RSHRN2#1,SHRN_VEC_IMM-RSHRN2#2,SHRN_VEC_IMM-SQSHRN2#1,SHRN_VEC_IMM-SQSHRN2#2,SHRN_VEC_IMM-SQRSHRN2#1,SHRN_VEC_IMM-SQRSHRN2#2,SHLL_VEC_IMM-SSHLL2#1,SHLL_VEC_IMM-SSHLL2#2,SHIFT_VEC_IMM-SHL#8,SHIFT_VEC_IMM-SHL#9,FCVT_VEC_FIXED-SCVTF_VEC_FIX_FP16#2,FCVT_VEC_FIXED-SCVTF_VEC_FIX_FP16#3,FCVT_VEC_FIXED-FCVTZS_VEC_FIX_FP16#2,FCVT_VEC_FIXED-FCVTZS_VEC_FIX_FP16#3,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
    0xa0 => return classify_impl_a0(inst), // SHR_VEC_IMM-SSHR#10,SHR_VEC_IMM-SSHR#11,SHR_VEC_IMM-SSRA#10,SHR_VEC_IMM-SSRA#11,SHR_VEC_IMM-SRSHR#10,SHR_VEC_IMM-SRSHR#11,SHR_VEC_IMM-SRSRA#10,SHR_VEC_IMM-SRSRA#11,QSHL_VEC_IMM-SQSHL_IMM#10,QSHL_VEC_IMM-SQSHL_IMM#11,SHRN_VEC_IMM-SHRN2#3,SHRN_VEC_IMM-SHRN2#4,SHRN_VEC_IMM-RSHRN2#3,SHRN_VEC_IMM-RSHRN2#4,SHRN_VEC_IMM-SQSHRN2#3,SHRN_VEC_IMM-SQSHRN2#4,SHRN_VEC_IMM-SQRSHRN2#3,SHRN_VEC_IMM-SQRSHRN2#4,SHLL_VEC_IMM-SSHLL2#3,SHLL_VEC_IMM-SSHLL2#4,SHIFT_VEC_IMM-SHL#10,SHIFT_VEC_IMM-SHL#11,FCVT_VEC_FIXED-SCVTF_VEC_FIX#4,FCVT_VEC_FIXED-SCVTF_VEC_FIX#5,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#4,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#5,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
    0xa1 => return classify_impl_a1(inst), // SHR_VEC_IMM-SSHR#12,SHR_VEC_IMM-SSHR#13,SHR_VEC_IMM-SSRA#12,SHR_VEC_IMM-SSRA#13,SHR_VEC_IMM-SRSHR#12,SHR_VEC_IMM-SRSHR#13,SHR_VEC_IMM-SRSRA#12,SHR_VEC_IMM-SRSRA#13,QSHL_VEC_IMM-SQSHL_IMM#12,QSHL_VEC_IMM-SQSHL_IMM#13,SHRN_VEC_IMM-SHRN2#5,SHRN_VEC_IMM-SHRN2#6,SHRN_VEC_IMM-RSHRN2#5,SHRN_VEC_IMM-RSHRN2#6,SHRN_VEC_IMM-SQSHRN2#5,SHRN_VEC_IMM-SQSHRN2#6,SHRN_VEC_IMM-SQRSHRN2#5,SHRN_VEC_IMM-SQRSHRN2#6,SHLL_VEC_IMM-SSHLL2#5,SHLL_VEC_IMM-SSHLL2#6,SHIFT_VEC_IMM-SHL#12,SHIFT_VEC_IMM-SHL#13,FCVT_VEC_FIXED-SCVTF_VEC_FIX#6,FCVT_VEC_FIXED-SCVTF_VEC_FIX#7,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#6,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#7,FMUL_ELEM_FP16-FMLA_ELEM_FP16#0,FMUL_ELEM_FP16-FMLS_ELEM_FP16#0,FMUL_ELEM_FP16-FMUL_ELEM_FP16#0,DOT_ELEM-SUDOT_ELEM#0
    0xa2 => return classify_impl_a2(inst), // SHR_VEC_IMM-SSHR#14,SHR_VEC_IMM-SSHR#15,SHR_VEC_IMM-SSRA#14,SHR_VEC_IMM-SSRA#15,SHR_VEC_IMM-SRSHR#14,SHR_VEC_IMM-SRSHR#15,SHR_VEC_IMM-SRSRA#14,SHR_VEC_IMM-SRSRA#15,QSHL_VEC_IMM-SQSHL_IMM#14,QSHL_VEC_IMM-SQSHL_IMM#15,SHIFT_VEC_IMM-SHL#14,SHIFT_VEC_IMM-SHL#15,FCVT_VEC_FIXED-SCVTF_VEC_FIX#8,FCVT_VEC_FIXED-SCVTF_VEC_FIX#9,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#8,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#9,MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL2_ELEM#0,MULL_ELEM-SQDMLAL2_ELEM#0,MULL_ELEM-SMLSL2_ELEM#0,MULL_ELEM-SQDMLSL2_ELEM#0,MULL_ELEM-SMULL2_ELEM#0,MULL_ELEM-SQDMULL2_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
    0xa3 => return classify_impl_a3(inst), // SHR_VEC_IMM-SSHR#16,SHR_VEC_IMM-SSHR#17,SHR_VEC_IMM-SSRA#16,SHR_VEC_IMM-SSRA#17,SHR_VEC_IMM-SRSHR#16,SHR_VEC_IMM-SRSHR#17,SHR_VEC_IMM-SRSRA#16,SHR_VEC_IMM-SRSRA#17,QSHL_VEC_IMM-SQSHL_IMM#16,QSHL_VEC_IMM-SQSHL_IMM#17,SHIFT_VEC_IMM-SHL#16,SHIFT_VEC_IMM-SHL#17,FCVT_VEC_FIXED-SCVTF_VEC_FIX#10,FCVT_VEC_FIXED-SCVTF_VEC_FIX#11,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#10,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#11,MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL2_ELEM#0,MULL_ELEM-SQDMLAL2_ELEM#0,MULL_ELEM-SMLSL2_ELEM#0,MULL_ELEM-SQDMLSL2_ELEM#0,MULL_ELEM-SMULL2_ELEM#0,MULL_ELEM-SQDMULL2_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
    0xa4 => return classify_impl_a4(inst), // SHR_VEC_IMM-SSHR#18,SHR_VEC_IMM-SSHR#19,SHR_VEC_IMM-SSRA#18,SHR_VEC_IMM-SSRA#19,SHR_VEC_IMM-SRSHR#18,SHR_VEC_IMM-SRSHR#19,SHR_VEC_IMM-SRSRA#18,SHR_VEC_IMM-SRSRA#19,QSHL_VEC_IMM-SQSHL_IMM#18,QSHL_VEC_IMM-SQSHL_IMM#19,SHIFT_VEC_IMM-SHL#18,SHIFT_VEC_IMM-SHL#19,FCVT_VEC_FIXED-SCVTF_VEC_FIX#12,FCVT_VEC_FIXED-SCVTF_VEC_FIX#13,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#12,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#13,MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL2_ELEM#0,MULL_ELEM-SQDMLAL2_ELEM#0,MULL_ELEM-SMLSL2_ELEM#0,MULL_ELEM-SQDMLSL2_ELEM#0,MULL_ELEM-SMULL2_ELEM#0,MULL_ELEM-SQDMULL2_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
    0xa5 => return classify_impl_a5(inst), // SHR_VEC_IMM-SSHR#20,SHR_VEC_IMM-SSHR#21,SHR_VEC_IMM-SSRA#20,SHR_VEC_IMM-SSRA#21,SHR_VEC_IMM-SRSHR#20,SHR_VEC_IMM-SRSHR#21,SHR_VEC_IMM-SRSRA#20,SHR_VEC_IMM-SRSRA#21,QSHL_VEC_IMM-SQSHL_IMM#20,QSHL_VEC_IMM-SQSHL_IMM#21,SHIFT_VEC_IMM-SHL#20,SHIFT_VEC_IMM-SHL#21,FCVT_VEC_FIXED-SCVTF_VEC_FIX#14,FCVT_VEC_FIXED-SCVTF_VEC_FIX#15,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#14,FCVT_VEC_FIXED-FCVTZS_VEC_FIX#15,MUL_ELEM-MUL_ELEM#0,MUL_ELEM-SQDMULH_ELEM#0,MUL_ELEM-SQRDMULH_ELEM#0,MULL_ELEM-SMLAL2_ELEM#0,MULL_ELEM-SQDMLAL2_ELEM#0,MULL_ELEM-SMLSL2_ELEM#0,MULL_ELEM-SQDMLSL2_ELEM#0,MULL_ELEM-SMULL2_ELEM#0,MULL_ELEM-SQDMULL2_ELEM#0,DOT_ELEM-BFDOT_ELEM#0
    0xa6 => return classify_impl_a6(inst), // MUL_ELEM-MUL_ELEM#1,MUL_ELEM-SQDMULH_ELEM#1,MUL_ELEM-SQRDMULH_ELEM#1,MULL_ELEM-SMLAL2_ELEM#1,MULL_ELEM-SQDMLAL2_ELEM#1,MULL_ELEM-SMLSL2_ELEM#1,MULL_ELEM-SQDMLSL2_ELEM#1,MULL_ELEM-SMULL2_ELEM#1,MULL_ELEM-SQDMULL2_ELEM#1,FMUL_ELEM-FMLA_ELEM#2,FMUL_ELEM-FMLS_ELEM#2,FMUL_ELEM-FMUL_ELEM#2,DOT_ELEM-SDOT_ELEM#0,DOT_ELEM-USDOT_ELEM#0,FHM_ELEM-FMLAL_ELEM#0,FHM_ELEM-FMLSL_ELEM#0
    0xa7 => return classify_impl_a7(inst), // MUL_ELEM-MUL_ELEM#1,MUL_ELEM-SQDMULH_ELEM#1,MUL_ELEM-SQRDMULH_ELEM#1,MULL_ELEM-SMLAL2_ELEM#1,MULL_ELEM-SQDMLAL2_ELEM#1,MULL_ELEM-SMLSL2_ELEM#1,MULL_ELEM-SQDMLSL2_ELEM#1,MULL_ELEM-SMULL2_ELEM#1,MULL_ELEM-SQDMULL2_ELEM#1,FMUL_ELEM-FMLA_ELEM#3,FMUL_ELEM-FMLS_ELEM#3,FMUL_ELEM-FMUL_ELEM#3,DOT_ELEM-SDOT_ELEM#0,DOT_ELEM-USDOT_ELEM#0,FHM_ELEM-FMLAL_ELEM#0,FHM_ELEM-FMLSL_ELEM#0
    0xa8 => return classify_impl_a8(inst), // FMUL_ELEM-FMLA_ELEM#4,FMUL_ELEM-FMLS_ELEM#4,FMUL_ELEM-FMUL_ELEM#4,FMLAL_ELEM-BFMLALT_ELEM#0
    0xa9 => return classify_impl_a9(inst), // FMLAL_ELEM-BFMLALT_ELEM#0
    0xaa => return classify_impl_aa(inst), // ANDOREOR_IMM-EOR_IMM#0,ANDOREOR_IMM-EOR_IMM#1,ANDOREOR_IMM-EOR_IMM#2,ANDOREOR_IMM-EOR_IMM#3,ANDOREOR_IMM-EOR_IMM#4,ANDOREOR_IMM-EOR_IMM#5,ANDOREOR_IMM-EOR_IMM#6,ANDOREOR_IMM-EOR_IMM#7,ANDOREOR_IMM-EOR_IMM#8,ANDOREOR_IMM-EOR_IMM#9,ANDOREOR_IMM-EOR_IMM#10,ANDOREOR_IMM-EOR_IMM#11,ANDOREOR_IMM-EOR_IMM#12,ANDOREOR_IMM-EOR_IMM#13,ANDOREOR_IMM-EOR_IMM#14,ANDOREOR_IMM-EOR_IMM#15,ANDOREOR_IMM-EOR_IMM#16,ANDOREOR_IMM-EOR_IMM#17,ANDOREOR_IMM-EOR_IMM#18,ANDOREOR_IMM-EOR_IMM#19,ANDOREOR_IMM-EOR_IMM#20,ANDOREOR_IMM-EOR_IMM#21,ANDOREOR_IMM-EOR_IMM#22,ANDOREOR_IMM-EOR_IMM#23,ANDOREOR_IMM-EOR_IMM#24,ANDOREOR_IMM-EOR_IMM#25,ANDOREOR_IMM-EOR_IMM#26,ANDOREOR_IMM-EOR_IMM#27,ANDOREOR_IMM-EOR_IMM#28,ANDOREOR_IMM-EOR_IMM#29,ANDOREOR_IMM-EOR_IMM#30,ANDOREOR_IMM-EOR_IMM#31,ANDOREOR_IMM-EOR_IMM#32,ANDOREOR_IMM-EOR_IMM#33,ANDOREOR_IMM-EOR_IMM#34,ANDOREOR_IMM-EOR_IMM#35,ANDOREOR_IMM-EOR_IMM#36,ANDOREOR_IMM-EOR_IMM#37,ANDOREOR_IMM-EOR_IMM#38,ANDOREOR_IMM-EOR_IMM#39,ANDOREOR_IMM-EOR_IMM#40,ANDOREOR_IMM-EOR_IMM#41,ANDOREOR_IMM-EOR_IMM#42,ANDOREOR_IMM-EOR_IMM#43,ANDOREOR_IMM-EOR_IMM#44,ANDOREOR_IMM-EOR_IMM#45,ANDOREOR_IMM-EOR_IMM#46,ANDOREOR_IMM-EOR_IMM#47,ANDOREOR_IMM-EOR_IMM#48,ANDOREOR_IMM-EOR_IMM#49,ANDOREOR_IMM-EOR_IMM#50,ANDOREOR_IMM-EOR_IMM#51,ANDOREOR_IMM-EOR_IMM#52,ANDOREOR_IMM-EOR_IMM#53,ANDOREOR_IMM-EOR_IMM#54,ANDOREOR_IMM-EOR_IMM#55,ANDOREOR_IMM-EOR_IMM#56
    0xab => return classify_impl_ab(inst), // BFM-UBFM#0
    0xac => return classify_impl_ac(inst), // BCOND-BCOND#0,BCOND-BCCOND#0
    0xad => return classify_impl_ad(inst), // RCPCU-STLURH#0
    0xae => return classify_impl_ae(inst), // RCPCU-LDAPURH#0
    0xaf => return classify_impl_af(inst), // RCPCU-LDAPURSH#0
    0xb0 => return classify_impl_b0(inst), // RCPCU-LDAPURSHW#0
    0xb1 => return classify_impl_b1(inst), // ADCSBC-SBC#0
    0xb2 => return classify_impl_b2(inst), // CSEL-CSINV#0,CSEL-CSNEG#0
    0xb3 => return classify_impl_b3(inst), // CLZ-CLZ#0,CLZ-CLS#0,CLZ-CTZ#0,CLZ-CNT#0,CLZ-ABS#0,REV-RBIT#0,REV-REV16#0,REV-REV#0
    0xb4 => return classify_impl_b4(inst), // DUP_SCALAR-DUP_SCALAR#0,DUP_SCALAR-DUP_SCALAR#1,DUP_SCALAR-DUP_SCALAR#2,DUP_SCALAR-DUP_SCALAR#3,DUP_SCALAR-DUP_SCALAR#4,DUP_SCALAR-DUP_SCALAR#5,DUP_SCALAR-DUP_SCALAR#6,DUP_SCALAR-DUP_SCALAR#7,DUP_SCALAR-DUP_SCALAR#8,DUP_SCALAR-DUP_SCALAR#9,DUP_SCALAR-DUP_SCALAR#10,DUP_SCALAR-DUP_SCALAR#11,DUP_SCALAR-DUP_SCALAR#12,DUP_SCALAR-DUP_SCALAR#13,DUP_SCALAR-DUP_SCALAR#14,SHA2_3REG-SHA1C#0,SHA2_3REG-SHA1P#0,SHA2_3REG-SHA1M#0,SHA2_3REG-SHA1SU0#0,SHA2_3REG-SHA256H#0,SHA2_3REG-SHA256H2#0,SHA2_3REG-SHA256SU1#0
    0xb5 => return classify_impl_b5(inst), // QADDSUB_SCALAR-SQADD_SCALAR#0,QADDSUB_SCALAR-SQSUB_SCALAR#0,ARITH1_SCALAR-SUQADD_SCALAR#0,ARITH1_SCALAR-SQABS_SCALAR#0,XTN_SCALAR-SQXTN_SCALAR#0,SHL_REG_SCALAR-SQSHL_SCALAR#0,SHL_REG_SCALAR-SQRSHL_SCALAR#0,FCMP_REG_SCALAR-FCMEQ#0,FRECP_STEP_SCALAR-FRECPS#0,FMULX_SCALAR-FMULX#0,FCVT_SCALAR-FCVTNS_SCALAR#0,FCVT_SCALAR-FCVTMS_SCALAR#0,FCVT_SCALAR-FCVTAS_SCALAR#0,FCVT_FROMINT_SCALAR-SCVTF_VEC_SCALAR#0,SHA2_2REG-SHA1H#0,SHA2_2REG-SHA1SU1#0,SHA2_2REG-SHA256SU0#0
    0xb6 => return classify_impl_b6(inst), // QADDSUB_SCALAR-SQADD_SCALAR#0,QADDSUB_SCALAR-SQSUB_SCALAR#0,SHL_REG_SCALAR-SQSHL_SCALAR#0,SHL_REG_SCALAR-SQRSHL_SCALAR#0,FCMP_REG_SCALAR-FCMEQ#0,FRECP_STEP_SCALAR-FRECPS#0,FMULX_SCALAR-FMULX#0,FP_HORZ_SCALAR-FMAXNMP_SCALAR_FP16#0,FP_HORZ_SCALAR-FADDP_SCALAR_FP16#0,FP_HORZ_SCALAR-FMAXP_SCALAR_FP16#0
    0xb7 => return classify_impl_b7(inst), // FP16_3REG_SCALAR-FMULX_SCALAR_FP16#0,FP16_3REG_SCALAR-FCMEQ_SCALAR_FP16#0,FP16_3REG_SCALAR-FRECPS_SCALAR_FP16#0
    0xb8 => return classify_impl_b8(inst), // QADDSUB_SCALAR-SQADD_SCALAR#0,QADDSUB_SCALAR-SQSUB_SCALAR#0,ARITH1_SCALAR-SUQADD_SCALAR#1,ARITH1_SCALAR-SQABS_SCALAR#1,XTN_SCALAR-SQXTN_SCALAR#1,SHL_REG_SCALAR-SQSHL_SCALAR#1,SHL_REG_SCALAR-SQRSHL_SCALAR#1,SQDMULH_SCALAR-SQDMULH_SCALAR#0,FCMP_REG_SCALAR-FCMEQ#0,FRECP_STEP_SCALAR-FRECPS#0,FMULX_SCALAR-FMULX#0,SQDMULL_SCALAR-SQDMLAL_SCALAR#0,SQDMULL_SCALAR-SQDMLSL_SCALAR#0,SQDMULL_SCALAR-SQDMULL_SCALAR#0,FCVT_SCALAR-FCVTNS_SCALAR#0,FCVT_SCALAR-FCVTMS_SCALAR#0,FCVT_SCALAR-FCVTAS_SCALAR#0,FCVT_FROMINT_SCALAR-SCVTF_VEC_SCALAR#0
    0xb9 => return classify_impl_b9(inst), // QADDSUB_SCALAR-SQADD_SCALAR#0,QADDSUB_SCALAR-SQSUB_SCALAR#0,SHL_REG_SCALAR-SQSHL_SCALAR#1,SHL_REG_SCALAR-SQRSHL_SCALAR#1,SQDMULH_SCALAR-SQDMULH_SCALAR#0,FCMP_REG_SCALAR-FCMEQ#0,FRECP_STEP_SCALAR-FRECPS#0,FMULX_SCALAR-FMULX#0,FP16_2REG_SCALAR-FCVTNS_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTMS_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTAS_SCALAR_FP16#0,FP16_2REG_SCALAR-SCVTF_SCALAR_FP16#0,SQDMULL_SCALAR-SQDMLAL_SCALAR#0,SQDMULL_SCALAR-SQDMLSL_SCALAR#0,SQDMULL_SCALAR-SQDMULL_SCALAR#0
    0xba => return classify_impl_ba(inst), // QADDSUB_SCALAR-SQADD_SCALAR#0,QADDSUB_SCALAR-SQSUB_SCALAR#0,ARITH1_SCALAR-SUQADD_SCALAR#2,ARITH1_SCALAR-SQABS_SCALAR#2,XTN_SCALAR-SQXTN_SCALAR#2,SHL_REG_SCALAR-SQSHL_SCALAR#2,SHL_REG_SCALAR-SQRSHL_SCALAR#2,SQDMULH_SCALAR-SQDMULH_SCALAR#1,FCMP_ZERO_SCALAR-FCMGT_ZERO#0,FCMP_ZERO_SCALAR-FCMEQ_ZERO#0,FCMP_ZERO_SCALAR-FCMLT_ZERO#0,FRECP_SCALAR-FRECPE_SCALAR#0,FRECP_SCALAR-FRECPX_SCALAR#0,FRECP_STEP_SCALAR-FRSQRTS#0,SQDMULL_SCALAR-SQDMLAL_SCALAR#1,SQDMULL_SCALAR-SQDMLSL_SCALAR#1,SQDMULL_SCALAR-SQDMULL_SCALAR#1,FCVT_SCALAR-FCVTPS_SCALAR#0,FCVT_SCALAR-FCVTZS_SCALAR#0
    0xbb => return classify_impl_bb(inst), // QADDSUB_SCALAR-SQADD_SCALAR#0,QADDSUB_SCALAR-SQSUB_SCALAR#0,SHL_REG_SCALAR-SQSHL_SCALAR#2,SHL_REG_SCALAR-SQRSHL_SCALAR#2,SQDMULH_SCALAR-SQDMULH_SCALAR#1,FRECP_STEP_SCALAR-FRSQRTS#0,SQDMULL_SCALAR-SQDMLAL_SCALAR#1,SQDMULL_SCALAR-SQDMLSL_SCALAR#1,SQDMULL_SCALAR-SQDMULL_SCALAR#1,FP_HORZ_SCALAR-FMINNMP_SCALAR_FP16#0,FP_HORZ_SCALAR-FMINP_SCALAR_FP16#0
    0xbc => return classify_impl_bc(inst), // FP16_3REG_SCALAR-FRSQRTS_SCALAR_FP16#0
    0xbd => return classify_impl_bd(inst), // QADDSUB_SCALAR-SQADD_SCALAR#0,QADDSUB_SCALAR-SQSUB_SCALAR#0,CMGT_SCALAR-CMGT#0,CMGT_SCALAR-CMGE#0,CMEQ_SCALAR-CMTST#0,CMZERO_SCALAR-CMGT_ZERO#0,CMZERO_SCALAR-CMEQ_ZERO#0,CMZERO_SCALAR-CMLT_ZERO#0,ARITH1_SCALAR-SUQADD_SCALAR#3,ARITH1_SCALAR-SQABS_SCALAR#3,ARITH1_SCALAR-ABS_SCALAR#0,SHL_REG_SCALAR-SQSHL_SCALAR#3,SHL_REG_SCALAR-SQRSHL_SCALAR#3,SHL_REG_SCALAR-SSHL_SCALAR#0,SHL_REG_SCALAR-SRSHL_SCALAR#0,ADDSUB_SCALAR-ADD_SCALAR#0,FCMP_ZERO_SCALAR-FCMGT_ZERO#0,FCMP_ZERO_SCALAR-FCMEQ_ZERO#0,FCMP_ZERO_SCALAR-FCMLT_ZERO#0,FRECP_SCALAR-FRECPE_SCALAR#0,FRECP_SCALAR-FRECPX_SCALAR#0,FRECP_STEP_SCALAR-FRSQRTS#0,FCVT_SCALAR-FCVTPS_SCALAR#0,FCVT_SCALAR-FCVTZS_SCALAR#0
    0xbe => return classify_impl_be(inst), // QADDSUB_SCALAR-SQADD_SCALAR#0,QADDSUB_SCALAR-SQSUB_SCALAR#0,CMGT_SCALAR-CMGT#0,CMGT_SCALAR-CMGE#0,CMEQ_SCALAR-CMTST#0,SHL_REG_SCALAR-SQSHL_SCALAR#3,SHL_REG_SCALAR-SQRSHL_SCALAR#3,SHL_REG_SCALAR-SSHL_SCALAR#0,SHL_REG_SCALAR-SRSHL_SCALAR#0,ADDSUB_SCALAR-ADD_SCALAR#0,FRECP_STEP_SCALAR-FRSQRTS#0,FP16_2REG_SCALAR-FCMGT_ZERO_SCALAR_FP16#0,FP16_2REG_SCALAR-FCMEQ_ZERO_SCALAR_FP16#0,FP16_2REG_SCALAR-FCMLT_ZERO_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTPS_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTZS_SCALAR_FP16#0,FP16_2REG_SCALAR-FRECPE_SCALAR_FP16#0,FP16_2REG_SCALAR-FRECPX_SCALAR_FP16#0,INT_HORZ_SCALAR-ADDP_SCALAR#0
    0xbf => return classify_impl_bf(inst), // QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#0,SHRN_SCALAR_IMM-SQSHRN_SCALAR#0,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#0,FMUL_ELEM_SCALAR_FP16-FMLA_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMLS_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMUL_ELEM_SCALAR_FP16#0
    0xc0 => return classify_impl_c0(inst), // QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#1,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#2,SHRN_SCALAR_IMM-SQSHRN_SCALAR#1,SHRN_SCALAR_IMM-SQSHRN_SCALAR#2,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#1,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#2,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX_FP16#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX_FP16#1,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX_FP16#0,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX_FP16#1,FMUL_ELEM_SCALAR_FP16-FMLA_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMLS_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMUL_ELEM_SCALAR_FP16#0
    0xc1 => return classify_impl_c1(inst), // QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#3,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#4,SHRN_SCALAR_IMM-SQSHRN_SCALAR#3,SHRN_SCALAR_IMM-SQSHRN_SCALAR#4,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#3,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#4,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#1,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#0,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#1,FMUL_ELEM_SCALAR_FP16-FMLA_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMLS_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMUL_ELEM_SCALAR_FP16#0
    0xc2 => return classify_impl_c2(inst), // QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#5,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#6,SHRN_SCALAR_IMM-SQSHRN_SCALAR#5,SHRN_SCALAR_IMM-SQSHRN_SCALAR#6,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#5,SHRN_SCALAR_IMM-SQRSHRN_SCALAR#6,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#2,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#3,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#2,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#3,FMUL_ELEM_SCALAR_FP16-FMLA_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMLS_ELEM_SCALAR_FP16#0,FMUL_ELEM_SCALAR_FP16-FMUL_ELEM_SCALAR_FP16#0
    0xc3 => return classify_impl_c3(inst), // SHR_SCALAR_IMM-SSHR_SCALAR#0,SHR_SCALAR_IMM-SSRA_SCALAR#0,SHR_SCALAR_IMM-SRSHR_SCALAR#0,SHR_SCALAR_IMM-SRSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#7,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#8,SHIFT_SCALAR_IMM-SHL_SCALAR#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#4,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#5,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#4,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#5,MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#0
    0xc4 => return classify_impl_c4(inst), // SHR_SCALAR_IMM-SSHR_SCALAR#0,SHR_SCALAR_IMM-SSRA_SCALAR#0,SHR_SCALAR_IMM-SRSHR_SCALAR#0,SHR_SCALAR_IMM-SRSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#9,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#10,SHIFT_SCALAR_IMM-SHL_SCALAR#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#6,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#7,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#6,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#7,MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#0
    0xc5 => return classify_impl_c5(inst), // SHR_SCALAR_IMM-SSHR_SCALAR#0,SHR_SCALAR_IMM-SSRA_SCALAR#0,SHR_SCALAR_IMM-SRSHR_SCALAR#0,SHR_SCALAR_IMM-SRSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#11,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#12,SHIFT_SCALAR_IMM-SHL_SCALAR#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#8,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#9,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#8,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#9,MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#0
    0xc6 => return classify_impl_c6(inst), // SHR_SCALAR_IMM-SSHR_SCALAR#0,SHR_SCALAR_IMM-SSRA_SCALAR#0,SHR_SCALAR_IMM-SRSHR_SCALAR#0,SHR_SCALAR_IMM-SRSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#13,QSHL_SCALAR_IMM-SQSHL_IMM_SCALAR#14,SHIFT_SCALAR_IMM-SHL_SCALAR#0,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#10,FCVT_SCALAR_FIXED-SCVTF_SCALAR_FIX#11,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#10,FCVT_SCALAR_FIXED-FCVTZS_SCALAR_FIX#11,MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#0,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#0
    0xc7 => return classify_impl_c7(inst), // MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#1,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#1,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#1,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#1,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#1,FMUL_ELEM_SCALAR-FMLA_ELEM_SCALAR#0,FMUL_ELEM_SCALAR-FMLS_ELEM_SCALAR#0,FMUL_ELEM_SCALAR-FMUL_ELEM_SCALAR#0
    0xc8 => return classify_impl_c8(inst), // MUL_ELEM_SCALAR-SQDMULH_ELEM_SCALAR#1,MUL_ELEM_SCALAR-SQRDMULH_ELEM_SCALAR#1,MULL_ELEM_SCALAR-SQDMLAL_ELEM_SCALAR#1,MULL_ELEM_SCALAR-SQDMLSL_ELEM_SCALAR#1,MULL_ELEM_SCALAR-SQDMULL_ELEM_SCALAR#1,FMUL_ELEM_SCALAR-FMLA_ELEM_SCALAR#1,FMUL_ELEM_SCALAR-FMLS_ELEM_SCALAR#1,FMUL_ELEM_SCALAR-FMUL_ELEM_SCALAR#1
    0xc9 => return classify_impl_c9(inst), // FMUL_ELEM_SCALAR-FMLA_ELEM_SCALAR#2,FMUL_ELEM_SCALAR-FMLS_ELEM_SCALAR#2,FMUL_ELEM_SCALAR-FMUL_ELEM_SCALAR#2
    0xca => return classify_impl_ca(inst), // ANDOREOR_SHIFT-ANDS_SHIFT#0
    0xcb => return classify_impl_cb(inst), // ANDOREOR_SHIFT-BICS_SHIFT#0
    0xcc => return classify_impl_cc(inst), // ADDSUB_SHIFT-SUBS_SHIFT#0
    0xcd => return classify_impl_cd(inst), // ADDSUB_EXT-SUBS_EXT#0,ADDSUB_EXT-SUBS_EXT#1,ADDSUB_EXT-SUBS_EXT#2,ADDSUB_EXT-SUBS_EXT#3,ADDSUB_EXT-SUBS_EXT#4
    0xce => return classify_impl_ce(inst), // ADDSUB_SHIFT-SUBS_SHIFT#1
    0xcf => return classify_impl_cf(inst), // ADDSUB_SHIFT-SUBS_SHIFT#2
    0xd0 => return classify_impl_d0(inst), // INS-INS_ELEM#0,INS-INS_ELEM#1,INS-INS_ELEM#2,INS-INS_ELEM#3,INS-INS_ELEM#4,INS-INS_ELEM#5,INS-INS_ELEM#6,INS-INS_ELEM#7,INS-INS_ELEM#8,INS-INS_ELEM#9,INS-INS_ELEM#10,INS-INS_ELEM#11,INS-INS_ELEM#12,INS-INS_ELEM#13,INS-INS_ELEM#14,INS-INS_ELEM#15,INS-INS_ELEM#16,INS-INS_ELEM#17,INS-INS_ELEM#18,INS-INS_ELEM#19,INS-INS_ELEM#20,INS-INS_ELEM#21,INS-INS_ELEM#22,INS-INS_ELEM#23,INS-INS_ELEM#24,INS-INS_ELEM#25,INS-INS_ELEM#26,INS-INS_ELEM#27,INS-INS_ELEM#28,INS-INS_ELEM#29,INS-INS_ELEM#30,INS-INS_ELEM#31,INS-INS_ELEM#32,INS-INS_ELEM#33,INS-INS_ELEM#34,INS-INS_ELEM#35,INS-INS_ELEM#36,INS-INS_ELEM#37,INS-INS_ELEM#38,INS-INS_ELEM#39,INS-INS_ELEM#40,INS-INS_ELEM#41,INS-INS_ELEM#42,INS-INS_ELEM#43,INS-INS_ELEM#44,INS-INS_ELEM#45,INS-INS_ELEM#46,INS-INS_ELEM#47,INS-INS_ELEM#48,INS-INS_ELEM#49,INS-INS_ELEM#50,INS-INS_ELEM#51,INS-INS_ELEM#52,INS-INS_ELEM#53,INS-INS_ELEM#54,INS-INS_ELEM#55,INS-INS_ELEM#56,INS-INS_ELEM#57,INS-INS_ELEM#58,INS-INS_ELEM#59,INS-INS_ELEM#60,INS-INS_ELEM#61,INS-INS_ELEM#62,INS-INS_ELEM#63,INS-INS_ELEM#64,INS-INS_ELEM#65,INS-INS_ELEM#66,INS-INS_ELEM#67,INS-INS_ELEM#68,INS-INS_ELEM#69,INS-INS_ELEM#70,INS-INS_ELEM#71,INS-INS_ELEM#72,INS-INS_ELEM#73,INS-INS_ELEM#74,INS-INS_ELEM#75,INS-INS_ELEM#76,INS-INS_ELEM#77,INS-INS_ELEM#78,INS-INS_ELEM#79,INS-INS_ELEM#80,INS-INS_ELEM#81,INS-INS_ELEM#82,INS-INS_ELEM#83,INS-INS_ELEM#84,INS-INS_ELEM#85,INS-INS_ELEM#86,INS-INS_ELEM#87,INS-INS_ELEM#88,INS-INS_ELEM#89,INS-INS_ELEM#90,INS-INS_ELEM#91,INS-INS_ELEM#92,INS-INS_ELEM#93,INS-INS_ELEM#94,INS-INS_ELEM#95,INS-INS_ELEM#96,INS-INS_ELEM#97,INS-INS_ELEM#98,INS-INS_ELEM#99,INS-INS_ELEM#100,INS-INS_ELEM#101,INS-INS_ELEM#102,INS-INS_ELEM#103,INS-INS_ELEM#104,INS-INS_ELEM#105,INS-INS_ELEM#106,INS-INS_ELEM#107,INS-INS_ELEM#108,INS-INS_ELEM#109,INS-INS_ELEM#110,INS-INS_ELEM#111,INS-INS_ELEM#112,INS-INS_ELEM#113,INS-INS_ELEM#114,INS-INS_ELEM#115,INS-INS_ELEM#116,INS-INS_ELEM#117,INS-INS_ELEM#118,INS-INS_ELEM#119,INS-INS_ELEM#120,INS-INS_ELEM#121,INS-INS_ELEM#122,INS-INS_ELEM#123,INS-INS_ELEM#124,INS-INS_ELEM#125,INS-INS_ELEM#126,INS-INS_ELEM#127,INS-INS_ELEM#128,INS-INS_ELEM#129,INS-INS_ELEM#130,INS-INS_ELEM#131,INS-INS_ELEM#132,INS-INS_ELEM#133,INS-INS_ELEM#134,INS-INS_ELEM#135,INS-INS_ELEM#136,INS-INS_ELEM#137,INS-INS_ELEM#138,INS-INS_ELEM#139,INS-INS_ELEM#140,INS-INS_ELEM#141,INS-INS_ELEM#142,INS-INS_ELEM#143,INS-INS_ELEM#144,INS-INS_ELEM#145,INS-INS_ELEM#146,INS-INS_ELEM#147,INS-INS_ELEM#148,INS-INS_ELEM#149,INS-INS_ELEM#150,INS-INS_ELEM#151,INS-INS_ELEM#152,INS-INS_ELEM#153,INS-INS_ELEM#154,INS-INS_ELEM#155,INS-INS_ELEM#156,INS-INS_ELEM#157,INS-INS_ELEM#158,INS-INS_ELEM#159,INS-INS_ELEM#160,INS-INS_ELEM#161,INS-INS_ELEM#162,INS-INS_ELEM#163,INS-INS_ELEM#164,INS-INS_ELEM#165,INS-INS_ELEM#166,INS-INS_ELEM#167,INS-INS_ELEM#168,INS-INS_ELEM#169,INS-INS_ELEM#170,INS-INS_ELEM#171,INS-INS_ELEM#172,INS-INS_ELEM#173,INS-INS_ELEM#174,INS-INS_ELEM#175,INS-INS_ELEM#176,INS-INS_ELEM#177,INS-INS_ELEM#178,INS-INS_ELEM#179,INS-INS_ELEM#180,INS-INS_ELEM#181,INS-INS_ELEM#182,INS-INS_ELEM#183,INS-INS_ELEM#184,INS-INS_ELEM#185,INS-INS_ELEM#186,INS-INS_ELEM#187,INS-INS_ELEM#188,INS-INS_ELEM#189,INS-INS_ELEM#190,INS-INS_ELEM#191,INS-INS_ELEM#192,INS-INS_ELEM#193,INS-INS_ELEM#194,INS-INS_ELEM#195,INS-INS_ELEM#196,INS-INS_ELEM#197,INS-INS_ELEM#198,INS-INS_ELEM#199,INS-INS_ELEM#200,INS-INS_ELEM#201,INS-INS_ELEM#202,INS-INS_ELEM#203,INS-INS_ELEM#204,INS-INS_ELEM#205,INS-INS_ELEM#206,INS-INS_ELEM#207,INS-INS_ELEM#208,INS-INS_ELEM#209,INS-INS_ELEM#210,INS-INS_ELEM#211,INS-INS_ELEM#212,INS-INS_ELEM#213,INS-INS_ELEM#214,INS-INS_ELEM#215,INS-INS_ELEM#216,INS-INS_ELEM#217,INS-INS_ELEM#218,INS-INS_ELEM#219,INS-INS_ELEM#220,INS-INS_ELEM#221,INS-INS_ELEM#222,INS-INS_ELEM#223,INS-INS_ELEM#224,INS-INS_ELEM#225,INS-INS_ELEM#226,INS-INS_ELEM#227,INS-INS_ELEM#228,INS-INS_ELEM#229,INS-INS_ELEM#230,INS-INS_ELEM#231,INS-INS_ELEM#232,INS-INS_ELEM#233,INS-INS_ELEM#234,INS-INS_ELEM#235,INS-INS_ELEM#236,INS-INS_ELEM#237,INS-INS_ELEM#238,INS-INS_ELEM#239,EXT-EXT#1,EXT-EXT#2
    0xd1 => return classify_impl_d1(inst), // HADDSUB_VEC-UHADD#0,HADDSUB_VEC-URHADD#0,HADDSUB_VEC-UHSUB#0,QADDSUB_VEC-UQADD#3,QADDSUB_VEC-UQSUB#3,CMGT_VEC-CMHIV#3,CMGT_VEC-CMHSV#3,CMEQ_VEC-CMEQV#3,CMZERO_VEC-CMGE_ZERO_VEC#3,CMZERO_VEC-CMLE_ZERO_VEC#3,ARITH1_VEC-USQADD_VEC#3,ARITH1_VEC-SQNEG_VEC#3,ARITH1_VEC-NEG_VEC#3,ADDLP_VEC-UADDLP#0,ADDLP_VEC-UADALP#0,CLZ_VEC-CLZ_VEC#0,BIT_VEC-NOT_VEC#0,REV_VEC-REV32_VEC#0,XTN_VEC-SQXTUN2_VEC#0,XTN_VEC-UQXTN2_VEC#0,SHL_REG_VEC-USHL#3,SHL_REG_VEC-UQSHL#3,SHL_REG_VEC-URSHL#3,SHL_REG_VEC-UQRSHL#3,MINMAX_VEC-UMAX#0,MINMAX_VEC-UMIN#0,MINMAX_VEC-UMAXP#0,MINMAX_VEC-UMINP#0,ABD_VEC-UABD#0,ABD_VEC-UABA#0,ADDSUB_VEC-SUB_VEC#3,MUL_VEC-MLS_VEC#0,MUL_VEC-PMUL_VEC#0,FMINMAX_VEC-FMAXNMP_VEC#1,FMINMAX_VEC-FMAXP_VEC#1,FCMP_REG_VEC-FCMGE_VEC#1,FCMP_REG_VEC-FACGE_VEC#1,FADDSUB_VEC-FADDP_VEC#1,FMUL_VEC-FMULV#1,FDIV_VEC-FDIVV#1,ANDOREOR_VEC-EORV#0,ADDSUBL_VEC-UADDL2#0,ADDSUBL_VEC-USUBL2#0,ADDSUBW_VEC-UADDW2#0,ADDSUBW_VEC-USUBW2#0,ADDSUBHN_VEC-RADDHN2#0,ADDSUBHN_VEC-RSUBHN2#0,ABDL_VEC-UABAL2#0,ABDL_VEC-UABDL2#0,MULL_VEC-UMLAL2#0,MULL_VEC-UMLSL2#0,MULL_VEC-UMULL2#0,SHLL_VEC_ESZ-SHLL2_VEC_ESZ#0,FCVT_VEC-FCVTNU_VEC#1,FCVT_VEC-FCVTMU_VEC#1,FCVT_VEC-FCVTAU_VEC#1,FCVT_FROMINT_VEC-UCVTF_VEC#1,FRINT_VEC-FRINTA_VEC#1,FRINT_VEC-FRINTX_VEC#1,FRINTTS_VEC-FRINT32X_VEC#1,FRINTTS_VEC-FRINT64X_VEC#1,FHM_VEC-FMLAL2_VEC#0
    0xd2 => return classify_impl_d2(inst), // HADDSUB_VEC-UHADD#0,HADDSUB_VEC-URHADD#0,HADDSUB_VEC-UHSUB#0,QADDSUB_VEC-UQADD#3,QADDSUB_VEC-UQSUB#3,CMGT_VEC-CMHIV#3,CMGT_VEC-CMHSV#3,CMEQ_VEC-CMEQV#3,SHL_REG_VEC-USHL#3,SHL_REG_VEC-UQSHL#3,SHL_REG_VEC-URSHL#3,SHL_REG_VEC-UQRSHL#3,MINMAX_VEC-UMAX#0,MINMAX_VEC-UMIN#0,MINMAX_VEC-UMAXP#0,MINMAX_VEC-UMINP#0,ABD_VEC-UABD#0,ABD_VEC-UABA#0,ADDSUB_VEC-SUB_VEC#3,MUL_VEC-MLS_VEC#0,MUL_VEC-PMUL_VEC#0,FMINMAX_VEC-FMAXNMP_VEC#1,FMINMAX_VEC-FMAXP_VEC#1,FCMP_REG_VEC-FCMGE_VEC#1,FCMP_REG_VEC-FACGE_VEC#1,FADDSUB_VEC-FADDP_VEC#1,FMUL_VEC-FMULV#1,FDIV_VEC-FDIVV#1,ANDOREOR_VEC-EORV#0,ADDSUBL_VEC-UADDL2#0,ADDSUBL_VEC-USUBL2#0,ADDSUBW_VEC-UADDW2#0,ADDSUBW_VEC-USUBW2#0,ADDSUBHN_VEC-RADDHN2#0,ADDSUBHN_VEC-RSUBHN2#0,ABDL_VEC-UABAL2#0,ABDL_VEC-UABDL2#0,MULL_VEC-UMLAL2#0,MULL_VEC-UMLSL2#0,MULL_VEC-UMULL2#0,INT_HORZ_VEC-UADDLV#2,INT_HORZ_VEC-UMAXV#2,INT_HORZ_VEC-UMINV#2,FP_HORZ_VEC-FMAXNMV#0,FP_HORZ_VEC-FMAXV#0,FHM_VEC-FMLAL2_VEC#0
    0xd3 => return classify_impl_d3(inst), // FP16_3REG_VEC-FMAXNMP_VEC_FP16#0,FP16_3REG_VEC-FADDP_VEC_FP16#0,FP16_3REG_VEC-FMUL_VEC_FP16#0,FP16_3REG_VEC-FCMGE_VEC_FP16#0,FP16_3REG_VEC-FACGE_VEC_FP16#0,FP16_3REG_VEC-FMAXP_VEC_FP16#0,FP16_3REG_VEC-FDIV_VEC_FP16#0,SQRDMLAH_VEC-SQRDMLAH#0,SQRDMLAH_VEC-SQRDMLSH#0,DOT_VEC-BFDOT_VEC#1,DOT_VEC-BFMMLA_VEC#0,FCMLA_VEC-FCMLA_VEC#4,FCMLA_VEC-FCMLA_VEC#5,FCMLA_VEC-FCADD_VEC#2
    0xd4 => return classify_impl_d4(inst), // HADDSUB_VEC-UHADD#1,HADDSUB_VEC-URHADD#1,HADDSUB_VEC-UHSUB#1,QADDSUB_VEC-UQADD#4,QADDSUB_VEC-UQSUB#4,CMGT_VEC-CMHIV#4,CMGT_VEC-CMHSV#4,CMEQ_VEC-CMEQV#4,CMZERO_VEC-CMGE_ZERO_VEC#4,CMZERO_VEC-CMLE_ZERO_VEC#4,ARITH1_VEC-USQADD_VEC#4,ARITH1_VEC-SQNEG_VEC#4,ARITH1_VEC-NEG_VEC#4,ADDLP_VEC-UADDLP#1,ADDLP_VEC-UADALP#1,CLZ_VEC-CLZ_VEC#1,BIT_VEC-RBIT_VEC#0,REV_VEC-REV32_VEC#1,XTN_VEC-SQXTUN2_VEC#1,XTN_VEC-UQXTN2_VEC#1,SHL_REG_VEC-USHL#4,SHL_REG_VEC-UQSHL#4,SHL_REG_VEC-URSHL#4,SHL_REG_VEC-UQRSHL#4,MINMAX_VEC-UMAX#1,MINMAX_VEC-UMIN#1,MINMAX_VEC-UMAXP#1,MINMAX_VEC-UMINP#1,ABD_VEC-UABD#1,ABD_VEC-UABA#1,ADDSUB_VEC-SUB_VEC#4,MUL_VEC-MLS_VEC#1,SQDMULH_VEC-SQRDMULH#0,FMINMAX_VEC-FMAXNMP_VEC#2,FMINMAX_VEC-FMAXP_VEC#2,FCMP_REG_VEC-FCMGE_VEC#2,FCMP_REG_VEC-FACGE_VEC#2,FADDSUB_VEC-FADDP_VEC#2,FMUL_VEC-FMULV#2,FDIV_VEC-FDIVV#2,ANDOREOR_VEC-BSLV#0,ADDSUBL_VEC-UADDL2#1,ADDSUBL_VEC-USUBL2#1,ADDSUBW_VEC-UADDW2#1,ADDSUBW_VEC-USUBW2#1,ADDSUBHN_VEC-RADDHN2#1,ADDSUBHN_VEC-RSUBHN2#1,ABDL_VEC-UABAL2#1,ABDL_VEC-UABDL2#1,MULL_VEC-UMLAL2#1,MULL_VEC-UMLSL2#1,MULL_VEC-UMULL2#1,SHLL_VEC_ESZ-SHLL2_VEC_ESZ#1,FCVT_VEC-FCVTNU_VEC#2,FCVT_VEC-FCVTMU_VEC#2,FCVT_VEC-FCVTAU_VEC#2,FCVT_FROMINT_VEC-UCVTF_VEC#2,FCVTN_VEC-FCVTXN2#0,FRINT_VEC-FRINTA_VEC#2,FRINT_VEC-FRINTX_VEC#2,FRINTTS_VEC-FRINT32X_VEC#2,FRINTTS_VEC-FRINT64X_VEC#2
    0xd5 => return classify_impl_d5(inst), // HADDSUB_VEC-UHADD#1,HADDSUB_VEC-URHADD#1,HADDSUB_VEC-UHSUB#1,QADDSUB_VEC-UQADD#4,QADDSUB_VEC-UQSUB#4,CMGT_VEC-CMHIV#4,CMGT_VEC-CMHSV#4,CMEQ_VEC-CMEQV#4,SHL_REG_VEC-USHL#4,SHL_REG_VEC-UQSHL#4,SHL_REG_VEC-URSHL#4,SHL_REG_VEC-UQRSHL#4,MINMAX_VEC-UMAX#1,MINMAX_VEC-UMIN#1,MINMAX_VEC-UMAXP#1,MINMAX_VEC-UMINP#1,ABD_VEC-UABD#1,ABD_VEC-UABA#1,ADDSUB_VEC-SUB_VEC#4,MUL_VEC-MLS_VEC#1,SQDMULH_VEC-SQRDMULH#0,FMINMAX_VEC-FMAXNMP_VEC#2,FMINMAX_VEC-FMAXP_VEC#2,FCMP_REG_VEC-FCMGE_VEC#2,FCMP_REG_VEC-FACGE_VEC#2,FADDSUB_VEC-FADDP_VEC#2,FMUL_VEC-FMULV#2,FDIV_VEC-FDIVV#2,FP16_2REG_VEC-FRINTA_VEC_FP16#0,FP16_2REG_VEC-FRINTX_VEC_FP16#0,FP16_2REG_VEC-FCVTNU_VEC_FP16#0,FP16_2REG_VEC-FCVTMU_VEC_FP16#0,FP16_2REG_VEC-FCVTAU_VEC_FP16#0,FP16_2REG_VEC-UCVTF_VEC_FP16#0,ANDOREOR_VEC-BSLV#0,ADDSUBL_VEC-UADDL2#1,ADDSUBL_VEC-USUBL2#1,ADDSUBW_VEC-UADDW2#1,ADDSUBW_VEC-USUBW2#1,ADDSUBHN_VEC-RADDHN2#1,ADDSUBHN_VEC-RSUBHN2#1,ABDL_VEC-UABAL2#1,ABDL_VEC-UABDL2#1,MULL_VEC-UMLAL2#1,MULL_VEC-UMLSL2#1,MULL_VEC-UMULL2#1,INT_HORZ_VEC-UADDLV#3,INT_HORZ_VEC-UMAXV#3,INT_HORZ_VEC-UMINV#3
    0xd6 => return classify_impl_d6(inst), // SQRDMLAH_VEC-SQRDMLAH#1,SQRDMLAH_VEC-SQRDMLSH#1,DOT_VEC-UDOT_VEC#1,DOT_VEC-UMMLA_VEC#0,FCMLA_VEC-FCMLA_VEC#6,FCMLA_VEC-FCMLA_VEC#7,FCMLA_VEC-FCADD_VEC#3
    0xd7 => return classify_impl_d7(inst), // HADDSUB_VEC-UHADD#2,HADDSUB_VEC-URHADD#2,HADDSUB_VEC-UHSUB#2,QADDSUB_VEC-UQADD#5,QADDSUB_VEC-UQSUB#5,CMGT_VEC-CMHIV#5,CMGT_VEC-CMHSV#5,CMEQ_VEC-CMEQV#5,CMZERO_VEC-CMGE_ZERO_VEC#5,CMZERO_VEC-CMLE_ZERO_VEC#5,ARITH1_VEC-USQADD_VEC#5,ARITH1_VEC-SQNEG_VEC#5,ARITH1_VEC-NEG_VEC#5,ADDLP_VEC-UADDLP#2,ADDLP_VEC-UADALP#2,CLZ_VEC-CLZ_VEC#2,XTN_VEC-SQXTUN2_VEC#2,XTN_VEC-UQXTN2_VEC#2,SHL_REG_VEC-USHL#5,SHL_REG_VEC-UQSHL#5,SHL_REG_VEC-URSHL#5,SHL_REG_VEC-UQRSHL#5,MINMAX_VEC-UMAX#2,MINMAX_VEC-UMIN#2,MINMAX_VEC-UMAXP#2,MINMAX_VEC-UMINP#2,ABD_VEC-UABD#2,ABD_VEC-UABA#2,ADDSUB_VEC-SUB_VEC#5,MUL_VEC-MLS_VEC#2,SQDMULH_VEC-SQRDMULH#1,FMINMAX_VEC-FMINNMP_VEC#1,FMINMAX_VEC-FMINP_VEC#1,FCMP_REG_VEC-FCMGT_VEC#1,FCMP_REG_VEC-FACGT_VEC#1,FCMP_ZERO_VEC-FCMGE_ZERO_VEC#1,FCMP_ZERO_VEC-FCMLE_ZERO_VEC#1,FARITH1_VEC-FNEG_VEC#1,FARITH1_VEC-FSQRT_VEC#1,FADDSUB_VEC-FABD_VEC#1,FRECP_VEC-URSQRTE_VEC#1,FRECP_VEC-FRSQRTE_VEC#1,ANDOREOR_VEC-BITV#0,ADDSUBL_VEC-UADDL2#2,ADDSUBL_VEC-USUBL2#2,ADDSUBW_VEC-UADDW2#2,ADDSUBW_VEC-USUBW2#2,ADDSUBHN_VEC-RADDHN2#2,ADDSUBHN_VEC-RSUBHN2#2,ABDL_VEC-UABAL2#2,ABDL_VEC-UABDL2#2,MULL_VEC-UMLAL2#2,MULL_VEC-UMLSL2#2,MULL_VEC-UMULL2#2,SHLL_VEC_ESZ-SHLL2_VEC_ESZ#2,FCVT_VEC-FCVTPU_VEC#1,FCVT_VEC-FCVTZU_VEC#1,FRINT_VEC-FRINTI_VEC#1,FHM_VEC-FMLSL2_VEC#0
    0xd8 => return classify_impl_d8(inst), // HADDSUB_VEC-UHADD#2,HADDSUB_VEC-URHADD#2,HADDSUB_VEC-UHSUB#2,QADDSUB_VEC-UQADD#5,QADDSUB_VEC-UQSUB#5,CMGT_VEC-CMHIV#5,CMGT_VEC-CMHSV#5,CMEQ_VEC-CMEQV#5,SHL_REG_VEC-USHL#5,SHL_REG_VEC-UQSHL#5,SHL_REG_VEC-URSHL#5,SHL_REG_VEC-UQRSHL#5,MINMAX_VEC-UMAX#2,MINMAX_VEC-UMIN#2,MINMAX_VEC-UMAXP#2,MINMAX_VEC-UMINP#2,ABD_VEC-UABD#2,ABD_VEC-UABA#2,ADDSUB_VEC-SUB_VEC#5,MUL_VEC-MLS_VEC#2,SQDMULH_VEC-SQRDMULH#1,FMINMAX_VEC-FMINNMP_VEC#1,FMINMAX_VEC-FMINP_VEC#1,FCMP_REG_VEC-FCMGT_VEC#1,FCMP_REG_VEC-FACGT_VEC#1,FADDSUB_VEC-FABD_VEC#1,ANDOREOR_VEC-BITV#0,ADDSUBL_VEC-UADDL2#2,ADDSUBL_VEC-USUBL2#2,ADDSUBW_VEC-UADDW2#2,ADDSUBW_VEC-USUBW2#2,ADDSUBHN_VEC-RADDHN2#2,ADDSUBHN_VEC-RSUBHN2#2,ABDL_VEC-UABAL2#2,ABDL_VEC-UABDL2#2,MULL_VEC-UMLAL2#2,MULL_VEC-UMLSL2#2,MULL_VEC-UMULL2#2,INT_HORZ_VEC-UADDLV#4,INT_HORZ_VEC-UMAXV#4,INT_HORZ_VEC-UMINV#4,FP_HORZ_VEC-FMINNMV#0,FP_HORZ_VEC-FMINV#0,FHM_VEC-FMLSL2_VEC#0
    0xd9 => return classify_impl_d9(inst), // FP16_3REG_VEC-FMINNMP_VEC_FP16#0,FP16_3REG_VEC-FABD_VEC_FP16#0,FP16_3REG_VEC-FCMGT_VEC_FP16#0,FP16_3REG_VEC-FACGT_VEC_FP16#0,FP16_3REG_VEC-FMINP_VEC_FP16#0,FMLAL_VEC-BFMLALT_VEC#0,FCMLA_VEC-FCMLA_VEC#8,FCMLA_VEC-FCMLA_VEC#9,FCMLA_VEC-FCADD_VEC#4
    0xda => return classify_impl_da(inst), // QADDSUB_VEC-UQADD#6,QADDSUB_VEC-UQSUB#6,CMGT_VEC-CMHIV#6,CMGT_VEC-CMHSV#6,CMEQ_VEC-CMEQV#6,CMZERO_VEC-CMGE_ZERO_VEC#6,CMZERO_VEC-CMLE_ZERO_VEC#6,ARITH1_VEC-USQADD_VEC#6,ARITH1_VEC-SQNEG_VEC#6,ARITH1_VEC-NEG_VEC#6,SHL_REG_VEC-USHL#6,SHL_REG_VEC-UQSHL#6,SHL_REG_VEC-URSHL#6,SHL_REG_VEC-UQRSHL#6,ADDSUB_VEC-SUB_VEC#6,FMINMAX_VEC-FMINNMP_VEC#2,FMINMAX_VEC-FMINP_VEC#2,FCMP_REG_VEC-FCMGT_VEC#2,FCMP_REG_VEC-FACGT_VEC#2,FCMP_ZERO_VEC-FCMGE_ZERO_VEC#2,FCMP_ZERO_VEC-FCMLE_ZERO_VEC#2,FARITH1_VEC-FNEG_VEC#2,FARITH1_VEC-FSQRT_VEC#2,FADDSUB_VEC-FABD_VEC#2,FRECP_VEC-FRSQRTE_VEC#2,ANDOREOR_VEC-BIFV#0,FCVT_VEC-FCVTPU_VEC#2,FCVT_VEC-FCVTZU_VEC#2,FRINT_VEC-FRINTI_VEC#2
    0xdb => return classify_impl_db(inst), // QADDSUB_VEC-UQADD#6,QADDSUB_VEC-UQSUB#6,CMGT_VEC-CMHIV#6,CMGT_VEC-CMHSV#6,CMEQ_VEC-CMEQV#6,SHL_REG_VEC-USHL#6,SHL_REG_VEC-UQSHL#6,SHL_REG_VEC-URSHL#6,SHL_REG_VEC-UQRSHL#6,ADDSUB_VEC-SUB_VEC#6,FMINMAX_VEC-FMINNMP_VEC#2,FMINMAX_VEC-FMINP_VEC#2,FCMP_REG_VEC-FCMGT_VEC#2,FCMP_REG_VEC-FACGT_VEC#2,FADDSUB_VEC-FABD_VEC#2,FP16_2REG_VEC-FCMGE_ZERO_VEC_FP16#0,FP16_2REG_VEC-FCMLE_ZERO_VEC_FP16#0,FP16_2REG_VEC-FNEG_VEC_FP16#0,FP16_2REG_VEC-FRINTI_VEC_FP16#0,FP16_2REG_VEC-FCVTPU_VEC_FP16#0,FP16_2REG_VEC-FCVTZU_VEC_FP16#0,FP16_2REG_VEC-FRSQRTE_VEC_FP16#0,FP16_2REG_VEC-FSQRT_VEC_FP16#0,ANDOREOR_VEC-BIFV#0
    0xdc => return classify_impl_dc(inst), // SHR_VEC_IMM-USHR#7,SHR_VEC_IMM-USRA#7,SHR_VEC_IMM-URSHR#7,SHR_VEC_IMM-URSRA#7,QSHL_VEC_IMM-SQSHLU_IMM#7,QSHL_VEC_IMM-UQSHL_IMM#7,SHRN_VEC_IMM-SQSHRUN2#0,SHRN_VEC_IMM-SQRSHRUN2#0,SHRN_VEC_IMM-UQSHRN2#0,SHRN_VEC_IMM-UQRSHRN2#0,SHLL_VEC_IMM-USHLL2#0,SHIFT_VEC_IMM-SRI#7,SHIFT_VEC_IMM-SLI#7,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0,SIMD_IMM-MVNI32#4,SIMD_IMM-MVNI32#5,SIMD_IMM-MVNI32#6,SIMD_IMM-MVNI32#7,SIMD_IMM-BICI32#4,SIMD_IMM-BICI32#5,SIMD_IMM-BICI32#6,SIMD_IMM-BICI32#7,SIMD_IMM-MVNI16#2,SIMD_IMM-MVNI16#3,SIMD_IMM-BICI16#2,SIMD_IMM-BICI16#3,SIMD_IMM-MVNI32_MSL#2,SIMD_IMM-MVNI32_MSL#3,SIMD_IMM-MOVI64#1,SIMD_IMM-FMOV64#0
    0xdd => return classify_impl_dd(inst), // SHR_VEC_IMM-USHR#8,SHR_VEC_IMM-USHR#9,SHR_VEC_IMM-USRA#8,SHR_VEC_IMM-USRA#9,SHR_VEC_IMM-URSHR#8,SHR_VEC_IMM-URSHR#9,SHR_VEC_IMM-URSRA#8,SHR_VEC_IMM-URSRA#9,QSHL_VEC_IMM-SQSHLU_IMM#8,QSHL_VEC_IMM-SQSHLU_IMM#9,QSHL_VEC_IMM-UQSHL_IMM#8,QSHL_VEC_IMM-UQSHL_IMM#9,SHRN_VEC_IMM-SQSHRUN2#1,SHRN_VEC_IMM-SQSHRUN2#2,SHRN_VEC_IMM-SQRSHRUN2#1,SHRN_VEC_IMM-SQRSHRUN2#2,SHRN_VEC_IMM-UQSHRN2#1,SHRN_VEC_IMM-UQSHRN2#2,SHRN_VEC_IMM-UQRSHRN2#1,SHRN_VEC_IMM-UQRSHRN2#2,SHLL_VEC_IMM-USHLL2#1,SHLL_VEC_IMM-USHLL2#2,SHIFT_VEC_IMM-SRI#8,SHIFT_VEC_IMM-SRI#9,SHIFT_VEC_IMM-SLI#8,SHIFT_VEC_IMM-SLI#9,FCVT_VEC_FIXED-UCVTF_VEC_FIX_FP16#2,FCVT_VEC_FIXED-UCVTF_VEC_FIX_FP16#3,FCVT_VEC_FIXED-FCVTZU_VEC_FIX_FP16#2,FCVT_VEC_FIXED-FCVTZU_VEC_FIX_FP16#3,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
    0xde => return classify_impl_de(inst), // SHR_VEC_IMM-USHR#10,SHR_VEC_IMM-USHR#11,SHR_VEC_IMM-USRA#10,SHR_VEC_IMM-USRA#11,SHR_VEC_IMM-URSHR#10,SHR_VEC_IMM-URSHR#11,SHR_VEC_IMM-URSRA#10,SHR_VEC_IMM-URSRA#11,QSHL_VEC_IMM-SQSHLU_IMM#10,QSHL_VEC_IMM-SQSHLU_IMM#11,QSHL_VEC_IMM-UQSHL_IMM#10,QSHL_VEC_IMM-UQSHL_IMM#11,SHRN_VEC_IMM-SQSHRUN2#3,SHRN_VEC_IMM-SQSHRUN2#4,SHRN_VEC_IMM-SQRSHRUN2#3,SHRN_VEC_IMM-SQRSHRUN2#4,SHRN_VEC_IMM-UQSHRN2#3,SHRN_VEC_IMM-UQSHRN2#4,SHRN_VEC_IMM-UQRSHRN2#3,SHRN_VEC_IMM-UQRSHRN2#4,SHLL_VEC_IMM-USHLL2#3,SHLL_VEC_IMM-USHLL2#4,SHIFT_VEC_IMM-SRI#10,SHIFT_VEC_IMM-SRI#11,SHIFT_VEC_IMM-SLI#10,SHIFT_VEC_IMM-SLI#11,FCVT_VEC_FIXED-UCVTF_VEC_FIX#4,FCVT_VEC_FIXED-UCVTF_VEC_FIX#5,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#4,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#5,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
    0xdf => return classify_impl_df(inst), // SHR_VEC_IMM-USHR#12,SHR_VEC_IMM-USHR#13,SHR_VEC_IMM-USRA#12,SHR_VEC_IMM-USRA#13,SHR_VEC_IMM-URSHR#12,SHR_VEC_IMM-URSHR#13,SHR_VEC_IMM-URSRA#12,SHR_VEC_IMM-URSRA#13,QSHL_VEC_IMM-SQSHLU_IMM#12,QSHL_VEC_IMM-SQSHLU_IMM#13,QSHL_VEC_IMM-UQSHL_IMM#12,QSHL_VEC_IMM-UQSHL_IMM#13,SHRN_VEC_IMM-SQSHRUN2#5,SHRN_VEC_IMM-SQSHRUN2#6,SHRN_VEC_IMM-SQRSHRUN2#5,SHRN_VEC_IMM-SQRSHRUN2#6,SHRN_VEC_IMM-UQSHRN2#5,SHRN_VEC_IMM-UQSHRN2#6,SHRN_VEC_IMM-UQRSHRN2#5,SHRN_VEC_IMM-UQRSHRN2#6,SHLL_VEC_IMM-USHLL2#5,SHLL_VEC_IMM-USHLL2#6,SHIFT_VEC_IMM-SRI#12,SHIFT_VEC_IMM-SRI#13,SHIFT_VEC_IMM-SLI#12,SHIFT_VEC_IMM-SLI#13,FCVT_VEC_FIXED-UCVTF_VEC_FIX#6,FCVT_VEC_FIXED-UCVTF_VEC_FIX#7,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#6,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#7,FMUL_ELEM_FP16-FMULX_ELEM_FP16#0
    0xe0 => return classify_impl_e0(inst), // SHR_VEC_IMM-USHR#14,SHR_VEC_IMM-USHR#15,SHR_VEC_IMM-USRA#14,SHR_VEC_IMM-USRA#15,SHR_VEC_IMM-URSHR#14,SHR_VEC_IMM-URSHR#15,SHR_VEC_IMM-URSRA#14,SHR_VEC_IMM-URSRA#15,QSHL_VEC_IMM-SQSHLU_IMM#14,QSHL_VEC_IMM-SQSHLU_IMM#15,QSHL_VEC_IMM-UQSHL_IMM#14,QSHL_VEC_IMM-UQSHL_IMM#15,SHIFT_VEC_IMM-SRI#14,SHIFT_VEC_IMM-SRI#15,SHIFT_VEC_IMM-SLI#14,SHIFT_VEC_IMM-SLI#15,FCVT_VEC_FIXED-UCVTF_VEC_FIX#8,FCVT_VEC_FIXED-UCVTF_VEC_FIX#9,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#8,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#9,MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL2_ELEM#0,MULL_ELEM-UMLSL2_ELEM#0,MULL_ELEM-UMULL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#2,FCMLA_ELEM-FCMLA_ELEM#3
    0xe1 => return classify_impl_e1(inst), // SHR_VEC_IMM-USHR#16,SHR_VEC_IMM-USHR#17,SHR_VEC_IMM-USRA#16,SHR_VEC_IMM-USRA#17,SHR_VEC_IMM-URSHR#16,SHR_VEC_IMM-URSHR#17,SHR_VEC_IMM-URSRA#16,SHR_VEC_IMM-URSRA#17,QSHL_VEC_IMM-SQSHLU_IMM#16,QSHL_VEC_IMM-SQSHLU_IMM#17,QSHL_VEC_IMM-UQSHL_IMM#16,QSHL_VEC_IMM-UQSHL_IMM#17,SHIFT_VEC_IMM-SRI#16,SHIFT_VEC_IMM-SRI#17,SHIFT_VEC_IMM-SLI#16,SHIFT_VEC_IMM-SLI#17,FCVT_VEC_FIXED-UCVTF_VEC_FIX#10,FCVT_VEC_FIXED-UCVTF_VEC_FIX#11,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#10,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#11,MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL2_ELEM#0,MULL_ELEM-UMLSL2_ELEM#0,MULL_ELEM-UMULL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#2,FCMLA_ELEM-FCMLA_ELEM#3
    0xe2 => return classify_impl_e2(inst), // SHR_VEC_IMM-USHR#18,SHR_VEC_IMM-USHR#19,SHR_VEC_IMM-USRA#18,SHR_VEC_IMM-USRA#19,SHR_VEC_IMM-URSHR#18,SHR_VEC_IMM-URSHR#19,SHR_VEC_IMM-URSRA#18,SHR_VEC_IMM-URSRA#19,QSHL_VEC_IMM-SQSHLU_IMM#18,QSHL_VEC_IMM-SQSHLU_IMM#19,QSHL_VEC_IMM-UQSHL_IMM#18,QSHL_VEC_IMM-UQSHL_IMM#19,SHIFT_VEC_IMM-SRI#18,SHIFT_VEC_IMM-SRI#19,SHIFT_VEC_IMM-SLI#18,SHIFT_VEC_IMM-SLI#19,FCVT_VEC_FIXED-UCVTF_VEC_FIX#12,FCVT_VEC_FIXED-UCVTF_VEC_FIX#13,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#12,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#13,MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL2_ELEM#0,MULL_ELEM-UMLSL2_ELEM#0,MULL_ELEM-UMULL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#4,FCMLA_ELEM-FCMLA_ELEM#5
    0xe3 => return classify_impl_e3(inst), // SHR_VEC_IMM-USHR#20,SHR_VEC_IMM-USHR#21,SHR_VEC_IMM-USRA#20,SHR_VEC_IMM-USRA#21,SHR_VEC_IMM-URSHR#20,SHR_VEC_IMM-URSHR#21,SHR_VEC_IMM-URSRA#20,SHR_VEC_IMM-URSRA#21,QSHL_VEC_IMM-SQSHLU_IMM#20,QSHL_VEC_IMM-SQSHLU_IMM#21,QSHL_VEC_IMM-UQSHL_IMM#20,QSHL_VEC_IMM-UQSHL_IMM#21,SHIFT_VEC_IMM-SRI#20,SHIFT_VEC_IMM-SRI#21,SHIFT_VEC_IMM-SLI#20,SHIFT_VEC_IMM-SLI#21,FCVT_VEC_FIXED-UCVTF_VEC_FIX#14,FCVT_VEC_FIXED-UCVTF_VEC_FIX#15,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#14,FCVT_VEC_FIXED-FCVTZU_VEC_FIX#15,MUL_ELEM-MLA_ELEM#0,MUL_ELEM-MLS_ELEM#0,MUL_ELEM-SQRDMLAH_ELEM#0,MUL_ELEM-SQRDMLSH_ELEM#0,MULL_ELEM-UMLAL2_ELEM#0,MULL_ELEM-UMLSL2_ELEM#0,MULL_ELEM-UMULL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#4,FCMLA_ELEM-FCMLA_ELEM#5
    0xe4 => return classify_impl_e4(inst), // MUL_ELEM-MLA_ELEM#1,MUL_ELEM-MLS_ELEM#1,MUL_ELEM-SQRDMLAH_ELEM#1,MUL_ELEM-SQRDMLSH_ELEM#1,MULL_ELEM-UMLAL2_ELEM#1,MULL_ELEM-UMLSL2_ELEM#1,MULL_ELEM-UMULL2_ELEM#1,FMUL_ELEM-FMULX_ELEM#2,DOT_ELEM-UDOT_ELEM#0,FHM_ELEM-FMLAL2_ELEM#0,FHM_ELEM-FMLSL2_ELEM#0,FCMLA_ELEM-FCMLA_ELEM#6,FCMLA_ELEM-FCMLA_ELEM#7
    0xe5 => return classify_impl_e5(inst), // MUL_ELEM-MLA_ELEM#1,MUL_ELEM-MLS_ELEM#1,MUL_ELEM-SQRDMLAH_ELEM#1,MUL_ELEM-SQRDMLSH_ELEM#1,MULL_ELEM-UMLAL2_ELEM#1,MULL_ELEM-UMLSL2_ELEM#1,MULL_ELEM-UMULL2_ELEM#1,FMUL_ELEM-FMULX_ELEM#3,DOT_ELEM-UDOT_ELEM#0,FHM_ELEM-FMLAL2_ELEM#0,FHM_ELEM-FMLSL2_ELEM#0
    0xe6 => return classify_impl_e6(inst), // FMUL_ELEM-FMULX_ELEM#4
    0xe7 => return classify_impl_e7(inst), // ANDOREOR_IMM-ANDS_IMM#0,ANDOREOR_IMM-ANDS_IMM#1,ANDOREOR_IMM-ANDS_IMM#2,ANDOREOR_IMM-ANDS_IMM#3,ANDOREOR_IMM-ANDS_IMM#4,ANDOREOR_IMM-ANDS_IMM#5,ANDOREOR_IMM-ANDS_IMM#6,ANDOREOR_IMM-ANDS_IMM#7,ANDOREOR_IMM-ANDS_IMM#8,ANDOREOR_IMM-ANDS_IMM#9,ANDOREOR_IMM-ANDS_IMM#10,ANDOREOR_IMM-ANDS_IMM#11,ANDOREOR_IMM-ANDS_IMM#12,ANDOREOR_IMM-ANDS_IMM#13,ANDOREOR_IMM-ANDS_IMM#14,ANDOREOR_IMM-ANDS_IMM#15,ANDOREOR_IMM-ANDS_IMM#16,ANDOREOR_IMM-ANDS_IMM#17,ANDOREOR_IMM-ANDS_IMM#18,ANDOREOR_IMM-ANDS_IMM#19,ANDOREOR_IMM-ANDS_IMM#20,ANDOREOR_IMM-ANDS_IMM#21,ANDOREOR_IMM-ANDS_IMM#22,ANDOREOR_IMM-ANDS_IMM#23,ANDOREOR_IMM-ANDS_IMM#24,ANDOREOR_IMM-ANDS_IMM#25,ANDOREOR_IMM-ANDS_IMM#26,ANDOREOR_IMM-ANDS_IMM#27,ANDOREOR_IMM-ANDS_IMM#28,ANDOREOR_IMM-ANDS_IMM#29,ANDOREOR_IMM-ANDS_IMM#30,ANDOREOR_IMM-ANDS_IMM#31,ANDOREOR_IMM-ANDS_IMM#32,ANDOREOR_IMM-ANDS_IMM#33,ANDOREOR_IMM-ANDS_IMM#34,ANDOREOR_IMM-ANDS_IMM#35,ANDOREOR_IMM-ANDS_IMM#36,ANDOREOR_IMM-ANDS_IMM#37,ANDOREOR_IMM-ANDS_IMM#38,ANDOREOR_IMM-ANDS_IMM#39,ANDOREOR_IMM-ANDS_IMM#40,ANDOREOR_IMM-ANDS_IMM#41,ANDOREOR_IMM-ANDS_IMM#42,ANDOREOR_IMM-ANDS_IMM#43,ANDOREOR_IMM-ANDS_IMM#44,ANDOREOR_IMM-ANDS_IMM#45,ANDOREOR_IMM-ANDS_IMM#46,ANDOREOR_IMM-ANDS_IMM#47,ANDOREOR_IMM-ANDS_IMM#48,ANDOREOR_IMM-ANDS_IMM#49,ANDOREOR_IMM-ANDS_IMM#50,ANDOREOR_IMM-ANDS_IMM#51,ANDOREOR_IMM-ANDS_IMM#52,ANDOREOR_IMM-ANDS_IMM#53,ANDOREOR_IMM-ANDS_IMM#54,ANDOREOR_IMM-ANDS_IMM#55,ANDOREOR_IMM-ANDS_IMM#56
    0xe8 => return classify_impl_e8(inst), // MEMU-STURH#0,MEMU-STRH_POST#0,MEMU-STTRH#0,MEMU-STRH_PRE#0
    0xe9 => return classify_impl_e9(inst), // MEM_REG-STRH_REG#0,SWP-SWPH#0,LDATOMIC-LDADDH#0,LDATOMIC-LDCLRH#0,LDATOMIC-LDEORH#0,LDATOMIC-LDSETH#0,LDATOMIC-LDSMAXH#0,LDATOMIC-LDSMINH#0,LDATOMIC-LDUMAXH#0,LDATOMIC-LDUMINH#0
    0xea => return classify_impl_ea(inst), // MEMU-LDURH#0,MEMU-LDRH_POST#0,MEMU-LDTRH#0,MEMU-LDRH_PRE#0
    0xeb => return classify_impl_eb(inst), // MEM_REG-LDRH_REG#0,SWP-SWPLH#0,LDATOMIC-LDADDLH#0,LDATOMIC-LDCLRLH#0,LDATOMIC-LDEORLH#0,LDATOMIC-LDSETLH#0,LDATOMIC-LDSMAXLH#0,LDATOMIC-LDSMINLH#0,LDATOMIC-LDUMAXLH#0,LDATOMIC-LDUMINLH#0
    0xec => return classify_impl_ec(inst), // MEMU-LDURSH#0,MEMU-LDRSH_POST#0,MEMU-LDTRSH#0,MEMU-LDRSH_PRE#0
    0xed => return classify_impl_ed(inst), // MEM_REG-LDRSH_REG#0,SWP-SWPAH#0,LDATOMIC-LDADDAH#0,LDATOMIC-LDCLRAH#0,LDATOMIC-LDEORAH#0,LDATOMIC-LDSETAH#0,LDATOMIC-LDSMAXAH#0,LDATOMIC-LDSMINAH#0,LDATOMIC-LDUMAXAH#0,LDATOMIC-LDUMINAH#0
    0xee => return classify_impl_ee(inst), // MEM_REG-LDRSH_REG#0,SWP-SWPAH#0,LDATOMIC-LDADDAH#0,LDATOMIC-LDCLRAH#0,LDATOMIC-LDEORAH#0,LDATOMIC-LDSETAH#0,LDATOMIC-LDSMAXAH#0,LDATOMIC-LDSMINAH#0,LDATOMIC-LDUMAXAH#0,LDATOMIC-LDUMINAH#0,RCPC-LDAPRH#0
    0xef => return classify_impl_ef(inst), // MEMU-LDURSHW#0,MEMU-LDRSHW_POST#0,MEMU-LDTRSHW#0,MEMU-LDRSHW_PRE#0
    0xf0 => return classify_impl_f0(inst), // MEM_REG-LDRSHW_REG#0,SWP-SWPALH#0,LDATOMIC-LDADDALH#0,LDATOMIC-LDCLRALH#0,LDATOMIC-LDEORALH#0,LDATOMIC-LDSETALH#0,LDATOMIC-LDSMAXALH#0,LDATOMIC-LDSMINALH#0,LDATOMIC-LDUMAXALH#0,LDATOMIC-LDUMINALH#0
    0xf1 => return classify_impl_f1(inst), // ADCSBC-SBCS#0
    0xf2 => return classify_impl_f2(inst), // CCMP_IMM-CCMP_IMM#0,CCMP_REG-CCMP_REG#0
    0xf3 => return classify_impl_f3(inst), // MEMU_FP-STUR_FP#2,MEMU_FP-STR_FP_POST#2,MEMU_FP-STR_FP_PRE#2
    0xf4 => return classify_impl_f4(inst), // MEM_REG_FP-STR_REG_FP#2
    0xf5 => return classify_impl_f5(inst), // MEMU_FP-LDUR_FP#2,MEMU_FP-LDR_FP_POST#2,MEMU_FP-LDR_FP_PRE#2
    0xf6 => return classify_impl_f6(inst), // MEM_REG_FP-LDR_REG_FP#2
    0xf7 => return classify_impl_f7(inst), // QADDSUB_SCALAR-UQADD_SCALAR#0,QADDSUB_SCALAR-UQSUB_SCALAR#0,ARITH1_SCALAR-USQADD_SCALAR#0,ARITH1_SCALAR-SQNEG_SCALAR#0,XTN_SCALAR-SQXTUN_SCALAR#0,XTN_SCALAR-UQXTN_SCALAR#0,SHL_REG_SCALAR-UQSHL_SCALAR#0,SHL_REG_SCALAR-UQRSHL_SCALAR#0,FCMP_REG_SCALAR-FCMGE#0,FCMP_REG_SCALAR-FACGE#0,FCVT_SCALAR-FCVTNU_SCALAR#0,FCVT_SCALAR-FCVTMU_SCALAR#0,FCVT_SCALAR-FCVTAU_SCALAR#0,FCVT_FROMINT_SCALAR-UCVTF_VEC_SCALAR#0
    0xf8 => return classify_impl_f8(inst), // QADDSUB_SCALAR-UQADD_SCALAR#0,QADDSUB_SCALAR-UQSUB_SCALAR#0,SHL_REG_SCALAR-UQSHL_SCALAR#0,SHL_REG_SCALAR-UQRSHL_SCALAR#0,FCMP_REG_SCALAR-FCMGE#0,FCMP_REG_SCALAR-FACGE#0,FP_HORZ_SCALAR-FMAXNMP_SCALAR#0,FP_HORZ_SCALAR-FADDP_SCALAR#0,FP_HORZ_SCALAR-FMAXP_SCALAR#0
    0xf9 => return classify_impl_f9(inst), // FP16_3REG_SCALAR-FCMGE_SCALAR_FP16#0,FP16_3REG_SCALAR-FACGE_SCALAR_FP16#0,SQRDMLAH_SCALAR-SQRDMLAH_SCALAR#0,SQRDMLAH_SCALAR-SQRDMLSH_SCALAR#0
    0xfa => return classify_impl_fa(inst), // QADDSUB_SCALAR-UQADD_SCALAR#0,QADDSUB_SCALAR-UQSUB_SCALAR#0,ARITH1_SCALAR-USQADD_SCALAR#1,ARITH1_SCALAR-SQNEG_SCALAR#1,XTN_SCALAR-SQXTUN_SCALAR#1,XTN_SCALAR-UQXTN_SCALAR#1,SHL_REG_SCALAR-UQSHL_SCALAR#1,SHL_REG_SCALAR-UQRSHL_SCALAR#1,SQDMULH_SCALAR-SQRDMULH_SCALAR#0,FCMP_REG_SCALAR-FCMGE#0,FCMP_REG_SCALAR-FACGE#0,FCVT_SCALAR-FCVTNU_SCALAR#0,FCVT_SCALAR-FCVTMU_SCALAR#0,FCVT_SCALAR-FCVTAU_SCALAR#0,FCVT_FROMINT_SCALAR-UCVTF_VEC_SCALAR#0,FCVTN_SCALAR-FCVTXN_SCALAR#0
    0xfb => return classify_impl_fb(inst), // QADDSUB_SCALAR-UQADD_SCALAR#0,QADDSUB_SCALAR-UQSUB_SCALAR#0,SHL_REG_SCALAR-UQSHL_SCALAR#1,SHL_REG_SCALAR-UQRSHL_SCALAR#1,SQDMULH_SCALAR-SQRDMULH_SCALAR#0,FCMP_REG_SCALAR-FCMGE#0,FCMP_REG_SCALAR-FACGE#0,FP16_2REG_SCALAR-FCVTNU_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTMU_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTAU_SCALAR_FP16#0,FP16_2REG_SCALAR-UCVTF_SCALAR_FP16#0,FP_HORZ_SCALAR-FMAXNMP_SCALAR#1,FP_HORZ_SCALAR-FADDP_SCALAR#1,FP_HORZ_SCALAR-FMAXP_SCALAR#1
    0xfc => return classify_impl_fc(inst), // SQRDMLAH_SCALAR-SQRDMLAH_SCALAR#1,SQRDMLAH_SCALAR-SQRDMLSH_SCALAR#1
    0xfd => return classify_impl_fd(inst), // QADDSUB_SCALAR-UQADD_SCALAR#0,QADDSUB_SCALAR-UQSUB_SCALAR#0,ARITH1_SCALAR-USQADD_SCALAR#2,ARITH1_SCALAR-SQNEG_SCALAR#2,XTN_SCALAR-SQXTUN_SCALAR#2,XTN_SCALAR-UQXTN_SCALAR#2,SHL_REG_SCALAR-UQSHL_SCALAR#2,SHL_REG_SCALAR-UQRSHL_SCALAR#2,SQDMULH_SCALAR-SQRDMULH_SCALAR#1,FCMP_REG_SCALAR-FCMGT#0,FCMP_REG_SCALAR-FACGT#0,FCMP_ZERO_SCALAR-FCMGE_ZERO#0,FCMP_ZERO_SCALAR-FCMLE_ZERO#0,FABD_SCALAR-FABD#0,FRECP_SCALAR-FRSQRTE_SCALAR#0,FCVT_SCALAR-FCVTPU_SCALAR#0,FCVT_SCALAR-FCVTZU_SCALAR#0
    0xfe => return classify_impl_fe(inst), // QADDSUB_SCALAR-UQADD_SCALAR#0,QADDSUB_SCALAR-UQSUB_SCALAR#0,SHL_REG_SCALAR-UQSHL_SCALAR#2,SHL_REG_SCALAR-UQRSHL_SCALAR#2,SQDMULH_SCALAR-SQRDMULH_SCALAR#1,FCMP_REG_SCALAR-FCMGT#0,FCMP_REG_SCALAR-FACGT#0,FABD_SCALAR-FABD#0,FP_HORZ_SCALAR-FMINNMP_SCALAR#0,FP_HORZ_SCALAR-FMINP_SCALAR#0
    0xff => return classify_impl_ff(inst), // FP16_3REG_SCALAR-FABD_SCALAR_FP16#0,FP16_3REG_SCALAR-FCMGT_SCALAR_FP16#0,FP16_3REG_SCALAR-FACGT_SCALAR_FP16#0
    0x100 => return classify_impl_100(inst), // QADDSUB_SCALAR-UQADD_SCALAR#0,QADDSUB_SCALAR-UQSUB_SCALAR#0,CMGT_SCALAR-CMHI#0,CMGT_SCALAR-CMHS#0,CMEQ_SCALAR-CMEQ#0,CMZERO_SCALAR-CMGE_ZERO#0,CMZERO_SCALAR-CMLE_ZERO#0,ARITH1_SCALAR-USQADD_SCALAR#3,ARITH1_SCALAR-SQNEG_SCALAR#3,ARITH1_SCALAR-NEG_SCALAR#0,SHL_REG_SCALAR-UQSHL_SCALAR#3,SHL_REG_SCALAR-UQRSHL_SCALAR#3,SHL_REG_SCALAR-USHL_SCALAR#0,SHL_REG_SCALAR-URSHL_SCALAR#0,ADDSUB_SCALAR-SUB_SCALAR#0,FCMP_REG_SCALAR-FCMGT#0,FCMP_REG_SCALAR-FACGT#0,FCMP_ZERO_SCALAR-FCMGE_ZERO#0,FCMP_ZERO_SCALAR-FCMLE_ZERO#0,FABD_SCALAR-FABD#0,FRECP_SCALAR-FRSQRTE_SCALAR#0,FCVT_SCALAR-FCVTPU_SCALAR#0,FCVT_SCALAR-FCVTZU_SCALAR#0
    0x101 => return classify_impl_101(inst), // QADDSUB_SCALAR-UQADD_SCALAR#0,QADDSUB_SCALAR-UQSUB_SCALAR#0,CMGT_SCALAR-CMHI#0,CMGT_SCALAR-CMHS#0,CMEQ_SCALAR-CMEQ#0,SHL_REG_SCALAR-UQSHL_SCALAR#3,SHL_REG_SCALAR-UQRSHL_SCALAR#3,SHL_REG_SCALAR-USHL_SCALAR#0,SHL_REG_SCALAR-URSHL_SCALAR#0,ADDSUB_SCALAR-SUB_SCALAR#0,FCMP_REG_SCALAR-FCMGT#0,FCMP_REG_SCALAR-FACGT#0,FABD_SCALAR-FABD#0,FP16_2REG_SCALAR-FCMGE_ZERO_SCALAR_FP16#0,FP16_2REG_SCALAR-FCMLE_ZERO_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTPU_SCALAR_FP16#0,FP16_2REG_SCALAR-FCVTZU_SCALAR_FP16#0,FP16_2REG_SCALAR-FRSQRTE_SCALAR_FP16#0,FP_HORZ_SCALAR-FMINNMP_SCALAR#1,FP_HORZ_SCALAR-FMINP_SCALAR#1
    0x102 => return classify_impl_102(inst), // QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#0,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#0,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#0,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#0,SHRN_SCALAR_IMM-UQSHRN_SCALAR#0,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#0,FMUL_ELEM_SCALAR_FP16-FMULX_ELEM_SCALAR_FP16#0
    0x103 => return classify_impl_103(inst), // QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#1,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#2,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#1,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#2,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#1,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#2,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#1,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#2,SHRN_SCALAR_IMM-UQSHRN_SCALAR#1,SHRN_SCALAR_IMM-UQSHRN_SCALAR#2,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#1,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#2,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX_FP16#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX_FP16#1,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX_FP16#0,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX_FP16#1,FMUL_ELEM_SCALAR_FP16-FMULX_ELEM_SCALAR_FP16#0
    0x104 => return classify_impl_104(inst), // QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#3,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#4,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#3,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#4,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#3,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#4,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#3,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#4,SHRN_SCALAR_IMM-UQSHRN_SCALAR#3,SHRN_SCALAR_IMM-UQSHRN_SCALAR#4,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#3,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#4,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#1,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#0,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#1,FMUL_ELEM_SCALAR_FP16-FMULX_ELEM_SCALAR_FP16#0
    0x105 => return classify_impl_105(inst), // QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#5,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#6,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#5,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#6,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#5,SHRN_SCALAR_IMM-SQSHRUN_SCALAR#6,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#5,SHRN_SCALAR_IMM-SQRSHRUN_SCALAR#6,SHRN_SCALAR_IMM-UQSHRN_SCALAR#5,SHRN_SCALAR_IMM-UQSHRN_SCALAR#6,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#5,SHRN_SCALAR_IMM-UQRSHRN_SCALAR#6,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#2,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#3,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#2,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#3,FMUL_ELEM_SCALAR_FP16-FMULX_ELEM_SCALAR_FP16#0
    0x106 => return classify_impl_106(inst), // SHR_SCALAR_IMM-USHR_SCALAR#0,SHR_SCALAR_IMM-USRA_SCALAR#0,SHR_SCALAR_IMM-URSHR_SCALAR#0,SHR_SCALAR_IMM-URSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#7,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#8,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#7,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#8,SHIFT_SCALAR_IMM-SRI_SCALAR#0,SHIFT_SCALAR_IMM-SLI_SCALAR#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#4,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#5,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#4,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#5,MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#0
    0x107 => return classify_impl_107(inst), // SHR_SCALAR_IMM-USHR_SCALAR#0,SHR_SCALAR_IMM-USRA_SCALAR#0,SHR_SCALAR_IMM-URSHR_SCALAR#0,SHR_SCALAR_IMM-URSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#9,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#10,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#9,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#10,SHIFT_SCALAR_IMM-SRI_SCALAR#0,SHIFT_SCALAR_IMM-SLI_SCALAR#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#6,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#7,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#6,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#7,MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#0
    0x108 => return classify_impl_108(inst), // SHR_SCALAR_IMM-USHR_SCALAR#0,SHR_SCALAR_IMM-USRA_SCALAR#0,SHR_SCALAR_IMM-URSHR_SCALAR#0,SHR_SCALAR_IMM-URSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#11,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#12,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#11,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#12,SHIFT_SCALAR_IMM-SRI_SCALAR#0,SHIFT_SCALAR_IMM-SLI_SCALAR#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#8,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#9,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#8,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#9,MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#0
    0x109 => return classify_impl_109(inst), // SHR_SCALAR_IMM-USHR_SCALAR#0,SHR_SCALAR_IMM-USRA_SCALAR#0,SHR_SCALAR_IMM-URSHR_SCALAR#0,SHR_SCALAR_IMM-URSRA_SCALAR#0,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#13,QSHL_SCALAR_IMM-SQSHLU_IMM_SCALAR#14,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#13,QSHL_SCALAR_IMM-UQSHL_IMM_SCALAR#14,SHIFT_SCALAR_IMM-SRI_SCALAR#0,SHIFT_SCALAR_IMM-SLI_SCALAR#0,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#10,FCVT_SCALAR_FIXED-UCVTF_SCALAR_FIX#11,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#10,FCVT_SCALAR_FIXED-FCVTZU_SCALAR_FIX#11,MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#0,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#0
    0x10a => return classify_impl_10a(inst), // MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#1,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#1,FMUL_ELEM_SCALAR-FMULX_ELEM_SCALAR#0
    0x10b => return classify_impl_10b(inst), // MUL_ELEM_SCALAR-SQRDMLAH_ELEM_SCALAR#1,MUL_ELEM_SCALAR-SQRDMLSH_ELEM_SCALAR#1,FMUL_ELEM_SCALAR-FMULX_ELEM_SCALAR#1
    0x10c => return classify_impl_10c(inst), // FMUL_ELEM_SCALAR-FMULX_ELEM_SCALAR#2
    0x10d => return classify_impl_10d(inst), // MEMX-STXRW#0,MEMX-STLXRW#0
    0x10e => return classify_impl_10e(inst), // MEMX-STXPW#0,MEMX-STLXPW#0
    0x10f => return classify_impl_10f(inst), // MEMX-LDXRW#0,MEMX-LDAXRW#0
    0x110 => return classify_impl_110(inst), // MEMX-LDXPW#0,MEMX-LDAXPW#0
    0x111 => return classify_impl_111(inst), // MEMOR-STLLRW#0,MEMOR-STLRW#0
    0x112 => return classify_impl_112(inst), // CAS-CAS#0,CAS-CASL#0
    0x113 => return classify_impl_113(inst), // MEMOR-LDLARW#0,MEMOR-LDARW#0
    0x114 => return classify_impl_114(inst), // CAS-CASA#0,CAS-CASAL#0
    0x115 => return classify_impl_115(inst), // ADDSUBG-ADDG#0
    0x116 => return classify_impl_116(inst), // ANDOREOR_IMM-AND_IMM#57,ANDOREOR_IMM-AND_IMM#58,ANDOREOR_IMM-AND_IMM#59,ANDOREOR_IMM-AND_IMM#60,ANDOREOR_IMM-AND_IMM#61,ANDOREOR_IMM-AND_IMM#62,ANDOREOR_IMM-AND_IMM#63,ANDOREOR_IMM-AND_IMM#64,ANDOREOR_IMM-AND_IMM#65,ANDOREOR_IMM-AND_IMM#66,ANDOREOR_IMM-AND_IMM#67,ANDOREOR_IMM-AND_IMM#68,ANDOREOR_IMM-AND_IMM#69,ANDOREOR_IMM-AND_IMM#70,ANDOREOR_IMM-AND_IMM#71,ANDOREOR_IMM-AND_IMM#72,ANDOREOR_IMM-AND_IMM#73,ANDOREOR_IMM-AND_IMM#74,ANDOREOR_IMM-AND_IMM#75,ANDOREOR_IMM-AND_IMM#76,ANDOREOR_IMM-AND_IMM#77,ANDOREOR_IMM-AND_IMM#78,ANDOREOR_IMM-AND_IMM#79,ANDOREOR_IMM-AND_IMM#80,ANDOREOR_IMM-AND_IMM#81,ANDOREOR_IMM-AND_IMM#82,ANDOREOR_IMM-AND_IMM#83,ANDOREOR_IMM-AND_IMM#84,ANDOREOR_IMM-AND_IMM#85,ANDOREOR_IMM-AND_IMM#86,ANDOREOR_IMM-AND_IMM#87,ANDOREOR_IMM-AND_IMM#88,ANDOREOR_IMM-AND_IMM#89,ANDOREOR_IMM-AND_IMM#90,ANDOREOR_IMM-AND_IMM#91,ANDOREOR_IMM-AND_IMM#92,ANDOREOR_IMM-AND_IMM#93,ANDOREOR_IMM-AND_IMM#94,ANDOREOR_IMM-AND_IMM#95,ANDOREOR_IMM-AND_IMM#96,ANDOREOR_IMM-AND_IMM#97,ANDOREOR_IMM-AND_IMM#98,ANDOREOR_IMM-AND_IMM#99,ANDOREOR_IMM-AND_IMM#100,ANDOREOR_IMM-AND_IMM#101,ANDOREOR_IMM-AND_IMM#102,ANDOREOR_IMM-AND_IMM#103,ANDOREOR_IMM-AND_IMM#104,ANDOREOR_IMM-AND_IMM#105,ANDOREOR_IMM-AND_IMM#106,ANDOREOR_IMM-AND_IMM#107,ANDOREOR_IMM-AND_IMM#108,ANDOREOR_IMM-AND_IMM#109,ANDOREOR_IMM-AND_IMM#110,ANDOREOR_IMM-AND_IMM#111,ANDOREOR_IMM-AND_IMM#112,ANDOREOR_IMM-AND_IMM#113
    0x117 => return classify_impl_117(inst), // ANDOREOR_IMM-AND_IMM#114,ANDOREOR_IMM-AND_IMM#115,ANDOREOR_IMM-AND_IMM#116,ANDOREOR_IMM-AND_IMM#117,ANDOREOR_IMM-AND_IMM#118,ANDOREOR_IMM-AND_IMM#119,ANDOREOR_IMM-AND_IMM#120,ANDOREOR_IMM-AND_IMM#121,ANDOREOR_IMM-AND_IMM#122,ANDOREOR_IMM-AND_IMM#123,ANDOREOR_IMM-AND_IMM#124,ANDOREOR_IMM-AND_IMM#125,ANDOREOR_IMM-AND_IMM#126,ANDOREOR_IMM-AND_IMM#127,ANDOREOR_IMM-AND_IMM#128,ANDOREOR_IMM-AND_IMM#129,ANDOREOR_IMM-AND_IMM#130,ANDOREOR_IMM-AND_IMM#131,ANDOREOR_IMM-AND_IMM#132,ANDOREOR_IMM-AND_IMM#133,ANDOREOR_IMM-AND_IMM#134,ANDOREOR_IMM-AND_IMM#135,ANDOREOR_IMM-AND_IMM#136,ANDOREOR_IMM-AND_IMM#137,ANDOREOR_IMM-AND_IMM#138,ANDOREOR_IMM-AND_IMM#139,ANDOREOR_IMM-AND_IMM#140,ANDOREOR_IMM-AND_IMM#141,ANDOREOR_IMM-AND_IMM#142,ANDOREOR_IMM-AND_IMM#143,ANDOREOR_IMM-AND_IMM#144,ANDOREOR_IMM-AND_IMM#145,ANDOREOR_IMM-AND_IMM#146,ANDOREOR_IMM-AND_IMM#147,ANDOREOR_IMM-AND_IMM#148,ANDOREOR_IMM-AND_IMM#149,ANDOREOR_IMM-AND_IMM#150,ANDOREOR_IMM-AND_IMM#151,ANDOREOR_IMM-AND_IMM#152,ANDOREOR_IMM-AND_IMM#153,ANDOREOR_IMM-AND_IMM#154,ANDOREOR_IMM-AND_IMM#155,ANDOREOR_IMM-AND_IMM#156,ANDOREOR_IMM-AND_IMM#157,ANDOREOR_IMM-AND_IMM#158,ANDOREOR_IMM-AND_IMM#159,ANDOREOR_IMM-AND_IMM#160,ANDOREOR_IMM-AND_IMM#161,ANDOREOR_IMM-AND_IMM#162,ANDOREOR_IMM-AND_IMM#163,ANDOREOR_IMM-AND_IMM#164,ANDOREOR_IMM-AND_IMM#165,ANDOREOR_IMM-AND_IMM#166,ANDOREOR_IMM-AND_IMM#167,ANDOREOR_IMM-AND_IMM#168,ANDOREOR_IMM-AND_IMM#169,ANDOREOR_IMM-AND_IMM#170,ANDOREOR_IMM-AND_IMM#171,ANDOREOR_IMM-AND_IMM#172,ANDOREOR_IMM-AND_IMM#173,ANDOREOR_IMM-AND_IMM#174,ANDOREOR_IMM-AND_IMM#175,ANDOREOR_IMM-AND_IMM#176
    0x118 => return classify_impl_118(inst), // RCPCU-STLURW#0
    0x119 => return classify_impl_119(inst), // RCPCU-LDAPURW#0
    0x11a => return classify_impl_11a(inst), // RCPCU-LDAPURSW#0
    0x11b => return classify_impl_11b(inst), // SHIFTV-LSLV#0,SHIFTV-LSRV#0,SHIFTV-ASRV#0,SHIFTV-RORV#0,MINMAX_REG-SMAX_GP#0,MINMAX_REG-UMAX_GP#0,MINMAX_REG-SMIN_GP#0,MINMAX_REG-UMIN_GP#0,DIV-UDIV#0,DIV-SDIV#0,PACGA-PACGA#0,CRC32-CRC32X#0,CRC32-CRC32CX#0,TAGINSERT-IRG#0,TAGINSERT-GMI#0,SUBP-SUBP#0
    0x11c => return classify_impl_11c(inst), // MULL-SMADDL#0,MULL-SMSUBL#0
    0x11d => return classify_impl_11d(inst), // MULH-SMULH#0
    0x11e => return classify_impl_11e(inst), // MULL-UMADDL#0,MULL-UMSUBL#0
    0x11f => return classify_impl_11f(inst), // MULH-UMULH#0
    0x120 => return classify_impl_120(inst), // FCVT_FROMFIXED-SCVTF_FIX#2,FCVT_FROMFIXED-SCVTF_FIX#3,FCVT_FROMFIXED-UCVTF_FIX#2,FCVT_FROMFIXED-UCVTF_FIX#3
    0x121 => return classify_impl_121(inst), // FCVT_TOFIXED-FCVTZS_FIX#2,FCVT_TOFIXED-FCVTZS_FIX#3,FCVT_TOFIXED-FCVTZU_FIX#2,FCVT_TOFIXED-FCVTZU_FIX#3
    0x122 => return classify_impl_122(inst), // FCVT_TOINT-FCVTNS#0,FCVT_TOINT-FCVTNU#0,FCVT_TOINT-FCVTAS#0,FCVT_TOINT-FCVTAU#0,FCVT_TOINT-FCVTPS#0,FCVT_TOINT-FCVTPU#0,FCVT_FROMINT-SCVTF#0,FCVT_FROMINT-UCVTF#0
    0x123 => return classify_impl_123(inst), // FCVT_TOINT-FCVTMS#0,FCVT_TOINT-FCVTMU#0,FCVT_TOINT-FCVTZS#0,FCVT_TOINT-FCVTZU#0
    0x124 => return classify_impl_124(inst), // FCVT_FROMFIXED-SCVTF_FIX#4,FCVT_FROMFIXED-SCVTF_FIX#5,FCVT_FROMFIXED-UCVTF_FIX#4,FCVT_FROMFIXED-UCVTF_FIX#5
    0x125 => return classify_impl_125(inst), // FCVT_TOFIXED-FCVTZS_FIX#4,FCVT_TOFIXED-FCVTZS_FIX#5,FCVT_TOFIXED-FCVTZU_FIX#4,FCVT_TOFIXED-FCVTZU_FIX#5
    0x126 => return classify_impl_126(inst), // FCVT_TOINT-FCVTNS#1,FCVT_TOINT-FCVTNU#1,FCVT_TOINT-FCVTAS#1,FCVT_TOINT-FCVTAU#1,FCVT_TOINT-FCVTPS#1,FCVT_TOINT-FCVTPU#1,FCVT_FROMINT-SCVTF#1,FCVT_FROMINT-UCVTF#1,FMOV_TOGP-FMOV_TOGP#1,FMOV_FROMGP-FMOV_FROM#1
    0x127 => return classify_impl_127(inst), // FCVT_TOINT-FCVTMS#1,FCVT_TOINT-FCVTMU#1,FCVT_TOINT-FCVTZS#1,FCVT_TOINT-FCVTZU#1
    0x128 => return classify_impl_128(inst), // FMOV_TOGP-FMOV_TOGP_HIGH#0,FMOV_FROMGP-FMOV_FROM_HIGH#0
    0x129 => return classify_impl_129(inst), // FCVT_FROMFIXED-SCVTF_FIX_FP16#1,FCVT_FROMFIXED-SCVTF_FIX_FP16#2,FCVT_FROMFIXED-UCVTF_FIX_FP16#1,FCVT_FROMFIXED-UCVTF_FIX_FP16#2
    0x12a => return classify_impl_12a(inst), // FCVT_TOFIXED-FCVTZS_FIX_FP16#1,FCVT_TOFIXED-FCVTZS_FIX_FP16#2,FCVT_TOFIXED-FCVTZU_FIX_FP16#1,FCVT_TOFIXED-FCVTZU_FIX_FP16#2
    0x12b => return classify_impl_12b(inst), // FCVT_TOINT-FCVTNS_FP16#0,FCVT_TOINT-FCVTNU_FP16#0,FCVT_TOINT-FCVTAS_FP16#0,FCVT_TOINT-FCVTAU_FP16#0,FCVT_TOINT-FCVTPS_FP16#0,FCVT_TOINT-FCVTPU_FP16#0,FCVT_FROMINT-SCVTF_FP16#0,FCVT_FROMINT-UCVTF_FP16#0,FMOV_TOGP-FMOV_TOGP_FP16#1,FMOV_FROMGP-FMOV_FROM_FP16#1
    0x12c => return classify_impl_12c(inst), // FCVT_TOINT-FCVTMS_FP16#0,FCVT_TOINT-FCVTMU_FP16#0,FCVT_TOINT-FCVTZS_FP16#0,FCVT_TOINT-FCVTZU_FP16#0
    0x12d => return classify_impl_12d(inst), // ANDOREOR_IMM-ORR_IMM#57,ANDOREOR_IMM-ORR_IMM#58,ANDOREOR_IMM-ORR_IMM#59,ANDOREOR_IMM-ORR_IMM#60,ANDOREOR_IMM-ORR_IMM#61,ANDOREOR_IMM-ORR_IMM#62,ANDOREOR_IMM-ORR_IMM#63,ANDOREOR_IMM-ORR_IMM#64,ANDOREOR_IMM-ORR_IMM#65,ANDOREOR_IMM-ORR_IMM#66,ANDOREOR_IMM-ORR_IMM#67,ANDOREOR_IMM-ORR_IMM#68,ANDOREOR_IMM-ORR_IMM#69,ANDOREOR_IMM-ORR_IMM#70,ANDOREOR_IMM-ORR_IMM#71,ANDOREOR_IMM-ORR_IMM#72,ANDOREOR_IMM-ORR_IMM#73,ANDOREOR_IMM-ORR_IMM#74,ANDOREOR_IMM-ORR_IMM#75,ANDOREOR_IMM-ORR_IMM#76,ANDOREOR_IMM-ORR_IMM#77,ANDOREOR_IMM-ORR_IMM#78,ANDOREOR_IMM-ORR_IMM#79,ANDOREOR_IMM-ORR_IMM#80,ANDOREOR_IMM-ORR_IMM#81,ANDOREOR_IMM-ORR_IMM#82,ANDOREOR_IMM-ORR_IMM#83,ANDOREOR_IMM-ORR_IMM#84,ANDOREOR_IMM-ORR_IMM#85,ANDOREOR_IMM-ORR_IMM#86,ANDOREOR_IMM-ORR_IMM#87,ANDOREOR_IMM-ORR_IMM#88,ANDOREOR_IMM-ORR_IMM#89,ANDOREOR_IMM-ORR_IMM#90,ANDOREOR_IMM-ORR_IMM#91,ANDOREOR_IMM-ORR_IMM#92,ANDOREOR_IMM-ORR_IMM#93,ANDOREOR_IMM-ORR_IMM#94,ANDOREOR_IMM-ORR_IMM#95,ANDOREOR_IMM-ORR_IMM#96,ANDOREOR_IMM-ORR_IMM#97,ANDOREOR_IMM-ORR_IMM#98,ANDOREOR_IMM-ORR_IMM#99,ANDOREOR_IMM-ORR_IMM#100,ANDOREOR_IMM-ORR_IMM#101,ANDOREOR_IMM-ORR_IMM#102,ANDOREOR_IMM-ORR_IMM#103,ANDOREOR_IMM-ORR_IMM#104,ANDOREOR_IMM-ORR_IMM#105,ANDOREOR_IMM-ORR_IMM#106,ANDOREOR_IMM-ORR_IMM#107,ANDOREOR_IMM-ORR_IMM#108,ANDOREOR_IMM-ORR_IMM#109,ANDOREOR_IMM-ORR_IMM#110,ANDOREOR_IMM-ORR_IMM#111,ANDOREOR_IMM-ORR_IMM#112,ANDOREOR_IMM-ORR_IMM#113
    0x12e => return classify_impl_12e(inst), // ANDOREOR_IMM-ORR_IMM#114,ANDOREOR_IMM-ORR_IMM#115,ANDOREOR_IMM-ORR_IMM#116,ANDOREOR_IMM-ORR_IMM#117,ANDOREOR_IMM-ORR_IMM#118,ANDOREOR_IMM-ORR_IMM#119,ANDOREOR_IMM-ORR_IMM#120,ANDOREOR_IMM-ORR_IMM#121,ANDOREOR_IMM-ORR_IMM#122,ANDOREOR_IMM-ORR_IMM#123,ANDOREOR_IMM-ORR_IMM#124,ANDOREOR_IMM-ORR_IMM#125,ANDOREOR_IMM-ORR_IMM#126,ANDOREOR_IMM-ORR_IMM#127,ANDOREOR_IMM-ORR_IMM#128,ANDOREOR_IMM-ORR_IMM#129,ANDOREOR_IMM-ORR_IMM#130,ANDOREOR_IMM-ORR_IMM#131,ANDOREOR_IMM-ORR_IMM#132,ANDOREOR_IMM-ORR_IMM#133,ANDOREOR_IMM-ORR_IMM#134,ANDOREOR_IMM-ORR_IMM#135,ANDOREOR_IMM-ORR_IMM#136,ANDOREOR_IMM-ORR_IMM#137,ANDOREOR_IMM-ORR_IMM#138,ANDOREOR_IMM-ORR_IMM#139,ANDOREOR_IMM-ORR_IMM#140,ANDOREOR_IMM-ORR_IMM#141,ANDOREOR_IMM-ORR_IMM#142,ANDOREOR_IMM-ORR_IMM#143,ANDOREOR_IMM-ORR_IMM#144,ANDOREOR_IMM-ORR_IMM#145,ANDOREOR_IMM-ORR_IMM#146,ANDOREOR_IMM-ORR_IMM#147,ANDOREOR_IMM-ORR_IMM#148,ANDOREOR_IMM-ORR_IMM#149,ANDOREOR_IMM-ORR_IMM#150,ANDOREOR_IMM-ORR_IMM#151,ANDOREOR_IMM-ORR_IMM#152,ANDOREOR_IMM-ORR_IMM#153,ANDOREOR_IMM-ORR_IMM#154,ANDOREOR_IMM-ORR_IMM#155,ANDOREOR_IMM-ORR_IMM#156,ANDOREOR_IMM-ORR_IMM#157,ANDOREOR_IMM-ORR_IMM#158,ANDOREOR_IMM-ORR_IMM#159,ANDOREOR_IMM-ORR_IMM#160,ANDOREOR_IMM-ORR_IMM#161,ANDOREOR_IMM-ORR_IMM#162,ANDOREOR_IMM-ORR_IMM#163,ANDOREOR_IMM-ORR_IMM#164,ANDOREOR_IMM-ORR_IMM#165,ANDOREOR_IMM-ORR_IMM#166,ANDOREOR_IMM-ORR_IMM#167,ANDOREOR_IMM-ORR_IMM#168,ANDOREOR_IMM-ORR_IMM#169,ANDOREOR_IMM-ORR_IMM#170,ANDOREOR_IMM-ORR_IMM#171,ANDOREOR_IMM-ORR_IMM#172,ANDOREOR_IMM-ORR_IMM#173,ANDOREOR_IMM-ORR_IMM#174,ANDOREOR_IMM-ORR_IMM#175,ANDOREOR_IMM-ORR_IMM#176
    0x12f => return classify_impl_12f(inst), // MEMU-STURW#0,MEMU-STRW_POST#0,MEMU-STTRW#0,MEMU-STRW_PRE#0
    0x130 => return classify_impl_130(inst), // MEM_REG-STRW_REG#0,SWP-SWP#0,LDATOMIC-LDADDW#0,LDATOMIC-LDCLRW#0,LDATOMIC-LDEORW#0,LDATOMIC-LDSETW#0,LDATOMIC-LDSMAXW#0,LDATOMIC-LDSMINW#0,LDATOMIC-LDUMAXW#0,LDATOMIC-LDUMINW#0
    0x131 => return classify_impl_131(inst), // MEMU-LDURW#0,MEMU-LDRW_POST#0,MEMU-LDTRW#0,MEMU-LDRW_PRE#0
    0x132 => return classify_impl_132(inst), // MEM_REG-LDRW_REG#0,SWP-SWPL#0,LDATOMIC-LDADDLW#0,LDATOMIC-LDCLRLW#0,LDATOMIC-LDEORLW#0,LDATOMIC-LDSETLW#0,LDATOMIC-LDSMAXLW#0,LDATOMIC-LDSMINLW#0,LDATOMIC-LDUMAXLW#0,LDATOMIC-LDUMINLW#0
    0x133 => return classify_impl_133(inst), // MEMU-LDURSW#0,MEMU-LDRSW_POST#0,MEMU-LDTRSW#0,MEMU-LDRSW_PRE#0
    0x134 => return classify_impl_134(inst), // MEM_REG-LDRSW_REG#0,SWP-SWPA#0,LDATOMIC-LDADDAW#0,LDATOMIC-LDCLRAW#0,LDATOMIC-LDEORAW#0,LDATOMIC-LDSETAW#0,LDATOMIC-LDSMAXAW#0,LDATOMIC-LDSMINAW#0,LDATOMIC-LDUMAXAW#0,LDATOMIC-LDUMINAW#0
    0x135 => return classify_impl_135(inst), // MEM_REG-LDRSW_REG#0,SWP-SWPA#0,LDATOMIC-LDADDAW#0,LDATOMIC-LDCLRAW#0,LDATOMIC-LDEORAW#0,LDATOMIC-LDSETAW#0,LDATOMIC-LDSMAXAW#0,LDATOMIC-LDSMINAW#0,LDATOMIC-LDUMAXAW#0,LDATOMIC-LDUMINAW#0,RCPC-LDAPRW#0
    0x136 => return classify_impl_136(inst), // SWP-SWPAL#0,LDATOMIC-LDADDALW#0,LDATOMIC-LDCLRALW#0,LDATOMIC-LDEORALW#0,LDATOMIC-LDSETALW#0,LDATOMIC-LDSMAXALW#0,LDATOMIC-LDSMINALW#0,LDATOMIC-LDUMAXALW#0,LDATOMIC-LDUMINALW#0
    0x137 => return classify_impl_137(inst), // ADCSBC-ADCS#0,RMIF-RMIF#0
    0x138 => return classify_impl_138(inst), // SUBP-SUBPS#0
    0x139 => return classify_impl_139(inst), // MEMU_FP-STUR_FP#3,MEMU_FP-STR_FP_POST#3,MEMU_FP-STR_FP_PRE#3
    0x13a => return classify_impl_13a(inst), // MEM_REG_FP-STR_REG_FP#3
    0x13b => return classify_impl_13b(inst), // MEMU_FP-LDUR_FP#3,MEMU_FP-LDR_FP_POST#3,MEMU_FP-LDR_FP_PRE#3
    0x13c => return classify_impl_13c(inst), // MEM_REG_FP-LDR_REG_FP#3
    0x13d => return classify_impl_13d(inst), // MEMX-STXRX#0,MEMX-STLXRX#0
    0x13e => return classify_impl_13e(inst), // MEMX-STXPX#0,MEMX-STLXPX#0
    0x13f => return classify_impl_13f(inst), // MEMX-LDXRX#0,MEMX-LDAXRX#0
    0x140 => return classify_impl_140(inst), // MEMX-LDXPX#0,MEMX-LDAXPX#0
    0x141 => return classify_impl_141(inst), // MEMOR-STLLR#0,MEMOR-STLR#0
    0x142 => return classify_impl_142(inst), // CAS-CAS#1,CAS-CASL#1
    0x143 => return classify_impl_143(inst), // MEMOR-LDLAR#0,MEMOR-LDAR#0
    0x144 => return classify_impl_144(inst), // CAS-CASA#1,CAS-CASAL#1
    0x145 => return classify_impl_145(inst), // SHA3_4REG-EOR3#0
    0x146 => return classify_impl_146(inst), // SHA3_4REG-BCAX#0
    0x147 => return classify_impl_147(inst), // SM3TT-SM3TT1A#0,SM3TT-SM3TT1B#0,SM3TT-SM3TT2A#0,SM3TT-SM3TT2B#0,SHA3_4REG-SM3SS1#0
    0x148 => return classify_impl_148(inst), // SHA512_3REG-SHA512H#0,SHA512_3REG-SHA512H2#0,SHA512_3REG-SHA512SU1#0,SHA512_3REG-RAX1#0,SM3_3REG-SM3PARTW1#0,SM3_3REG-SM3PARTW2#0,SM3_3REG-SM4EKEY#0
    0x149 => return classify_impl_149(inst), // SHA512_2REG-SHA512SU0#0,SHA512_2REG-SM4E#0
    0x14a => return classify_impl_14a(inst), // ADDSUBG-SUBG#0
    0x14b => return classify_impl_14b(inst), // ANDOREOR_IMM-EOR_IMM#57,ANDOREOR_IMM-EOR_IMM#58,ANDOREOR_IMM-EOR_IMM#59,ANDOREOR_IMM-EOR_IMM#60,ANDOREOR_IMM-EOR_IMM#61,ANDOREOR_IMM-EOR_IMM#62,ANDOREOR_IMM-EOR_IMM#63,ANDOREOR_IMM-EOR_IMM#64,ANDOREOR_IMM-EOR_IMM#65,ANDOREOR_IMM-EOR_IMM#66,ANDOREOR_IMM-EOR_IMM#67,ANDOREOR_IMM-EOR_IMM#68,ANDOREOR_IMM-EOR_IMM#69,ANDOREOR_IMM-EOR_IMM#70,ANDOREOR_IMM-EOR_IMM#71,ANDOREOR_IMM-EOR_IMM#72,ANDOREOR_IMM-EOR_IMM#73,ANDOREOR_IMM-EOR_IMM#74,ANDOREOR_IMM-EOR_IMM#75,ANDOREOR_IMM-EOR_IMM#76,ANDOREOR_IMM-EOR_IMM#77,ANDOREOR_IMM-EOR_IMM#78,ANDOREOR_IMM-EOR_IMM#79,ANDOREOR_IMM-EOR_IMM#80,ANDOREOR_IMM-EOR_IMM#81,ANDOREOR_IMM-EOR_IMM#82,ANDOREOR_IMM-EOR_IMM#83,ANDOREOR_IMM-EOR_IMM#84,ANDOREOR_IMM-EOR_IMM#85,ANDOREOR_IMM-EOR_IMM#86,ANDOREOR_IMM-EOR_IMM#87,ANDOREOR_IMM-EOR_IMM#88,ANDOREOR_IMM-EOR_IMM#89,ANDOREOR_IMM-EOR_IMM#90,ANDOREOR_IMM-EOR_IMM#91,ANDOREOR_IMM-EOR_IMM#92,ANDOREOR_IMM-EOR_IMM#93,ANDOREOR_IMM-EOR_IMM#94,ANDOREOR_IMM-EOR_IMM#95,ANDOREOR_IMM-EOR_IMM#96,ANDOREOR_IMM-EOR_IMM#97,ANDOREOR_IMM-EOR_IMM#98,ANDOREOR_IMM-EOR_IMM#99,ANDOREOR_IMM-EOR_IMM#100,ANDOREOR_IMM-EOR_IMM#101,ANDOREOR_IMM-EOR_IMM#102,ANDOREOR_IMM-EOR_IMM#103,ANDOREOR_IMM-EOR_IMM#104,ANDOREOR_IMM-EOR_IMM#105,ANDOREOR_IMM-EOR_IMM#106,ANDOREOR_IMM-EOR_IMM#107,ANDOREOR_IMM-EOR_IMM#108,ANDOREOR_IMM-EOR_IMM#109,ANDOREOR_IMM-EOR_IMM#110,ANDOREOR_IMM-EOR_IMM#111,ANDOREOR_IMM-EOR_IMM#112,ANDOREOR_IMM-EOR_IMM#113
    0x14c => return classify_impl_14c(inst), // ANDOREOR_IMM-EOR_IMM#114,ANDOREOR_IMM-EOR_IMM#115,ANDOREOR_IMM-EOR_IMM#116,ANDOREOR_IMM-EOR_IMM#117,ANDOREOR_IMM-EOR_IMM#118,ANDOREOR_IMM-EOR_IMM#119,ANDOREOR_IMM-EOR_IMM#120,ANDOREOR_IMM-EOR_IMM#121,ANDOREOR_IMM-EOR_IMM#122,ANDOREOR_IMM-EOR_IMM#123,ANDOREOR_IMM-EOR_IMM#124,ANDOREOR_IMM-EOR_IMM#125,ANDOREOR_IMM-EOR_IMM#126,ANDOREOR_IMM-EOR_IMM#127,ANDOREOR_IMM-EOR_IMM#128,ANDOREOR_IMM-EOR_IMM#129,ANDOREOR_IMM-EOR_IMM#130,ANDOREOR_IMM-EOR_IMM#131,ANDOREOR_IMM-EOR_IMM#132,ANDOREOR_IMM-EOR_IMM#133,ANDOREOR_IMM-EOR_IMM#134,ANDOREOR_IMM-EOR_IMM#135,ANDOREOR_IMM-EOR_IMM#136,ANDOREOR_IMM-EOR_IMM#137,ANDOREOR_IMM-EOR_IMM#138,ANDOREOR_IMM-EOR_IMM#139,ANDOREOR_IMM-EOR_IMM#140,ANDOREOR_IMM-EOR_IMM#141,ANDOREOR_IMM-EOR_IMM#142,ANDOREOR_IMM-EOR_IMM#143,ANDOREOR_IMM-EOR_IMM#144,ANDOREOR_IMM-EOR_IMM#145,ANDOREOR_IMM-EOR_IMM#146,ANDOREOR_IMM-EOR_IMM#147,ANDOREOR_IMM-EOR_IMM#148,ANDOREOR_IMM-EOR_IMM#149,ANDOREOR_IMM-EOR_IMM#150,ANDOREOR_IMM-EOR_IMM#151,ANDOREOR_IMM-EOR_IMM#152,ANDOREOR_IMM-EOR_IMM#153,ANDOREOR_IMM-EOR_IMM#154,ANDOREOR_IMM-EOR_IMM#155,ANDOREOR_IMM-EOR_IMM#156,ANDOREOR_IMM-EOR_IMM#157,ANDOREOR_IMM-EOR_IMM#158,ANDOREOR_IMM-EOR_IMM#159,ANDOREOR_IMM-EOR_IMM#160,ANDOREOR_IMM-EOR_IMM#161,ANDOREOR_IMM-EOR_IMM#162,ANDOREOR_IMM-EOR_IMM#163,ANDOREOR_IMM-EOR_IMM#164,ANDOREOR_IMM-EOR_IMM#165,ANDOREOR_IMM-EOR_IMM#166,ANDOREOR_IMM-EOR_IMM#167,ANDOREOR_IMM-EOR_IMM#168,ANDOREOR_IMM-EOR_IMM#169,ANDOREOR_IMM-EOR_IMM#170,ANDOREOR_IMM-EOR_IMM#171,ANDOREOR_IMM-EOR_IMM#172,ANDOREOR_IMM-EOR_IMM#173,ANDOREOR_IMM-EOR_IMM#174,ANDOREOR_IMM-EOR_IMM#175,ANDOREOR_IMM-EOR_IMM#176
    0x14d => return classify_impl_14d(inst), // SVC-SVC#0,SVC-HVC#0,SVC-SMC#0
    0x14e => return classify_impl_14e(inst), // BRK-BRK#0
    0x14f => return classify_impl_14f(inst), // HLT-HLT#0
    0x150 => return classify_impl_150(inst), // TCANCEL-TCANCEL#0
    0x151 => return classify_impl_151(inst), // DCPS-DCPS1#0,DCPS-DCPS2#0,DCPS-DCPS3#0
    0x152 => return classify_impl_152(inst), // CLREX-CLREX#0,DSB-DSB#0,DSB-DMB#0,DSB-ISB#0,HINT-HINT#0,SYS-SYS#0,MSR_IMM-MSR_UAO#0,MSR_IMM-MSR_UAO#1,MSR_IMM-MSR_UAO#2,MSR_IMM-MSR_UAO#3,MSR_IMM-MSR_UAO#4,MSR_IMM-MSR_UAO#5,MSR_IMM-MSR_UAO#6,MSR_IMM-MSR_UAO#7,MSR_IMM-MSR_PAN#0,MSR_IMM-MSR_PAN#1,MSR_IMM-MSR_PAN#2,MSR_IMM-MSR_PAN#3,MSR_IMM-MSR_PAN#4,MSR_IMM-MSR_PAN#5,MSR_IMM-MSR_PAN#6,MSR_IMM-MSR_PAN#7,MSR_IMM-MSR_SPSel#0,MSR_IMM-MSR_SPSel#1,MSR_IMM-MSR_SPSel#2,MSR_IMM-MSR_SPSel#3,MSR_IMM-MSR_SPSel#4,MSR_IMM-MSR_SPSel#5,MSR_IMM-MSR_SPSel#6,MSR_IMM-MSR_SPSel#7,MSR_IMM-MSR_ALLINT#0,MSR_IMM-MSR_PM#0,MSR_IMM-MSR_SSBS#0,MSR_IMM-MSR_SSBS#1,MSR_IMM-MSR_SSBS#2,MSR_IMM-MSR_SSBS#3,MSR_IMM-MSR_SSBS#4,MSR_IMM-MSR_SSBS#5,MSR_IMM-MSR_SSBS#6,MSR_IMM-MSR_SSBS#7,MSR_IMM-MSR_DIT#0,MSR_IMM-MSR_DIT#1,MSR_IMM-MSR_DIT#2,MSR_IMM-MSR_DIT#3,MSR_IMM-MSR_DIT#4,MSR_IMM-MSR_DIT#5,MSR_IMM-MSR_DIT#6,MSR_IMM-MSR_DIT#7,MSR_IMM-MSR_TCO#0,MSR_IMM-MSR_TCO#1,MSR_IMM-MSR_TCO#2,MSR_IMM-MSR_TCO#3,MSR_IMM-MSR_TCO#4,MSR_IMM-MSR_TCO#5,MSR_IMM-MSR_TCO#6,MSR_IMM-MSR_TCO#7,MSR_IMM-MSR_DAIFSet#0,MSR_IMM-MSR_DAIFSet#1,MSR_IMM-MSR_DAIFSet#2,MSR_IMM-MSR_DAIFSet#3,MSR_IMM-MSR_DAIFSet#4,MSR_IMM-MSR_DAIFSet#5,MSR_IMM-MSR_DAIFSet#6,MSR_IMM-MSR_DAIFSet#7,MSR_IMM-MSR_DAIFClr#0,MSR_IMM-MSR_DAIFClr#1,MSR_IMM-MSR_DAIFClr#2,MSR_IMM-MSR_DAIFClr#3,MSR_IMM-MSR_DAIFClr#4,MSR_IMM-MSR_DAIFClr#5,MSR_IMM-MSR_DAIFClr#6,MSR_IMM-MSR_DAIFClr#7,MSR_FLAGM-CFINV#0,MSR_FLAGM-XAFLAG#0,MSR_FLAGM-AXFLAG#0,SB-SB#0,TCOMMIT-TCOMMIT#0,WFXT-WFET#0,WFXT-WFIT#0
    0x153 => return classify_impl_153(inst), // SYS-SYSL#0,TSTART-TSTART#0,TTEST-TTEST#0
    0x154 => return classify_impl_154(inst), // BRANCHREG-BR#0,BRANCHREG-BR#1,BRANCHREG-BR#2,BRANCHREG-BR#3,BRANCHREG-BR#4,BRANCHREG-BR#5,BRANCHREG-BR#6,BRANCHREG-BR#7,BRANCHREG-BR#8,BRANCHREG-BR#9,BRANCHREG-BR#10,BRANCHREG-BR#11,BRANCHREG-BR#12,BRANCHREG-BR#13,BRANCHREG-BR#14,BRANCHREG-BR#15,BRANCHREG-BR#16,BRANCHREG-BR#17,BRANCHREG-BR#18,BRANCHREG-BR#19,BRANCHREG-BR#20,BRANCHREG-BR#21,BRANCHREG-BR#22,BRANCHREG-BR#23,BRANCHREG-BR#24,BRANCHREG-BR#25,BRANCHREG-BR#26,BRANCHREG-BR#27,BRANCHREG-BR#28,BRANCHREG-BR#29,BRANCHREG-BR#30,BRANCHREG-BR#31,BRANCHREG-BRAAZ#0,BRANCHREG-BRAAZ#1,BRANCHREG-BRAAZ#2,BRANCHREG-BRAAZ#3,BRANCHREG-BRAAZ#4,BRANCHREG-BRAAZ#5,BRANCHREG-BRAAZ#6,BRANCHREG-BRAAZ#7,BRANCHREG-BRAAZ#8,BRANCHREG-BRAAZ#9,BRANCHREG-BRAAZ#10,BRANCHREG-BRAAZ#11,BRANCHREG-BRAAZ#12,BRANCHREG-BRAAZ#13,BRANCHREG-BRAAZ#14,BRANCHREG-BRAAZ#15,BRANCHREG-BRAAZ#16,BRANCHREG-BRAAZ#17,BRANCHREG-BRAAZ#18,BRANCHREG-BRAAZ#19,BRANCHREG-BRAAZ#20,BRANCHREG-BRAAZ#21,BRANCHREG-BRAAZ#22,BRANCHREG-BRAAZ#23,BRANCHREG-BRAAZ#24,BRANCHREG-BRAAZ#25,BRANCHREG-BRAAZ#26,BRANCHREG-BRAAZ#27,BRANCHREG-BRAAZ#28,BRANCHREG-BRAAZ#29,BRANCHREG-BRAAZ#30,BRANCHREG-BRAAZ#31,BRANCHREG-BRABZ#0,BRANCHREG-BRABZ#1,BRANCHREG-BRABZ#2,BRANCHREG-BRABZ#3,BRANCHREG-BRABZ#4,BRANCHREG-BRABZ#5,BRANCHREG-BRABZ#6,BRANCHREG-BRABZ#7,BRANCHREG-BRABZ#8,BRANCHREG-BRABZ#9,BRANCHREG-BRABZ#10,BRANCHREG-BRABZ#11,BRANCHREG-BRABZ#12,BRANCHREG-BRABZ#13,BRANCHREG-BRABZ#14,BRANCHREG-BRABZ#15,BRANCHREG-BRABZ#16,BRANCHREG-BRABZ#17,BRANCHREG-BRABZ#18,BRANCHREG-BRABZ#19,BRANCHREG-BRABZ#20,BRANCHREG-BRABZ#21,BRANCHREG-BRABZ#22,BRANCHREG-BRABZ#23,BRANCHREG-BRABZ#24,BRANCHREG-BRABZ#25,BRANCHREG-BRABZ#26,BRANCHREG-BRABZ#27,BRANCHREG-BRABZ#28,BRANCHREG-BRABZ#29,BRANCHREG-BRABZ#30,BRANCHREG-BRABZ#31
    0x155 => return classify_impl_155(inst), // BRANCHREG-BLR#0,BRANCHREG-BLR#1,BRANCHREG-BLR#2,BRANCHREG-BLR#3,BRANCHREG-BLR#4,BRANCHREG-BLR#5,BRANCHREG-BLR#6,BRANCHREG-BLR#7,BRANCHREG-BLR#8,BRANCHREG-BLR#9,BRANCHREG-BLR#10,BRANCHREG-BLR#11,BRANCHREG-BLR#12,BRANCHREG-BLR#13,BRANCHREG-BLR#14,BRANCHREG-BLR#15,BRANCHREG-BLR#16,BRANCHREG-BLR#17,BRANCHREG-BLR#18,BRANCHREG-BLR#19,BRANCHREG-BLR#20,BRANCHREG-BLR#21,BRANCHREG-BLR#22,BRANCHREG-BLR#23,BRANCHREG-BLR#24,BRANCHREG-BLR#25,BRANCHREG-BLR#26,BRANCHREG-BLR#27,BRANCHREG-BLR#28,BRANCHREG-BLR#29,BRANCHREG-BLR#30,BRANCHREG-BLR#31,BRANCHREG-BLRAAZ#0,BRANCHREG-BLRAAZ#1,BRANCHREG-BLRAAZ#2,BRANCHREG-BLRAAZ#3,BRANCHREG-BLRAAZ#4,BRANCHREG-BLRAAZ#5,BRANCHREG-BLRAAZ#6,BRANCHREG-BLRAAZ#7,BRANCHREG-BLRAAZ#8,BRANCHREG-BLRAAZ#9,BRANCHREG-BLRAAZ#10,BRANCHREG-BLRAAZ#11,BRANCHREG-BLRAAZ#12,BRANCHREG-BLRAAZ#13,BRANCHREG-BLRAAZ#14,BRANCHREG-BLRAAZ#15,BRANCHREG-BLRAAZ#16,BRANCHREG-BLRAAZ#17,BRANCHREG-BLRAAZ#18,BRANCHREG-BLRAAZ#19,BRANCHREG-BLRAAZ#20,BRANCHREG-BLRAAZ#21,BRANCHREG-BLRAAZ#22,BRANCHREG-BLRAAZ#23,BRANCHREG-BLRAAZ#24,BRANCHREG-BLRAAZ#25,BRANCHREG-BLRAAZ#26,BRANCHREG-BLRAAZ#27,BRANCHREG-BLRAAZ#28,BRANCHREG-BLRAAZ#29,BRANCHREG-BLRAAZ#30,BRANCHREG-BLRAAZ#31,BRANCHREG-BLRABZ#0,BRANCHREG-BLRABZ#1,BRANCHREG-BLRABZ#2,BRANCHREG-BLRABZ#3,BRANCHREG-BLRABZ#4,BRANCHREG-BLRABZ#5,BRANCHREG-BLRABZ#6,BRANCHREG-BLRABZ#7,BRANCHREG-BLRABZ#8,BRANCHREG-BLRABZ#9,BRANCHREG-BLRABZ#10,BRANCHREG-BLRABZ#11,BRANCHREG-BLRABZ#12,BRANCHREG-BLRABZ#13,BRANCHREG-BLRABZ#14,BRANCHREG-BLRABZ#15,BRANCHREG-BLRABZ#16,BRANCHREG-BLRABZ#17,BRANCHREG-BLRABZ#18,BRANCHREG-BLRABZ#19,BRANCHREG-BLRABZ#20,BRANCHREG-BLRABZ#21,BRANCHREG-BLRABZ#22,BRANCHREG-BLRABZ#23,BRANCHREG-BLRABZ#24,BRANCHREG-BLRABZ#25,BRANCHREG-BLRABZ#26,BRANCHREG-BLRABZ#27,BRANCHREG-BLRABZ#28,BRANCHREG-BLRABZ#29,BRANCHREG-BLRABZ#30,BRANCHREG-BLRABZ#31
    0x156 => return classify_impl_156(inst), // BRANCHREG-RET#0,BRANCHREG-RET#1,BRANCHREG-RET#2,BRANCHREG-RET#3,BRANCHREG-RET#4,BRANCHREG-RET#5,BRANCHREG-RET#6,BRANCHREG-RET#7,BRANCHREG-RET#8,BRANCHREG-RET#9,BRANCHREG-RET#10,BRANCHREG-RET#11,BRANCHREG-RET#12,BRANCHREG-RET#13,BRANCHREG-RET#14,BRANCHREG-RET#15,BRANCHREG-RET#16,BRANCHREG-RET#17,BRANCHREG-RET#18,BRANCHREG-RET#19,BRANCHREG-RET#20,BRANCHREG-RET#21,BRANCHREG-RET#22,BRANCHREG-RET#23,BRANCHREG-RET#24,BRANCHREG-RET#25,BRANCHREG-RET#26,BRANCHREG-RET#27,BRANCHREG-RET#28,BRANCHREG-RET#29,BRANCHREG-RET#30,BRANCHREG-RET#31,BRANCHREG-RETAA#0,BRANCHREG-RETAB#0
    0x157 => return classify_impl_157(inst), // ERET-ERET#0,ERET-ERETAA#0,ERET-ERETAB#0
    0x158 => return classify_impl_158(inst), // DRPS-DRPS#0
    0x159 => return classify_impl_159(inst), // BRANCHREG-BRAA#0,BRANCHREG-BRAA#1,BRANCHREG-BRAA#2,BRANCHREG-BRAA#3,BRANCHREG-BRAA#4,BRANCHREG-BRAA#5,BRANCHREG-BRAA#6,BRANCHREG-BRAA#7,BRANCHREG-BRAA#8,BRANCHREG-BRAA#9,BRANCHREG-BRAA#10,BRANCHREG-BRAA#11,BRANCHREG-BRAA#12,BRANCHREG-BRAA#13,BRANCHREG-BRAA#14,BRANCHREG-BRAA#15,BRANCHREG-BRAA#16,BRANCHREG-BRAA#17,BRANCHREG-BRAA#18,BRANCHREG-BRAA#19,BRANCHREG-BRAA#20,BRANCHREG-BRAA#21,BRANCHREG-BRAA#22,BRANCHREG-BRAA#23,BRANCHREG-BRAA#24,BRANCHREG-BRAA#25,BRANCHREG-BRAA#26,BRANCHREG-BRAA#27,BRANCHREG-BRAA#28,BRANCHREG-BRAA#29,BRANCHREG-BRAA#30,BRANCHREG-BRAA#31,BRANCHREG-BRAA#32,BRANCHREG-BRAA#33,BRANCHREG-BRAA#34,BRANCHREG-BRAA#35,BRANCHREG-BRAA#36,BRANCHREG-BRAA#37,BRANCHREG-BRAA#38,BRANCHREG-BRAA#39,BRANCHREG-BRAA#40,BRANCHREG-BRAA#41,BRANCHREG-BRAA#42,BRANCHREG-BRAA#43,BRANCHREG-BRAA#44,BRANCHREG-BRAA#45,BRANCHREG-BRAA#46,BRANCHREG-BRAA#47,BRANCHREG-BRAA#48,BRANCHREG-BRAA#49,BRANCHREG-BRAA#50,BRANCHREG-BRAA#51,BRANCHREG-BRAA#52,BRANCHREG-BRAA#53,BRANCHREG-BRAA#54,BRANCHREG-BRAA#55,BRANCHREG-BRAA#56,BRANCHREG-BRAA#57,BRANCHREG-BRAA#58,BRANCHREG-BRAA#59,BRANCHREG-BRAA#60,BRANCHREG-BRAA#61,BRANCHREG-BRAA#62,BRANCHREG-BRAA#63,BRANCHREG-BRAA#64,BRANCHREG-BRAA#65,BRANCHREG-BRAA#66,BRANCHREG-BRAA#67,BRANCHREG-BRAA#68,BRANCHREG-BRAA#69,BRANCHREG-BRAA#70,BRANCHREG-BRAA#71,BRANCHREG-BRAA#72,BRANCHREG-BRAA#73,BRANCHREG-BRAA#74,BRANCHREG-BRAA#75,BRANCHREG-BRAA#76,BRANCHREG-BRAA#77,BRANCHREG-BRAA#78,BRANCHREG-BRAA#79,BRANCHREG-BRAA#80,BRANCHREG-BRAA#81,BRANCHREG-BRAA#82,BRANCHREG-BRAA#83,BRANCHREG-BRAA#84,BRANCHREG-BRAA#85,BRANCHREG-BRAA#86,BRANCHREG-BRAA#87,BRANCHREG-BRAA#88,BRANCHREG-BRAA#89,BRANCHREG-BRAA#90,BRANCHREG-BRAA#91,BRANCHREG-BRAA#92,BRANCHREG-BRAA#93,BRANCHREG-BRAA#94,BRANCHREG-BRAA#95,BRANCHREG-BRAA#96,BRANCHREG-BRAA#97,BRANCHREG-BRAA#98,BRANCHREG-BRAA#99,BRANCHREG-BRAA#100,BRANCHREG-BRAA#101,BRANCHREG-BRAA#102,BRANCHREG-BRAA#103,BRANCHREG-BRAA#104,BRANCHREG-BRAA#105,BRANCHREG-BRAA#106,BRANCHREG-BRAA#107,BRANCHREG-BRAA#108,BRANCHREG-BRAA#109,BRANCHREG-BRAA#110,BRANCHREG-BRAA#111,BRANCHREG-BRAA#112,BRANCHREG-BRAA#113,BRANCHREG-BRAA#114,BRANCHREG-BRAA#115,BRANCHREG-BRAA#116,BRANCHREG-BRAA#117,BRANCHREG-BRAA#118,BRANCHREG-BRAA#119,BRANCHREG-BRAA#120,BRANCHREG-BRAA#121,BRANCHREG-BRAA#122,BRANCHREG-BRAA#123,BRANCHREG-BRAA#124,BRANCHREG-BRAA#125,BRANCHREG-BRAA#126,BRANCHREG-BRAA#127,BRANCHREG-BRAA#128,BRANCHREG-BRAA#129,BRANCHREG-BRAA#130,BRANCHREG-BRAA#131,BRANCHREG-BRAA#132,BRANCHREG-BRAA#133,BRANCHREG-BRAA#134,BRANCHREG-BRAA#135,BRANCHREG-BRAA#136,BRANCHREG-BRAA#137,BRANCHREG-BRAA#138,BRANCHREG-BRAA#139,BRANCHREG-BRAA#140,BRANCHREG-BRAA#141,BRANCHREG-BRAA#142,BRANCHREG-BRAA#143,BRANCHREG-BRAA#144,BRANCHREG-BRAA#145,BRANCHREG-BRAA#146,BRANCHREG-BRAA#147,BRANCHREG-BRAA#148,BRANCHREG-BRAA#149,BRANCHREG-BRAA#150,BRANCHREG-BRAA#151,BRANCHREG-BRAA#152,BRANCHREG-BRAA#153,BRANCHREG-BRAA#154,BRANCHREG-BRAA#155,BRANCHREG-BRAA#156,BRANCHREG-BRAA#157,BRANCHREG-BRAA#158,BRANCHREG-BRAA#159,BRANCHREG-BRAA#160,BRANCHREG-BRAA#161,BRANCHREG-BRAA#162,BRANCHREG-BRAA#163,BRANCHREG-BRAA#164,BRANCHREG-BRAA#165,BRANCHREG-BRAA#166,BRANCHREG-BRAA#167,BRANCHREG-BRAA#168,BRANCHREG-BRAA#169,BRANCHREG-BRAA#170,BRANCHREG-BRAA#171,BRANCHREG-BRAA#172,BRANCHREG-BRAA#173,BRANCHREG-BRAA#174,BRANCHREG-BRAA#175,BRANCHREG-BRAA#176,BRANCHREG-BRAA#177,BRANCHREG-BRAA#178,BRANCHREG-BRAA#179,BRANCHREG-BRAA#180,BRANCHREG-BRAA#181,BRANCHREG-BRAA#182,BRANCHREG-BRAA#183,BRANCHREG-BRAA#184,BRANCHREG-BRAA#185,BRANCHREG-BRAA#186,BRANCHREG-BRAA#187,BRANCHREG-BRAA#188,BRANCHREG-BRAA#189,BRANCHREG-BRAA#190,BRANCHREG-BRAA#191,BRANCHREG-BRAA#192,BRANCHREG-BRAA#193,BRANCHREG-BRAA#194,BRANCHREG-BRAA#195,BRANCHREG-BRAA#196,BRANCHREG-BRAA#197,BRANCHREG-BRAA#198,BRANCHREG-BRAA#199,BRANCHREG-BRAA#200,BRANCHREG-BRAA#201,BRANCHREG-BRAA#202,BRANCHREG-BRAA#203,BRANCHREG-BRAA#204,BRANCHREG-BRAA#205,BRANCHREG-BRAA#206,BRANCHREG-BRAA#207,BRANCHREG-BRAA#208,BRANCHREG-BRAA#209,BRANCHREG-BRAA#210,BRANCHREG-BRAA#211,BRANCHREG-BRAA#212,BRANCHREG-BRAA#213,BRANCHREG-BRAA#214,BRANCHREG-BRAA#215,BRANCHREG-BRAA#216,BRANCHREG-BRAA#217,BRANCHREG-BRAA#218,BRANCHREG-BRAA#219,BRANCHREG-BRAA#220,BRANCHREG-BRAA#221,BRANCHREG-BRAA#222,BRANCHREG-BRAA#223,BRANCHREG-BRAA#224,BRANCHREG-BRAA#225,BRANCHREG-BRAA#226,BRANCHREG-BRAA#227,BRANCHREG-BRAA#228,BRANCHREG-BRAA#229,BRANCHREG-BRAA#230,BRANCHREG-BRAA#231,BRANCHREG-BRAA#232,BRANCHREG-BRAA#233,BRANCHREG-BRAA#234,BRANCHREG-BRAA#235,BRANCHREG-BRAA#236,BRANCHREG-BRAA#237,BRANCHREG-BRAA#238,BRANCHREG-BRAA#239,BRANCHREG-BRAA#240,BRANCHREG-BRAA#241,BRANCHREG-BRAA#242,BRANCHREG-BRAA#243,BRANCHREG-BRAA#244,BRANCHREG-BRAA#245,BRANCHREG-BRAA#246,BRANCHREG-BRAA#247,BRANCHREG-BRAA#248,BRANCHREG-BRAA#249,BRANCHREG-BRAA#250,BRANCHREG-BRAA#251,BRANCHREG-BRAA#252,BRANCHREG-BRAA#253,BRANCHREG-BRAA#254,BRANCHREG-BRAA#255,BRANCHREG-BRAA#256,BRANCHREG-BRAA#257,BRANCHREG-BRAA#258,BRANCHREG-BRAA#259,BRANCHREG-BRAA#260,BRANCHREG-BRAA#261,BRANCHREG-BRAA#262,BRANCHREG-BRAA#263,BRANCHREG-BRAA#264,BRANCHREG-BRAA#265,BRANCHREG-BRAA#266,BRANCHREG-BRAA#267,BRANCHREG-BRAA#268,BRANCHREG-BRAA#269,BRANCHREG-BRAA#270,BRANCHREG-BRAA#271,BRANCHREG-BRAA#272,BRANCHREG-BRAA#273,BRANCHREG-BRAA#274,BRANCHREG-BRAA#275,BRANCHREG-BRAA#276,BRANCHREG-BRAA#277,BRANCHREG-BRAA#278,BRANCHREG-BRAA#279,BRANCHREG-BRAA#280,BRANCHREG-BRAA#281,BRANCHREG-BRAA#282,BRANCHREG-BRAA#283,BRANCHREG-BRAA#284,BRANCHREG-BRAA#285,BRANCHREG-BRAA#286,BRANCHREG-BRAA#287,BRANCHREG-BRAA#288,BRANCHREG-BRAA#289,BRANCHREG-BRAA#290,BRANCHREG-BRAA#291,BRANCHREG-BRAA#292,BRANCHREG-BRAA#293,BRANCHREG-BRAA#294,BRANCHREG-BRAA#295,BRANCHREG-BRAA#296,BRANCHREG-BRAA#297,BRANCHREG-BRAA#298,BRANCHREG-BRAA#299,BRANCHREG-BRAA#300,BRANCHREG-BRAA#301,BRANCHREG-BRAA#302,BRANCHREG-BRAA#303,BRANCHREG-BRAA#304,BRANCHREG-BRAA#305,BRANCHREG-BRAA#306,BRANCHREG-BRAA#307,BRANCHREG-BRAA#308,BRANCHREG-BRAA#309,BRANCHREG-BRAA#310,BRANCHREG-BRAA#311,BRANCHREG-BRAA#312,BRANCHREG-BRAA#313,BRANCHREG-BRAA#314,BRANCHREG-BRAA#315,BRANCHREG-BRAA#316,BRANCHREG-BRAA#317,BRANCHREG-BRAA#318,BRANCHREG-BRAA#319,BRANCHREG-BRAA#320,BRANCHREG-BRAA#321,BRANCHREG-BRAA#322,BRANCHREG-BRAA#323,BRANCHREG-BRAA#324,BRANCHREG-BRAA#325,BRANCHREG-BRAA#326,BRANCHREG-BRAA#327,BRANCHREG-BRAA#328,BRANCHREG-BRAA#329,BRANCHREG-BRAA#330,BRANCHREG-BRAA#331,BRANCHREG-BRAA#332,BRANCHREG-BRAA#333,BRANCHREG-BRAA#334,BRANCHREG-BRAA#335,BRANCHREG-BRAA#336,BRANCHREG-BRAA#337,BRANCHREG-BRAA#338,BRANCHREG-BRAA#339,BRANCHREG-BRAA#340,BRANCHREG-BRAA#341,BRANCHREG-BRAA#342,BRANCHREG-BRAA#343,BRANCHREG-BRAA#344,BRANCHREG-BRAA#345,BRANCHREG-BRAA#346,BRANCHREG-BRAA#347,BRANCHREG-BRAA#348,BRANCHREG-BRAA#349,BRANCHREG-BRAA#350,BRANCHREG-BRAA#351,BRANCHREG-BRAA#352,BRANCHREG-BRAA#353,BRANCHREG-BRAA#354,BRANCHREG-BRAA#355,BRANCHREG-BRAA#356,BRANCHREG-BRAA#357,BRANCHREG-BRAA#358,BRANCHREG-BRAA#359,BRANCHREG-BRAA#360,BRANCHREG-BRAA#361,BRANCHREG-BRAA#362,BRANCHREG-BRAA#363,BRANCHREG-BRAA#364,BRANCHREG-BRAA#365,BRANCHREG-BRAA#366,BRANCHREG-BRAA#367,BRANCHREG-BRAA#368,BRANCHREG-BRAA#369,BRANCHREG-BRAA#370,BRANCHREG-BRAA#371,BRANCHREG-BRAA#372,BRANCHREG-BRAA#373,BRANCHREG-BRAA#374,BRANCHREG-BRAA#375,BRANCHREG-BRAA#376,BRANCHREG-BRAA#377,BRANCHREG-BRAA#378,BRANCHREG-BRAA#379,BRANCHREG-BRAA#380,BRANCHREG-BRAA#381,BRANCHREG-BRAA#382,BRANCHREG-BRAA#383,BRANCHREG-BRAA#384,BRANCHREG-BRAA#385,BRANCHREG-BRAA#386,BRANCHREG-BRAA#387,BRANCHREG-BRAA#388,BRANCHREG-BRAA#389,BRANCHREG-BRAA#390,BRANCHREG-BRAA#391,BRANCHREG-BRAA#392,BRANCHREG-BRAA#393,BRANCHREG-BRAA#394,BRANCHREG-BRAA#395,BRANCHREG-BRAA#396,BRANCHREG-BRAA#397,BRANCHREG-BRAA#398,BRANCHREG-BRAA#399,BRANCHREG-BRAA#400,BRANCHREG-BRAA#401,BRANCHREG-BRAA#402,BRANCHREG-BRAA#403,BRANCHREG-BRAA#404,BRANCHREG-BRAA#405,BRANCHREG-BRAA#406,BRANCHREG-BRAA#407,BRANCHREG-BRAA#408,BRANCHREG-BRAA#409,BRANCHREG-BRAA#410,BRANCHREG-BRAA#411,BRANCHREG-BRAA#412,BRANCHREG-BRAA#413,BRANCHREG-BRAA#414,BRANCHREG-BRAA#415,BRANCHREG-BRAA#416,BRANCHREG-BRAA#417,BRANCHREG-BRAA#418,BRANCHREG-BRAA#419,BRANCHREG-BRAA#420,BRANCHREG-BRAA#421,BRANCHREG-BRAA#422,BRANCHREG-BRAA#423,BRANCHREG-BRAA#424,BRANCHREG-BRAA#425,BRANCHREG-BRAA#426,BRANCHREG-BRAA#427,BRANCHREG-BRAA#428,BRANCHREG-BRAA#429,BRANCHREG-BRAA#430,BRANCHREG-BRAA#431,BRANCHREG-BRAA#432,BRANCHREG-BRAA#433,BRANCHREG-BRAA#434,BRANCHREG-BRAA#435,BRANCHREG-BRAA#436,BRANCHREG-BRAA#437,BRANCHREG-BRAA#438,BRANCHREG-BRAA#439,BRANCHREG-BRAA#440,BRANCHREG-BRAA#441,BRANCHREG-BRAA#442,BRANCHREG-BRAA#443,BRANCHREG-BRAA#444,BRANCHREG-BRAA#445,BRANCHREG-BRAA#446,BRANCHREG-BRAA#447,BRANCHREG-BRAA#448,BRANCHREG-BRAA#449,BRANCHREG-BRAA#450,BRANCHREG-BRAA#451,BRANCHREG-BRAA#452,BRANCHREG-BRAA#453,BRANCHREG-BRAA#454,BRANCHREG-BRAA#455,BRANCHREG-BRAA#456,BRANCHREG-BRAA#457,BRANCHREG-BRAA#458,BRANCHREG-BRAA#459,BRANCHREG-BRAA#460,BRANCHREG-BRAA#461,BRANCHREG-BRAA#462,BRANCHREG-BRAA#463,BRANCHREG-BRAA#464,BRANCHREG-BRAA#465,BRANCHREG-BRAA#466,BRANCHREG-BRAA#467,BRANCHREG-BRAA#468,BRANCHREG-BRAA#469,BRANCHREG-BRAA#470,BRANCHREG-BRAA#471,BRANCHREG-BRAA#472,BRANCHREG-BRAA#473,BRANCHREG-BRAA#474,BRANCHREG-BRAA#475,BRANCHREG-BRAA#476,BRANCHREG-BRAA#477,BRANCHREG-BRAA#478,BRANCHREG-BRAA#479,BRANCHREG-BRAA#480,BRANCHREG-BRAA#481,BRANCHREG-BRAA#482,BRANCHREG-BRAA#483,BRANCHREG-BRAA#484,BRANCHREG-BRAA#485,BRANCHREG-BRAA#486,BRANCHREG-BRAA#487,BRANCHREG-BRAA#488,BRANCHREG-BRAA#489,BRANCHREG-BRAA#490,BRANCHREG-BRAA#491,BRANCHREG-BRAA#492,BRANCHREG-BRAA#493,BRANCHREG-BRAA#494,BRANCHREG-BRAA#495,BRANCHREG-BRAA#496,BRANCHREG-BRAA#497,BRANCHREG-BRAA#498,BRANCHREG-BRAA#499,BRANCHREG-BRAA#500,BRANCHREG-BRAA#501,BRANCHREG-BRAA#502,BRANCHREG-BRAA#503,BRANCHREG-BRAA#504,BRANCHREG-BRAA#505,BRANCHREG-BRAA#506,BRANCHREG-BRAA#507,BRANCHREG-BRAA#508,BRANCHREG-BRAA#509,BRANCHREG-BRAA#510,BRANCHREG-BRAA#511,BRANCHREG-BRAA#512,BRANCHREG-BRAA#513,BRANCHREG-BRAA#514,BRANCHREG-BRAA#515,BRANCHREG-BRAA#516,BRANCHREG-BRAA#517,BRANCHREG-BRAA#518,BRANCHREG-BRAA#519,BRANCHREG-BRAA#520,BRANCHREG-BRAA#521,BRANCHREG-BRAA#522,BRANCHREG-BRAA#523,BRANCHREG-BRAA#524,BRANCHREG-BRAA#525,BRANCHREG-BRAA#526,BRANCHREG-BRAA#527,BRANCHREG-BRAA#528,BRANCHREG-BRAA#529,BRANCHREG-BRAA#530,BRANCHREG-BRAA#531,BRANCHREG-BRAA#532,BRANCHREG-BRAA#533,BRANCHREG-BRAA#534,BRANCHREG-BRAA#535,BRANCHREG-BRAA#536,BRANCHREG-BRAA#537,BRANCHREG-BRAA#538,BRANCHREG-BRAA#539,BRANCHREG-BRAA#540,BRANCHREG-BRAA#541,BRANCHREG-BRAA#542,BRANCHREG-BRAA#543,BRANCHREG-BRAA#544,BRANCHREG-BRAA#545,BRANCHREG-BRAA#546,BRANCHREG-BRAA#547,BRANCHREG-BRAA#548,BRANCHREG-BRAA#549,BRANCHREG-BRAA#550,BRANCHREG-BRAA#551,BRANCHREG-BRAA#552,BRANCHREG-BRAA#553,BRANCHREG-BRAA#554,BRANCHREG-BRAA#555,BRANCHREG-BRAA#556,BRANCHREG-BRAA#557,BRANCHREG-BRAA#558,BRANCHREG-BRAA#559,BRANCHREG-BRAA#560,BRANCHREG-BRAA#561,BRANCHREG-BRAA#562,BRANCHREG-BRAA#563,BRANCHREG-BRAA#564,BRANCHREG-BRAA#565,BRANCHREG-BRAA#566,BRANCHREG-BRAA#567,BRANCHREG-BRAA#568,BRANCHREG-BRAA#569,BRANCHREG-BRAA#570,BRANCHREG-BRAA#571,BRANCHREG-BRAA#572,BRANCHREG-BRAA#573,BRANCHREG-BRAA#574,BRANCHREG-BRAA#575,BRANCHREG-BRAA#576,BRANCHREG-BRAA#577,BRANCHREG-BRAA#578,BRANCHREG-BRAA#579,BRANCHREG-BRAA#580,BRANCHREG-BRAA#581,BRANCHREG-BRAA#582,BRANCHREG-BRAA#583,BRANCHREG-BRAA#584,BRANCHREG-BRAA#585,BRANCHREG-BRAA#586,BRANCHREG-BRAA#587,BRANCHREG-BRAA#588,BRANCHREG-BRAA#589,BRANCHREG-BRAA#590,BRANCHREG-BRAA#591,BRANCHREG-BRAA#592,BRANCHREG-BRAA#593,BRANCHREG-BRAA#594,BRANCHREG-BRAA#595,BRANCHREG-BRAA#596,BRANCHREG-BRAA#597,BRANCHREG-BRAA#598,BRANCHREG-BRAA#599,BRANCHREG-BRAA#600,BRANCHREG-BRAA#601,BRANCHREG-BRAA#602,BRANCHREG-BRAA#603,BRANCHREG-BRAA#604,BRANCHREG-BRAA#605,BRANCHREG-BRAA#606,BRANCHREG-BRAA#607,BRANCHREG-BRAA#608,BRANCHREG-BRAA#609,BRANCHREG-BRAA#610,BRANCHREG-BRAA#611,BRANCHREG-BRAA#612,BRANCHREG-BRAA#613,BRANCHREG-BRAA#614,BRANCHREG-BRAA#615,BRANCHREG-BRAA#616,BRANCHREG-BRAA#617,BRANCHREG-BRAA#618,BRANCHREG-BRAA#619,BRANCHREG-BRAA#620,BRANCHREG-BRAA#621,BRANCHREG-BRAA#622,BRANCHREG-BRAA#623,BRANCHREG-BRAA#624,BRANCHREG-BRAA#625,BRANCHREG-BRAA#626,BRANCHREG-BRAA#627,BRANCHREG-BRAA#628,BRANCHREG-BRAA#629,BRANCHREG-BRAA#630,BRANCHREG-BRAA#631,BRANCHREG-BRAA#632,BRANCHREG-BRAA#633,BRANCHREG-BRAA#634,BRANCHREG-BRAA#635,BRANCHREG-BRAA#636,BRANCHREG-BRAA#637,BRANCHREG-BRAA#638,BRANCHREG-BRAA#639,BRANCHREG-BRAA#640,BRANCHREG-BRAA#641,BRANCHREG-BRAA#642,BRANCHREG-BRAA#643,BRANCHREG-BRAA#644,BRANCHREG-BRAA#645,BRANCHREG-BRAA#646,BRANCHREG-BRAA#647,BRANCHREG-BRAA#648,BRANCHREG-BRAA#649,BRANCHREG-BRAA#650,BRANCHREG-BRAA#651,BRANCHREG-BRAA#652,BRANCHREG-BRAA#653,BRANCHREG-BRAA#654,BRANCHREG-BRAA#655,BRANCHREG-BRAA#656,BRANCHREG-BRAA#657,BRANCHREG-BRAA#658,BRANCHREG-BRAA#659,BRANCHREG-BRAA#660,BRANCHREG-BRAA#661,BRANCHREG-BRAA#662,BRANCHREG-BRAA#663,BRANCHREG-BRAA#664,BRANCHREG-BRAA#665,BRANCHREG-BRAA#666,BRANCHREG-BRAA#667,BRANCHREG-BRAA#668,BRANCHREG-BRAA#669,BRANCHREG-BRAA#670,BRANCHREG-BRAA#671,BRANCHREG-BRAA#672,BRANCHREG-BRAA#673,BRANCHREG-BRAA#674,BRANCHREG-BRAA#675,BRANCHREG-BRAA#676,BRANCHREG-BRAA#677,BRANCHREG-BRAA#678,BRANCHREG-BRAA#679,BRANCHREG-BRAA#680,BRANCHREG-BRAA#681,BRANCHREG-BRAA#682,BRANCHREG-BRAA#683,BRANCHREG-BRAA#684,BRANCHREG-BRAA#685,BRANCHREG-BRAA#686,BRANCHREG-BRAA#687,BRANCHREG-BRAA#688,BRANCHREG-BRAA#689,BRANCHREG-BRAA#690,BRANCHREG-BRAA#691,BRANCHREG-BRAA#692,BRANCHREG-BRAA#693,BRANCHREG-BRAA#694,BRANCHREG-BRAA#695,BRANCHREG-BRAA#696,BRANCHREG-BRAA#697,BRANCHREG-BRAA#698,BRANCHREG-BRAA#699,BRANCHREG-BRAA#700,BRANCHREG-BRAA#701,BRANCHREG-BRAA#702,BRANCHREG-BRAA#703,BRANCHREG-BRAA#704,BRANCHREG-BRAA#705,BRANCHREG-BRAA#706,BRANCHREG-BRAA#707,BRANCHREG-BRAA#708,BRANCHREG-BRAA#709,BRANCHREG-BRAA#710,BRANCHREG-BRAA#711,BRANCHREG-BRAA#712,BRANCHREG-BRAA#713,BRANCHREG-BRAA#714,BRANCHREG-BRAA#715,BRANCHREG-BRAA#716,BRANCHREG-BRAA#717,BRANCHREG-BRAA#718,BRANCHREG-BRAA#719,BRANCHREG-BRAA#720,BRANCHREG-BRAA#721,BRANCHREG-BRAA#722,BRANCHREG-BRAA#723,BRANCHREG-BRAA#724,BRANCHREG-BRAA#725,BRANCHREG-BRAA#726,BRANCHREG-BRAA#727,BRANCHREG-BRAA#728,BRANCHREG-BRAA#729,BRANCHREG-BRAA#730,BRANCHREG-BRAA#731,BRANCHREG-BRAA#732,BRANCHREG-BRAA#733,BRANCHREG-BRAA#734,BRANCHREG-BRAA#735,BRANCHREG-BRAA#736,BRANCHREG-BRAA#737,BRANCHREG-BRAA#738,BRANCHREG-BRAA#739,BRANCHREG-BRAA#740,BRANCHREG-BRAA#741,BRANCHREG-BRAA#742,BRANCHREG-BRAA#743,BRANCHREG-BRAA#744,BRANCHREG-BRAA#745,BRANCHREG-BRAA#746,BRANCHREG-BRAA#747,BRANCHREG-BRAA#748,BRANCHREG-BRAA#749,BRANCHREG-BRAA#750,BRANCHREG-BRAA#751,BRANCHREG-BRAA#752,BRANCHREG-BRAA#753,BRANCHREG-BRAA#754,BRANCHREG-BRAA#755,BRANCHREG-BRAA#756,BRANCHREG-BRAA#757,BRANCHREG-BRAA#758,BRANCHREG-BRAA#759,BRANCHREG-BRAA#760,BRANCHREG-BRAA#761,BRANCHREG-BRAA#762,BRANCHREG-BRAA#763,BRANCHREG-BRAA#764,BRANCHREG-BRAA#765,BRANCHREG-BRAA#766,BRANCHREG-BRAA#767,BRANCHREG-BRAA#768,BRANCHREG-BRAA#769,BRANCHREG-BRAA#770,BRANCHREG-BRAA#771,BRANCHREG-BRAA#772,BRANCHREG-BRAA#773,BRANCHREG-BRAA#774,BRANCHREG-BRAA#775,BRANCHREG-BRAA#776,BRANCHREG-BRAA#777,BRANCHREG-BRAA#778,BRANCHREG-BRAA#779,BRANCHREG-BRAA#780,BRANCHREG-BRAA#781,BRANCHREG-BRAA#782,BRANCHREG-BRAA#783,BRANCHREG-BRAA#784,BRANCHREG-BRAA#785,BRANCHREG-BRAA#786,BRANCHREG-BRAA#787,BRANCHREG-BRAA#788,BRANCHREG-BRAA#789,BRANCHREG-BRAA#790,BRANCHREG-BRAA#791,BRANCHREG-BRAA#792,BRANCHREG-BRAA#793,BRANCHREG-BRAA#794,BRANCHREG-BRAA#795,BRANCHREG-BRAA#796,BRANCHREG-BRAA#797,BRANCHREG-BRAA#798,BRANCHREG-BRAA#799,BRANCHREG-BRAA#800,BRANCHREG-BRAA#801,BRANCHREG-BRAA#802,BRANCHREG-BRAA#803,BRANCHREG-BRAA#804,BRANCHREG-BRAA#805,BRANCHREG-BRAA#806,BRANCHREG-BRAA#807,BRANCHREG-BRAA#808,BRANCHREG-BRAA#809,BRANCHREG-BRAA#810,BRANCHREG-BRAA#811,BRANCHREG-BRAA#812,BRANCHREG-BRAA#813,BRANCHREG-BRAA#814,BRANCHREG-BRAA#815,BRANCHREG-BRAA#816,BRANCHREG-BRAA#817,BRANCHREG-BRAA#818,BRANCHREG-BRAA#819,BRANCHREG-BRAA#820,BRANCHREG-BRAA#821,BRANCHREG-BRAA#822,BRANCHREG-BRAA#823,BRANCHREG-BRAA#824,BRANCHREG-BRAA#825,BRANCHREG-BRAA#826,BRANCHREG-BRAA#827,BRANCHREG-BRAA#828,BRANCHREG-BRAA#829,BRANCHREG-BRAA#830,BRANCHREG-BRAA#831,BRANCHREG-BRAA#832,BRANCHREG-BRAA#833,BRANCHREG-BRAA#834,BRANCHREG-BRAA#835,BRANCHREG-BRAA#836,BRANCHREG-BRAA#837,BRANCHREG-BRAA#838,BRANCHREG-BRAA#839,BRANCHREG-BRAA#840,BRANCHREG-BRAA#841,BRANCHREG-BRAA#842,BRANCHREG-BRAA#843,BRANCHREG-BRAA#844,BRANCHREG-BRAA#845,BRANCHREG-BRAA#846,BRANCHREG-BRAA#847,BRANCHREG-BRAA#848,BRANCHREG-BRAA#849,BRANCHREG-BRAA#850,BRANCHREG-BRAA#851,BRANCHREG-BRAA#852,BRANCHREG-BRAA#853,BRANCHREG-BRAA#854,BRANCHREG-BRAA#855,BRANCHREG-BRAA#856,BRANCHREG-BRAA#857,BRANCHREG-BRAA#858,BRANCHREG-BRAA#859,BRANCHREG-BRAA#860,BRANCHREG-BRAA#861,BRANCHREG-BRAA#862,BRANCHREG-BRAA#863,BRANCHREG-BRAA#864,BRANCHREG-BRAA#865,BRANCHREG-BRAA#866,BRANCHREG-BRAA#867,BRANCHREG-BRAA#868,BRANCHREG-BRAA#869,BRANCHREG-BRAA#870,BRANCHREG-BRAA#871,BRANCHREG-BRAA#872,BRANCHREG-BRAA#873,BRANCHREG-BRAA#874,BRANCHREG-BRAA#875,BRANCHREG-BRAA#876,BRANCHREG-BRAA#877,BRANCHREG-BRAA#878,BRANCHREG-BRAA#879,BRANCHREG-BRAA#880,BRANCHREG-BRAA#881,BRANCHREG-BRAA#882,BRANCHREG-BRAA#883,BRANCHREG-BRAA#884,BRANCHREG-BRAA#885,BRANCHREG-BRAA#886,BRANCHREG-BRAA#887,BRANCHREG-BRAA#888,BRANCHREG-BRAA#889,BRANCHREG-BRAA#890,BRANCHREG-BRAA#891,BRANCHREG-BRAA#892,BRANCHREG-BRAA#893,BRANCHREG-BRAA#894,BRANCHREG-BRAA#895,BRANCHREG-BRAA#896,BRANCHREG-BRAA#897,BRANCHREG-BRAA#898,BRANCHREG-BRAA#899,BRANCHREG-BRAA#900,BRANCHREG-BRAA#901,BRANCHREG-BRAA#902,BRANCHREG-BRAA#903,BRANCHREG-BRAA#904,BRANCHREG-BRAA#905,BRANCHREG-BRAA#906,BRANCHREG-BRAA#907,BRANCHREG-BRAA#908,BRANCHREG-BRAA#909,BRANCHREG-BRAA#910,BRANCHREG-BRAA#911,BRANCHREG-BRAA#912,BRANCHREG-BRAA#913,BRANCHREG-BRAA#914,BRANCHREG-BRAA#915,BRANCHREG-BRAA#916,BRANCHREG-BRAA#917,BRANCHREG-BRAA#918,BRANCHREG-BRAA#919,BRANCHREG-BRAA#920,BRANCHREG-BRAA#921,BRANCHREG-BRAA#922,BRANCHREG-BRAA#923,BRANCHREG-BRAA#924,BRANCHREG-BRAA#925,BRANCHREG-BRAA#926,BRANCHREG-BRAA#927,BRANCHREG-BRAA#928,BRANCHREG-BRAA#929,BRANCHREG-BRAA#930,BRANCHREG-BRAA#931,BRANCHREG-BRAA#932,BRANCHREG-BRAA#933,BRANCHREG-BRAA#934,BRANCHREG-BRAA#935,BRANCHREG-BRAA#936,BRANCHREG-BRAA#937,BRANCHREG-BRAA#938,BRANCHREG-BRAA#939,BRANCHREG-BRAA#940,BRANCHREG-BRAA#941,BRANCHREG-BRAA#942,BRANCHREG-BRAA#943,BRANCHREG-BRAA#944,BRANCHREG-BRAA#945,BRANCHREG-BRAA#946,BRANCHREG-BRAA#947,BRANCHREG-BRAA#948,BRANCHREG-BRAA#949,BRANCHREG-BRAA#950,BRANCHREG-BRAA#951,BRANCHREG-BRAA#952,BRANCHREG-BRAA#953,BRANCHREG-BRAA#954,BRANCHREG-BRAA#955,BRANCHREG-BRAA#956,BRANCHREG-BRAA#957,BRANCHREG-BRAA#958,BRANCHREG-BRAA#959,BRANCHREG-BRAA#960,BRANCHREG-BRAA#961,BRANCHREG-BRAA#962,BRANCHREG-BRAA#963,BRANCHREG-BRAA#964,BRANCHREG-BRAA#965,BRANCHREG-BRAA#966,BRANCHREG-BRAA#967,BRANCHREG-BRAA#968,BRANCHREG-BRAA#969,BRANCHREG-BRAA#970,BRANCHREG-BRAA#971,BRANCHREG-BRAA#972,BRANCHREG-BRAA#973,BRANCHREG-BRAA#974,BRANCHREG-BRAA#975,BRANCHREG-BRAA#976,BRANCHREG-BRAA#977,BRANCHREG-BRAA#978,BRANCHREG-BRAA#979,BRANCHREG-BRAA#980,BRANCHREG-BRAA#981,BRANCHREG-BRAA#982,BRANCHREG-BRAA#983,BRANCHREG-BRAA#984,BRANCHREG-BRAA#985,BRANCHREG-BRAA#986,BRANCHREG-BRAA#987,BRANCHREG-BRAA#988,BRANCHREG-BRAA#989,BRANCHREG-BRAA#990,BRANCHREG-BRAA#991,BRANCHREG-BRAA#992,BRANCHREG-BRAA#993,BRANCHREG-BRAA#994,BRANCHREG-BRAA#995,BRANCHREG-BRAA#996,BRANCHREG-BRAA#997,BRANCHREG-BRAA#998,BRANCHREG-BRAA#999,BRANCHREG-BRAA#1000,BRANCHREG-BRAA#1001,BRANCHREG-BRAA#1002,BRANCHREG-BRAA#1003,BRANCHREG-BRAA#1004,BRANCHREG-BRAA#1005,BRANCHREG-BRAA#1006,BRANCHREG-BRAA#1007,BRANCHREG-BRAA#1008,BRANCHREG-BRAA#1009,BRANCHREG-BRAA#1010,BRANCHREG-BRAA#1011,BRANCHREG-BRAA#1012,BRANCHREG-BRAA#1013,BRANCHREG-BRAA#1014,BRANCHREG-BRAA#1015,BRANCHREG-BRAA#1016,BRANCHREG-BRAA#1017,BRANCHREG-BRAA#1018,BRANCHREG-BRAA#1019,BRANCHREG-BRAA#1020,BRANCHREG-BRAA#1021,BRANCHREG-BRAA#1022,BRANCHREG-BRAA#1023,BRANCHREG-BRAB#0,BRANCHREG-BRAB#1,BRANCHREG-BRAB#2,BRANCHREG-BRAB#3,BRANCHREG-BRAB#4,BRANCHREG-BRAB#5,BRANCHREG-BRAB#6,BRANCHREG-BRAB#7,BRANCHREG-BRAB#8,BRANCHREG-BRAB#9,BRANCHREG-BRAB#10,BRANCHREG-BRAB#11,BRANCHREG-BRAB#12,BRANCHREG-BRAB#13,BRANCHREG-BRAB#14,BRANCHREG-BRAB#15,BRANCHREG-BRAB#16,BRANCHREG-BRAB#17,BRANCHREG-BRAB#18,BRANCHREG-BRAB#19,BRANCHREG-BRAB#20,BRANCHREG-BRAB#21,BRANCHREG-BRAB#22,BRANCHREG-BRAB#23,BRANCHREG-BRAB#24,BRANCHREG-BRAB#25,BRANCHREG-BRAB#26,BRANCHREG-BRAB#27,BRANCHREG-BRAB#28,BRANCHREG-BRAB#29,BRANCHREG-BRAB#30,BRANCHREG-BRAB#31,BRANCHREG-BRAB#32,BRANCHREG-BRAB#33,BRANCHREG-BRAB#34,BRANCHREG-BRAB#35,BRANCHREG-BRAB#36,BRANCHREG-BRAB#37,BRANCHREG-BRAB#38,BRANCHREG-BRAB#39,BRANCHREG-BRAB#40,BRANCHREG-BRAB#41,BRANCHREG-BRAB#42,BRANCHREG-BRAB#43,BRANCHREG-BRAB#44,BRANCHREG-BRAB#45,BRANCHREG-BRAB#46,BRANCHREG-BRAB#47,BRANCHREG-BRAB#48,BRANCHREG-BRAB#49,BRANCHREG-BRAB#50,BRANCHREG-BRAB#51,BRANCHREG-BRAB#52,BRANCHREG-BRAB#53,BRANCHREG-BRAB#54,BRANCHREG-BRAB#55,BRANCHREG-BRAB#56,BRANCHREG-BRAB#57,BRANCHREG-BRAB#58,BRANCHREG-BRAB#59,BRANCHREG-BRAB#60,BRANCHREG-BRAB#61,BRANCHREG-BRAB#62,BRANCHREG-BRAB#63,BRANCHREG-BRAB#64,BRANCHREG-BRAB#65,BRANCHREG-BRAB#66,BRANCHREG-BRAB#67,BRANCHREG-BRAB#68,BRANCHREG-BRAB#69,BRANCHREG-BRAB#70,BRANCHREG-BRAB#71,BRANCHREG-BRAB#72,BRANCHREG-BRAB#73,BRANCHREG-BRAB#74,BRANCHREG-BRAB#75,BRANCHREG-BRAB#76,BRANCHREG-BRAB#77,BRANCHREG-BRAB#78,BRANCHREG-BRAB#79,BRANCHREG-BRAB#80,BRANCHREG-BRAB#81,BRANCHREG-BRAB#82,BRANCHREG-BRAB#83,BRANCHREG-BRAB#84,BRANCHREG-BRAB#85,BRANCHREG-BRAB#86,BRANCHREG-BRAB#87,BRANCHREG-BRAB#88,BRANCHREG-BRAB#89,BRANCHREG-BRAB#90,BRANCHREG-BRAB#91,BRANCHREG-BRAB#92,BRANCHREG-BRAB#93,BRANCHREG-BRAB#94,BRANCHREG-BRAB#95,BRANCHREG-BRAB#96,BRANCHREG-BRAB#97,BRANCHREG-BRAB#98,BRANCHREG-BRAB#99,BRANCHREG-BRAB#100,BRANCHREG-BRAB#101,BRANCHREG-BRAB#102,BRANCHREG-BRAB#103,BRANCHREG-BRAB#104,BRANCHREG-BRAB#105,BRANCHREG-BRAB#106,BRANCHREG-BRAB#107,BRANCHREG-BRAB#108,BRANCHREG-BRAB#109,BRANCHREG-BRAB#110,BRANCHREG-BRAB#111,BRANCHREG-BRAB#112,BRANCHREG-BRAB#113,BRANCHREG-BRAB#114,BRANCHREG-BRAB#115,BRANCHREG-BRAB#116,BRANCHREG-BRAB#117,BRANCHREG-BRAB#118,BRANCHREG-BRAB#119,BRANCHREG-BRAB#120,BRANCHREG-BRAB#121,BRANCHREG-BRAB#122,BRANCHREG-BRAB#123,BRANCHREG-BRAB#124,BRANCHREG-BRAB#125,BRANCHREG-BRAB#126,BRANCHREG-BRAB#127,BRANCHREG-BRAB#128,BRANCHREG-BRAB#129,BRANCHREG-BRAB#130,BRANCHREG-BRAB#131,BRANCHREG-BRAB#132,BRANCHREG-BRAB#133,BRANCHREG-BRAB#134,BRANCHREG-BRAB#135,BRANCHREG-BRAB#136,BRANCHREG-BRAB#137,BRANCHREG-BRAB#138,BRANCHREG-BRAB#139,BRANCHREG-BRAB#140,BRANCHREG-BRAB#141,BRANCHREG-BRAB#142,BRANCHREG-BRAB#143,BRANCHREG-BRAB#144,BRANCHREG-BRAB#145,BRANCHREG-BRAB#146,BRANCHREG-BRAB#147,BRANCHREG-BRAB#148,BRANCHREG-BRAB#149,BRANCHREG-BRAB#150,BRANCHREG-BRAB#151,BRANCHREG-BRAB#152,BRANCHREG-BRAB#153,BRANCHREG-BRAB#154,BRANCHREG-BRAB#155,BRANCHREG-BRAB#156,BRANCHREG-BRAB#157,BRANCHREG-BRAB#158,BRANCHREG-BRAB#159,BRANCHREG-BRAB#160,BRANCHREG-BRAB#161,BRANCHREG-BRAB#162,BRANCHREG-BRAB#163,BRANCHREG-BRAB#164,BRANCHREG-BRAB#165,BRANCHREG-BRAB#166,BRANCHREG-BRAB#167,BRANCHREG-BRAB#168,BRANCHREG-BRAB#169,BRANCHREG-BRAB#170,BRANCHREG-BRAB#171,BRANCHREG-BRAB#172,BRANCHREG-BRAB#173,BRANCHREG-BRAB#174,BRANCHREG-BRAB#175,BRANCHREG-BRAB#176,BRANCHREG-BRAB#177,BRANCHREG-BRAB#178,BRANCHREG-BRAB#179,BRANCHREG-BRAB#180,BRANCHREG-BRAB#181,BRANCHREG-BRAB#182,BRANCHREG-BRAB#183,BRANCHREG-BRAB#184,BRANCHREG-BRAB#185,BRANCHREG-BRAB#186,BRANCHREG-BRAB#187,BRANCHREG-BRAB#188,BRANCHREG-BRAB#189,BRANCHREG-BRAB#190,BRANCHREG-BRAB#191,BRANCHREG-BRAB#192,BRANCHREG-BRAB#193,BRANCHREG-BRAB#194,BRANCHREG-BRAB#195,BRANCHREG-BRAB#196,BRANCHREG-BRAB#197,BRANCHREG-BRAB#198,BRANCHREG-BRAB#199,BRANCHREG-BRAB#200,BRANCHREG-BRAB#201,BRANCHREG-BRAB#202,BRANCHREG-BRAB#203,BRANCHREG-BRAB#204,BRANCHREG-BRAB#205,BRANCHREG-BRAB#206,BRANCHREG-BRAB#207,BRANCHREG-BRAB#208,BRANCHREG-BRAB#209,BRANCHREG-BRAB#210,BRANCHREG-BRAB#211,BRANCHREG-BRAB#212,BRANCHREG-BRAB#213,BRANCHREG-BRAB#214,BRANCHREG-BRAB#215,BRANCHREG-BRAB#216,BRANCHREG-BRAB#217,BRANCHREG-BRAB#218,BRANCHREG-BRAB#219,BRANCHREG-BRAB#220,BRANCHREG-BRAB#221,BRANCHREG-BRAB#222,BRANCHREG-BRAB#223,BRANCHREG-BRAB#224,BRANCHREG-BRAB#225,BRANCHREG-BRAB#226,BRANCHREG-BRAB#227,BRANCHREG-BRAB#228,BRANCHREG-BRAB#229,BRANCHREG-BRAB#230,BRANCHREG-BRAB#231,BRANCHREG-BRAB#232,BRANCHREG-BRAB#233,BRANCHREG-BRAB#234,BRANCHREG-BRAB#235,BRANCHREG-BRAB#236,BRANCHREG-BRAB#237,BRANCHREG-BRAB#238,BRANCHREG-BRAB#239,BRANCHREG-BRAB#240,BRANCHREG-BRAB#241,BRANCHREG-BRAB#242,BRANCHREG-BRAB#243,BRANCHREG-BRAB#244,BRANCHREG-BRAB#245,BRANCHREG-BRAB#246,BRANCHREG-BRAB#247,BRANCHREG-BRAB#248,BRANCHREG-BRAB#249,BRANCHREG-BRAB#250,BRANCHREG-BRAB#251,BRANCHREG-BRAB#252,BRANCHREG-BRAB#253,BRANCHREG-BRAB#254,BRANCHREG-BRAB#255,BRANCHREG-BRAB#256,BRANCHREG-BRAB#257,BRANCHREG-BRAB#258,BRANCHREG-BRAB#259,BRANCHREG-BRAB#260,BRANCHREG-BRAB#261,BRANCHREG-BRAB#262,BRANCHREG-BRAB#263,BRANCHREG-BRAB#264,BRANCHREG-BRAB#265,BRANCHREG-BRAB#266,BRANCHREG-BRAB#267,BRANCHREG-BRAB#268,BRANCHREG-BRAB#269,BRANCHREG-BRAB#270,BRANCHREG-BRAB#271,BRANCHREG-BRAB#272,BRANCHREG-BRAB#273,BRANCHREG-BRAB#274,BRANCHREG-BRAB#275,BRANCHREG-BRAB#276,BRANCHREG-BRAB#277,BRANCHREG-BRAB#278,BRANCHREG-BRAB#279,BRANCHREG-BRAB#280,BRANCHREG-BRAB#281,BRANCHREG-BRAB#282,BRANCHREG-BRAB#283,BRANCHREG-BRAB#284,BRANCHREG-BRAB#285,BRANCHREG-BRAB#286,BRANCHREG-BRAB#287,BRANCHREG-BRAB#288,BRANCHREG-BRAB#289,BRANCHREG-BRAB#290,BRANCHREG-BRAB#291,BRANCHREG-BRAB#292,BRANCHREG-BRAB#293,BRANCHREG-BRAB#294,BRANCHREG-BRAB#295,BRANCHREG-BRAB#296,BRANCHREG-BRAB#297,BRANCHREG-BRAB#298,BRANCHREG-BRAB#299,BRANCHREG-BRAB#300,BRANCHREG-BRAB#301,BRANCHREG-BRAB#302,BRANCHREG-BRAB#303,BRANCHREG-BRAB#304,BRANCHREG-BRAB#305,BRANCHREG-BRAB#306,BRANCHREG-BRAB#307,BRANCHREG-BRAB#308,BRANCHREG-BRAB#309,BRANCHREG-BRAB#310,BRANCHREG-BRAB#311,BRANCHREG-BRAB#312,BRANCHREG-BRAB#313,BRANCHREG-BRAB#314,BRANCHREG-BRAB#315,BRANCHREG-BRAB#316,BRANCHREG-BRAB#317,BRANCHREG-BRAB#318,BRANCHREG-BRAB#319,BRANCHREG-BRAB#320,BRANCHREG-BRAB#321,BRANCHREG-BRAB#322,BRANCHREG-BRAB#323,BRANCHREG-BRAB#324,BRANCHREG-BRAB#325,BRANCHREG-BRAB#326,BRANCHREG-BRAB#327,BRANCHREG-BRAB#328,BRANCHREG-BRAB#329,BRANCHREG-BRAB#330,BRANCHREG-BRAB#331,BRANCHREG-BRAB#332,BRANCHREG-BRAB#333,BRANCHREG-BRAB#334,BRANCHREG-BRAB#335,BRANCHREG-BRAB#336,BRANCHREG-BRAB#337,BRANCHREG-BRAB#338,BRANCHREG-BRAB#339,BRANCHREG-BRAB#340,BRANCHREG-BRAB#341,BRANCHREG-BRAB#342,BRANCHREG-BRAB#343,BRANCHREG-BRAB#344,BRANCHREG-BRAB#345,BRANCHREG-BRAB#346,BRANCHREG-BRAB#347,BRANCHREG-BRAB#348,BRANCHREG-BRAB#349,BRANCHREG-BRAB#350,BRANCHREG-BRAB#351,BRANCHREG-BRAB#352,BRANCHREG-BRAB#353,BRANCHREG-BRAB#354,BRANCHREG-BRAB#355,BRANCHREG-BRAB#356,BRANCHREG-BRAB#357,BRANCHREG-BRAB#358,BRANCHREG-BRAB#359,BRANCHREG-BRAB#360,BRANCHREG-BRAB#361,BRANCHREG-BRAB#362,BRANCHREG-BRAB#363,BRANCHREG-BRAB#364,BRANCHREG-BRAB#365,BRANCHREG-BRAB#366,BRANCHREG-BRAB#367,BRANCHREG-BRAB#368,BRANCHREG-BRAB#369,BRANCHREG-BRAB#370,BRANCHREG-BRAB#371,BRANCHREG-BRAB#372,BRANCHREG-BRAB#373,BRANCHREG-BRAB#374,BRANCHREG-BRAB#375,BRANCHREG-BRAB#376,BRANCHREG-BRAB#377,BRANCHREG-BRAB#378,BRANCHREG-BRAB#379,BRANCHREG-BRAB#380,BRANCHREG-BRAB#381,BRANCHREG-BRAB#382,BRANCHREG-BRAB#383,BRANCHREG-BRAB#384,BRANCHREG-BRAB#385,BRANCHREG-BRAB#386,BRANCHREG-BRAB#387,BRANCHREG-BRAB#388,BRANCHREG-BRAB#389,BRANCHREG-BRAB#390,BRANCHREG-BRAB#391,BRANCHREG-BRAB#392,BRANCHREG-BRAB#393,BRANCHREG-BRAB#394,BRANCHREG-BRAB#395,BRANCHREG-BRAB#396,BRANCHREG-BRAB#397,BRANCHREG-BRAB#398,BRANCHREG-BRAB#399,BRANCHREG-BRAB#400,BRANCHREG-BRAB#401,BRANCHREG-BRAB#402,BRANCHREG-BRAB#403,BRANCHREG-BRAB#404,BRANCHREG-BRAB#405,BRANCHREG-BRAB#406,BRANCHREG-BRAB#407,BRANCHREG-BRAB#408,BRANCHREG-BRAB#409,BRANCHREG-BRAB#410,BRANCHREG-BRAB#411,BRANCHREG-BRAB#412,BRANCHREG-BRAB#413,BRANCHREG-BRAB#414,BRANCHREG-BRAB#415,BRANCHREG-BRAB#416,BRANCHREG-BRAB#417,BRANCHREG-BRAB#418,BRANCHREG-BRAB#419,BRANCHREG-BRAB#420,BRANCHREG-BRAB#421,BRANCHREG-BRAB#422,BRANCHREG-BRAB#423,BRANCHREG-BRAB#424,BRANCHREG-BRAB#425,BRANCHREG-BRAB#426,BRANCHREG-BRAB#427,BRANCHREG-BRAB#428,BRANCHREG-BRAB#429,BRANCHREG-BRAB#430,BRANCHREG-BRAB#431,BRANCHREG-BRAB#432,BRANCHREG-BRAB#433,BRANCHREG-BRAB#434,BRANCHREG-BRAB#435,BRANCHREG-BRAB#436,BRANCHREG-BRAB#437,BRANCHREG-BRAB#438,BRANCHREG-BRAB#439,BRANCHREG-BRAB#440,BRANCHREG-BRAB#441,BRANCHREG-BRAB#442,BRANCHREG-BRAB#443,BRANCHREG-BRAB#444,BRANCHREG-BRAB#445,BRANCHREG-BRAB#446,BRANCHREG-BRAB#447,BRANCHREG-BRAB#448,BRANCHREG-BRAB#449,BRANCHREG-BRAB#450,BRANCHREG-BRAB#451,BRANCHREG-BRAB#452,BRANCHREG-BRAB#453,BRANCHREG-BRAB#454,BRANCHREG-BRAB#455,BRANCHREG-BRAB#456,BRANCHREG-BRAB#457,BRANCHREG-BRAB#458,BRANCHREG-BRAB#459,BRANCHREG-BRAB#460,BRANCHREG-BRAB#461,BRANCHREG-BRAB#462,BRANCHREG-BRAB#463,BRANCHREG-BRAB#464,BRANCHREG-BRAB#465,BRANCHREG-BRAB#466,BRANCHREG-BRAB#467,BRANCHREG-BRAB#468,BRANCHREG-BRAB#469,BRANCHREG-BRAB#470,BRANCHREG-BRAB#471,BRANCHREG-BRAB#472,BRANCHREG-BRAB#473,BRANCHREG-BRAB#474,BRANCHREG-BRAB#475,BRANCHREG-BRAB#476,BRANCHREG-BRAB#477,BRANCHREG-BRAB#478,BRANCHREG-BRAB#479,BRANCHREG-BRAB#480,BRANCHREG-BRAB#481,BRANCHREG-BRAB#482,BRANCHREG-BRAB#483,BRANCHREG-BRAB#484,BRANCHREG-BRAB#485,BRANCHREG-BRAB#486,BRANCHREG-BRAB#487,BRANCHREG-BRAB#488,BRANCHREG-BRAB#489,BRANCHREG-BRAB#490,BRANCHREG-BRAB#491,BRANCHREG-BRAB#492,BRANCHREG-BRAB#493,BRANCHREG-BRAB#494,BRANCHREG-BRAB#495,BRANCHREG-BRAB#496,BRANCHREG-BRAB#497,BRANCHREG-BRAB#498,BRANCHREG-BRAB#499,BRANCHREG-BRAB#500,BRANCHREG-BRAB#501,BRANCHREG-BRAB#502,BRANCHREG-BRAB#503,BRANCHREG-BRAB#504,BRANCHREG-BRAB#505,BRANCHREG-BRAB#506,BRANCHREG-BRAB#507,BRANCHREG-BRAB#508,BRANCHREG-BRAB#509,BRANCHREG-BRAB#510,BRANCHREG-BRAB#511,BRANCHREG-BRAB#512,BRANCHREG-BRAB#513,BRANCHREG-BRAB#514,BRANCHREG-BRAB#515,BRANCHREG-BRAB#516,BRANCHREG-BRAB#517,BRANCHREG-BRAB#518,BRANCHREG-BRAB#519,BRANCHREG-BRAB#520,BRANCHREG-BRAB#521,BRANCHREG-BRAB#522,BRANCHREG-BRAB#523,BRANCHREG-BRAB#524,BRANCHREG-BRAB#525,BRANCHREG-BRAB#526,BRANCHREG-BRAB#527,BRANCHREG-BRAB#528,BRANCHREG-BRAB#529,BRANCHREG-BRAB#530,BRANCHREG-BRAB#531,BRANCHREG-BRAB#532,BRANCHREG-BRAB#533,BRANCHREG-BRAB#534,BRANCHREG-BRAB#535,BRANCHREG-BRAB#536,BRANCHREG-BRAB#537,BRANCHREG-BRAB#538,BRANCHREG-BRAB#539,BRANCHREG-BRAB#540,BRANCHREG-BRAB#541,BRANCHREG-BRAB#542,BRANCHREG-BRAB#543,BRANCHREG-BRAB#544,BRANCHREG-BRAB#545,BRANCHREG-BRAB#546,BRANCHREG-BRAB#547,BRANCHREG-BRAB#548,BRANCHREG-BRAB#549,BRANCHREG-BRAB#550,BRANCHREG-BRAB#551,BRANCHREG-BRAB#552,BRANCHREG-BRAB#553,BRANCHREG-BRAB#554,BRANCHREG-BRAB#555,BRANCHREG-BRAB#556,BRANCHREG-BRAB#557,BRANCHREG-BRAB#558,BRANCHREG-BRAB#559,BRANCHREG-BRAB#560,BRANCHREG-BRAB#561,BRANCHREG-BRAB#562,BRANCHREG-BRAB#563,BRANCHREG-BRAB#564,BRANCHREG-BRAB#565,BRANCHREG-BRAB#566,BRANCHREG-BRAB#567,BRANCHREG-BRAB#568,BRANCHREG-BRAB#569,BRANCHREG-BRAB#570,BRANCHREG-BRAB#571,BRANCHREG-BRAB#572,BRANCHREG-BRAB#573,BRANCHREG-BRAB#574,BRANCHREG-BRAB#575,BRANCHREG-BRAB#576,BRANCHREG-BRAB#577,BRANCHREG-BRAB#578,BRANCHREG-BRAB#579,BRANCHREG-BRAB#580,BRANCHREG-BRAB#581,BRANCHREG-BRAB#582,BRANCHREG-BRAB#583,BRANCHREG-BRAB#584,BRANCHREG-BRAB#585,BRANCHREG-BRAB#586,BRANCHREG-BRAB#587,BRANCHREG-BRAB#588,BRANCHREG-BRAB#589,BRANCHREG-BRAB#590,BRANCHREG-BRAB#591,BRANCHREG-BRAB#592,BRANCHREG-BRAB#593,BRANCHREG-BRAB#594,BRANCHREG-BRAB#595,BRANCHREG-BRAB#596,BRANCHREG-BRAB#597,BRANCHREG-BRAB#598,BRANCHREG-BRAB#599,BRANCHREG-BRAB#600,BRANCHREG-BRAB#601,BRANCHREG-BRAB#602,BRANCHREG-BRAB#603,BRANCHREG-BRAB#604,BRANCHREG-BRAB#605,BRANCHREG-BRAB#606,BRANCHREG-BRAB#607,BRANCHREG-BRAB#608,BRANCHREG-BRAB#609,BRANCHREG-BRAB#610,BRANCHREG-BRAB#611,BRANCHREG-BRAB#612,BRANCHREG-BRAB#613,BRANCHREG-BRAB#614,BRANCHREG-BRAB#615,BRANCHREG-BRAB#616,BRANCHREG-BRAB#617,BRANCHREG-BRAB#618,BRANCHREG-BRAB#619,BRANCHREG-BRAB#620,BRANCHREG-BRAB#621,BRANCHREG-BRAB#622,BRANCHREG-BRAB#623,BRANCHREG-BRAB#624,BRANCHREG-BRAB#625,BRANCHREG-BRAB#626,BRANCHREG-BRAB#627,BRANCHREG-BRAB#628,BRANCHREG-BRAB#629,BRANCHREG-BRAB#630,BRANCHREG-BRAB#631,BRANCHREG-BRAB#632,BRANCHREG-BRAB#633,BRANCHREG-BRAB#634,BRANCHREG-BRAB#635,BRANCHREG-BRAB#636,BRANCHREG-BRAB#637,BRANCHREG-BRAB#638,BRANCHREG-BRAB#639,BRANCHREG-BRAB#640,BRANCHREG-BRAB#641,BRANCHREG-BRAB#642,BRANCHREG-BRAB#643,BRANCHREG-BRAB#644,BRANCHREG-BRAB#645,BRANCHREG-BRAB#646,BRANCHREG-BRAB#647,BRANCHREG-BRAB#648,BRANCHREG-BRAB#649,BRANCHREG-BRAB#650,BRANCHREG-BRAB#651,BRANCHREG-BRAB#652,BRANCHREG-BRAB#653,BRANCHREG-BRAB#654,BRANCHREG-BRAB#655,BRANCHREG-BRAB#656,BRANCHREG-BRAB#657,BRANCHREG-BRAB#658,BRANCHREG-BRAB#659,BRANCHREG-BRAB#660,BRANCHREG-BRAB#661,BRANCHREG-BRAB#662,BRANCHREG-BRAB#663,BRANCHREG-BRAB#664,BRANCHREG-BRAB#665,BRANCHREG-BRAB#666,BRANCHREG-BRAB#667,BRANCHREG-BRAB#668,BRANCHREG-BRAB#669,BRANCHREG-BRAB#670,BRANCHREG-BRAB#671,BRANCHREG-BRAB#672,BRANCHREG-BRAB#673,BRANCHREG-BRAB#674,BRANCHREG-BRAB#675,BRANCHREG-BRAB#676,BRANCHREG-BRAB#677,BRANCHREG-BRAB#678,BRANCHREG-BRAB#679,BRANCHREG-BRAB#680,BRANCHREG-BRAB#681,BRANCHREG-BRAB#682,BRANCHREG-BRAB#683,BRANCHREG-BRAB#684,BRANCHREG-BRAB#685,BRANCHREG-BRAB#686,BRANCHREG-BRAB#687,BRANCHREG-BRAB#688,BRANCHREG-BRAB#689,BRANCHREG-BRAB#690,BRANCHREG-BRAB#691,BRANCHREG-BRAB#692,BRANCHREG-BRAB#693,BRANCHREG-BRAB#694,BRANCHREG-BRAB#695,BRANCHREG-BRAB#696,BRANCHREG-BRAB#697,BRANCHREG-BRAB#698,BRANCHREG-BRAB#699,BRANCHREG-BRAB#700,BRANCHREG-BRAB#701,BRANCHREG-BRAB#702,BRANCHREG-BRAB#703,BRANCHREG-BRAB#704,BRANCHREG-BRAB#705,BRANCHREG-BRAB#706,BRANCHREG-BRAB#707,BRANCHREG-BRAB#708,BRANCHREG-BRAB#709,BRANCHREG-BRAB#710,BRANCHREG-BRAB#711,BRANCHREG-BRAB#712,BRANCHREG-BRAB#713,BRANCHREG-BRAB#714,BRANCHREG-BRAB#715,BRANCHREG-BRAB#716,BRANCHREG-BRAB#717,BRANCHREG-BRAB#718,BRANCHREG-BRAB#719,BRANCHREG-BRAB#720,BRANCHREG-BRAB#721,BRANCHREG-BRAB#722,BRANCHREG-BRAB#723,BRANCHREG-BRAB#724,BRANCHREG-BRAB#725,BRANCHREG-BRAB#726,BRANCHREG-BRAB#727,BRANCHREG-BRAB#728,BRANCHREG-BRAB#729,BRANCHREG-BRAB#730,BRANCHREG-BRAB#731,BRANCHREG-BRAB#732,BRANCHREG-BRAB#733,BRANCHREG-BRAB#734,BRANCHREG-BRAB#735,BRANCHREG-BRAB#736,BRANCHREG-BRAB#737,BRANCHREG-BRAB#738,BRANCHREG-BRAB#739,BRANCHREG-BRAB#740,BRANCHREG-BRAB#741,BRANCHREG-BRAB#742,BRANCHREG-BRAB#743,BRANCHREG-BRAB#744,BRANCHREG-BRAB#745,BRANCHREG-BRAB#746,BRANCHREG-BRAB#747,BRANCHREG-BRAB#748,BRANCHREG-BRAB#749,BRANCHREG-BRAB#750,BRANCHREG-BRAB#751,BRANCHREG-BRAB#752,BRANCHREG-BRAB#753,BRANCHREG-BRAB#754,BRANCHREG-BRAB#755,BRANCHREG-BRAB#756,BRANCHREG-BRAB#757,BRANCHREG-BRAB#758,BRANCHREG-BRAB#759,BRANCHREG-BRAB#760,BRANCHREG-BRAB#761,BRANCHREG-BRAB#762,BRANCHREG-BRAB#763,BRANCHREG-BRAB#764,BRANCHREG-BRAB#765,BRANCHREG-BRAB#766,BRANCHREG-BRAB#767,BRANCHREG-BRAB#768,BRANCHREG-BRAB#769,BRANCHREG-BRAB#770,BRANCHREG-BRAB#771,BRANCHREG-BRAB#772,BRANCHREG-BRAB#773,BRANCHREG-BRAB#774,BRANCHREG-BRAB#775,BRANCHREG-BRAB#776,BRANCHREG-BRAB#777,BRANCHREG-BRAB#778,BRANCHREG-BRAB#779,BRANCHREG-BRAB#780,BRANCHREG-BRAB#781,BRANCHREG-BRAB#782,BRANCHREG-BRAB#783,BRANCHREG-BRAB#784,BRANCHREG-BRAB#785,BRANCHREG-BRAB#786,BRANCHREG-BRAB#787,BRANCHREG-BRAB#788,BRANCHREG-BRAB#789,BRANCHREG-BRAB#790,BRANCHREG-BRAB#791,BRANCHREG-BRAB#792,BRANCHREG-BRAB#793,BRANCHREG-BRAB#794,BRANCHREG-BRAB#795,BRANCHREG-BRAB#796,BRANCHREG-BRAB#797,BRANCHREG-BRAB#798,BRANCHREG-BRAB#799,BRANCHREG-BRAB#800,BRANCHREG-BRAB#801,BRANCHREG-BRAB#802,BRANCHREG-BRAB#803,BRANCHREG-BRAB#804,BRANCHREG-BRAB#805,BRANCHREG-BRAB#806,BRANCHREG-BRAB#807,BRANCHREG-BRAB#808,BRANCHREG-BRAB#809,BRANCHREG-BRAB#810,BRANCHREG-BRAB#811,BRANCHREG-BRAB#812,BRANCHREG-BRAB#813,BRANCHREG-BRAB#814,BRANCHREG-BRAB#815,BRANCHREG-BRAB#816,BRANCHREG-BRAB#817,BRANCHREG-BRAB#818,BRANCHREG-BRAB#819,BRANCHREG-BRAB#820,BRANCHREG-BRAB#821,BRANCHREG-BRAB#822,BRANCHREG-BRAB#823,BRANCHREG-BRAB#824,BRANCHREG-BRAB#825,BRANCHREG-BRAB#826,BRANCHREG-BRAB#827,BRANCHREG-BRAB#828,BRANCHREG-BRAB#829,BRANCHREG-BRAB#830,BRANCHREG-BRAB#831,BRANCHREG-BRAB#832,BRANCHREG-BRAB#833,BRANCHREG-BRAB#834,BRANCHREG-BRAB#835,BRANCHREG-BRAB#836,BRANCHREG-BRAB#837,BRANCHREG-BRAB#838,BRANCHREG-BRAB#839,BRANCHREG-BRAB#840,BRANCHREG-BRAB#841,BRANCHREG-BRAB#842,BRANCHREG-BRAB#843,BRANCHREG-BRAB#844,BRANCHREG-BRAB#845,BRANCHREG-BRAB#846,BRANCHREG-BRAB#847,BRANCHREG-BRAB#848,BRANCHREG-BRAB#849,BRANCHREG-BRAB#850,BRANCHREG-BRAB#851,BRANCHREG-BRAB#852,BRANCHREG-BRAB#853,BRANCHREG-BRAB#854,BRANCHREG-BRAB#855,BRANCHREG-BRAB#856,BRANCHREG-BRAB#857,BRANCHREG-BRAB#858,BRANCHREG-BRAB#859,BRANCHREG-BRAB#860,BRANCHREG-BRAB#861,BRANCHREG-BRAB#862,BRANCHREG-BRAB#863,BRANCHREG-BRAB#864,BRANCHREG-BRAB#865,BRANCHREG-BRAB#866,BRANCHREG-BRAB#867,BRANCHREG-BRAB#868,BRANCHREG-BRAB#869,BRANCHREG-BRAB#870,BRANCHREG-BRAB#871,BRANCHREG-BRAB#872,BRANCHREG-BRAB#873,BRANCHREG-BRAB#874,BRANCHREG-BRAB#875,BRANCHREG-BRAB#876,BRANCHREG-BRAB#877,BRANCHREG-BRAB#878,BRANCHREG-BRAB#879,BRANCHREG-BRAB#880,BRANCHREG-BRAB#881,BRANCHREG-BRAB#882,BRANCHREG-BRAB#883,BRANCHREG-BRAB#884,BRANCHREG-BRAB#885,BRANCHREG-BRAB#886,BRANCHREG-BRAB#887,BRANCHREG-BRAB#888,BRANCHREG-BRAB#889,BRANCHREG-BRAB#890,BRANCHREG-BRAB#891,BRANCHREG-BRAB#892,BRANCHREG-BRAB#893,BRANCHREG-BRAB#894,BRANCHREG-BRAB#895,BRANCHREG-BRAB#896,BRANCHREG-BRAB#897,BRANCHREG-BRAB#898,BRANCHREG-BRAB#899,BRANCHREG-BRAB#900,BRANCHREG-BRAB#901,BRANCHREG-BRAB#902,BRANCHREG-BRAB#903,BRANCHREG-BRAB#904,BRANCHREG-BRAB#905,BRANCHREG-BRAB#906,BRANCHREG-BRAB#907,BRANCHREG-BRAB#908,BRANCHREG-BRAB#909,BRANCHREG-BRAB#910,BRANCHREG-BRAB#911,BRANCHREG-BRAB#912,BRANCHREG-BRAB#913,BRANCHREG-BRAB#914,BRANCHREG-BRAB#915,BRANCHREG-BRAB#916,BRANCHREG-BRAB#917,BRANCHREG-BRAB#918,BRANCHREG-BRAB#919,BRANCHREG-BRAB#920,BRANCHREG-BRAB#921,BRANCHREG-BRAB#922,BRANCHREG-BRAB#923,BRANCHREG-BRAB#924,BRANCHREG-BRAB#925,BRANCHREG-BRAB#926,BRANCHREG-BRAB#927,BRANCHREG-BRAB#928,BRANCHREG-BRAB#929,BRANCHREG-BRAB#930,BRANCHREG-BRAB#931,BRANCHREG-BRAB#932,BRANCHREG-BRAB#933,BRANCHREG-BRAB#934,BRANCHREG-BRAB#935,BRANCHREG-BRAB#936,BRANCHREG-BRAB#937,BRANCHREG-BRAB#938,BRANCHREG-BRAB#939,BRANCHREG-BRAB#940,BRANCHREG-BRAB#941,BRANCHREG-BRAB#942,BRANCHREG-BRAB#943,BRANCHREG-BRAB#944,BRANCHREG-BRAB#945,BRANCHREG-BRAB#946,BRANCHREG-BRAB#947,BRANCHREG-BRAB#948,BRANCHREG-BRAB#949,BRANCHREG-BRAB#950,BRANCHREG-BRAB#951,BRANCHREG-BRAB#952,BRANCHREG-BRAB#953,BRANCHREG-BRAB#954,BRANCHREG-BRAB#955,BRANCHREG-BRAB#956,BRANCHREG-BRAB#957,BRANCHREG-BRAB#958,BRANCHREG-BRAB#959,BRANCHREG-BRAB#960,BRANCHREG-BRAB#961,BRANCHREG-BRAB#962,BRANCHREG-BRAB#963,BRANCHREG-BRAB#964,BRANCHREG-BRAB#965,BRANCHREG-BRAB#966,BRANCHREG-BRAB#967,BRANCHREG-BRAB#968,BRANCHREG-BRAB#969,BRANCHREG-BRAB#970,BRANCHREG-BRAB#971,BRANCHREG-BRAB#972,BRANCHREG-BRAB#973,BRANCHREG-BRAB#974,BRANCHREG-BRAB#975,BRANCHREG-BRAB#976,BRANCHREG-BRAB#977,BRANCHREG-BRAB#978,BRANCHREG-BRAB#979,BRANCHREG-BRAB#980,BRANCHREG-BRAB#981,BRANCHREG-BRAB#982,BRANCHREG-BRAB#983,BRANCHREG-BRAB#984,BRANCHREG-BRAB#985,BRANCHREG-BRAB#986,BRANCHREG-BRAB#987,BRANCHREG-BRAB#988,BRANCHREG-BRAB#989,BRANCHREG-BRAB#990,BRANCHREG-BRAB#991,BRANCHREG-BRAB#992,BRANCHREG-BRAB#993,BRANCHREG-BRAB#994,BRANCHREG-BRAB#995,BRANCHREG-BRAB#996,BRANCHREG-BRAB#997,BRANCHREG-BRAB#998,BRANCHREG-BRAB#999,BRANCHREG-BRAB#1000,BRANCHREG-BRAB#1001,BRANCHREG-BRAB#1002,BRANCHREG-BRAB#1003,BRANCHREG-BRAB#1004,BRANCHREG-BRAB#1005,BRANCHREG-BRAB#1006,BRANCHREG-BRAB#1007,BRANCHREG-BRAB#1008,BRANCHREG-BRAB#1009,BRANCHREG-BRAB#1010,BRANCHREG-BRAB#1011,BRANCHREG-BRAB#1012,BRANCHREG-BRAB#1013,BRANCHREG-BRAB#1014,BRANCHREG-BRAB#1015,BRANCHREG-BRAB#1016,BRANCHREG-BRAB#1017,BRANCHREG-BRAB#1018,BRANCHREG-BRAB#1019,BRANCHREG-BRAB#1020,BRANCHREG-BRAB#1021,BRANCHREG-BRAB#1022,BRANCHREG-BRAB#1023
    0x15a => return classify_impl_15a(inst), // BRANCHREG-BLRAA#0,BRANCHREG-BLRAA#1,BRANCHREG-BLRAA#2,BRANCHREG-BLRAA#3,BRANCHREG-BLRAA#4,BRANCHREG-BLRAA#5,BRANCHREG-BLRAA#6,BRANCHREG-BLRAA#7,BRANCHREG-BLRAA#8,BRANCHREG-BLRAA#9,BRANCHREG-BLRAA#10,BRANCHREG-BLRAA#11,BRANCHREG-BLRAA#12,BRANCHREG-BLRAA#13,BRANCHREG-BLRAA#14,BRANCHREG-BLRAA#15,BRANCHREG-BLRAA#16,BRANCHREG-BLRAA#17,BRANCHREG-BLRAA#18,BRANCHREG-BLRAA#19,BRANCHREG-BLRAA#20,BRANCHREG-BLRAA#21,BRANCHREG-BLRAA#22,BRANCHREG-BLRAA#23,BRANCHREG-BLRAA#24,BRANCHREG-BLRAA#25,BRANCHREG-BLRAA#26,BRANCHREG-BLRAA#27,BRANCHREG-BLRAA#28,BRANCHREG-BLRAA#29,BRANCHREG-BLRAA#30,BRANCHREG-BLRAA#31,BRANCHREG-BLRAA#32,BRANCHREG-BLRAA#33,BRANCHREG-BLRAA#34,BRANCHREG-BLRAA#35,BRANCHREG-BLRAA#36,BRANCHREG-BLRAA#37,BRANCHREG-BLRAA#38,BRANCHREG-BLRAA#39,BRANCHREG-BLRAA#40,BRANCHREG-BLRAA#41,BRANCHREG-BLRAA#42,BRANCHREG-BLRAA#43,BRANCHREG-BLRAA#44,BRANCHREG-BLRAA#45,BRANCHREG-BLRAA#46,BRANCHREG-BLRAA#47,BRANCHREG-BLRAA#48,BRANCHREG-BLRAA#49,BRANCHREG-BLRAA#50,BRANCHREG-BLRAA#51,BRANCHREG-BLRAA#52,BRANCHREG-BLRAA#53,BRANCHREG-BLRAA#54,BRANCHREG-BLRAA#55,BRANCHREG-BLRAA#56,BRANCHREG-BLRAA#57,BRANCHREG-BLRAA#58,BRANCHREG-BLRAA#59,BRANCHREG-BLRAA#60,BRANCHREG-BLRAA#61,BRANCHREG-BLRAA#62,BRANCHREG-BLRAA#63,BRANCHREG-BLRAA#64,BRANCHREG-BLRAA#65,BRANCHREG-BLRAA#66,BRANCHREG-BLRAA#67,BRANCHREG-BLRAA#68,BRANCHREG-BLRAA#69,BRANCHREG-BLRAA#70,BRANCHREG-BLRAA#71,BRANCHREG-BLRAA#72,BRANCHREG-BLRAA#73,BRANCHREG-BLRAA#74,BRANCHREG-BLRAA#75,BRANCHREG-BLRAA#76,BRANCHREG-BLRAA#77,BRANCHREG-BLRAA#78,BRANCHREG-BLRAA#79,BRANCHREG-BLRAA#80,BRANCHREG-BLRAA#81,BRANCHREG-BLRAA#82,BRANCHREG-BLRAA#83,BRANCHREG-BLRAA#84,BRANCHREG-BLRAA#85,BRANCHREG-BLRAA#86,BRANCHREG-BLRAA#87,BRANCHREG-BLRAA#88,BRANCHREG-BLRAA#89,BRANCHREG-BLRAA#90,BRANCHREG-BLRAA#91,BRANCHREG-BLRAA#92,BRANCHREG-BLRAA#93,BRANCHREG-BLRAA#94,BRANCHREG-BLRAA#95,BRANCHREG-BLRAA#96,BRANCHREG-BLRAA#97,BRANCHREG-BLRAA#98,BRANCHREG-BLRAA#99,BRANCHREG-BLRAA#100,BRANCHREG-BLRAA#101,BRANCHREG-BLRAA#102,BRANCHREG-BLRAA#103,BRANCHREG-BLRAA#104,BRANCHREG-BLRAA#105,BRANCHREG-BLRAA#106,BRANCHREG-BLRAA#107,BRANCHREG-BLRAA#108,BRANCHREG-BLRAA#109,BRANCHREG-BLRAA#110,BRANCHREG-BLRAA#111,BRANCHREG-BLRAA#112,BRANCHREG-BLRAA#113,BRANCHREG-BLRAA#114,BRANCHREG-BLRAA#115,BRANCHREG-BLRAA#116,BRANCHREG-BLRAA#117,BRANCHREG-BLRAA#118,BRANCHREG-BLRAA#119,BRANCHREG-BLRAA#120,BRANCHREG-BLRAA#121,BRANCHREG-BLRAA#122,BRANCHREG-BLRAA#123,BRANCHREG-BLRAA#124,BRANCHREG-BLRAA#125,BRANCHREG-BLRAA#126,BRANCHREG-BLRAA#127,BRANCHREG-BLRAA#128,BRANCHREG-BLRAA#129,BRANCHREG-BLRAA#130,BRANCHREG-BLRAA#131,BRANCHREG-BLRAA#132,BRANCHREG-BLRAA#133,BRANCHREG-BLRAA#134,BRANCHREG-BLRAA#135,BRANCHREG-BLRAA#136,BRANCHREG-BLRAA#137,BRANCHREG-BLRAA#138,BRANCHREG-BLRAA#139,BRANCHREG-BLRAA#140,BRANCHREG-BLRAA#141,BRANCHREG-BLRAA#142,BRANCHREG-BLRAA#143,BRANCHREG-BLRAA#144,BRANCHREG-BLRAA#145,BRANCHREG-BLRAA#146,BRANCHREG-BLRAA#147,BRANCHREG-BLRAA#148,BRANCHREG-BLRAA#149,BRANCHREG-BLRAA#150,BRANCHREG-BLRAA#151,BRANCHREG-BLRAA#152,BRANCHREG-BLRAA#153,BRANCHREG-BLRAA#154,BRANCHREG-BLRAA#155,BRANCHREG-BLRAA#156,BRANCHREG-BLRAA#157,BRANCHREG-BLRAA#158,BRANCHREG-BLRAA#159,BRANCHREG-BLRAA#160,BRANCHREG-BLRAA#161,BRANCHREG-BLRAA#162,BRANCHREG-BLRAA#163,BRANCHREG-BLRAA#164,BRANCHREG-BLRAA#165,BRANCHREG-BLRAA#166,BRANCHREG-BLRAA#167,BRANCHREG-BLRAA#168,BRANCHREG-BLRAA#169,BRANCHREG-BLRAA#170,BRANCHREG-BLRAA#171,BRANCHREG-BLRAA#172,BRANCHREG-BLRAA#173,BRANCHREG-BLRAA#174,BRANCHREG-BLRAA#175,BRANCHREG-BLRAA#176,BRANCHREG-BLRAA#177,BRANCHREG-BLRAA#178,BRANCHREG-BLRAA#179,BRANCHREG-BLRAA#180,BRANCHREG-BLRAA#181,BRANCHREG-BLRAA#182,BRANCHREG-BLRAA#183,BRANCHREG-BLRAA#184,BRANCHREG-BLRAA#185,BRANCHREG-BLRAA#186,BRANCHREG-BLRAA#187,BRANCHREG-BLRAA#188,BRANCHREG-BLRAA#189,BRANCHREG-BLRAA#190,BRANCHREG-BLRAA#191,BRANCHREG-BLRAA#192,BRANCHREG-BLRAA#193,BRANCHREG-BLRAA#194,BRANCHREG-BLRAA#195,BRANCHREG-BLRAA#196,BRANCHREG-BLRAA#197,BRANCHREG-BLRAA#198,BRANCHREG-BLRAA#199,BRANCHREG-BLRAA#200,BRANCHREG-BLRAA#201,BRANCHREG-BLRAA#202,BRANCHREG-BLRAA#203,BRANCHREG-BLRAA#204,BRANCHREG-BLRAA#205,BRANCHREG-BLRAA#206,BRANCHREG-BLRAA#207,BRANCHREG-BLRAA#208,BRANCHREG-BLRAA#209,BRANCHREG-BLRAA#210,BRANCHREG-BLRAA#211,BRANCHREG-BLRAA#212,BRANCHREG-BLRAA#213,BRANCHREG-BLRAA#214,BRANCHREG-BLRAA#215,BRANCHREG-BLRAA#216,BRANCHREG-BLRAA#217,BRANCHREG-BLRAA#218,BRANCHREG-BLRAA#219,BRANCHREG-BLRAA#220,BRANCHREG-BLRAA#221,BRANCHREG-BLRAA#222,BRANCHREG-BLRAA#223,BRANCHREG-BLRAA#224,BRANCHREG-BLRAA#225,BRANCHREG-BLRAA#226,BRANCHREG-BLRAA#227,BRANCHREG-BLRAA#228,BRANCHREG-BLRAA#229,BRANCHREG-BLRAA#230,BRANCHREG-BLRAA#231,BRANCHREG-BLRAA#232,BRANCHREG-BLRAA#233,BRANCHREG-BLRAA#234,BRANCHREG-BLRAA#235,BRANCHREG-BLRAA#236,BRANCHREG-BLRAA#237,BRANCHREG-BLRAA#238,BRANCHREG-BLRAA#239,BRANCHREG-BLRAA#240,BRANCHREG-BLRAA#241,BRANCHREG-BLRAA#242,BRANCHREG-BLRAA#243,BRANCHREG-BLRAA#244,BRANCHREG-BLRAA#245,BRANCHREG-BLRAA#246,BRANCHREG-BLRAA#247,BRANCHREG-BLRAA#248,BRANCHREG-BLRAA#249,BRANCHREG-BLRAA#250,BRANCHREG-BLRAA#251,BRANCHREG-BLRAA#252,BRANCHREG-BLRAA#253,BRANCHREG-BLRAA#254,BRANCHREG-BLRAA#255,BRANCHREG-BLRAA#256,BRANCHREG-BLRAA#257,BRANCHREG-BLRAA#258,BRANCHREG-BLRAA#259,BRANCHREG-BLRAA#260,BRANCHREG-BLRAA#261,BRANCHREG-BLRAA#262,BRANCHREG-BLRAA#263,BRANCHREG-BLRAA#264,BRANCHREG-BLRAA#265,BRANCHREG-BLRAA#266,BRANCHREG-BLRAA#267,BRANCHREG-BLRAA#268,BRANCHREG-BLRAA#269,BRANCHREG-BLRAA#270,BRANCHREG-BLRAA#271,BRANCHREG-BLRAA#272,BRANCHREG-BLRAA#273,BRANCHREG-BLRAA#274,BRANCHREG-BLRAA#275,BRANCHREG-BLRAA#276,BRANCHREG-BLRAA#277,BRANCHREG-BLRAA#278,BRANCHREG-BLRAA#279,BRANCHREG-BLRAA#280,BRANCHREG-BLRAA#281,BRANCHREG-BLRAA#282,BRANCHREG-BLRAA#283,BRANCHREG-BLRAA#284,BRANCHREG-BLRAA#285,BRANCHREG-BLRAA#286,BRANCHREG-BLRAA#287,BRANCHREG-BLRAA#288,BRANCHREG-BLRAA#289,BRANCHREG-BLRAA#290,BRANCHREG-BLRAA#291,BRANCHREG-BLRAA#292,BRANCHREG-BLRAA#293,BRANCHREG-BLRAA#294,BRANCHREG-BLRAA#295,BRANCHREG-BLRAA#296,BRANCHREG-BLRAA#297,BRANCHREG-BLRAA#298,BRANCHREG-BLRAA#299,BRANCHREG-BLRAA#300,BRANCHREG-BLRAA#301,BRANCHREG-BLRAA#302,BRANCHREG-BLRAA#303,BRANCHREG-BLRAA#304,BRANCHREG-BLRAA#305,BRANCHREG-BLRAA#306,BRANCHREG-BLRAA#307,BRANCHREG-BLRAA#308,BRANCHREG-BLRAA#309,BRANCHREG-BLRAA#310,BRANCHREG-BLRAA#311,BRANCHREG-BLRAA#312,BRANCHREG-BLRAA#313,BRANCHREG-BLRAA#314,BRANCHREG-BLRAA#315,BRANCHREG-BLRAA#316,BRANCHREG-BLRAA#317,BRANCHREG-BLRAA#318,BRANCHREG-BLRAA#319,BRANCHREG-BLRAA#320,BRANCHREG-BLRAA#321,BRANCHREG-BLRAA#322,BRANCHREG-BLRAA#323,BRANCHREG-BLRAA#324,BRANCHREG-BLRAA#325,BRANCHREG-BLRAA#326,BRANCHREG-BLRAA#327,BRANCHREG-BLRAA#328,BRANCHREG-BLRAA#329,BRANCHREG-BLRAA#330,BRANCHREG-BLRAA#331,BRANCHREG-BLRAA#332,BRANCHREG-BLRAA#333,BRANCHREG-BLRAA#334,BRANCHREG-BLRAA#335,BRANCHREG-BLRAA#336,BRANCHREG-BLRAA#337,BRANCHREG-BLRAA#338,BRANCHREG-BLRAA#339,BRANCHREG-BLRAA#340,BRANCHREG-BLRAA#341,BRANCHREG-BLRAA#342,BRANCHREG-BLRAA#343,BRANCHREG-BLRAA#344,BRANCHREG-BLRAA#345,BRANCHREG-BLRAA#346,BRANCHREG-BLRAA#347,BRANCHREG-BLRAA#348,BRANCHREG-BLRAA#349,BRANCHREG-BLRAA#350,BRANCHREG-BLRAA#351,BRANCHREG-BLRAA#352,BRANCHREG-BLRAA#353,BRANCHREG-BLRAA#354,BRANCHREG-BLRAA#355,BRANCHREG-BLRAA#356,BRANCHREG-BLRAA#357,BRANCHREG-BLRAA#358,BRANCHREG-BLRAA#359,BRANCHREG-BLRAA#360,BRANCHREG-BLRAA#361,BRANCHREG-BLRAA#362,BRANCHREG-BLRAA#363,BRANCHREG-BLRAA#364,BRANCHREG-BLRAA#365,BRANCHREG-BLRAA#366,BRANCHREG-BLRAA#367,BRANCHREG-BLRAA#368,BRANCHREG-BLRAA#369,BRANCHREG-BLRAA#370,BRANCHREG-BLRAA#371,BRANCHREG-BLRAA#372,BRANCHREG-BLRAA#373,BRANCHREG-BLRAA#374,BRANCHREG-BLRAA#375,BRANCHREG-BLRAA#376,BRANCHREG-BLRAA#377,BRANCHREG-BLRAA#378,BRANCHREG-BLRAA#379,BRANCHREG-BLRAA#380,BRANCHREG-BLRAA#381,BRANCHREG-BLRAA#382,BRANCHREG-BLRAA#383,BRANCHREG-BLRAA#384,BRANCHREG-BLRAA#385,BRANCHREG-BLRAA#386,BRANCHREG-BLRAA#387,BRANCHREG-BLRAA#388,BRANCHREG-BLRAA#389,BRANCHREG-BLRAA#390,BRANCHREG-BLRAA#391,BRANCHREG-BLRAA#392,BRANCHREG-BLRAA#393,BRANCHREG-BLRAA#394,BRANCHREG-BLRAA#395,BRANCHREG-BLRAA#396,BRANCHREG-BLRAA#397,BRANCHREG-BLRAA#398,BRANCHREG-BLRAA#399,BRANCHREG-BLRAA#400,BRANCHREG-BLRAA#401,BRANCHREG-BLRAA#402,BRANCHREG-BLRAA#403,BRANCHREG-BLRAA#404,BRANCHREG-BLRAA#405,BRANCHREG-BLRAA#406,BRANCHREG-BLRAA#407,BRANCHREG-BLRAA#408,BRANCHREG-BLRAA#409,BRANCHREG-BLRAA#410,BRANCHREG-BLRAA#411,BRANCHREG-BLRAA#412,BRANCHREG-BLRAA#413,BRANCHREG-BLRAA#414,BRANCHREG-BLRAA#415,BRANCHREG-BLRAA#416,BRANCHREG-BLRAA#417,BRANCHREG-BLRAA#418,BRANCHREG-BLRAA#419,BRANCHREG-BLRAA#420,BRANCHREG-BLRAA#421,BRANCHREG-BLRAA#422,BRANCHREG-BLRAA#423,BRANCHREG-BLRAA#424,BRANCHREG-BLRAA#425,BRANCHREG-BLRAA#426,BRANCHREG-BLRAA#427,BRANCHREG-BLRAA#428,BRANCHREG-BLRAA#429,BRANCHREG-BLRAA#430,BRANCHREG-BLRAA#431,BRANCHREG-BLRAA#432,BRANCHREG-BLRAA#433,BRANCHREG-BLRAA#434,BRANCHREG-BLRAA#435,BRANCHREG-BLRAA#436,BRANCHREG-BLRAA#437,BRANCHREG-BLRAA#438,BRANCHREG-BLRAA#439,BRANCHREG-BLRAA#440,BRANCHREG-BLRAA#441,BRANCHREG-BLRAA#442,BRANCHREG-BLRAA#443,BRANCHREG-BLRAA#444,BRANCHREG-BLRAA#445,BRANCHREG-BLRAA#446,BRANCHREG-BLRAA#447,BRANCHREG-BLRAA#448,BRANCHREG-BLRAA#449,BRANCHREG-BLRAA#450,BRANCHREG-BLRAA#451,BRANCHREG-BLRAA#452,BRANCHREG-BLRAA#453,BRANCHREG-BLRAA#454,BRANCHREG-BLRAA#455,BRANCHREG-BLRAA#456,BRANCHREG-BLRAA#457,BRANCHREG-BLRAA#458,BRANCHREG-BLRAA#459,BRANCHREG-BLRAA#460,BRANCHREG-BLRAA#461,BRANCHREG-BLRAA#462,BRANCHREG-BLRAA#463,BRANCHREG-BLRAA#464,BRANCHREG-BLRAA#465,BRANCHREG-BLRAA#466,BRANCHREG-BLRAA#467,BRANCHREG-BLRAA#468,BRANCHREG-BLRAA#469,BRANCHREG-BLRAA#470,BRANCHREG-BLRAA#471,BRANCHREG-BLRAA#472,BRANCHREG-BLRAA#473,BRANCHREG-BLRAA#474,BRANCHREG-BLRAA#475,BRANCHREG-BLRAA#476,BRANCHREG-BLRAA#477,BRANCHREG-BLRAA#478,BRANCHREG-BLRAA#479,BRANCHREG-BLRAA#480,BRANCHREG-BLRAA#481,BRANCHREG-BLRAA#482,BRANCHREG-BLRAA#483,BRANCHREG-BLRAA#484,BRANCHREG-BLRAA#485,BRANCHREG-BLRAA#486,BRANCHREG-BLRAA#487,BRANCHREG-BLRAA#488,BRANCHREG-BLRAA#489,BRANCHREG-BLRAA#490,BRANCHREG-BLRAA#491,BRANCHREG-BLRAA#492,BRANCHREG-BLRAA#493,BRANCHREG-BLRAA#494,BRANCHREG-BLRAA#495,BRANCHREG-BLRAA#496,BRANCHREG-BLRAA#497,BRANCHREG-BLRAA#498,BRANCHREG-BLRAA#499,BRANCHREG-BLRAA#500,BRANCHREG-BLRAA#501,BRANCHREG-BLRAA#502,BRANCHREG-BLRAA#503,BRANCHREG-BLRAA#504,BRANCHREG-BLRAA#505,BRANCHREG-BLRAA#506,BRANCHREG-BLRAA#507,BRANCHREG-BLRAA#508,BRANCHREG-BLRAA#509,BRANCHREG-BLRAA#510,BRANCHREG-BLRAA#511,BRANCHREG-BLRAA#512,BRANCHREG-BLRAA#513,BRANCHREG-BLRAA#514,BRANCHREG-BLRAA#515,BRANCHREG-BLRAA#516,BRANCHREG-BLRAA#517,BRANCHREG-BLRAA#518,BRANCHREG-BLRAA#519,BRANCHREG-BLRAA#520,BRANCHREG-BLRAA#521,BRANCHREG-BLRAA#522,BRANCHREG-BLRAA#523,BRANCHREG-BLRAA#524,BRANCHREG-BLRAA#525,BRANCHREG-BLRAA#526,BRANCHREG-BLRAA#527,BRANCHREG-BLRAA#528,BRANCHREG-BLRAA#529,BRANCHREG-BLRAA#530,BRANCHREG-BLRAA#531,BRANCHREG-BLRAA#532,BRANCHREG-BLRAA#533,BRANCHREG-BLRAA#534,BRANCHREG-BLRAA#535,BRANCHREG-BLRAA#536,BRANCHREG-BLRAA#537,BRANCHREG-BLRAA#538,BRANCHREG-BLRAA#539,BRANCHREG-BLRAA#540,BRANCHREG-BLRAA#541,BRANCHREG-BLRAA#542,BRANCHREG-BLRAA#543,BRANCHREG-BLRAA#544,BRANCHREG-BLRAA#545,BRANCHREG-BLRAA#546,BRANCHREG-BLRAA#547,BRANCHREG-BLRAA#548,BRANCHREG-BLRAA#549,BRANCHREG-BLRAA#550,BRANCHREG-BLRAA#551,BRANCHREG-BLRAA#552,BRANCHREG-BLRAA#553,BRANCHREG-BLRAA#554,BRANCHREG-BLRAA#555,BRANCHREG-BLRAA#556,BRANCHREG-BLRAA#557,BRANCHREG-BLRAA#558,BRANCHREG-BLRAA#559,BRANCHREG-BLRAA#560,BRANCHREG-BLRAA#561,BRANCHREG-BLRAA#562,BRANCHREG-BLRAA#563,BRANCHREG-BLRAA#564,BRANCHREG-BLRAA#565,BRANCHREG-BLRAA#566,BRANCHREG-BLRAA#567,BRANCHREG-BLRAA#568,BRANCHREG-BLRAA#569,BRANCHREG-BLRAA#570,BRANCHREG-BLRAA#571,BRANCHREG-BLRAA#572,BRANCHREG-BLRAA#573,BRANCHREG-BLRAA#574,BRANCHREG-BLRAA#575,BRANCHREG-BLRAA#576,BRANCHREG-BLRAA#577,BRANCHREG-BLRAA#578,BRANCHREG-BLRAA#579,BRANCHREG-BLRAA#580,BRANCHREG-BLRAA#581,BRANCHREG-BLRAA#582,BRANCHREG-BLRAA#583,BRANCHREG-BLRAA#584,BRANCHREG-BLRAA#585,BRANCHREG-BLRAA#586,BRANCHREG-BLRAA#587,BRANCHREG-BLRAA#588,BRANCHREG-BLRAA#589,BRANCHREG-BLRAA#590,BRANCHREG-BLRAA#591,BRANCHREG-BLRAA#592,BRANCHREG-BLRAA#593,BRANCHREG-BLRAA#594,BRANCHREG-BLRAA#595,BRANCHREG-BLRAA#596,BRANCHREG-BLRAA#597,BRANCHREG-BLRAA#598,BRANCHREG-BLRAA#599,BRANCHREG-BLRAA#600,BRANCHREG-BLRAA#601,BRANCHREG-BLRAA#602,BRANCHREG-BLRAA#603,BRANCHREG-BLRAA#604,BRANCHREG-BLRAA#605,BRANCHREG-BLRAA#606,BRANCHREG-BLRAA#607,BRANCHREG-BLRAA#608,BRANCHREG-BLRAA#609,BRANCHREG-BLRAA#610,BRANCHREG-BLRAA#611,BRANCHREG-BLRAA#612,BRANCHREG-BLRAA#613,BRANCHREG-BLRAA#614,BRANCHREG-BLRAA#615,BRANCHREG-BLRAA#616,BRANCHREG-BLRAA#617,BRANCHREG-BLRAA#618,BRANCHREG-BLRAA#619,BRANCHREG-BLRAA#620,BRANCHREG-BLRAA#621,BRANCHREG-BLRAA#622,BRANCHREG-BLRAA#623,BRANCHREG-BLRAA#624,BRANCHREG-BLRAA#625,BRANCHREG-BLRAA#626,BRANCHREG-BLRAA#627,BRANCHREG-BLRAA#628,BRANCHREG-BLRAA#629,BRANCHREG-BLRAA#630,BRANCHREG-BLRAA#631,BRANCHREG-BLRAA#632,BRANCHREG-BLRAA#633,BRANCHREG-BLRAA#634,BRANCHREG-BLRAA#635,BRANCHREG-BLRAA#636,BRANCHREG-BLRAA#637,BRANCHREG-BLRAA#638,BRANCHREG-BLRAA#639,BRANCHREG-BLRAA#640,BRANCHREG-BLRAA#641,BRANCHREG-BLRAA#642,BRANCHREG-BLRAA#643,BRANCHREG-BLRAA#644,BRANCHREG-BLRAA#645,BRANCHREG-BLRAA#646,BRANCHREG-BLRAA#647,BRANCHREG-BLRAA#648,BRANCHREG-BLRAA#649,BRANCHREG-BLRAA#650,BRANCHREG-BLRAA#651,BRANCHREG-BLRAA#652,BRANCHREG-BLRAA#653,BRANCHREG-BLRAA#654,BRANCHREG-BLRAA#655,BRANCHREG-BLRAA#656,BRANCHREG-BLRAA#657,BRANCHREG-BLRAA#658,BRANCHREG-BLRAA#659,BRANCHREG-BLRAA#660,BRANCHREG-BLRAA#661,BRANCHREG-BLRAA#662,BRANCHREG-BLRAA#663,BRANCHREG-BLRAA#664,BRANCHREG-BLRAA#665,BRANCHREG-BLRAA#666,BRANCHREG-BLRAA#667,BRANCHREG-BLRAA#668,BRANCHREG-BLRAA#669,BRANCHREG-BLRAA#670,BRANCHREG-BLRAA#671,BRANCHREG-BLRAA#672,BRANCHREG-BLRAA#673,BRANCHREG-BLRAA#674,BRANCHREG-BLRAA#675,BRANCHREG-BLRAA#676,BRANCHREG-BLRAA#677,BRANCHREG-BLRAA#678,BRANCHREG-BLRAA#679,BRANCHREG-BLRAA#680,BRANCHREG-BLRAA#681,BRANCHREG-BLRAA#682,BRANCHREG-BLRAA#683,BRANCHREG-BLRAA#684,BRANCHREG-BLRAA#685,BRANCHREG-BLRAA#686,BRANCHREG-BLRAA#687,BRANCHREG-BLRAA#688,BRANCHREG-BLRAA#689,BRANCHREG-BLRAA#690,BRANCHREG-BLRAA#691,BRANCHREG-BLRAA#692,BRANCHREG-BLRAA#693,BRANCHREG-BLRAA#694,BRANCHREG-BLRAA#695,BRANCHREG-BLRAA#696,BRANCHREG-BLRAA#697,BRANCHREG-BLRAA#698,BRANCHREG-BLRAA#699,BRANCHREG-BLRAA#700,BRANCHREG-BLRAA#701,BRANCHREG-BLRAA#702,BRANCHREG-BLRAA#703,BRANCHREG-BLRAA#704,BRANCHREG-BLRAA#705,BRANCHREG-BLRAA#706,BRANCHREG-BLRAA#707,BRANCHREG-BLRAA#708,BRANCHREG-BLRAA#709,BRANCHREG-BLRAA#710,BRANCHREG-BLRAA#711,BRANCHREG-BLRAA#712,BRANCHREG-BLRAA#713,BRANCHREG-BLRAA#714,BRANCHREG-BLRAA#715,BRANCHREG-BLRAA#716,BRANCHREG-BLRAA#717,BRANCHREG-BLRAA#718,BRANCHREG-BLRAA#719,BRANCHREG-BLRAA#720,BRANCHREG-BLRAA#721,BRANCHREG-BLRAA#722,BRANCHREG-BLRAA#723,BRANCHREG-BLRAA#724,BRANCHREG-BLRAA#725,BRANCHREG-BLRAA#726,BRANCHREG-BLRAA#727,BRANCHREG-BLRAA#728,BRANCHREG-BLRAA#729,BRANCHREG-BLRAA#730,BRANCHREG-BLRAA#731,BRANCHREG-BLRAA#732,BRANCHREG-BLRAA#733,BRANCHREG-BLRAA#734,BRANCHREG-BLRAA#735,BRANCHREG-BLRAA#736,BRANCHREG-BLRAA#737,BRANCHREG-BLRAA#738,BRANCHREG-BLRAA#739,BRANCHREG-BLRAA#740,BRANCHREG-BLRAA#741,BRANCHREG-BLRAA#742,BRANCHREG-BLRAA#743,BRANCHREG-BLRAA#744,BRANCHREG-BLRAA#745,BRANCHREG-BLRAA#746,BRANCHREG-BLRAA#747,BRANCHREG-BLRAA#748,BRANCHREG-BLRAA#749,BRANCHREG-BLRAA#750,BRANCHREG-BLRAA#751,BRANCHREG-BLRAA#752,BRANCHREG-BLRAA#753,BRANCHREG-BLRAA#754,BRANCHREG-BLRAA#755,BRANCHREG-BLRAA#756,BRANCHREG-BLRAA#757,BRANCHREG-BLRAA#758,BRANCHREG-BLRAA#759,BRANCHREG-BLRAA#760,BRANCHREG-BLRAA#761,BRANCHREG-BLRAA#762,BRANCHREG-BLRAA#763,BRANCHREG-BLRAA#764,BRANCHREG-BLRAA#765,BRANCHREG-BLRAA#766,BRANCHREG-BLRAA#767,BRANCHREG-BLRAA#768,BRANCHREG-BLRAA#769,BRANCHREG-BLRAA#770,BRANCHREG-BLRAA#771,BRANCHREG-BLRAA#772,BRANCHREG-BLRAA#773,BRANCHREG-BLRAA#774,BRANCHREG-BLRAA#775,BRANCHREG-BLRAA#776,BRANCHREG-BLRAA#777,BRANCHREG-BLRAA#778,BRANCHREG-BLRAA#779,BRANCHREG-BLRAA#780,BRANCHREG-BLRAA#781,BRANCHREG-BLRAA#782,BRANCHREG-BLRAA#783,BRANCHREG-BLRAA#784,BRANCHREG-BLRAA#785,BRANCHREG-BLRAA#786,BRANCHREG-BLRAA#787,BRANCHREG-BLRAA#788,BRANCHREG-BLRAA#789,BRANCHREG-BLRAA#790,BRANCHREG-BLRAA#791,BRANCHREG-BLRAA#792,BRANCHREG-BLRAA#793,BRANCHREG-BLRAA#794,BRANCHREG-BLRAA#795,BRANCHREG-BLRAA#796,BRANCHREG-BLRAA#797,BRANCHREG-BLRAA#798,BRANCHREG-BLRAA#799,BRANCHREG-BLRAA#800,BRANCHREG-BLRAA#801,BRANCHREG-BLRAA#802,BRANCHREG-BLRAA#803,BRANCHREG-BLRAA#804,BRANCHREG-BLRAA#805,BRANCHREG-BLRAA#806,BRANCHREG-BLRAA#807,BRANCHREG-BLRAA#808,BRANCHREG-BLRAA#809,BRANCHREG-BLRAA#810,BRANCHREG-BLRAA#811,BRANCHREG-BLRAA#812,BRANCHREG-BLRAA#813,BRANCHREG-BLRAA#814,BRANCHREG-BLRAA#815,BRANCHREG-BLRAA#816,BRANCHREG-BLRAA#817,BRANCHREG-BLRAA#818,BRANCHREG-BLRAA#819,BRANCHREG-BLRAA#820,BRANCHREG-BLRAA#821,BRANCHREG-BLRAA#822,BRANCHREG-BLRAA#823,BRANCHREG-BLRAA#824,BRANCHREG-BLRAA#825,BRANCHREG-BLRAA#826,BRANCHREG-BLRAA#827,BRANCHREG-BLRAA#828,BRANCHREG-BLRAA#829,BRANCHREG-BLRAA#830,BRANCHREG-BLRAA#831,BRANCHREG-BLRAA#832,BRANCHREG-BLRAA#833,BRANCHREG-BLRAA#834,BRANCHREG-BLRAA#835,BRANCHREG-BLRAA#836,BRANCHREG-BLRAA#837,BRANCHREG-BLRAA#838,BRANCHREG-BLRAA#839,BRANCHREG-BLRAA#840,BRANCHREG-BLRAA#841,BRANCHREG-BLRAA#842,BRANCHREG-BLRAA#843,BRANCHREG-BLRAA#844,BRANCHREG-BLRAA#845,BRANCHREG-BLRAA#846,BRANCHREG-BLRAA#847,BRANCHREG-BLRAA#848,BRANCHREG-BLRAA#849,BRANCHREG-BLRAA#850,BRANCHREG-BLRAA#851,BRANCHREG-BLRAA#852,BRANCHREG-BLRAA#853,BRANCHREG-BLRAA#854,BRANCHREG-BLRAA#855,BRANCHREG-BLRAA#856,BRANCHREG-BLRAA#857,BRANCHREG-BLRAA#858,BRANCHREG-BLRAA#859,BRANCHREG-BLRAA#860,BRANCHREG-BLRAA#861,BRANCHREG-BLRAA#862,BRANCHREG-BLRAA#863,BRANCHREG-BLRAA#864,BRANCHREG-BLRAA#865,BRANCHREG-BLRAA#866,BRANCHREG-BLRAA#867,BRANCHREG-BLRAA#868,BRANCHREG-BLRAA#869,BRANCHREG-BLRAA#870,BRANCHREG-BLRAA#871,BRANCHREG-BLRAA#872,BRANCHREG-BLRAA#873,BRANCHREG-BLRAA#874,BRANCHREG-BLRAA#875,BRANCHREG-BLRAA#876,BRANCHREG-BLRAA#877,BRANCHREG-BLRAA#878,BRANCHREG-BLRAA#879,BRANCHREG-BLRAA#880,BRANCHREG-BLRAA#881,BRANCHREG-BLRAA#882,BRANCHREG-BLRAA#883,BRANCHREG-BLRAA#884,BRANCHREG-BLRAA#885,BRANCHREG-BLRAA#886,BRANCHREG-BLRAA#887,BRANCHREG-BLRAA#888,BRANCHREG-BLRAA#889,BRANCHREG-BLRAA#890,BRANCHREG-BLRAA#891,BRANCHREG-BLRAA#892,BRANCHREG-BLRAA#893,BRANCHREG-BLRAA#894,BRANCHREG-BLRAA#895,BRANCHREG-BLRAA#896,BRANCHREG-BLRAA#897,BRANCHREG-BLRAA#898,BRANCHREG-BLRAA#899,BRANCHREG-BLRAA#900,BRANCHREG-BLRAA#901,BRANCHREG-BLRAA#902,BRANCHREG-BLRAA#903,BRANCHREG-BLRAA#904,BRANCHREG-BLRAA#905,BRANCHREG-BLRAA#906,BRANCHREG-BLRAA#907,BRANCHREG-BLRAA#908,BRANCHREG-BLRAA#909,BRANCHREG-BLRAA#910,BRANCHREG-BLRAA#911,BRANCHREG-BLRAA#912,BRANCHREG-BLRAA#913,BRANCHREG-BLRAA#914,BRANCHREG-BLRAA#915,BRANCHREG-BLRAA#916,BRANCHREG-BLRAA#917,BRANCHREG-BLRAA#918,BRANCHREG-BLRAA#919,BRANCHREG-BLRAA#920,BRANCHREG-BLRAA#921,BRANCHREG-BLRAA#922,BRANCHREG-BLRAA#923,BRANCHREG-BLRAA#924,BRANCHREG-BLRAA#925,BRANCHREG-BLRAA#926,BRANCHREG-BLRAA#927,BRANCHREG-BLRAA#928,BRANCHREG-BLRAA#929,BRANCHREG-BLRAA#930,BRANCHREG-BLRAA#931,BRANCHREG-BLRAA#932,BRANCHREG-BLRAA#933,BRANCHREG-BLRAA#934,BRANCHREG-BLRAA#935,BRANCHREG-BLRAA#936,BRANCHREG-BLRAA#937,BRANCHREG-BLRAA#938,BRANCHREG-BLRAA#939,BRANCHREG-BLRAA#940,BRANCHREG-BLRAA#941,BRANCHREG-BLRAA#942,BRANCHREG-BLRAA#943,BRANCHREG-BLRAA#944,BRANCHREG-BLRAA#945,BRANCHREG-BLRAA#946,BRANCHREG-BLRAA#947,BRANCHREG-BLRAA#948,BRANCHREG-BLRAA#949,BRANCHREG-BLRAA#950,BRANCHREG-BLRAA#951,BRANCHREG-BLRAA#952,BRANCHREG-BLRAA#953,BRANCHREG-BLRAA#954,BRANCHREG-BLRAA#955,BRANCHREG-BLRAA#956,BRANCHREG-BLRAA#957,BRANCHREG-BLRAA#958,BRANCHREG-BLRAA#959,BRANCHREG-BLRAA#960,BRANCHREG-BLRAA#961,BRANCHREG-BLRAA#962,BRANCHREG-BLRAA#963,BRANCHREG-BLRAA#964,BRANCHREG-BLRAA#965,BRANCHREG-BLRAA#966,BRANCHREG-BLRAA#967,BRANCHREG-BLRAA#968,BRANCHREG-BLRAA#969,BRANCHREG-BLRAA#970,BRANCHREG-BLRAA#971,BRANCHREG-BLRAA#972,BRANCHREG-BLRAA#973,BRANCHREG-BLRAA#974,BRANCHREG-BLRAA#975,BRANCHREG-BLRAA#976,BRANCHREG-BLRAA#977,BRANCHREG-BLRAA#978,BRANCHREG-BLRAA#979,BRANCHREG-BLRAA#980,BRANCHREG-BLRAA#981,BRANCHREG-BLRAA#982,BRANCHREG-BLRAA#983,BRANCHREG-BLRAA#984,BRANCHREG-BLRAA#985,BRANCHREG-BLRAA#986,BRANCHREG-BLRAA#987,BRANCHREG-BLRAA#988,BRANCHREG-BLRAA#989,BRANCHREG-BLRAA#990,BRANCHREG-BLRAA#991,BRANCHREG-BLRAA#992,BRANCHREG-BLRAA#993,BRANCHREG-BLRAA#994,BRANCHREG-BLRAA#995,BRANCHREG-BLRAA#996,BRANCHREG-BLRAA#997,BRANCHREG-BLRAA#998,BRANCHREG-BLRAA#999,BRANCHREG-BLRAA#1000,BRANCHREG-BLRAA#1001,BRANCHREG-BLRAA#1002,BRANCHREG-BLRAA#1003,BRANCHREG-BLRAA#1004,BRANCHREG-BLRAA#1005,BRANCHREG-BLRAA#1006,BRANCHREG-BLRAA#1007,BRANCHREG-BLRAA#1008,BRANCHREG-BLRAA#1009,BRANCHREG-BLRAA#1010,BRANCHREG-BLRAA#1011,BRANCHREG-BLRAA#1012,BRANCHREG-BLRAA#1013,BRANCHREG-BLRAA#1014,BRANCHREG-BLRAA#1015,BRANCHREG-BLRAA#1016,BRANCHREG-BLRAA#1017,BRANCHREG-BLRAA#1018,BRANCHREG-BLRAA#1019,BRANCHREG-BLRAA#1020,BRANCHREG-BLRAA#1021,BRANCHREG-BLRAA#1022,BRANCHREG-BLRAA#1023,BRANCHREG-BLRAB#0,BRANCHREG-BLRAB#1,BRANCHREG-BLRAB#2,BRANCHREG-BLRAB#3,BRANCHREG-BLRAB#4,BRANCHREG-BLRAB#5,BRANCHREG-BLRAB#6,BRANCHREG-BLRAB#7,BRANCHREG-BLRAB#8,BRANCHREG-BLRAB#9,BRANCHREG-BLRAB#10,BRANCHREG-BLRAB#11,BRANCHREG-BLRAB#12,BRANCHREG-BLRAB#13,BRANCHREG-BLRAB#14,BRANCHREG-BLRAB#15,BRANCHREG-BLRAB#16,BRANCHREG-BLRAB#17,BRANCHREG-BLRAB#18,BRANCHREG-BLRAB#19,BRANCHREG-BLRAB#20,BRANCHREG-BLRAB#21,BRANCHREG-BLRAB#22,BRANCHREG-BLRAB#23,BRANCHREG-BLRAB#24,BRANCHREG-BLRAB#25,BRANCHREG-BLRAB#26,BRANCHREG-BLRAB#27,BRANCHREG-BLRAB#28,BRANCHREG-BLRAB#29,BRANCHREG-BLRAB#30,BRANCHREG-BLRAB#31,BRANCHREG-BLRAB#32,BRANCHREG-BLRAB#33,BRANCHREG-BLRAB#34,BRANCHREG-BLRAB#35,BRANCHREG-BLRAB#36,BRANCHREG-BLRAB#37,BRANCHREG-BLRAB#38,BRANCHREG-BLRAB#39,BRANCHREG-BLRAB#40,BRANCHREG-BLRAB#41,BRANCHREG-BLRAB#42,BRANCHREG-BLRAB#43,BRANCHREG-BLRAB#44,BRANCHREG-BLRAB#45,BRANCHREG-BLRAB#46,BRANCHREG-BLRAB#47,BRANCHREG-BLRAB#48,BRANCHREG-BLRAB#49,BRANCHREG-BLRAB#50,BRANCHREG-BLRAB#51,BRANCHREG-BLRAB#52,BRANCHREG-BLRAB#53,BRANCHREG-BLRAB#54,BRANCHREG-BLRAB#55,BRANCHREG-BLRAB#56,BRANCHREG-BLRAB#57,BRANCHREG-BLRAB#58,BRANCHREG-BLRAB#59,BRANCHREG-BLRAB#60,BRANCHREG-BLRAB#61,BRANCHREG-BLRAB#62,BRANCHREG-BLRAB#63,BRANCHREG-BLRAB#64,BRANCHREG-BLRAB#65,BRANCHREG-BLRAB#66,BRANCHREG-BLRAB#67,BRANCHREG-BLRAB#68,BRANCHREG-BLRAB#69,BRANCHREG-BLRAB#70,BRANCHREG-BLRAB#71,BRANCHREG-BLRAB#72,BRANCHREG-BLRAB#73,BRANCHREG-BLRAB#74,BRANCHREG-BLRAB#75,BRANCHREG-BLRAB#76,BRANCHREG-BLRAB#77,BRANCHREG-BLRAB#78,BRANCHREG-BLRAB#79,BRANCHREG-BLRAB#80,BRANCHREG-BLRAB#81,BRANCHREG-BLRAB#82,BRANCHREG-BLRAB#83,BRANCHREG-BLRAB#84,BRANCHREG-BLRAB#85,BRANCHREG-BLRAB#86,BRANCHREG-BLRAB#87,BRANCHREG-BLRAB#88,BRANCHREG-BLRAB#89,BRANCHREG-BLRAB#90,BRANCHREG-BLRAB#91,BRANCHREG-BLRAB#92,BRANCHREG-BLRAB#93,BRANCHREG-BLRAB#94,BRANCHREG-BLRAB#95,BRANCHREG-BLRAB#96,BRANCHREG-BLRAB#97,BRANCHREG-BLRAB#98,BRANCHREG-BLRAB#99,BRANCHREG-BLRAB#100,BRANCHREG-BLRAB#101,BRANCHREG-BLRAB#102,BRANCHREG-BLRAB#103,BRANCHREG-BLRAB#104,BRANCHREG-BLRAB#105,BRANCHREG-BLRAB#106,BRANCHREG-BLRAB#107,BRANCHREG-BLRAB#108,BRANCHREG-BLRAB#109,BRANCHREG-BLRAB#110,BRANCHREG-BLRAB#111,BRANCHREG-BLRAB#112,BRANCHREG-BLRAB#113,BRANCHREG-BLRAB#114,BRANCHREG-BLRAB#115,BRANCHREG-BLRAB#116,BRANCHREG-BLRAB#117,BRANCHREG-BLRAB#118,BRANCHREG-BLRAB#119,BRANCHREG-BLRAB#120,BRANCHREG-BLRAB#121,BRANCHREG-BLRAB#122,BRANCHREG-BLRAB#123,BRANCHREG-BLRAB#124,BRANCHREG-BLRAB#125,BRANCHREG-BLRAB#126,BRANCHREG-BLRAB#127,BRANCHREG-BLRAB#128,BRANCHREG-BLRAB#129,BRANCHREG-BLRAB#130,BRANCHREG-BLRAB#131,BRANCHREG-BLRAB#132,BRANCHREG-BLRAB#133,BRANCHREG-BLRAB#134,BRANCHREG-BLRAB#135,BRANCHREG-BLRAB#136,BRANCHREG-BLRAB#137,BRANCHREG-BLRAB#138,BRANCHREG-BLRAB#139,BRANCHREG-BLRAB#140,BRANCHREG-BLRAB#141,BRANCHREG-BLRAB#142,BRANCHREG-BLRAB#143,BRANCHREG-BLRAB#144,BRANCHREG-BLRAB#145,BRANCHREG-BLRAB#146,BRANCHREG-BLRAB#147,BRANCHREG-BLRAB#148,BRANCHREG-BLRAB#149,BRANCHREG-BLRAB#150,BRANCHREG-BLRAB#151,BRANCHREG-BLRAB#152,BRANCHREG-BLRAB#153,BRANCHREG-BLRAB#154,BRANCHREG-BLRAB#155,BRANCHREG-BLRAB#156,BRANCHREG-BLRAB#157,BRANCHREG-BLRAB#158,BRANCHREG-BLRAB#159,BRANCHREG-BLRAB#160,BRANCHREG-BLRAB#161,BRANCHREG-BLRAB#162,BRANCHREG-BLRAB#163,BRANCHREG-BLRAB#164,BRANCHREG-BLRAB#165,BRANCHREG-BLRAB#166,BRANCHREG-BLRAB#167,BRANCHREG-BLRAB#168,BRANCHREG-BLRAB#169,BRANCHREG-BLRAB#170,BRANCHREG-BLRAB#171,BRANCHREG-BLRAB#172,BRANCHREG-BLRAB#173,BRANCHREG-BLRAB#174,BRANCHREG-BLRAB#175,BRANCHREG-BLRAB#176,BRANCHREG-BLRAB#177,BRANCHREG-BLRAB#178,BRANCHREG-BLRAB#179,BRANCHREG-BLRAB#180,BRANCHREG-BLRAB#181,BRANCHREG-BLRAB#182,BRANCHREG-BLRAB#183,BRANCHREG-BLRAB#184,BRANCHREG-BLRAB#185,BRANCHREG-BLRAB#186,BRANCHREG-BLRAB#187,BRANCHREG-BLRAB#188,BRANCHREG-BLRAB#189,BRANCHREG-BLRAB#190,BRANCHREG-BLRAB#191,BRANCHREG-BLRAB#192,BRANCHREG-BLRAB#193,BRANCHREG-BLRAB#194,BRANCHREG-BLRAB#195,BRANCHREG-BLRAB#196,BRANCHREG-BLRAB#197,BRANCHREG-BLRAB#198,BRANCHREG-BLRAB#199,BRANCHREG-BLRAB#200,BRANCHREG-BLRAB#201,BRANCHREG-BLRAB#202,BRANCHREG-BLRAB#203,BRANCHREG-BLRAB#204,BRANCHREG-BLRAB#205,BRANCHREG-BLRAB#206,BRANCHREG-BLRAB#207,BRANCHREG-BLRAB#208,BRANCHREG-BLRAB#209,BRANCHREG-BLRAB#210,BRANCHREG-BLRAB#211,BRANCHREG-BLRAB#212,BRANCHREG-BLRAB#213,BRANCHREG-BLRAB#214,BRANCHREG-BLRAB#215,BRANCHREG-BLRAB#216,BRANCHREG-BLRAB#217,BRANCHREG-BLRAB#218,BRANCHREG-BLRAB#219,BRANCHREG-BLRAB#220,BRANCHREG-BLRAB#221,BRANCHREG-BLRAB#222,BRANCHREG-BLRAB#223,BRANCHREG-BLRAB#224,BRANCHREG-BLRAB#225,BRANCHREG-BLRAB#226,BRANCHREG-BLRAB#227,BRANCHREG-BLRAB#228,BRANCHREG-BLRAB#229,BRANCHREG-BLRAB#230,BRANCHREG-BLRAB#231,BRANCHREG-BLRAB#232,BRANCHREG-BLRAB#233,BRANCHREG-BLRAB#234,BRANCHREG-BLRAB#235,BRANCHREG-BLRAB#236,BRANCHREG-BLRAB#237,BRANCHREG-BLRAB#238,BRANCHREG-BLRAB#239,BRANCHREG-BLRAB#240,BRANCHREG-BLRAB#241,BRANCHREG-BLRAB#242,BRANCHREG-BLRAB#243,BRANCHREG-BLRAB#244,BRANCHREG-BLRAB#245,BRANCHREG-BLRAB#246,BRANCHREG-BLRAB#247,BRANCHREG-BLRAB#248,BRANCHREG-BLRAB#249,BRANCHREG-BLRAB#250,BRANCHREG-BLRAB#251,BRANCHREG-BLRAB#252,BRANCHREG-BLRAB#253,BRANCHREG-BLRAB#254,BRANCHREG-BLRAB#255,BRANCHREG-BLRAB#256,BRANCHREG-BLRAB#257,BRANCHREG-BLRAB#258,BRANCHREG-BLRAB#259,BRANCHREG-BLRAB#260,BRANCHREG-BLRAB#261,BRANCHREG-BLRAB#262,BRANCHREG-BLRAB#263,BRANCHREG-BLRAB#264,BRANCHREG-BLRAB#265,BRANCHREG-BLRAB#266,BRANCHREG-BLRAB#267,BRANCHREG-BLRAB#268,BRANCHREG-BLRAB#269,BRANCHREG-BLRAB#270,BRANCHREG-BLRAB#271,BRANCHREG-BLRAB#272,BRANCHREG-BLRAB#273,BRANCHREG-BLRAB#274,BRANCHREG-BLRAB#275,BRANCHREG-BLRAB#276,BRANCHREG-BLRAB#277,BRANCHREG-BLRAB#278,BRANCHREG-BLRAB#279,BRANCHREG-BLRAB#280,BRANCHREG-BLRAB#281,BRANCHREG-BLRAB#282,BRANCHREG-BLRAB#283,BRANCHREG-BLRAB#284,BRANCHREG-BLRAB#285,BRANCHREG-BLRAB#286,BRANCHREG-BLRAB#287,BRANCHREG-BLRAB#288,BRANCHREG-BLRAB#289,BRANCHREG-BLRAB#290,BRANCHREG-BLRAB#291,BRANCHREG-BLRAB#292,BRANCHREG-BLRAB#293,BRANCHREG-BLRAB#294,BRANCHREG-BLRAB#295,BRANCHREG-BLRAB#296,BRANCHREG-BLRAB#297,BRANCHREG-BLRAB#298,BRANCHREG-BLRAB#299,BRANCHREG-BLRAB#300,BRANCHREG-BLRAB#301,BRANCHREG-BLRAB#302,BRANCHREG-BLRAB#303,BRANCHREG-BLRAB#304,BRANCHREG-BLRAB#305,BRANCHREG-BLRAB#306,BRANCHREG-BLRAB#307,BRANCHREG-BLRAB#308,BRANCHREG-BLRAB#309,BRANCHREG-BLRAB#310,BRANCHREG-BLRAB#311,BRANCHREG-BLRAB#312,BRANCHREG-BLRAB#313,BRANCHREG-BLRAB#314,BRANCHREG-BLRAB#315,BRANCHREG-BLRAB#316,BRANCHREG-BLRAB#317,BRANCHREG-BLRAB#318,BRANCHREG-BLRAB#319,BRANCHREG-BLRAB#320,BRANCHREG-BLRAB#321,BRANCHREG-BLRAB#322,BRANCHREG-BLRAB#323,BRANCHREG-BLRAB#324,BRANCHREG-BLRAB#325,BRANCHREG-BLRAB#326,BRANCHREG-BLRAB#327,BRANCHREG-BLRAB#328,BRANCHREG-BLRAB#329,BRANCHREG-BLRAB#330,BRANCHREG-BLRAB#331,BRANCHREG-BLRAB#332,BRANCHREG-BLRAB#333,BRANCHREG-BLRAB#334,BRANCHREG-BLRAB#335,BRANCHREG-BLRAB#336,BRANCHREG-BLRAB#337,BRANCHREG-BLRAB#338,BRANCHREG-BLRAB#339,BRANCHREG-BLRAB#340,BRANCHREG-BLRAB#341,BRANCHREG-BLRAB#342,BRANCHREG-BLRAB#343,BRANCHREG-BLRAB#344,BRANCHREG-BLRAB#345,BRANCHREG-BLRAB#346,BRANCHREG-BLRAB#347,BRANCHREG-BLRAB#348,BRANCHREG-BLRAB#349,BRANCHREG-BLRAB#350,BRANCHREG-BLRAB#351,BRANCHREG-BLRAB#352,BRANCHREG-BLRAB#353,BRANCHREG-BLRAB#354,BRANCHREG-BLRAB#355,BRANCHREG-BLRAB#356,BRANCHREG-BLRAB#357,BRANCHREG-BLRAB#358,BRANCHREG-BLRAB#359,BRANCHREG-BLRAB#360,BRANCHREG-BLRAB#361,BRANCHREG-BLRAB#362,BRANCHREG-BLRAB#363,BRANCHREG-BLRAB#364,BRANCHREG-BLRAB#365,BRANCHREG-BLRAB#366,BRANCHREG-BLRAB#367,BRANCHREG-BLRAB#368,BRANCHREG-BLRAB#369,BRANCHREG-BLRAB#370,BRANCHREG-BLRAB#371,BRANCHREG-BLRAB#372,BRANCHREG-BLRAB#373,BRANCHREG-BLRAB#374,BRANCHREG-BLRAB#375,BRANCHREG-BLRAB#376,BRANCHREG-BLRAB#377,BRANCHREG-BLRAB#378,BRANCHREG-BLRAB#379,BRANCHREG-BLRAB#380,BRANCHREG-BLRAB#381,BRANCHREG-BLRAB#382,BRANCHREG-BLRAB#383,BRANCHREG-BLRAB#384,BRANCHREG-BLRAB#385,BRANCHREG-BLRAB#386,BRANCHREG-BLRAB#387,BRANCHREG-BLRAB#388,BRANCHREG-BLRAB#389,BRANCHREG-BLRAB#390,BRANCHREG-BLRAB#391,BRANCHREG-BLRAB#392,BRANCHREG-BLRAB#393,BRANCHREG-BLRAB#394,BRANCHREG-BLRAB#395,BRANCHREG-BLRAB#396,BRANCHREG-BLRAB#397,BRANCHREG-BLRAB#398,BRANCHREG-BLRAB#399,BRANCHREG-BLRAB#400,BRANCHREG-BLRAB#401,BRANCHREG-BLRAB#402,BRANCHREG-BLRAB#403,BRANCHREG-BLRAB#404,BRANCHREG-BLRAB#405,BRANCHREG-BLRAB#406,BRANCHREG-BLRAB#407,BRANCHREG-BLRAB#408,BRANCHREG-BLRAB#409,BRANCHREG-BLRAB#410,BRANCHREG-BLRAB#411,BRANCHREG-BLRAB#412,BRANCHREG-BLRAB#413,BRANCHREG-BLRAB#414,BRANCHREG-BLRAB#415,BRANCHREG-BLRAB#416,BRANCHREG-BLRAB#417,BRANCHREG-BLRAB#418,BRANCHREG-BLRAB#419,BRANCHREG-BLRAB#420,BRANCHREG-BLRAB#421,BRANCHREG-BLRAB#422,BRANCHREG-BLRAB#423,BRANCHREG-BLRAB#424,BRANCHREG-BLRAB#425,BRANCHREG-BLRAB#426,BRANCHREG-BLRAB#427,BRANCHREG-BLRAB#428,BRANCHREG-BLRAB#429,BRANCHREG-BLRAB#430,BRANCHREG-BLRAB#431,BRANCHREG-BLRAB#432,BRANCHREG-BLRAB#433,BRANCHREG-BLRAB#434,BRANCHREG-BLRAB#435,BRANCHREG-BLRAB#436,BRANCHREG-BLRAB#437,BRANCHREG-BLRAB#438,BRANCHREG-BLRAB#439,BRANCHREG-BLRAB#440,BRANCHREG-BLRAB#441,BRANCHREG-BLRAB#442,BRANCHREG-BLRAB#443,BRANCHREG-BLRAB#444,BRANCHREG-BLRAB#445,BRANCHREG-BLRAB#446,BRANCHREG-BLRAB#447,BRANCHREG-BLRAB#448,BRANCHREG-BLRAB#449,BRANCHREG-BLRAB#450,BRANCHREG-BLRAB#451,BRANCHREG-BLRAB#452,BRANCHREG-BLRAB#453,BRANCHREG-BLRAB#454,BRANCHREG-BLRAB#455,BRANCHREG-BLRAB#456,BRANCHREG-BLRAB#457,BRANCHREG-BLRAB#458,BRANCHREG-BLRAB#459,BRANCHREG-BLRAB#460,BRANCHREG-BLRAB#461,BRANCHREG-BLRAB#462,BRANCHREG-BLRAB#463,BRANCHREG-BLRAB#464,BRANCHREG-BLRAB#465,BRANCHREG-BLRAB#466,BRANCHREG-BLRAB#467,BRANCHREG-BLRAB#468,BRANCHREG-BLRAB#469,BRANCHREG-BLRAB#470,BRANCHREG-BLRAB#471,BRANCHREG-BLRAB#472,BRANCHREG-BLRAB#473,BRANCHREG-BLRAB#474,BRANCHREG-BLRAB#475,BRANCHREG-BLRAB#476,BRANCHREG-BLRAB#477,BRANCHREG-BLRAB#478,BRANCHREG-BLRAB#479,BRANCHREG-BLRAB#480,BRANCHREG-BLRAB#481,BRANCHREG-BLRAB#482,BRANCHREG-BLRAB#483,BRANCHREG-BLRAB#484,BRANCHREG-BLRAB#485,BRANCHREG-BLRAB#486,BRANCHREG-BLRAB#487,BRANCHREG-BLRAB#488,BRANCHREG-BLRAB#489,BRANCHREG-BLRAB#490,BRANCHREG-BLRAB#491,BRANCHREG-BLRAB#492,BRANCHREG-BLRAB#493,BRANCHREG-BLRAB#494,BRANCHREG-BLRAB#495,BRANCHREG-BLRAB#496,BRANCHREG-BLRAB#497,BRANCHREG-BLRAB#498,BRANCHREG-BLRAB#499,BRANCHREG-BLRAB#500,BRANCHREG-BLRAB#501,BRANCHREG-BLRAB#502,BRANCHREG-BLRAB#503,BRANCHREG-BLRAB#504,BRANCHREG-BLRAB#505,BRANCHREG-BLRAB#506,BRANCHREG-BLRAB#507,BRANCHREG-BLRAB#508,BRANCHREG-BLRAB#509,BRANCHREG-BLRAB#510,BRANCHREG-BLRAB#511,BRANCHREG-BLRAB#512,BRANCHREG-BLRAB#513,BRANCHREG-BLRAB#514,BRANCHREG-BLRAB#515,BRANCHREG-BLRAB#516,BRANCHREG-BLRAB#517,BRANCHREG-BLRAB#518,BRANCHREG-BLRAB#519,BRANCHREG-BLRAB#520,BRANCHREG-BLRAB#521,BRANCHREG-BLRAB#522,BRANCHREG-BLRAB#523,BRANCHREG-BLRAB#524,BRANCHREG-BLRAB#525,BRANCHREG-BLRAB#526,BRANCHREG-BLRAB#527,BRANCHREG-BLRAB#528,BRANCHREG-BLRAB#529,BRANCHREG-BLRAB#530,BRANCHREG-BLRAB#531,BRANCHREG-BLRAB#532,BRANCHREG-BLRAB#533,BRANCHREG-BLRAB#534,BRANCHREG-BLRAB#535,BRANCHREG-BLRAB#536,BRANCHREG-BLRAB#537,BRANCHREG-BLRAB#538,BRANCHREG-BLRAB#539,BRANCHREG-BLRAB#540,BRANCHREG-BLRAB#541,BRANCHREG-BLRAB#542,BRANCHREG-BLRAB#543,BRANCHREG-BLRAB#544,BRANCHREG-BLRAB#545,BRANCHREG-BLRAB#546,BRANCHREG-BLRAB#547,BRANCHREG-BLRAB#548,BRANCHREG-BLRAB#549,BRANCHREG-BLRAB#550,BRANCHREG-BLRAB#551,BRANCHREG-BLRAB#552,BRANCHREG-BLRAB#553,BRANCHREG-BLRAB#554,BRANCHREG-BLRAB#555,BRANCHREG-BLRAB#556,BRANCHREG-BLRAB#557,BRANCHREG-BLRAB#558,BRANCHREG-BLRAB#559,BRANCHREG-BLRAB#560,BRANCHREG-BLRAB#561,BRANCHREG-BLRAB#562,BRANCHREG-BLRAB#563,BRANCHREG-BLRAB#564,BRANCHREG-BLRAB#565,BRANCHREG-BLRAB#566,BRANCHREG-BLRAB#567,BRANCHREG-BLRAB#568,BRANCHREG-BLRAB#569,BRANCHREG-BLRAB#570,BRANCHREG-BLRAB#571,BRANCHREG-BLRAB#572,BRANCHREG-BLRAB#573,BRANCHREG-BLRAB#574,BRANCHREG-BLRAB#575,BRANCHREG-BLRAB#576,BRANCHREG-BLRAB#577,BRANCHREG-BLRAB#578,BRANCHREG-BLRAB#579,BRANCHREG-BLRAB#580,BRANCHREG-BLRAB#581,BRANCHREG-BLRAB#582,BRANCHREG-BLRAB#583,BRANCHREG-BLRAB#584,BRANCHREG-BLRAB#585,BRANCHREG-BLRAB#586,BRANCHREG-BLRAB#587,BRANCHREG-BLRAB#588,BRANCHREG-BLRAB#589,BRANCHREG-BLRAB#590,BRANCHREG-BLRAB#591,BRANCHREG-BLRAB#592,BRANCHREG-BLRAB#593,BRANCHREG-BLRAB#594,BRANCHREG-BLRAB#595,BRANCHREG-BLRAB#596,BRANCHREG-BLRAB#597,BRANCHREG-BLRAB#598,BRANCHREG-BLRAB#599,BRANCHREG-BLRAB#600,BRANCHREG-BLRAB#601,BRANCHREG-BLRAB#602,BRANCHREG-BLRAB#603,BRANCHREG-BLRAB#604,BRANCHREG-BLRAB#605,BRANCHREG-BLRAB#606,BRANCHREG-BLRAB#607,BRANCHREG-BLRAB#608,BRANCHREG-BLRAB#609,BRANCHREG-BLRAB#610,BRANCHREG-BLRAB#611,BRANCHREG-BLRAB#612,BRANCHREG-BLRAB#613,BRANCHREG-BLRAB#614,BRANCHREG-BLRAB#615,BRANCHREG-BLRAB#616,BRANCHREG-BLRAB#617,BRANCHREG-BLRAB#618,BRANCHREG-BLRAB#619,BRANCHREG-BLRAB#620,BRANCHREG-BLRAB#621,BRANCHREG-BLRAB#622,BRANCHREG-BLRAB#623,BRANCHREG-BLRAB#624,BRANCHREG-BLRAB#625,BRANCHREG-BLRAB#626,BRANCHREG-BLRAB#627,BRANCHREG-BLRAB#628,BRANCHREG-BLRAB#629,BRANCHREG-BLRAB#630,BRANCHREG-BLRAB#631,BRANCHREG-BLRAB#632,BRANCHREG-BLRAB#633,BRANCHREG-BLRAB#634,BRANCHREG-BLRAB#635,BRANCHREG-BLRAB#636,BRANCHREG-BLRAB#637,BRANCHREG-BLRAB#638,BRANCHREG-BLRAB#639,BRANCHREG-BLRAB#640,BRANCHREG-BLRAB#641,BRANCHREG-BLRAB#642,BRANCHREG-BLRAB#643,BRANCHREG-BLRAB#644,BRANCHREG-BLRAB#645,BRANCHREG-BLRAB#646,BRANCHREG-BLRAB#647,BRANCHREG-BLRAB#648,BRANCHREG-BLRAB#649,BRANCHREG-BLRAB#650,BRANCHREG-BLRAB#651,BRANCHREG-BLRAB#652,BRANCHREG-BLRAB#653,BRANCHREG-BLRAB#654,BRANCHREG-BLRAB#655,BRANCHREG-BLRAB#656,BRANCHREG-BLRAB#657,BRANCHREG-BLRAB#658,BRANCHREG-BLRAB#659,BRANCHREG-BLRAB#660,BRANCHREG-BLRAB#661,BRANCHREG-BLRAB#662,BRANCHREG-BLRAB#663,BRANCHREG-BLRAB#664,BRANCHREG-BLRAB#665,BRANCHREG-BLRAB#666,BRANCHREG-BLRAB#667,BRANCHREG-BLRAB#668,BRANCHREG-BLRAB#669,BRANCHREG-BLRAB#670,BRANCHREG-BLRAB#671,BRANCHREG-BLRAB#672,BRANCHREG-BLRAB#673,BRANCHREG-BLRAB#674,BRANCHREG-BLRAB#675,BRANCHREG-BLRAB#676,BRANCHREG-BLRAB#677,BRANCHREG-BLRAB#678,BRANCHREG-BLRAB#679,BRANCHREG-BLRAB#680,BRANCHREG-BLRAB#681,BRANCHREG-BLRAB#682,BRANCHREG-BLRAB#683,BRANCHREG-BLRAB#684,BRANCHREG-BLRAB#685,BRANCHREG-BLRAB#686,BRANCHREG-BLRAB#687,BRANCHREG-BLRAB#688,BRANCHREG-BLRAB#689,BRANCHREG-BLRAB#690,BRANCHREG-BLRAB#691,BRANCHREG-BLRAB#692,BRANCHREG-BLRAB#693,BRANCHREG-BLRAB#694,BRANCHREG-BLRAB#695,BRANCHREG-BLRAB#696,BRANCHREG-BLRAB#697,BRANCHREG-BLRAB#698,BRANCHREG-BLRAB#699,BRANCHREG-BLRAB#700,BRANCHREG-BLRAB#701,BRANCHREG-BLRAB#702,BRANCHREG-BLRAB#703,BRANCHREG-BLRAB#704,BRANCHREG-BLRAB#705,BRANCHREG-BLRAB#706,BRANCHREG-BLRAB#707,BRANCHREG-BLRAB#708,BRANCHREG-BLRAB#709,BRANCHREG-BLRAB#710,BRANCHREG-BLRAB#711,BRANCHREG-BLRAB#712,BRANCHREG-BLRAB#713,BRANCHREG-BLRAB#714,BRANCHREG-BLRAB#715,BRANCHREG-BLRAB#716,BRANCHREG-BLRAB#717,BRANCHREG-BLRAB#718,BRANCHREG-BLRAB#719,BRANCHREG-BLRAB#720,BRANCHREG-BLRAB#721,BRANCHREG-BLRAB#722,BRANCHREG-BLRAB#723,BRANCHREG-BLRAB#724,BRANCHREG-BLRAB#725,BRANCHREG-BLRAB#726,BRANCHREG-BLRAB#727,BRANCHREG-BLRAB#728,BRANCHREG-BLRAB#729,BRANCHREG-BLRAB#730,BRANCHREG-BLRAB#731,BRANCHREG-BLRAB#732,BRANCHREG-BLRAB#733,BRANCHREG-BLRAB#734,BRANCHREG-BLRAB#735,BRANCHREG-BLRAB#736,BRANCHREG-BLRAB#737,BRANCHREG-BLRAB#738,BRANCHREG-BLRAB#739,BRANCHREG-BLRAB#740,BRANCHREG-BLRAB#741,BRANCHREG-BLRAB#742,BRANCHREG-BLRAB#743,BRANCHREG-BLRAB#744,BRANCHREG-BLRAB#745,BRANCHREG-BLRAB#746,BRANCHREG-BLRAB#747,BRANCHREG-BLRAB#748,BRANCHREG-BLRAB#749,BRANCHREG-BLRAB#750,BRANCHREG-BLRAB#751,BRANCHREG-BLRAB#752,BRANCHREG-BLRAB#753,BRANCHREG-BLRAB#754,BRANCHREG-BLRAB#755,BRANCHREG-BLRAB#756,BRANCHREG-BLRAB#757,BRANCHREG-BLRAB#758,BRANCHREG-BLRAB#759,BRANCHREG-BLRAB#760,BRANCHREG-BLRAB#761,BRANCHREG-BLRAB#762,BRANCHREG-BLRAB#763,BRANCHREG-BLRAB#764,BRANCHREG-BLRAB#765,BRANCHREG-BLRAB#766,BRANCHREG-BLRAB#767,BRANCHREG-BLRAB#768,BRANCHREG-BLRAB#769,BRANCHREG-BLRAB#770,BRANCHREG-BLRAB#771,BRANCHREG-BLRAB#772,BRANCHREG-BLRAB#773,BRANCHREG-BLRAB#774,BRANCHREG-BLRAB#775,BRANCHREG-BLRAB#776,BRANCHREG-BLRAB#777,BRANCHREG-BLRAB#778,BRANCHREG-BLRAB#779,BRANCHREG-BLRAB#780,BRANCHREG-BLRAB#781,BRANCHREG-BLRAB#782,BRANCHREG-BLRAB#783,BRANCHREG-BLRAB#784,BRANCHREG-BLRAB#785,BRANCHREG-BLRAB#786,BRANCHREG-BLRAB#787,BRANCHREG-BLRAB#788,BRANCHREG-BLRAB#789,BRANCHREG-BLRAB#790,BRANCHREG-BLRAB#791,BRANCHREG-BLRAB#792,BRANCHREG-BLRAB#793,BRANCHREG-BLRAB#794,BRANCHREG-BLRAB#795,BRANCHREG-BLRAB#796,BRANCHREG-BLRAB#797,BRANCHREG-BLRAB#798,BRANCHREG-BLRAB#799,BRANCHREG-BLRAB#800,BRANCHREG-BLRAB#801,BRANCHREG-BLRAB#802,BRANCHREG-BLRAB#803,BRANCHREG-BLRAB#804,BRANCHREG-BLRAB#805,BRANCHREG-BLRAB#806,BRANCHREG-BLRAB#807,BRANCHREG-BLRAB#808,BRANCHREG-BLRAB#809,BRANCHREG-BLRAB#810,BRANCHREG-BLRAB#811,BRANCHREG-BLRAB#812,BRANCHREG-BLRAB#813,BRANCHREG-BLRAB#814,BRANCHREG-BLRAB#815,BRANCHREG-BLRAB#816,BRANCHREG-BLRAB#817,BRANCHREG-BLRAB#818,BRANCHREG-BLRAB#819,BRANCHREG-BLRAB#820,BRANCHREG-BLRAB#821,BRANCHREG-BLRAB#822,BRANCHREG-BLRAB#823,BRANCHREG-BLRAB#824,BRANCHREG-BLRAB#825,BRANCHREG-BLRAB#826,BRANCHREG-BLRAB#827,BRANCHREG-BLRAB#828,BRANCHREG-BLRAB#829,BRANCHREG-BLRAB#830,BRANCHREG-BLRAB#831,BRANCHREG-BLRAB#832,BRANCHREG-BLRAB#833,BRANCHREG-BLRAB#834,BRANCHREG-BLRAB#835,BRANCHREG-BLRAB#836,BRANCHREG-BLRAB#837,BRANCHREG-BLRAB#838,BRANCHREG-BLRAB#839,BRANCHREG-BLRAB#840,BRANCHREG-BLRAB#841,BRANCHREG-BLRAB#842,BRANCHREG-BLRAB#843,BRANCHREG-BLRAB#844,BRANCHREG-BLRAB#845,BRANCHREG-BLRAB#846,BRANCHREG-BLRAB#847,BRANCHREG-BLRAB#848,BRANCHREG-BLRAB#849,BRANCHREG-BLRAB#850,BRANCHREG-BLRAB#851,BRANCHREG-BLRAB#852,BRANCHREG-BLRAB#853,BRANCHREG-BLRAB#854,BRANCHREG-BLRAB#855,BRANCHREG-BLRAB#856,BRANCHREG-BLRAB#857,BRANCHREG-BLRAB#858,BRANCHREG-BLRAB#859,BRANCHREG-BLRAB#860,BRANCHREG-BLRAB#861,BRANCHREG-BLRAB#862,BRANCHREG-BLRAB#863,BRANCHREG-BLRAB#864,BRANCHREG-BLRAB#865,BRANCHREG-BLRAB#866,BRANCHREG-BLRAB#867,BRANCHREG-BLRAB#868,BRANCHREG-BLRAB#869,BRANCHREG-BLRAB#870,BRANCHREG-BLRAB#871,BRANCHREG-BLRAB#872,BRANCHREG-BLRAB#873,BRANCHREG-BLRAB#874,BRANCHREG-BLRAB#875,BRANCHREG-BLRAB#876,BRANCHREG-BLRAB#877,BRANCHREG-BLRAB#878,BRANCHREG-BLRAB#879,BRANCHREG-BLRAB#880,BRANCHREG-BLRAB#881,BRANCHREG-BLRAB#882,BRANCHREG-BLRAB#883,BRANCHREG-BLRAB#884,BRANCHREG-BLRAB#885,BRANCHREG-BLRAB#886,BRANCHREG-BLRAB#887,BRANCHREG-BLRAB#888,BRANCHREG-BLRAB#889,BRANCHREG-BLRAB#890,BRANCHREG-BLRAB#891,BRANCHREG-BLRAB#892,BRANCHREG-BLRAB#893,BRANCHREG-BLRAB#894,BRANCHREG-BLRAB#895,BRANCHREG-BLRAB#896,BRANCHREG-BLRAB#897,BRANCHREG-BLRAB#898,BRANCHREG-BLRAB#899,BRANCHREG-BLRAB#900,BRANCHREG-BLRAB#901,BRANCHREG-BLRAB#902,BRANCHREG-BLRAB#903,BRANCHREG-BLRAB#904,BRANCHREG-BLRAB#905,BRANCHREG-BLRAB#906,BRANCHREG-BLRAB#907,BRANCHREG-BLRAB#908,BRANCHREG-BLRAB#909,BRANCHREG-BLRAB#910,BRANCHREG-BLRAB#911,BRANCHREG-BLRAB#912,BRANCHREG-BLRAB#913,BRANCHREG-BLRAB#914,BRANCHREG-BLRAB#915,BRANCHREG-BLRAB#916,BRANCHREG-BLRAB#917,BRANCHREG-BLRAB#918,BRANCHREG-BLRAB#919,BRANCHREG-BLRAB#920,BRANCHREG-BLRAB#921,BRANCHREG-BLRAB#922,BRANCHREG-BLRAB#923,BRANCHREG-BLRAB#924,BRANCHREG-BLRAB#925,BRANCHREG-BLRAB#926,BRANCHREG-BLRAB#927,BRANCHREG-BLRAB#928,BRANCHREG-BLRAB#929,BRANCHREG-BLRAB#930,BRANCHREG-BLRAB#931,BRANCHREG-BLRAB#932,BRANCHREG-BLRAB#933,BRANCHREG-BLRAB#934,BRANCHREG-BLRAB#935,BRANCHREG-BLRAB#936,BRANCHREG-BLRAB#937,BRANCHREG-BLRAB#938,BRANCHREG-BLRAB#939,BRANCHREG-BLRAB#940,BRANCHREG-BLRAB#941,BRANCHREG-BLRAB#942,BRANCHREG-BLRAB#943,BRANCHREG-BLRAB#944,BRANCHREG-BLRAB#945,BRANCHREG-BLRAB#946,BRANCHREG-BLRAB#947,BRANCHREG-BLRAB#948,BRANCHREG-BLRAB#949,BRANCHREG-BLRAB#950,BRANCHREG-BLRAB#951,BRANCHREG-BLRAB#952,BRANCHREG-BLRAB#953,BRANCHREG-BLRAB#954,BRANCHREG-BLRAB#955,BRANCHREG-BLRAB#956,BRANCHREG-BLRAB#957,BRANCHREG-BLRAB#958,BRANCHREG-BLRAB#959,BRANCHREG-BLRAB#960,BRANCHREG-BLRAB#961,BRANCHREG-BLRAB#962,BRANCHREG-BLRAB#963,BRANCHREG-BLRAB#964,BRANCHREG-BLRAB#965,BRANCHREG-BLRAB#966,BRANCHREG-BLRAB#967,BRANCHREG-BLRAB#968,BRANCHREG-BLRAB#969,BRANCHREG-BLRAB#970,BRANCHREG-BLRAB#971,BRANCHREG-BLRAB#972,BRANCHREG-BLRAB#973,BRANCHREG-BLRAB#974,BRANCHREG-BLRAB#975,BRANCHREG-BLRAB#976,BRANCHREG-BLRAB#977,BRANCHREG-BLRAB#978,BRANCHREG-BLRAB#979,BRANCHREG-BLRAB#980,BRANCHREG-BLRAB#981,BRANCHREG-BLRAB#982,BRANCHREG-BLRAB#983,BRANCHREG-BLRAB#984,BRANCHREG-BLRAB#985,BRANCHREG-BLRAB#986,BRANCHREG-BLRAB#987,BRANCHREG-BLRAB#988,BRANCHREG-BLRAB#989,BRANCHREG-BLRAB#990,BRANCHREG-BLRAB#991,BRANCHREG-BLRAB#992,BRANCHREG-BLRAB#993,BRANCHREG-BLRAB#994,BRANCHREG-BLRAB#995,BRANCHREG-BLRAB#996,BRANCHREG-BLRAB#997,BRANCHREG-BLRAB#998,BRANCHREG-BLRAB#999,BRANCHREG-BLRAB#1000,BRANCHREG-BLRAB#1001,BRANCHREG-BLRAB#1002,BRANCHREG-BLRAB#1003,BRANCHREG-BLRAB#1004,BRANCHREG-BLRAB#1005,BRANCHREG-BLRAB#1006,BRANCHREG-BLRAB#1007,BRANCHREG-BLRAB#1008,BRANCHREG-BLRAB#1009,BRANCHREG-BLRAB#1010,BRANCHREG-BLRAB#1011,BRANCHREG-BLRAB#1012,BRANCHREG-BLRAB#1013,BRANCHREG-BLRAB#1014,BRANCHREG-BLRAB#1015,BRANCHREG-BLRAB#1016,BRANCHREG-BLRAB#1017,BRANCHREG-BLRAB#1018,BRANCHREG-BLRAB#1019,BRANCHREG-BLRAB#1020,BRANCHREG-BLRAB#1021,BRANCHREG-BLRAB#1022,BRANCHREG-BLRAB#1023
    0x15b => return classify_impl_15b(inst), // RCPCU-STLUR#0
    0x15c => return classify_impl_15c(inst), // STG-STG_POST#0,STG-STG#0,STG-STG_PRE#0,MEMGM-STZGM#0
    0x15d => return classify_impl_15d(inst), // STG-STG_POST#0,STG-STG#0,STG-STG_PRE#0
    0x15e => return classify_impl_15e(inst), // RCPCU-LDAPUR#0
    0x15f => return classify_impl_15f(inst), // STG-STZG_POST#0,STG-STZG#0,STG-STZG_PRE#0,LDG-LDG#0
    0x160 => return classify_impl_160(inst), // STG-ST2G_POST#0,STG-ST2G#0,STG-ST2G_PRE#0,MEMGM-STGM#0
    0x161 => return classify_impl_161(inst), // STG-ST2G_POST#0,STG-ST2G#0,STG-ST2G_PRE#0
    0x162 => return classify_impl_162(inst), // STG-STZ2G_POST#0,STG-STZ2G#0,STG-STZ2G_PRE#0,MEMGM-LDGM#0
    0x163 => return classify_impl_163(inst), // STG-STZ2G_POST#0,STG-STZ2G#0,STG-STZ2G_PRE#0
    0x164 => return classify_impl_164(inst), // CLZ-CLZ#0,CLZ-CLS#0,CLZ-CTZ#0,CLZ-CNT#0,CLZ-ABS#0,REV-RBIT#1,REV-REV16#1,REV-REV32#0,REV-REV64#0,AUT-PACIA#0,AUT-PACIA#1,AUT-PACIA#2,AUT-PACIA#3,AUT-PACIA#4,AUT-PACIA#5,AUT-PACIA#6,AUT-PACIA#7,AUT-PACIA#8,AUT-PACIA#9,AUT-PACIA#10,AUT-PACIA#11,AUT-PACIA#12,AUT-PACIA#13,AUT-PACIA#14,AUT-PACIA#15,AUT-PACIA#16,AUT-PACIA#17,AUT-PACIA#18,AUT-PACIA#19,AUT-PACIA#20,AUT-PACIA#21,AUT-PACIA#22,AUT-PACIA#23,AUT-PACIA#24,AUT-PACIA#25,AUT-PACIA#26,AUT-PACIA#27,AUT-PACIA#28,AUT-PACIA#29,AUT-PACIA#30,AUT-PACIA#31,AUT-PACIB#0,AUT-PACIB#1,AUT-PACIB#2,AUT-PACIB#3,AUT-PACIB#4,AUT-PACIB#5,AUT-PACIB#6,AUT-PACIB#7,AUT-PACIB#8,AUT-PACIB#9,AUT-PACIB#10,AUT-PACIB#11,AUT-PACIB#12,AUT-PACIB#13,AUT-PACIB#14,AUT-PACIB#15,AUT-PACIB#16,AUT-PACIB#17,AUT-PACIB#18,AUT-PACIB#19,AUT-PACIB#20,AUT-PACIB#21,AUT-PACIB#22,AUT-PACIB#23,AUT-PACIB#24,AUT-PACIB#25,AUT-PACIB#26,AUT-PACIB#27,AUT-PACIB#28,AUT-PACIB#29,AUT-PACIB#30,AUT-PACIB#31,AUT-PACDA#0,AUT-PACDA#1,AUT-PACDA#2,AUT-PACDA#3,AUT-PACDA#4,AUT-PACDA#5,AUT-PACDA#6,AUT-PACDA#7,AUT-PACDA#8,AUT-PACDA#9,AUT-PACDA#10,AUT-PACDA#11,AUT-PACDA#12,AUT-PACDA#13,AUT-PACDA#14,AUT-PACDA#15,AUT-PACDA#16,AUT-PACDA#17,AUT-PACDA#18,AUT-PACDA#19,AUT-PACDA#20,AUT-PACDA#21,AUT-PACDA#22,AUT-PACDA#23,AUT-PACDA#24,AUT-PACDA#25,AUT-PACDA#26,AUT-PACDA#27,AUT-PACDA#28,AUT-PACDA#29,AUT-PACDA#30,AUT-PACDA#31,AUT-PACDB#0,AUT-PACDB#1,AUT-PACDB#2,AUT-PACDB#3,AUT-PACDB#4,AUT-PACDB#5,AUT-PACDB#6,AUT-PACDB#7,AUT-PACDB#8,AUT-PACDB#9,AUT-PACDB#10,AUT-PACDB#11,AUT-PACDB#12,AUT-PACDB#13,AUT-PACDB#14,AUT-PACDB#15,AUT-PACDB#16,AUT-PACDB#17,AUT-PACDB#18,AUT-PACDB#19,AUT-PACDB#20,AUT-PACDB#21,AUT-PACDB#22,AUT-PACDB#23,AUT-PACDB#24,AUT-PACDB#25,AUT-PACDB#26,AUT-PACDB#27,AUT-PACDB#28,AUT-PACDB#29,AUT-PACDB#30,AUT-PACDB#31,AUT-AUTIA#0,AUT-AUTIA#1,AUT-AUTIA#2,AUT-AUTIA#3,AUT-AUTIA#4,AUT-AUTIA#5,AUT-AUTIA#6,AUT-AUTIA#7,AUT-AUTIA#8,AUT-AUTIA#9,AUT-AUTIA#10,AUT-AUTIA#11,AUT-AUTIA#12,AUT-AUTIA#13,AUT-AUTIA#14,AUT-AUTIA#15,AUT-AUTIA#16,AUT-AUTIA#17,AUT-AUTIA#18,AUT-AUTIA#19,AUT-AUTIA#20,AUT-AUTIA#21,AUT-AUTIA#22,AUT-AUTIA#23,AUT-AUTIA#24,AUT-AUTIA#25,AUT-AUTIA#26,AUT-AUTIA#27,AUT-AUTIA#28,AUT-AUTIA#29,AUT-AUTIA#30,AUT-AUTIA#31,AUT-AUTIB#0,AUT-AUTIB#1,AUT-AUTIB#2,AUT-AUTIB#3,AUT-AUTIB#4,AUT-AUTIB#5,AUT-AUTIB#6,AUT-AUTIB#7,AUT-AUTIB#8,AUT-AUTIB#9,AUT-AUTIB#10,AUT-AUTIB#11,AUT-AUTIB#12,AUT-AUTIB#13,AUT-AUTIB#14,AUT-AUTIB#15,AUT-AUTIB#16,AUT-AUTIB#17,AUT-AUTIB#18,AUT-AUTIB#19,AUT-AUTIB#20,AUT-AUTIB#21,AUT-AUTIB#22,AUT-AUTIB#23,AUT-AUTIB#24,AUT-AUTIB#25,AUT-AUTIB#26,AUT-AUTIB#27,AUT-AUTIB#28,AUT-AUTIB#29,AUT-AUTIB#30,AUT-AUTIB#31,AUT-AUTDA#0,AUT-AUTDA#1,AUT-AUTDA#2,AUT-AUTDA#3,AUT-AUTDA#4,AUT-AUTDA#5,AUT-AUTDA#6,AUT-AUTDA#7,AUT-AUTDA#8,AUT-AUTDA#9,AUT-AUTDA#10,AUT-AUTDA#11,AUT-AUTDA#12,AUT-AUTDA#13,AUT-AUTDA#14,AUT-AUTDA#15,AUT-AUTDA#16,AUT-AUTDA#17,AUT-AUTDA#18,AUT-AUTDA#19,AUT-AUTDA#20,AUT-AUTDA#21,AUT-AUTDA#22,AUT-AUTDA#23,AUT-AUTDA#24,AUT-AUTDA#25,AUT-AUTDA#26,AUT-AUTDA#27,AUT-AUTDA#28,AUT-AUTDA#29,AUT-AUTDA#30,AUT-AUTDA#31,AUT-AUTDB#0,AUT-AUTDB#1,AUT-AUTDB#2,AUT-AUTDB#3,AUT-AUTDB#4,AUT-AUTDB#5,AUT-AUTDB#6,AUT-AUTDB#7,AUT-AUTDB#8,AUT-AUTDB#9,AUT-AUTDB#10,AUT-AUTDB#11,AUT-AUTDB#12,AUT-AUTDB#13,AUT-AUTDB#14,AUT-AUTDB#15,AUT-AUTDB#16,AUT-AUTDB#17,AUT-AUTDB#18,AUT-AUTDB#19,AUT-AUTDB#20,AUT-AUTDB#21,AUT-AUTDB#22,AUT-AUTDB#23,AUT-AUTDB#24,AUT-AUTDB#25,AUT-AUTDB#26,AUT-AUTDB#27,AUT-AUTDB#28,AUT-AUTDB#29,AUT-AUTDB#30,AUT-AUTDB#31,AUT-PACIZA#0,AUT-PACIZB#0,AUT-PACDZA#0,AUT-PACDZB#0,AUT-AUTIZA#0,AUT-AUTIZB#0,AUT-AUTDZA#0,AUT-AUTDZB#0,XPAC-XPACI#0,XPAC-XPACD#0
    0x165 => return classify_impl_165(inst), // ANDOREOR_IMM-ANDS_IMM#57,ANDOREOR_IMM-ANDS_IMM#58,ANDOREOR_IMM-ANDS_IMM#59,ANDOREOR_IMM-ANDS_IMM#60,ANDOREOR_IMM-ANDS_IMM#61,ANDOREOR_IMM-ANDS_IMM#62,ANDOREOR_IMM-ANDS_IMM#63,ANDOREOR_IMM-ANDS_IMM#64,ANDOREOR_IMM-ANDS_IMM#65,ANDOREOR_IMM-ANDS_IMM#66,ANDOREOR_IMM-ANDS_IMM#67,ANDOREOR_IMM-ANDS_IMM#68,ANDOREOR_IMM-ANDS_IMM#69,ANDOREOR_IMM-ANDS_IMM#70,ANDOREOR_IMM-ANDS_IMM#71,ANDOREOR_IMM-ANDS_IMM#72,ANDOREOR_IMM-ANDS_IMM#73,ANDOREOR_IMM-ANDS_IMM#74,ANDOREOR_IMM-ANDS_IMM#75,ANDOREOR_IMM-ANDS_IMM#76,ANDOREOR_IMM-ANDS_IMM#77,ANDOREOR_IMM-ANDS_IMM#78,ANDOREOR_IMM-ANDS_IMM#79,ANDOREOR_IMM-ANDS_IMM#80,ANDOREOR_IMM-ANDS_IMM#81,ANDOREOR_IMM-ANDS_IMM#82,ANDOREOR_IMM-ANDS_IMM#83,ANDOREOR_IMM-ANDS_IMM#84,ANDOREOR_IMM-ANDS_IMM#85,ANDOREOR_IMM-ANDS_IMM#86,ANDOREOR_IMM-ANDS_IMM#87,ANDOREOR_IMM-ANDS_IMM#88,ANDOREOR_IMM-ANDS_IMM#89,ANDOREOR_IMM-ANDS_IMM#90,ANDOREOR_IMM-ANDS_IMM#91,ANDOREOR_IMM-ANDS_IMM#92,ANDOREOR_IMM-ANDS_IMM#93,ANDOREOR_IMM-ANDS_IMM#94,ANDOREOR_IMM-ANDS_IMM#95,ANDOREOR_IMM-ANDS_IMM#96,ANDOREOR_IMM-ANDS_IMM#97,ANDOREOR_IMM-ANDS_IMM#98,ANDOREOR_IMM-ANDS_IMM#99,ANDOREOR_IMM-ANDS_IMM#100,ANDOREOR_IMM-ANDS_IMM#101,ANDOREOR_IMM-ANDS_IMM#102,ANDOREOR_IMM-ANDS_IMM#103,ANDOREOR_IMM-ANDS_IMM#104,ANDOREOR_IMM-ANDS_IMM#105,ANDOREOR_IMM-ANDS_IMM#106,ANDOREOR_IMM-ANDS_IMM#107,ANDOREOR_IMM-ANDS_IMM#108,ANDOREOR_IMM-ANDS_IMM#109,ANDOREOR_IMM-ANDS_IMM#110,ANDOREOR_IMM-ANDS_IMM#111,ANDOREOR_IMM-ANDS_IMM#112,ANDOREOR_IMM-ANDS_IMM#113
    0x166 => return classify_impl_166(inst), // ANDOREOR_IMM-ANDS_IMM#114,ANDOREOR_IMM-ANDS_IMM#115,ANDOREOR_IMM-ANDS_IMM#116,ANDOREOR_IMM-ANDS_IMM#117,ANDOREOR_IMM-ANDS_IMM#118,ANDOREOR_IMM-ANDS_IMM#119,ANDOREOR_IMM-ANDS_IMM#120,ANDOREOR_IMM-ANDS_IMM#121,ANDOREOR_IMM-ANDS_IMM#122,ANDOREOR_IMM-ANDS_IMM#123,ANDOREOR_IMM-ANDS_IMM#124,ANDOREOR_IMM-ANDS_IMM#125,ANDOREOR_IMM-ANDS_IMM#126,ANDOREOR_IMM-ANDS_IMM#127,ANDOREOR_IMM-ANDS_IMM#128,ANDOREOR_IMM-ANDS_IMM#129,ANDOREOR_IMM-ANDS_IMM#130,ANDOREOR_IMM-ANDS_IMM#131,ANDOREOR_IMM-ANDS_IMM#132,ANDOREOR_IMM-ANDS_IMM#133,ANDOREOR_IMM-ANDS_IMM#134,ANDOREOR_IMM-ANDS_IMM#135,ANDOREOR_IMM-ANDS_IMM#136,ANDOREOR_IMM-ANDS_IMM#137,ANDOREOR_IMM-ANDS_IMM#138,ANDOREOR_IMM-ANDS_IMM#139,ANDOREOR_IMM-ANDS_IMM#140,ANDOREOR_IMM-ANDS_IMM#141,ANDOREOR_IMM-ANDS_IMM#142,ANDOREOR_IMM-ANDS_IMM#143,ANDOREOR_IMM-ANDS_IMM#144,ANDOREOR_IMM-ANDS_IMM#145,ANDOREOR_IMM-ANDS_IMM#146,ANDOREOR_IMM-ANDS_IMM#147,ANDOREOR_IMM-ANDS_IMM#148,ANDOREOR_IMM-ANDS_IMM#149,ANDOREOR_IMM-ANDS_IMM#150,ANDOREOR_IMM-ANDS_IMM#151,ANDOREOR_IMM-ANDS_IMM#152,ANDOREOR_IMM-ANDS_IMM#153,ANDOREOR_IMM-ANDS_IMM#154,ANDOREOR_IMM-ANDS_IMM#155,ANDOREOR_IMM-ANDS_IMM#156,ANDOREOR_IMM-ANDS_IMM#157,ANDOREOR_IMM-ANDS_IMM#158,ANDOREOR_IMM-ANDS_IMM#159,ANDOREOR_IMM-ANDS_IMM#160,ANDOREOR_IMM-ANDS_IMM#161,ANDOREOR_IMM-ANDS_IMM#162,ANDOREOR_IMM-ANDS_IMM#163,ANDOREOR_IMM-ANDS_IMM#164,ANDOREOR_IMM-ANDS_IMM#165,ANDOREOR_IMM-ANDS_IMM#166,ANDOREOR_IMM-ANDS_IMM#167,ANDOREOR_IMM-ANDS_IMM#168,ANDOREOR_IMM-ANDS_IMM#169,ANDOREOR_IMM-ANDS_IMM#170,ANDOREOR_IMM-ANDS_IMM#171,ANDOREOR_IMM-ANDS_IMM#172,ANDOREOR_IMM-ANDS_IMM#173,ANDOREOR_IMM-ANDS_IMM#174,ANDOREOR_IMM-ANDS_IMM#175,ANDOREOR_IMM-ANDS_IMM#176
    0x167 => return classify_impl_167(inst), // MEMU-STURX#0,MEMU-STRX_POST#0,MEMU-STTRX#0,MEMU-STRX_PRE#0
    0x168 => return classify_impl_168(inst), // MEM_REG-STR_REG#0,LDRAUT-LDRAA#0,LDRAUT-LDRAA_PRE#0,SWP-SWP#1,LDATOMIC-LDADDX#0,LDATOMIC-LDCLRX#0,LDATOMIC-LDEORX#0,LDATOMIC-LDSETX#0,LDATOMIC-LDSMAXX#0,LDATOMIC-LDSMINX#0,LDATOMIC-LDUMAXX#0,LDATOMIC-LDUMINX#0,LS64V-ST64BV0#0,LS64V-ST64BV0#1,LS64V-ST64BV0#2,LS64V-ST64BV#0,LS64V-ST64BV#1,LS64V-ST64BV#2
    0x169 => return classify_impl_169(inst), // MEM_REG-STR_REG#0,LDRAUT-LDRAA#0,LDRAUT-LDRAA_PRE#0,SWP-SWP#1,LDATOMIC-LDADDX#0,LDATOMIC-LDCLRX#0,LDATOMIC-LDEORX#0,LDATOMIC-LDSETX#0,LDATOMIC-LDSMAXX#0,LDATOMIC-LDSMINX#0,LDATOMIC-LDUMAXX#0,LDATOMIC-LDUMINX#0,LS64-ST64B#0,LS64-ST64B#1,LS64-ST64B#2,LS64-LD64B#0,LS64-LD64B#1,LS64-LD64B#2,LS64V-ST64BV0#0,LS64V-ST64BV0#1,LS64V-ST64BV0#2,LS64V-ST64BV#0,LS64V-ST64BV#1,LS64V-ST64BV#2
    0x16a => return classify_impl_16a(inst), // MEMU-LDURX#0,MEMU-LDRX_POST#0,MEMU-LDTRX#0,MEMU-LDRX_PRE#0
    0x16b => return classify_impl_16b(inst), // MEM_REG-LDR_REG#0,LDRAUT-LDRAA#0,LDRAUT-LDRAA_PRE#0,SWP-SWPL#1,LDATOMIC-LDADDLX#0,LDATOMIC-LDCLRLX#0,LDATOMIC-LDEORLX#0,LDATOMIC-LDSETLX#0,LDATOMIC-LDSMAXLX#0,LDATOMIC-LDSMINLX#0,LDATOMIC-LDUMAXLX#0,LDATOMIC-LDUMINLX#0
    0x16c => return classify_impl_16c(inst), // MEMU-PRFUM#0
    0x16d => return classify_impl_16d(inst), // MEM_REG-PRFM_REG#0,LDRAUT-LDRAB#0,LDRAUT-LDRAB_PRE#0,SWP-SWPA#1,LDATOMIC-LDADDAX#0,LDATOMIC-LDCLRAX#0,LDATOMIC-LDEORAX#0,LDATOMIC-LDSETAX#0,LDATOMIC-LDSMAXAX#0,LDATOMIC-LDSMINAX#0,LDATOMIC-LDUMAXAX#0,LDATOMIC-LDUMINAX#0
    0x16e => return classify_impl_16e(inst), // MEM_REG-PRFM_REG#0,LDRAUT-LDRAB#0,LDRAUT-LDRAB_PRE#0,SWP-SWPA#1,LDATOMIC-LDADDAX#0,LDATOMIC-LDCLRAX#0,LDATOMIC-LDEORAX#0,LDATOMIC-LDSETAX#0,LDATOMIC-LDSMAXAX#0,LDATOMIC-LDSMINAX#0,LDATOMIC-LDUMAXAX#0,LDATOMIC-LDUMINAX#0,RCPC-LDAPRX#0
    0x16f => return classify_impl_16f(inst), // LDRAUT-LDRAB#0,LDRAUT-LDRAB_PRE#0,SWP-SWPAL#1,LDATOMIC-LDADDALX#0,LDATOMIC-LDCLRALX#0,LDATOMIC-LDEORALX#0,LDATOMIC-LDSETALX#0,LDATOMIC-LDSMAXALX#0,LDATOMIC-LDSMINALX#0,LDATOMIC-LDUMAXALX#0,LDATOMIC-LDUMINALX#0
    0x170 => return classify_impl_170(inst), // MEMU_FP-STUR_FP#4,MEMU_FP-STR_FP_POST#4,MEMU_FP-STR_FP_PRE#4
    0x171 => return classify_impl_171(inst), // MEM_REG_FP-STR_REG_FP#4
    0x172 => return classify_impl_172(inst), // MEMU_FP-LDUR_FP#4,MEMU_FP-LDR_FP_POST#4,MEMU_FP-LDR_FP_PRE#4
    0x173 => return classify_impl_173(inst), // MEM_REG_FP-LDR_REG_FP#4
    _ => idx
  };
  return idx;
}

pub static MNEMSTR: &str = "zip2zip1xpaciadcsincasabal2xpacdaddgminsabdl2xaraddhn2xaflagwfitblraazwfetbnzuzp2uzp1usubw2usubl2usrax1usqaddsbcsinvusmmladdvushrbitbxushll2usdotbzursradrpsadalpacdb.ursqrteonotcanceld1rev16urshrev32urshltcommitrn1urhaddcps1urecpeor3uqxtn2uqsubguqshrn2uqshld2rev64uqrshrn2uqrshld3rmifabdcps2umull2umulhintrn2umsublrabzumovirgummlaesdivumlsl2umlal2uminvuminpacdzaesetenumaxvumaxpacdzbc.umaddld4rorvuhsubpsaddl2uhaddcps3udivudfabslisbfmlalbcaxflagucvtfacgeretaaesimcasahvcasalbfcvtn2ubfmlaltstarttest1uaddw2uaddlvuaddlpacgaesmcasalhuaddl2uadalpacibfdotuabdl2uabal2sysld64bfmmlandsaddlpacizasrvswplhswplbicsnegswphswpbifacgtswpalhswpalbraazswpahswpabrabzsvcasbrksuqaddmbsudotsubsaddlvstzgmovkstz2gstxrhstxrbstxpacizbsturhsturbsttrhsttrbstrhstrbstpmull2stnprfmadduprfumovnstlxrhstlxrbstlxpstlurhstlurbstlrhstlrbstllrhstllrbstgpstgmovzst64bv0st4st3st2gssubw2ssubl2ssrautdautdbsshrsubhn2sshll2srsrautdzautdzbsrshrsrshldaddabsrisrhaddsqxtun2sqxtn2sqsubsqshrun2sqshrn2sqshlusqrshrun2sqrshrn2sqrshldaddahsqrdmulhsqrdmlsha1casha1hsqrdmlahsqnegsqdmull2sqdmulhsqdmlsl2sqdmlal2sqabsaddw2smull2smulhsmsubldaddalbsmovsmlsl2smlal2sminvsminpsmaxvsmaxpsmaddldaddalhsm4ekeysm3tt2bsm3tt2autiautibsm3tt1bsm3tt1autizautizbsm3ss1sm3partw2sm3partw1shsubshaddsha512su1sha512su0sha512h2sha256su1sha256su0sha256h2sha1su1sha1su0sha1psha1mrscvtfaddpsetptnsetpnsetmtnsetmnsetgptnsetgpnsetgmtnsetgmnsetgetnsetgensetf8setf16setetnorrornmvnimsr uao,msr tco,msr ssbs,msr spsel,msr pm,msr pan,msr dit,msr daifset,msr daifclr,msr allint,lsrvlslvldxrhldxrbldxpldurswldurshldursbldurhldurblduminlhlduminlblduminhlduminblduminalhlduminalblduminahlduminabldumaxlhldumaxlbldumaxhldumaxbldumaxalhldumaxalbldumaxahldumaxabldtrswldtrshldtrsbldtrhldtrbldsminlhldsminlbldsminhldsminbldsminalhldsminalbldsminahldsminabldsmaxlhldsmaxlbldsmaxhldsmaxbldsmaxalhldsmaxalbldsmaxahldsmaxabldsetlhldsetlbldsethldsetbldsetalhldsetalbldsetahldsetabldrswldrshldrsbldrhldrbldrabldraaldpswldnpldlarhldlarbldgmldeorlhldeorlbldeorhldeorbldeoralhldeoralbldeorahldeorabldclrlhldclrlbldclrhldclrbldclralhldclralbldclrahldclrabldaxrhldaxrbldaxpldarhldarbldapurswldapurshldapursbldapurhldapurbldaddlhldaddlbldaddhldaddbfsubfsqrtfrsqrtsfrsqrteretabfrintzfrintxfrintpfrintnfrintmfrintifrintafrint64zfrint64xfrint32zfrint32xfrecpxfrecpsfrecpextrfnmulfnmsubfnmaddfnegfmulxfmsubfmovfmlsl2fmlal2fminvfminpfminnmvfminnmpfmaxvfmaxpfmaxnmvfmaxnmpfjcvtzsfdivfcvtzufcvtzsfcvtxn2fcvtpufcvtpsfcvtnufcvtnsfcvtmufcvtmsfcvtl2fcvtaufcvtasfcselfcmpefcmltfcmlefcmlafcmgtfcmgefcmeqfccmpefcaddcrc32xcrc32wcrc32hcrc32cxcrc32cwcrc32chcrc32cbnzcrc32bcpypwtwncpypwtrncpypwtncpypwncpyptwncpyptrncpyptncpyprtwncpyprtrncpyprtncpyprncpypncpymwtwncpymwtrncpymwtncpymwncpymtwncpymtrncpymtncpymrtwncpymrtrncpymrtncpymrncpymncpyfpwtwncpyfpwtrncpyfpwtncpyfpwncpyfptwncpyfptrncpyfptncpyfprtwncpyfprtrncpyfprtncpyfprncpyfpncpyfmwtwncpyfmwtrncpyfmwtncpyfmwncpyfmtwncpyfmtrncpyfmtncpyfmrtwncpyfmrtrncpyfmrtncpyfmrncpyfmncpyfewtwncpyfewtrncpyfewtncpyfewncpyfetwncpyfetrncpyfetncpyfertwncpyfertrncpyfertncpyferncpyfencpyewtwncpyewtrncpyewtncpyewncpyetwncpyetrncpyetncpyertwncpyertrncpyertncpyerncpyencntcmtstcmhscmhiclzclsclrexcfinvccmncbzcaslhcaslbLDAPRHLDAPRBCTZCNTABS";
pub static MNEMTAB: [u16;28801] = {
  let mut tab = [0u16; 28801];
  tab[512] = 0x31a6;
  tab[640] = 0x300d;
  tab[641] = 0x400d;
  tab[642] = 0x306d;
  tab[643] = 0x406d;
  tab[768] = 0x3020;
  tab[769] = 0x406a;
  tab[770] = 0x3056;
  tab[771] = 0x42a0;
  tab[896] = 0x3020;
  tab[897] = 0x406a;
  tab[898] = 0x3056;
  tab[899] = 0x42a0;
  tab[1024] = 0x3020;
  tab[1025] = 0x406a;
  tab[1026] = 0x3056;
  tab[1027] = 0x42a0;
  tab[1152] = 0x3097;
  tab[1153] = 0x4097;
  tab[1280] = 0x323e;
  tab[1281] = 0x3576;
  tab[1282] = 0x30e5;
  tab[1283] = 0x423e;
  tab[1408] = 0x323e;
  tab[1409] = 0x3258;
  tab[1410] = 0x3576;
  tab[1411] = 0x3579;
  tab[1412] = 0x30e5;
  tab[1413] = 0x30ac;
  tab[1414] = 0x423e;
  tab[1415] = 0x4258;
  tab[1536] = 0x45e1;
  tab[1537] = 0x45dd;
  tab[1538] = 0x424b;
  tab[1539] = 0x4189;
  tab[1664] = 0x4182;
  tab[1665] = 0x4135;
  tab[1792] = 0x646e;
  tab[1793] = 0x643d;
  tab[1794] = 0x6181;
  tab[1795] = 0x6134;
  tab[1920] = 0x5438;
  tab[1921] = 0x5129;
  tab[2048] = 0x20a4;
  tab[2049] = 0x317e;
  tab[2176] = 0x1017;
  tab[2177] = 0x2040;
  tab[2304] = 0x41ae;
  tab[2305] = 0x31af;
  tab[2306] = 0x41e1;
  tab[2432] = 0x2278;
  tab[2433] = 0x5278;
  tab[2434] = 0x5286;
  tab[2435] = 0x3040;
  tab[2436] = 0x6040;
  tab[2437] = 0x6138;
  tab[2438] = 0x31c6;
  tab[2439] = 0x51c6;
  tab[2440] = 0x587f;
  tab[2441] = 0x4278;
  tab[2442] = 0x4286;
  tab[2443] = 0x5040;
  tab[2444] = 0x5138;
  tab[2560] = 0x3290;
  tab[2688] = 0x3c39;
  tab[2689] = 0x49f5;
  tab[2816] = 0x3090;
  tab[2817] = 0x4049;
  tab[2944] = 0x4c35;
  tab[2945] = 0x49bf;
  tab[3072] = 0x4c35;
  tab[3073] = 0x49bf;
  tab[3200] = 0x5c2b;
  tab[3328] = 0x306c;
  tab[3329] = 0x3298;
  tab[3330] = 0x31ad;
  tab[3456] = 0x412d;
  tab[3584] = 0x30ca;
  tab[3712] = 0x328b;
  tab[3713] = 0x31d3;
  tab[3714] = 0x320a;
  tab[3840] = 0x50db;
  tab[3841] = 0x511e;
  tab[3842] = 0x519d;
  tab[3968] = 0x41c5;
  tab[3969] = 0x61c5;
  tab[3970] = 0x687e;
  tab[4096] = 0x4098;
  tab[4224] = 0x3c25;
  tab[4225] = 0x3c28;
  tab[4226] = 0x3c52;
  tab[4227] = 0x3c55;
  tab[4228] = 0x3c58;
  tab[4352] = 0x4464;
  tab[4353] = 0x4170;
  tab[4354] = 0x445a;
  tab[4355] = 0x415b;
  tab[4480] = 0x4464;
  tab[4481] = 0x4170;
  tab[4482] = 0x445a;
  tab[4483] = 0x415b;
  tab[4608] = 0x4997;
  tab[4609] = 0x500f;
  tab[4610] = 0x506f;
  tab[4611] = 0x525a;
  tab[4736] = 0x48df;
  tab[4864] = 0x42fc;
  tab[4865] = 0x433a;
  tab[4866] = 0x42ad;
  tab[4992] = 0x3232;
  tab[4993] = 0x4232;
  tab[5120] = 0x3580;
  tab[5121] = 0x351d;
  tab[5248] = 0x8580;
  tab[5249] = 0x85aa;
  tab[5250] = 0xa599;
  tab[5251] = 0xb5d2;
  tab[5252] = 0x75a3;
  tab[5253] = 0x9590;
  tab[5254] = 0x85b2;
  tab[5255] = 0x8588;
  tab[5256] = 0xc5ba;
  tab[5257] = 0xc5c6;
  tab[5376] = 0x4080;
  tab[5377] = 0x50b9;
  tab[5378] = 0x30b9;
  tab[5379] = 0x50c2;
  tab[5380] = 0x5103;
  tab[5504] = 0x41a2;
  tab[5505] = 0x414b;
  tab[5632] = 0x632d;
  tab[5633] = 0x5322;
  tab[5634] = 0x6793;
  tab[5635] = 0x5823;
  tab[5636] = 0x6327;
  tab[5637] = 0x531d;
  tab[5638] = 0x678d;
  tab[5639] = 0x581e;
  tab[5640] = 0x5327;
  tab[5641] = 0x431d;
  tab[5642] = 0x578d;
  tab[5643] = 0x481e;
  tab[5644] = 0x5327;
  tab[5645] = 0x431d;
  tab[5646] = 0x578d;
  tab[5647] = 0x481e;
  tab[5760] = 0x52bb;
  tab[5761] = 0x6306;
  tab[5762] = 0x55ea;
  tab[5763] = 0x6813;
  tab[5764] = 0x52b6;
  tab[5765] = 0x6300;
  tab[5766] = 0x55e5;
  tab[5767] = 0x680d;
  tab[5768] = 0x42b6;
  tab[5769] = 0x5300;
  tab[5770] = 0x42c0;
  tab[5771] = 0x530c;
  tab[5772] = 0x45e5;
  tab[5773] = 0x580d;
  tab[5774] = 0x45ef;
  tab[5775] = 0x5819;
  tab[5776] = 0x42b6;
  tab[5777] = 0x5300;
  tab[5778] = 0x42c0;
  tab[5779] = 0x530c;
  tab[5780] = 0x45e5;
  tab[5781] = 0x580d;
  tab[5782] = 0x45ef;
  tab[5783] = 0x5819;
  tab[5888] = 0x42ed;
  tab[5889] = 0x4789;
  tab[5890] = 0x42ed;
  tab[5891] = 0x4789;
  tab[6016] = 0x32e5;
  tab[6017] = 0x3784;
  tab[6018] = 0x32e5;
  tab[6019] = 0x3784;
  tab[6020] = 0x32e5;
  tab[6021] = 0x3784;
  tab[6022] = 0x4333;
  tab[6023] = 0x5784;
  tab[6024] = 0x4333;
  tab[6025] = 0x5784;
  tab[6026] = 0x4333;
  tab[6027] = 0x5784;
  tab[6028] = 0x32e5;
  tab[6029] = 0x3784;
  tab[6030] = 0x32e5;
  tab[6031] = 0x3784;
  tab[6032] = 0x32e5;
  tab[6033] = 0x3784;
  tab[6144] = 0x52ce;
  tab[6145] = 0x42e1;
  tab[6146] = 0x52d8;
  tab[6147] = 0x42e1;
  tab[6148] = 0x560a;
  tab[6149] = 0x4776;
  tab[6150] = 0x56a6;
  tab[6151] = 0x4776;
  tab[6152] = 0x65ff;
  tab[6153] = 0x576d;
  tab[6154] = 0x669b;
  tab[6155] = 0x576d;
  tab[6156] = 0x65ff;
  tab[6157] = 0x576d;
  tab[6158] = 0x669b;
  tab[6159] = 0x576d;
  tab[6160] = 0x52c9;
  tab[6161] = 0x42dd;
  tab[6162] = 0x52d3;
  tab[6163] = 0x42dd;
  tab[6164] = 0x5605;
  tab[6165] = 0x4772;
  tab[6166] = 0x56a1;
  tab[6167] = 0x4772;
  tab[6168] = 0x65f9;
  tab[6169] = 0x5768;
  tab[6170] = 0x6695;
  tab[6171] = 0x5768;
  tab[6172] = 0x65f9;
  tab[6173] = 0x5768;
  tab[6174] = 0x6695;
  tab[6175] = 0x5768;
  tab[6176] = 0x42c9;
  tab[6177] = 0x32dd;
  tab[6178] = 0x42d3;
  tab[6179] = 0x32dd;
  tab[6180] = 0x45f3;
  tab[6181] = 0x3763;
  tab[6182] = 0x468f;
  tab[6183] = 0x3763;
  tab[6184] = 0x65f3;
  tab[6185] = 0x5763;
  tab[6186] = 0x668f;
  tab[6187] = 0x5763;
  tab[6188] = 0x42c9;
  tab[6189] = 0x32dd;
  tab[6190] = 0x42d3;
  tab[6191] = 0x32dd;
  tab[6192] = 0x45f3;
  tab[6193] = 0x3763;
  tab[6194] = 0x468f;
  tab[6195] = 0x3763;
  tab[6196] = 0x52f8;
  tab[6272] = 0x42e1;
  tab[6273] = 0x4776;
  tab[6274] = 0x576d;
  tab[6275] = 0x576d;
  tab[6276] = 0x42dd;
  tab[6277] = 0x4772;
  tab[6278] = 0x5768;
  tab[6279] = 0x5768;
  tab[6280] = 0x32dd;
  tab[6281] = 0x3763;
  tab[6282] = 0x5763;
  tab[6283] = 0x32dd;
  tab[6284] = 0x3763;
  tab[6285] = 0x42f0;
  tab[6400] = 0x42e1;
  tab[6401] = 0x4776;
  tab[6402] = 0x576d;
  tab[6403] = 0x576d;
  tab[6404] = 0x42dd;
  tab[6405] = 0x4772;
  tab[6406] = 0x5768;
  tab[6407] = 0x5768;
  tab[6408] = 0x32dd;
  tab[6409] = 0x3763;
  tab[6410] = 0x5763;
  tab[6411] = 0x32dd;
  tab[6412] = 0x3763;
  tab[6413] = 0x42f0;
  tab[6528] = 0x3763;
  tab[6529] = 0x3763;
  tab[6530] = 0x5763;
  tab[6531] = 0x42f0;
  tab[6656] = 0x42ed;
  tab[6657] = 0x4789;
  tab[6658] = 0x32e5;
  tab[6659] = 0x3784;
  tab[6660] = 0x32e5;
  tab[6661] = 0x3784;
  tab[6662] = 0x32e5;
  tab[6663] = 0x3784;
  tab[6784] = 0x42c9;
  tab[6785] = 0x32dd;
  tab[6786] = 0x32dd;
  tab[6787] = 0x45f3;
  tab[6788] = 0x3763;
  tab[6789] = 0x3763;
  tab[6912] = 0x32dd;
  tab[6913] = 0x3763;
  tab[7040] = 0x32dd;
  tab[7041] = 0x3763;
  tab[7168] = 0x3763;
  tab[7296] = 0x3345;
  tab[7297] = 0x31f0;
  tab[7298] = 0x3348;
  tab[7299] = 0x31f0;
  tab[7300] = 0x31f0;
  tab[7301] = 0x334b;
  tab[7302] = 0x31f0;
  tab[7303] = 0x3186;
  tab[7304] = 0x30b6;
  tab[7305] = 0x3115;
  tab[7306] = 0x30b6;
  tab[7307] = 0x30b6;
  tab[7308] = 0x3100;
  tab[7309] = 0x30b6;
  tab[7424] = 0x3345;
  tab[7425] = 0x31f0;
  tab[7426] = 0x3348;
  tab[7427] = 0x31f0;
  tab[7428] = 0x31f0;
  tab[7429] = 0x334b;
  tab[7430] = 0x31f0;
  tab[7431] = 0x3186;
  tab[7432] = 0x30b6;
  tab[7433] = 0x3115;
  tab[7434] = 0x30b6;
  tab[7435] = 0x30b6;
  tab[7436] = 0x3100;
  tab[7437] = 0x30b6;
  tab[7552] = 0x31f0;
  tab[7553] = 0x3348;
  tab[7554] = 0x31f0;
  tab[7555] = 0x3348;
  tab[7556] = 0x31f0;
  tab[7557] = 0x31f0;
  tab[7558] = 0x3348;
  tab[7559] = 0x3348;
  tab[7560] = 0x334b;
  tab[7561] = 0x3345;
  tab[7562] = 0x334b;
  tab[7563] = 0x3345;
  tab[7564] = 0x334b;
  tab[7565] = 0x334b;
  tab[7566] = 0x3345;
  tab[7567] = 0x3345;
  tab[7568] = 0x30b6;
  tab[7569] = 0x3115;
  tab[7570] = 0x30b6;
  tab[7571] = 0x3115;
  tab[7572] = 0x30b6;
  tab[7573] = 0x30b6;
  tab[7574] = 0x3115;
  tab[7575] = 0x3115;
  tab[7576] = 0x3100;
  tab[7577] = 0x3186;
  tab[7578] = 0x3100;
  tab[7579] = 0x3186;
  tab[7580] = 0x3100;
  tab[7581] = 0x3100;
  tab[7582] = 0x3186;
  tab[7583] = 0x3186;
  tab[7680] = 0x31f0;
  tab[7681] = 0x3348;
  tab[7682] = 0x31f0;
  tab[7683] = 0x3348;
  tab[7684] = 0x31f0;
  tab[7685] = 0x31f0;
  tab[7686] = 0x3348;
  tab[7687] = 0x3348;
  tab[7688] = 0x334b;
  tab[7689] = 0x3345;
  tab[7690] = 0x334b;
  tab[7691] = 0x3345;
  tab[7692] = 0x334b;
  tab[7693] = 0x334b;
  tab[7694] = 0x3345;
  tab[7695] = 0x3345;
  tab[7696] = 0x30b6;
  tab[7697] = 0x3115;
  tab[7698] = 0x30b6;
  tab[7699] = 0x3115;
  tab[7700] = 0x30b6;
  tab[7701] = 0x30b6;
  tab[7702] = 0x3115;
  tab[7703] = 0x3115;
  tab[7704] = 0x3100;
  tab[7705] = 0x3186;
  tab[7706] = 0x3100;
  tab[7707] = 0x3186;
  tab[7708] = 0x3100;
  tab[7709] = 0x3100;
  tab[7710] = 0x3186;
  tab[7711] = 0x3186;
  tab[7808] = 0x40b6;
  tab[7809] = 0x4115;
  tab[7810] = 0x4100;
  tab[7811] = 0x4186;
  tab[7936] = 0x40b6;
  tab[7937] = 0x4115;
  tab[7938] = 0x4100;
  tab[7939] = 0x4186;
  tab[8064] = 0x6953;
  tab[8065] = 0x694d;
  tab[8066] = 0x6953;
  tab[8067] = 0x694d;
  tab[8192] = 0x551f;
  tab[8193] = 0x51bd;
  tab[8194] = 0x551f;
  tab[8195] = 0x51bd;
  tab[8320] = 0x6972;
  tab[8321] = 0x696c;
  tab[8322] = 0x6990;
  tab[8323] = 0x698a;
  tab[8324] = 0x6966;
  tab[8325] = 0x6960;
  tab[8326] = 0x697e;
  tab[8327] = 0x6978;
  tab[8328] = 0x6953;
  tab[8329] = 0x694d;
  tab[8330] = 0x6972;
  tab[8331] = 0x696c;
  tab[8332] = 0x6990;
  tab[8333] = 0x698a;
  tab[8334] = 0x6966;
  tab[8335] = 0x6960;
  tab[8336] = 0x697e;
  tab[8337] = 0x6978;
  tab[8338] = 0x6953;
  tab[8339] = 0x694d;
  tab[8448] = 0x551f;
  tab[8449] = 0x51bd;
  tab[8450] = 0x551f;
  tab[8451] = 0x51bd;
  tab[8576] = 0x4902;
  tab[8577] = 0x4902;
  tab[8578] = 0x4902;
  tab[8704] = 0x4902;
  tab[8705] = 0x4902;
  tab[8706] = 0x4902;
  tab[8832] = 0x7942;
  tab[8960] = 0x41db;
  tab[8961] = 0x51da;
  tab[9088] = 0x6896;
  tab[9089] = 0x6890;
  tab[9090] = 0x689c;
  tab[9091] = 0x6884;
  tab[9092] = 0x68a8;
  tab[9093] = 0x688a;
  tab[9094] = 0x68a2;
  tab[9095] = 0x6896;
  tab[9096] = 0x6890;
  tab[9097] = 0x689c;
  tab[9098] = 0x6884;
  tab[9099] = 0x68a8;
  tab[9100] = 0x688a;
  tab[9101] = 0x68a2;
  tab[9216] = 0x88be;
  tab[9217] = 0x88c6;
  tab[9218] = 0x88ae;
  tab[9219] = 0x88b6;
  tab[9344] = 0x4902;
  tab[9345] = 0x41a8;
  tab[9346] = 0x48f4;
  tab[9347] = 0x586c;
  tab[9348] = 0x4902;
  tab[9349] = 0x41a8;
  tab[9350] = 0x48f4;
  tab[9351] = 0x586c;
  tab[9472] = 0x4902;
  tab[9473] = 0x4902;
  tab[9600] = 0x48f8;
  tab[9601] = 0x4949;
  tab[9602] = 0x4523;
  tab[9603] = 0x4868;
  tab[9604] = 0x492a;
  tab[9605] = 0x4912;
  tab[9606] = 0x6934;
  tab[9607] = 0x691c;
  tab[9608] = 0x58e3;
  tab[9609] = 0x48f8;
  tab[9610] = 0x4949;
  tab[9611] = 0x4523;
  tab[9612] = 0x4868;
  tab[9613] = 0x492a;
  tab[9614] = 0x4912;
  tab[9615] = 0x6934;
  tab[9616] = 0x691c;
  tab[9617] = 0x58e3;
  tab[9728] = 0x499b;
  tab[9729] = 0x499b;
  tab[9730] = 0x599b;
  tab[9731] = 0x599b;
  tab[9732] = 0x499b;
  tab[9733] = 0x499b;
  tab[9734] = 0x599b;
  tab[9735] = 0x599b;
  tab[9856] = 0x59be;
  tab[9857] = 0x69be;
  tab[9858] = 0x59be;
  tab[9859] = 0x69be;
  tab[9984] = 0x5996;
  tab[9985] = 0x5996;
  tab[10112] = 0x52f2;
  tab[10113] = 0x58fd;
  tab[10114] = 0x68ee;
  tab[10115] = 0x68e8;
  tab[10116] = 0x52f2;
  tab[10117] = 0x58fd;
  tab[10118] = 0x68ee;
  tab[10119] = 0x68e8;
  tab[10240] = 0x32f6;
  tab[10368] = 0x32f6;
  tab[10369] = 0x32f6;
  tab[10496] = 0x3025;
  tab[10497] = 0x3025;
  tab[10624] = 0x444a;
  tab[10625] = 0x413e;
  tab[10752] = 0x303f;
  tab[10753] = 0x3083;
  tab[10754] = 0x303f;
  tab[10755] = 0x3083;
  tab[10756] = 0x303f;
  tab[10757] = 0x3083;
  tab[10758] = 0x303f;
  tab[10759] = 0x3083;
  tab[10880] = 0x4051;
  tab[10881] = 0x40d2;
  tab[10882] = 0x4004;
  tab[10883] = 0x404d;
  tab[10884] = 0x4130;
  tab[10885] = 0x4000;
  tab[11008] = 0x38df;
  tab[11136] = 0x54cd;
  tab[11137] = 0x6399;
  tab[11138] = 0x54c8;
  tab[11139] = 0x5199;
  tab[11140] = 0x60d6;
  tab[11141] = 0x518d;
  tab[11264] = 0x5068;
  tab[11265] = 0x53ac;
  tab[11266] = 0x5294;
  tab[11267] = 0x50ef;
  tab[11392] = 0x5068;
  tab[11393] = 0x53ac;
  tab[11394] = 0x5294;
  tab[11395] = 0x50ef;
  tab[11520] = 0x49b0;
  tab[11521] = 0x49b5;
  tab[11522] = 0x4c21;
  tab[11523] = 0x4c1d;
  tab[11648] = 0x49b0;
  tab[11649] = 0x49b5;
  tab[11650] = 0x4c21;
  tab[11651] = 0x4c1d;
  tab[11776] = 0x5c18;
  tab[11777] = 0x49ba;
  tab[11904] = 0x5c18;
  tab[11905] = 0x49ba;
  tab[12032] = 0x49b0;
  tab[12033] = 0x49ba;
  tab[12034] = 0x49a1;
  tab[12035] = 0x49b5;
  tab[12036] = 0x49a6;
  tab[12160] = 0x49b0;
  tab[12161] = 0x49ba;
  tab[12162] = 0x49a1;
  tab[12163] = 0x49b5;
  tab[12164] = 0x49a6;
  tab[12288] = 0x6293;
  tab[12289] = 0x5428;
  tab[12290] = 0x31a9;
  tab[12291] = 0x6067;
  tab[12292] = 0x5404;
  tab[12293] = 0x325c;
  tab[12416] = 0x6293;
  tab[12417] = 0x5428;
  tab[12418] = 0x31a9;
  tab[12419] = 0x6067;
  tab[12420] = 0x5404;
  tab[12421] = 0x325c;
  tab[12544] = 0x6241;
  tab[12545] = 0x609b;
  tab[12546] = 0x61ff;
  tab[12547] = 0x6218;
  tab[12672] = 0x3c28;
  tab[12673] = 0x3c25;
  tab[12800] = 0x3c15;
  tab[12801] = 0x30ae;
  tab[12802] = 0x4080;
  tab[12928] = 0x5103;
  tab[12929] = 0x50b9;
  tab[12930] = 0x50c2;
  tab[13056] = 0x53a6;
  tab[13057] = 0x639f;
  tab[13058] = 0x50e9;
  tab[13184] = 0x30eb;
  tab[13185] = 0x53a6;
  tab[13186] = 0x639f;
  tab[13187] = 0x50e9;
  tab[13188] = 0x40eb;
  tab[13189] = 0x63a6;
  tab[13190] = 0x739f;
  tab[13191] = 0x60e9;
  tab[13312] = 0x53c0;
  tab[13313] = 0x63d7;
  tab[13314] = 0x4371;
  tab[13315] = 0x538b;
  tab[13316] = 0x50fc;
  tab[13317] = 0x6110;
  tab[13318] = 0x4086;
  tab[13319] = 0x50c7;
  tab[13440] = 0x4371;
  tab[13441] = 0x53c0;
  tab[13442] = 0x538b;
  tab[13443] = 0x63d7;
  tab[13444] = 0x4086;
  tab[13445] = 0x50fc;
  tab[13446] = 0x50c7;
  tab[13447] = 0x6110;
  tab[13568] = 0x4464;
  tab[13569] = 0x445a;
  tab[13570] = 0x5469;
  tab[13571] = 0x545f;
  tab[13572] = 0x4170;
  tab[13573] = 0x415b;
  tab[13574] = 0x5175;
  tab[13575] = 0x5160;
  tab[13696] = 0x4027;
  tab[13697] = 0x4015;
  tab[13698] = 0x4226;
  tab[13699] = 0x422c;
  tab[13824] = 0x3020;
  tab[13825] = 0x3056;
  tab[13952] = 0x3020;
  tab[13953] = 0x3056;
  tab[14080] = 0x4524;
  tab[14208] = 0x3077;
  tab[14209] = 0x3124;
  tab[14210] = 0x3150;
  tab[14211] = 0x42e7;
  tab[14336] = 0x7411;
  tab[14337] = 0x83e3;
  tab[14464] = 0x7411;
  tab[14465] = 0x83e3;
  tab[14592] = 0x6934;
  tab[14593] = 0x492a;
  tab[14594] = 0x691c;
  tab[14595] = 0x4912;
  tab[14596] = 0x793b;
  tab[14597] = 0x592f;
  tab[14598] = 0x7923;
  tab[14599] = 0x5917;
  tab[14720] = 0x59b9;
  tab[14721] = 0x59b4;
  tab[14722] = 0x51c1;
  tab[14723] = 0x59af;
  tab[14724] = 0x5268;
  tab[14848] = 0x59af;
  tab[14849] = 0x59b9;
  tab[14850] = 0x59a0;
  tab[14851] = 0x59b4;
  tab[14852] = 0x59a5;
  tab[14976] = 0x59b9;
  tab[14977] = 0x59b4;
  tab[14978] = 0x51c1;
  tab[14979] = 0x59af;
  tab[14980] = 0x5268;
  tab[15104] = 0x59af;
  tab[15105] = 0x59b9;
  tab[15106] = 0x59a0;
  tab[15107] = 0x59b4;
  tab[15108] = 0x59a5;
  tab[15232] = 0x41a8;
  tab[15233] = 0x48f4;
  tab[15234] = 0x586c;
  tab[15360] = 0x411b;
  tab[15488] = 0x4523;
  tab[15489] = 0x4868;
  tab[15490] = 0x5523;
  tab[15491] = 0x411b;
  tab[15616] = 0x68da;
  tab[15617] = 0x68ce;
  tab[15618] = 0x7878;
  tab[15744] = 0x60e0;
  tab[15745] = 0x68da;
  tab[15746] = 0x70a6;
  tab[15747] = 0x7878;
  tab[15872] = 0x68d4;
  tab[15873] = 0x7871;
  tab[16000] = 0x68d4;
  tab[16001] = 0x7871;
  tab[16128] = 0x58f8;
  tab[16256] = 0x58f8;
  tab[16257] = 0x48f8;
  tab[16384] = 0x41b0;
  tab[16385] = 0x4906;
  tab[16512] = 0x4949;
  tab[16640] = 0x58f8;
  tab[16641] = 0x59b9;
  tab[16642] = 0x68d4;
  tab[16643] = 0x7871;
  tab[16644] = 0x59b4;
  tab[16645] = 0x51c1;
  tab[16646] = 0x411b;
  tab[16647] = 0x59af;
  tab[16648] = 0x5268;
  tab[16768] = 0x6934;
  tab[16769] = 0x41b0;
  tab[16770] = 0x4523;
  tab[16771] = 0x58f8;
  tab[16772] = 0x59b9;
  tab[16773] = 0x492a;
  tab[16774] = 0x68d4;
  tab[16775] = 0x691c;
  tab[16776] = 0x4906;
  tab[16777] = 0x4868;
  tab[16779] = 0x4912;
  tab[16780] = 0x7871;
  tab[16781] = 0x793b;
  tab[16782] = 0x5523;
  tab[16783] = 0x48f8;
  tab[16784] = 0x59b4;
  tab[16785] = 0x51c1;
  tab[16786] = 0x592f;
  tab[16787] = 0x4949;
  tab[16788] = 0x7923;
  tab[16789] = 0x411b;
  tab[16791] = 0x59af;
  tab[16792] = 0x5268;
  tab[16793] = 0x5917;
  tab[16896] = 0x6972;
  tab[16897] = 0x697e;
  tab[16898] = 0x6990;
  tab[16899] = 0x551f;
  tab[16900] = 0x59af;
  tab[16901] = 0x59b9;
  tab[16902] = 0x59a0;
  tab[16903] = 0x6966;
  tab[16904] = 0x6953;
  tab[16905] = 0x68da;
  tab[16906] = 0x68ce;
  tab[16907] = 0x696c;
  tab[16908] = 0x6978;
  tab[16909] = 0x698a;
  tab[16910] = 0x51bd;
  tab[16911] = 0x59b4;
  tab[16912] = 0x59a5;
  tab[16913] = 0x6960;
  tab[16914] = 0x694d;
  tab[16915] = 0x7878;
  tab[17024] = 0x6896;
  tab[17025] = 0x689c;
  tab[17026] = 0x6972;
  tab[17027] = 0x697e;
  tab[17028] = 0x6990;
  tab[17029] = 0x551f;
  tab[17030] = 0x59af;
  tab[17031] = 0x59b9;
  tab[17032] = 0x59a0;
  tab[17033] = 0x41a8;
  tab[17034] = 0x6890;
  tab[17035] = 0x6884;
  tab[17036] = 0x6966;
  tab[17037] = 0x6953;
  tab[17038] = 0x68da;
  tab[17039] = 0x68a8;
  tab[17040] = 0x688a;
  tab[17041] = 0x696c;
  tab[17042] = 0x6978;
  tab[17043] = 0x698a;
  tab[17044] = 0x51bd;
  tab[17045] = 0x59b4;
  tab[17046] = 0x59a5;
  tab[17047] = 0x48f4;
  tab[17048] = 0x68a2;
  tab[17049] = 0x6960;
  tab[17050] = 0x694d;
  tab[17051] = 0x7878;
  tab[17052] = 0x586c;
  tab[17152] = 0x323e;
  tab[17153] = 0x3258;
  tab[17154] = 0x3576;
  tab[17155] = 0x3579;
  tab[17156] = 0x30e5;
  tab[17157] = 0x31aa;
  tab[17158] = 0x3081;
  tab[17159] = 0x3266;
  tab[17280] = 0x5193;
  tab[17281] = 0x5355;
  tab[17282] = 0x51f9;
  tab[17283] = 0x505b;
  tab[17284] = 0x6193;
  tab[17285] = 0x6355;
  tab[17286] = 0x6212;
  tab[17287] = 0x605b;
  tab[17408] = 0x542c;
  tab[17409] = 0x534f;
  tab[17410] = 0x51f3;
  tab[17411] = 0x5055;
  tab[17412] = 0x642c;
  tab[17413] = 0x634f;
  tab[17414] = 0x61f3;
  tab[17415] = 0x6055;
  tab[17536] = 0x5030;
  tab[17537] = 0x536b;
  tab[17538] = 0x602f;
  tab[17539] = 0x636a;
  tab[17540] = 0x6030;
  tab[17541] = 0x636b;
  tab[17542] = 0x702f;
  tab[17543] = 0x736a;
  tab[17664] = 0x5015;
  tab[17665] = 0x5027;
  tab[17666] = 0x522c;
  tab[17667] = 0x5226;
  tab[17668] = 0x6015;
  tab[17669] = 0x6027;
  tab[17670] = 0x622c;
  tab[17671] = 0x6226;
  tab[17792] = 0x5454;
  tab[17793] = 0x544e;
  tab[17794] = 0x5432;
  tab[17795] = 0x5155;
  tab[17796] = 0x514f;
  tab[17797] = 0x5123;
  tab[17798] = 0x6454;
  tab[17799] = 0x644e;
  tab[17800] = 0x6432;
  tab[17801] = 0x6155;
  tab[17802] = 0x614f;
  tab[17803] = 0x6123;
  tab[17920] = 0x7420;
  tab[17921] = 0x7418;
  tab[17922] = 0x7409;
  tab[18048] = 0x7420;
  tab[18049] = 0x7418;
  tab[18050] = 0x7409;
  tab[18051] = 0x8420;
  tab[18052] = 0x8418;
  tab[18053] = 0x8409;
  tab[18176] = 0x52e7;
  tab[18177] = 0x52e7;
  tab[18178] = 0x62e7;
  tab[18179] = 0x62e7;
  tab[18304] = 0x83fc;
  tab[18305] = 0x83eb;
  tab[18432] = 0x83fc;
  tab[18433] = 0x83eb;
  tab[18560] = 0x4367;
  tab[18561] = 0x435b;
  tab[18562] = 0x5386;
  tab[18563] = 0x5377;
  tab[18564] = 0x407d;
  tab[18565] = 0x4061;
  tab[18566] = 0x50be;
  tab[18567] = 0x5093;
  tab[18688] = 0x4367;
  tab[18689] = 0x435b;
  tab[18690] = 0x5386;
  tab[18691] = 0x5377;
  tab[18692] = 0x407d;
  tab[18693] = 0x4061;
  tab[18694] = 0x50be;
  tab[18695] = 0x5093;
  tab[18816] = 0x53c0;
  tab[18817] = 0x63c0;
  tab[18818] = 0x50fc;
  tab[18944] = 0x53c0;
  tab[18945] = 0x63c0;
  tab[18946] = 0x50fc;
  tab[19072] = 0x63b9;
  tab[19073] = 0x73cf;
  tab[19074] = 0x73b1;
  tab[19075] = 0x83c6;
  tab[19076] = 0x60f5;
  tab[19077] = 0x7108;
  tab[19200] = 0x40f7;
  tab[19201] = 0x510a;
  tab[19202] = 0x63b9;
  tab[19203] = 0x73cf;
  tab[19204] = 0x73b1;
  tab[19205] = 0x83c6;
  tab[19206] = 0x60f5;
  tab[19207] = 0x7108;
  tab[19208] = 0x50f7;
  tab[19209] = 0x610a;
  tab[19210] = 0x73b9;
  tab[19211] = 0x83cf;
  tab[19212] = 0x83b1;
  tab[19213] = 0x93c6;
  tab[19214] = 0x70f5;
  tab[19215] = 0x8108;
  tab[19328] = 0x5371;
  tab[19329] = 0x5086;
  tab[19330] = 0x6371;
  tab[19331] = 0x6086;
  tab[19456] = 0x4087;
  tab[19457] = 0x5087;
  tab[19584] = 0x3087;
  tab[19585] = 0x3396;
  tab[19586] = 0x31ab;
  tab[19712] = 0x3087;
  tab[19713] = 0x3396;
  tab[19714] = 0x31ab;
  tab[19840] = 0x551f;
  tab[19841] = 0x6953;
  tab[19842] = 0x551f;
  tab[19843] = 0x6953;
  tab[19844] = 0x51bd;
  tab[19845] = 0x694d;
  tab[19846] = 0x51bd;
  tab[19847] = 0x694d;
  tab[19968] = 0x551f;
  tab[19969] = 0x6953;
  tab[19970] = 0x551f;
  tab[19971] = 0x6953;
  tab[19972] = 0x51bd;
  tab[19973] = 0x694d;
  tab[19974] = 0x51bd;
  tab[19975] = 0x694d;
  tab[20096] = 0x6972;
  tab[20097] = 0x697e;
  tab[20098] = 0x6990;
  tab[20099] = 0x6966;
  tab[20100] = 0x6953;
  tab[20101] = 0x696c;
  tab[20102] = 0x6978;
  tab[20103] = 0x698a;
  tab[20104] = 0x6960;
  tab[20105] = 0x694d;
  tab[20224] = 0x6972;
  tab[20225] = 0x697e;
  tab[20226] = 0x6990;
  tab[20227] = 0x6966;
  tab[20228] = 0x6953;
  tab[20229] = 0x696c;
  tab[20230] = 0x6978;
  tab[20231] = 0x698a;
  tab[20232] = 0x6960;
  tab[20233] = 0x694d;
  tab[20352] = 0x5984;
  tab[20353] = 0x6984;
  tab[20480] = 0x551f;
  tab[20481] = 0x51bd;
  tab[20608] = 0x551f;
  tab[20609] = 0x51bd;
  tab[20736] = 0x6959;
  tab[20864] = 0x51db;
  tab[20865] = 0x61da;
  tab[20866] = 0x6959;
  tab[20867] = 0x61db;
  tab[20868] = 0x71da;
  tab[20869] = 0x7959;
  tab[20992] = 0x6896;
  tab[20993] = 0x689c;
  tab[20994] = 0x6890;
  tab[20995] = 0x6884;
  tab[20996] = 0x68a8;
  tab[20997] = 0x688a;
  tab[20998] = 0x68a2;
  tab[21120] = 0x88be;
  tab[21121] = 0x88ae;
  tab[21122] = 0x88c6;
  tab[21123] = 0x88b6;
  tab[21248] = 0x4524;
  tab[21376] = 0x62a3;
  tab[21377] = 0x5464;
  tab[21378] = 0x545a;
  tab[21379] = 0x4079;
  tab[21380] = 0x61f9;
  tab[21381] = 0x5170;
  tab[21382] = 0x515b;
  tab[21504] = 0x793b;
  tab[21505] = 0x5523;
  tab[21506] = 0x592f;
  tab[21507] = 0x7923;
  tab[21508] = 0x5917;
  tab[21509] = 0x793b;
  tab[21510] = 0x5523;
  tab[21511] = 0x592f;
  tab[21512] = 0x7923;
  tab[21513] = 0x5917;
  tab[21632] = 0x7934;
  tab[21633] = 0x592a;
  tab[21634] = 0x791c;
  tab[21635] = 0x5912;
  tab[21636] = 0x7934;
  tab[21637] = 0x592a;
  tab[21638] = 0x791c;
  tab[21639] = 0x5912;
  tab[21760] = 0x7411;
  tab[21761] = 0x83e3;
  tab[21762] = 0x83fc;
  tab[21763] = 0x83eb;
  tab[21888] = 0x3124;
  tab[21889] = 0x7411;
  tab[21890] = 0x83e3;
  tab[21891] = 0x3077;
  tab[21892] = 0x3150;
  tab[21893] = 0x83fc;
  tab[21894] = 0x83eb;
  tab[22016] = 0x7420;
  tab[22017] = 0x7418;
  tab[22018] = 0x7409;
  tab[22144] = 0x5454;
  tab[22145] = 0x7420;
  tab[22146] = 0x544e;
  tab[22147] = 0x7418;
  tab[22148] = 0x5432;
  tab[22149] = 0x7409;
  tab[22150] = 0x5155;
  tab[22151] = 0x514f;
  tab[22152] = 0x5123;
  tab[22153] = 0x6454;
  tab[22154] = 0x8420;
  tab[22155] = 0x644e;
  tab[22156] = 0x8418;
  tab[22157] = 0x6432;
  tab[22158] = 0x8409;
  tab[22159] = 0x6155;
  tab[22160] = 0x614f;
  tab[22161] = 0x6123;
  tab[22272] = 0x41b0;
  tab[22273] = 0x4906;
  tab[22274] = 0x48f8;
  tab[22275] = 0x58f8;
  tab[22400] = 0x41b0;
  tab[22401] = 0x4906;
  tab[22402] = 0x48f8;
  tab[22403] = 0x58f8;
  tab[22528] = 0x41b0;
  tab[22529] = 0x4906;
  tab[22530] = 0x48f8;
  tab[22531] = 0x58f8;
  tab[22656] = 0x41b0;
  tab[22657] = 0x4906;
  tab[22658] = 0x48f8;
  tab[22659] = 0x58f8;
  tab[22784] = 0x408d;
  tab[22785] = 0x508c;
  tab[22786] = 0x5221;
  tab[22787] = 0x429c;
  tab[22788] = 0x5075;
  tab[22789] = 0x6074;
  tab[22790] = 0x6239;
  tab[22791] = 0x5145;
  tab[22912] = 0x529b;
  tab[22913] = 0x5221;
  tab[22914] = 0x408d;
  tab[22915] = 0x508c;
  tab[22916] = 0x429c;
  tab[23041] = 0x71af;
  tab[23043] = 0x71e2;
  tab[23169] = 0x71af;
  tab[23171] = 0x71e2;
  tab[23296] = 0x51b0;
  tab[23297] = 0x5906;
  tab[23298] = 0x690c;
  tab[23299] = 0x6906;
  tab[23424] = 0x51b0;
  tab[23425] = 0x5906;
  tab[23426] = 0x690c;
  tab[23427] = 0x6906;
  tab[23552] = 0x59aa;
  tab[23553] = 0x59c4;
  tab[23680] = 0x59aa;
  tab[23808] = 0x413f;
  tab[23809] = 0x3576;
  tab[23810] = 0x413f;
  tab[23811] = 0x3576;
  tab[23812] = 0x413f;
  tab[23813] = 0x413f;
  tab[23814] = 0x4902;
  tab[23815] = 0x4902;
  tab[23816] = 0x457c;
  tab[23817] = 0x3258;
  tab[23818] = 0x457c;
  tab[23819] = 0x3258;
  tab[23820] = 0x457c;
  tab[23821] = 0x413f;
  tab[23822] = 0x4902;
  tab[23936] = 0x5009;
  tab[23937] = 0x521d;
  tab[23938] = 0x501c;
  tab[23939] = 0x50a0;
  tab[23940] = 0x548f;
  tab[23941] = 0x5493;
  tab[23942] = 0x535e;
  tab[23943] = 0x5362;
  tab[23944] = 0x6246;
  tab[23945] = 0x62c3;
  tab[23946] = 0x6164;
  tab[23947] = 0x6179;
  tab[23948] = 0x64a5;
  tab[23949] = 0x64aa;
  tab[23950] = 0x637b;
  tab[23951] = 0x6380;
  tab[24064] = 0x577f;
  tab[24065] = 0x577f;
  tab[24066] = 0x577a;
  tab[24067] = 0x577a;
  tab[24192] = 0x5008;
  tab[24193] = 0x501b;
  tab[24320] = 0x5204;
  tab[24448] = 0x428d;
  tab[24449] = 0x5c41;
  tab[24450] = 0x5013;
  tab[24451] = 0x61d5;
  tab[24452] = 0x43f5;
  tab[24453] = 0x5c3c;
  tab[24454] = 0x51cf;
  tab[24455] = 0x620c;
  tab[24456] = 0x3013;
  tab[24457] = 0x4c3c;
  tab[24458] = 0x4013;
  tab[24459] = 0x51d5;
  tab[24576] = 0x3013;
  tab[24577] = 0x4c3c;
  tab[24578] = 0x4013;
  tab[24579] = 0x51d5;
  tab[24704] = 0x4263;
  tab[24705] = 0x5254;
  tab[24706] = 0x5282;
  tab[24707] = 0x6273;
  tab[24708] = 0x425f;
  tab[24709] = 0x524f;
  tab[24710] = 0x527d;
  tab[24711] = 0x626d;
  tab[24712] = 0x324f;
  tab[24713] = 0x424f;
  tab[24714] = 0x426d;
  tab[24715] = 0x526d;
  tab[24832] = 0x6862;
  tab[24833] = 0x67e9;
  tab[24834] = 0x67b1;
  tab[24835] = 0x673f;
  tab[24836] = 0x7702;
  tab[24837] = 0x76c2;
  tab[24838] = 0x7666;
  tab[24839] = 0x7626;
  tab[24840] = 0x7855;
  tab[24841] = 0x77dc;
  tab[24842] = 0x77a4;
  tab[24843] = 0x7732;
  tab[24844] = 0x86f3;
  tab[24845] = 0x86b3;
  tab[24846] = 0x8657;
  tab[24847] = 0x8617;
  tab[24848] = 0x738f;
  tab[24849] = 0x7806;
  tab[24850] = 0x77ce;
  tab[24851] = 0x775c;
  tab[24852] = 0x8723;
  tab[24853] = 0x86e3;
  tab[24854] = 0x8687;
  tab[24855] = 0x8647;
  tab[24856] = 0x8442;
  tab[24857] = 0x87f7;
  tab[24858] = 0x87bf;
  tab[24859] = 0x874d;
  tab[24860] = 0x9712;
  tab[24861] = 0x96d2;
  tab[24862] = 0x9676;
  tab[24863] = 0x9636;
  tab[24864] = 0x685c;
  tab[24865] = 0x67e3;
  tab[24866] = 0x67ab;
  tab[24867] = 0x6739;
  tab[24868] = 0x76fb;
  tab[24869] = 0x76bb;
  tab[24870] = 0x765f;
  tab[24871] = 0x761f;
  tab[24872] = 0x784e;
  tab[24873] = 0x77d5;
  tab[24874] = 0x779d;
  tab[24875] = 0x772b;
  tab[24876] = 0x86eb;
  tab[24877] = 0x86ab;
  tab[24878] = 0x864f;
  tab[24879] = 0x860f;
  tab[24880] = 0x73dc;
  tab[24881] = 0x77ff;
  tab[24882] = 0x77c7;
  tab[24883] = 0x7755;
  tab[24884] = 0x871b;
  tab[24885] = 0x86db;
  tab[24886] = 0x867f;
  tab[24887] = 0x863f;
  tab[24888] = 0x8473;
  tab[24889] = 0x87ef;
  tab[24890] = 0x87b7;
  tab[24891] = 0x8745;
  tab[24892] = 0x9709;
  tab[24893] = 0x96c9;
  tab[24894] = 0x966d;
  tab[24895] = 0x962d;
  tab[24896] = 0x538f;
  tab[24897] = 0x57d5;
  tab[24898] = 0x579d;
  tab[24899] = 0x572b;
  tab[24900] = 0x66eb;
  tab[24901] = 0x66ab;
  tab[24902] = 0x664f;
  tab[24903] = 0x660f;
  tab[24904] = 0x684e;
  tab[24905] = 0x67d5;
  tab[24906] = 0x679d;
  tab[24907] = 0x672b;
  tab[24908] = 0x76eb;
  tab[24909] = 0x76ab;
  tab[24910] = 0x764f;
  tab[24911] = 0x760f;
  tab[24912] = 0x638f;
  tab[24913] = 0x67ef;
  tab[24914] = 0x67b7;
  tab[24915] = 0x6745;
  tab[24916] = 0x7709;
  tab[24917] = 0x76c9;
  tab[24918] = 0x766d;
  tab[24919] = 0x762d;
  tab[24920] = 0x7442;
  tab[24921] = 0x77ef;
  tab[24922] = 0x77b7;
  tab[24923] = 0x7745;
  tab[24924] = 0x8709;
  tab[24925] = 0x86c9;
  tab[24926] = 0x866d;
  tab[24927] = 0x862d;
  tab[24928] = 0x538f;
  tab[24929] = 0x57d5;
  tab[24930] = 0x579d;
  tab[24931] = 0x572b;
  tab[24932] = 0x66eb;
  tab[24933] = 0x66ab;
  tab[24934] = 0x664f;
  tab[24935] = 0x660f;
  tab[24936] = 0x684e;
  tab[24937] = 0x67d5;
  tab[24938] = 0x679d;
  tab[24939] = 0x672b;
  tab[24940] = 0x76eb;
  tab[24941] = 0x76ab;
  tab[24942] = 0x764f;
  tab[24943] = 0x760f;
  tab[24944] = 0x638f;
  tab[24945] = 0x67ef;
  tab[24946] = 0x67b7;
  tab[24947] = 0x6745;
  tab[24948] = 0x7709;
  tab[24949] = 0x76c9;
  tab[24950] = 0x766d;
  tab[24951] = 0x762d;
  tab[24952] = 0x7442;
  tab[24953] = 0x77ef;
  tab[24954] = 0x77b7;
  tab[24955] = 0x7745;
  tab[24956] = 0x8709;
  tab[24957] = 0x86c9;
  tab[24958] = 0x866d;
  tab[24959] = 0x862d;
  tab[24960] = 0x6317;
  tab[24961] = 0x7847;
  tab[24962] = 0x8838;
  tab[24963] = 0x8838;
  tab[24964] = 0x6311;
  tab[24965] = 0x7840;
  tab[24966] = 0x8830;
  tab[24967] = 0x8830;
  tab[24968] = 0x5311;
  tab[24969] = 0x6828;
  tab[24970] = 0x8828;
  tab[24971] = 0x5311;
  tab[24972] = 0x6828;
  tab[25088] = 0x6c4c;
  tab[25089] = 0x6c46;
  tab[25090] = 0x5c46;
  tab[25091] = 0x5c46;
  tab[25216] = 0x69f9;
  tab[25217] = 0x69d5;
  tab[25218] = 0x69cf;
  tab[25219] = 0x79f0;
  tab[25220] = 0x79e9;
  tab[25221] = 0x79e2;
  tab[25222] = 0x69c9;
  tab[25223] = 0x79db;
  tab[25344] = 0x4020;
  tab[25345] = 0x40f1;
  tab[25472] = 0x3142;
  tab[25473] = 0x3023;
  tab[25600] = 0x418f;
  tab[25601] = 0x518f;
  tab[25728] = 0x3333;
  tab[25729] = 0x3333;
  tab[25730] = 0x3333;
  tab[25731] = 0x42a9;
  tab[25732] = 0x42a9;
  tab[25733] = 0x42a9;
  tab[25734] = 0x434b;
  tab[25735] = 0x434b;
  tab[25736] = 0x434b;
  tab[25737] = 0x52b1;
  tab[25738] = 0x52b1;
  tab[25739] = 0x52b1;
  tab[25856] = 0x3799;
  tab[25984] = 0x52a9;
  tab[25985] = 0x4337;
  tab[25986] = 0x4799;
  tab[26112] = 0x5c30;
  tab[26113] = 0x6036;
  tab[26114] = 0x61b7;
  tab[26240] = 0x4118;
  tab[26368] = 0x5565;
  tab[26369] = 0x656a;
  tab[26496] = 0x206d;
  tab[26624] = 0x70b0;
  tab[26752] = 0x70cc;
  tab[26880] = 0x61e8;
  tab[27008] = 0x51ed;
  tab[27136] = 0x4046;
  tab[27137] = 0x403c;
  tab[27264] = 0x533e;
  tab[27265] = 0x5235;
  tab[27392] = 0x733e;
  tab[27393] = 0x633e;
  tab[27520] = 0x5aa5;
  tab[27521] = 0x7aa5;
  tab[27522] = 0x7add;
  tab[27523] = 0x6ac6;
  tab[27524] = 0x7abf;
  tab[27525] = 0x9aa5;
  tab[27526] = 0x9add;
  tab[27527] = 0x8ac6;
  tab[27528] = 0x7af7;
  tab[27529] = 0x9aae;
  tab[27530] = 0x9ae6;
  tab[27531] = 0x8ace;
  tab[27532] = 0x6afe;
  tab[27533] = 0x8ab7;
  tab[27534] = 0x8aef;
  tab[27535] = 0x7ad6;
  tab[27536] = 0x5b04;
  tab[27537] = 0x7b04;
  tab[27538] = 0x7b3c;
  tab[27539] = 0x6b25;
  tab[27540] = 0x7b1e;
  tab[27541] = 0x9b04;
  tab[27542] = 0x9b3c;
  tab[27543] = 0x8b25;
  tab[27544] = 0x7b56;
  tab[27545] = 0x9b0d;
  tab[27546] = 0x9b45;
  tab[27547] = 0x8b2d;
  tab[27548] = 0x6b5d;
  tab[27549] = 0x8b16;
  tab[27550] = 0x8b4e;
  tab[27551] = 0x7b35;
  tab[27552] = 0x5b63;
  tab[27553] = 0x7b63;
  tab[27554] = 0x7b9b;
  tab[27555] = 0x6b84;
  tab[27556] = 0x7b7d;
  tab[27557] = 0x9b63;
  tab[27558] = 0x9b9b;
  tab[27559] = 0x8b84;
  tab[27560] = 0x7bb5;
  tab[27561] = 0x9b6c;
  tab[27562] = 0x9ba4;
  tab[27563] = 0x8b8c;
  tab[27564] = 0x6bbc;
  tab[27565] = 0x8b75;
  tab[27566] = 0x8bad;
  tab[27567] = 0x7b94;
  tab[27568] = 0x49ff;
  tab[27569] = 0x69ff;
  tab[27570] = 0x6a30;
  tab[27571] = 0x5a1c;
  tab[27572] = 0x6a16;
  tab[27573] = 0x89ff;
  tab[27574] = 0x8a30;
  tab[27575] = 0x7a1c;
  tab[27576] = 0x6a47;
  tab[27577] = 0x8a07;
  tab[27578] = 0x8a38;
  tab[27579] = 0x7a23;
  tab[27580] = 0x5a4d;
  tab[27581] = 0x7a0f;
  tab[27582] = 0x7a40;
  tab[27583] = 0x6a2a;
  tab[27584] = 0x4a52;
  tab[27585] = 0x6a52;
  tab[27586] = 0x6a83;
  tab[27587] = 0x5a6f;
  tab[27588] = 0x6a69;
  tab[27589] = 0x8a52;
  tab[27590] = 0x8a83;
  tab[27591] = 0x7a6f;
  tab[27592] = 0x6a9a;
  tab[27593] = 0x8a5a;
  tab[27594] = 0x8a8b;
  tab[27595] = 0x7a76;
  tab[27596] = 0x5aa0;
  tab[27597] = 0x7a62;
  tab[27598] = 0x7a93;
  tab[27599] = 0x6a7d;
  tab[27600] = 0x4bc2;
  tab[27601] = 0x6bc2;
  tab[27602] = 0x6bf3;
  tab[27603] = 0x5bdf;
  tab[27604] = 0x6bd9;
  tab[27605] = 0x8bc2;
  tab[27606] = 0x8bf3;
  tab[27607] = 0x7bdf;
  tab[27608] = 0x6c0a;
  tab[27609] = 0x8bca;
  tab[27610] = 0x8bfb;
  tab[27611] = 0x7be6;
  tab[27612] = 0x5c10;
  tab[27613] = 0x7bd2;
  tab[27614] = 0x7c03;
  tab[27615] = 0x6bed;
  tab[27648] = 0x4528;
  tab[27649] = 0x5528;
  tab[27650] = 0x552e;
  tab[27651] = 0x6528;
  tab[27652] = 0x4533;
  tab[27653] = 0x5533;
  tab[27654] = 0x5539;
  tab[27655] = 0x6533;
  tab[27656] = 0x416b;
  tab[27657] = 0x5570;
  tab[27658] = 0x516b;
  tab[27659] = 0x6570;
  tab[27660] = 0x553e;
  tab[27661] = 0x653e;
  tab[27662] = 0x6545;
  tab[27663] = 0x753e;
  tab[27664] = 0x554b;
  tab[27665] = 0x654b;
  tab[27666] = 0x6552;
  tab[27667] = 0x754b;
  tab[27668] = 0x5558;
  tab[27669] = 0x6558;
  tab[27670] = 0x655f;
  tab[27671] = 0x7558;
  tab[27776] = 0x4169;
  tab[27777] = 0x4149;
  tab[27778] = 0x5208;
  tab[27779] = 0x61ca;
  tab[27904] = 0x53f1;
  tab[27905] = 0x5514;
  tab[27906] = 0x5519;
  tab[27907] = 0x750d;
  tab[27908] = 0x74fe;
  tab[27909] = 0x84fe;
  tab[27910] = 0x94ec;
  tab[28032] = 0x53f7;
  tab[28033] = 0x7506;
  tab[28034] = 0x94f5;
  tab[28160] = 0x749f;
  tab[28161] = 0x7498;
  tab[28162] = 0x7489;
  tab[28163] = 0x7482;
  tab[28288] = 0x40e5;
  tab[28289] = 0x41b5;
  tab[28290] = 0x64b0;
  tab[28416] = 0x94db;
  tab[28417] = 0x447b;
  tab[28544] = 0x74e4;
  tab[28545] = 0x84e4;
  tab[28546] = 0x94d2;
  tab[28547] = 0x4063;
  tab[28672] = 0x94bf;
  tab[28673] = 0x94b6;
  tab[28674] = 0x747b;
  tab[28800] = 0x302d;

tab
};
pub fn decode(inst: u32, ddi: &mut Inst) -> bool {
 for i in 0..ddi.ops.len() { ddi.ops[i] = Op::default(); }
 let mnem = classify(inst);
 ddi.mnem = mnem;
match a64_group(mnem) { InstGroup::Unknown=>return false,
InstGroup::UDF => {
let imm16: u32 = (inst>>0&0xffff) as u32;
ddi.ops[0] = opuimm(imm16);
}
InstGroup::ADCSBC => {
let sf: u32 = (inst>>31&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, sf);
ddi.ops[1] = opreggp(rn, sf);
ddi.ops[2] = opreggp(rm, sf);
}
InstGroup::ADDSUB_EXT => {
let sf: u32 = (inst>>31&0x1) as u32;
let s: u32 = (inst>>29&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let option: u32 = (inst>>13&0x7) as u32;
let imm3: u32 = (inst>>10&0x7) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggpmaysp(!s, rd, sf);
ddi.ops[1] = opreggpsp(rn, sf);
ddi.ops[2] = opreggpext(rm, (sf!=0&&(option&3)==3) as u32, option, imm3);
}
InstGroup::ADDSUB_IMM => {
let sf: u32 = (inst>>31&0x1) as u32;
let s: u32 = (inst>>29&0x1) as u32;
let shift: u32 = (inst>>22&0x3) as u32;
let imm12: u32 = (inst>>10&0xfff) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggpmaysp(!s, rd, sf);
ddi.ops[1] = opreggpsp(rn, sf);
ddi.ops[2] = opuimmshift(imm12, 0, shift*12);
}
InstGroup::ADDSUB_SHIFT => {
let sf: u32 = (inst>>31&0x1) as u32;
let shift: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let imm6: u32 = (inst>>10&0x3f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, sf);
ddi.ops[1] = opreggp(rn, sf);
ddi.ops[2] = opreggpext(rm, sf, shift+8, imm6);
}
InstGroup::ADR => {
let op: u32 = (inst>>31&0x1) as u32;
let immlo: u32 = (inst>>29&0x3) as u32;
let immhi: i32 = sext((inst>>5&0x7ffff) as i32 as i32, 19);
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, 1);
ddi.ops[1] = opreladdr(ddi, (((immhi as u32)<<2|immlo)<<(op*12)) as i32);
}
InstGroup::ANDOREOR_IMM => {
let sf: u32 = (inst>>31&0x1) as u32;
let opc: u32 = (inst>>29&0x3) as u32;
let n: u32 = (inst>>22&0x1) as u32;
let immr: u32 = (inst>>16&0x3f) as u32;
let imms: u32 = (inst>>10&0x3f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggpmaysp((opc<3) as u32, rd, sf);
ddi.ops[1] = opreggp(rn, sf);
ddi.ops[2] = opimmlogical(ddi, sf, n, immr, imms);
}
InstGroup::ANDOREOR_SHIFT => {
let sf: u32 = (inst>>31&0x1) as u32;
let shift: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let imm6: u32 = (inst>>10&0x3f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, sf);
ddi.ops[1] = opreggp(rn, sf);
ddi.ops[2] = opreggpext(rm, sf, shift+8, imm6);
}
InstGroup::SHIFTV => {
let sf: u32 = (inst>>31&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, sf);
ddi.ops[1] = opreggp(rn, sf);
ddi.ops[2] = opreggp(rm, sf);
}
InstGroup::MUL => {
let sf: u32 = (inst>>31&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let ra: u32 = (inst>>10&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, sf);
ddi.ops[1] = opreggp(rn, sf);
ddi.ops[2] = opreggp(rm, sf);
ddi.ops[3] = opreggp(ra, sf);
}
InstGroup::MULL => {
let sf: u32 = 1 as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let ra: u32 = (inst>>10&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, sf);
ddi.ops[1] = opreggp(rn, 0);
ddi.ops[2] = opreggp(rm, 0);
ddi.ops[3] = opreggp(ra, sf);
}
InstGroup::MULH => {
let sf: u32 = 1 as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, sf);
ddi.ops[1] = opreggp(rn, sf);
ddi.ops[2] = opreggp(rm, sf);
}
InstGroup::BCOND => {
let imm19: i32 = sext((inst>>5&0x7ffff) as i32 as i32, 19);
let bcond: u32 = (inst>>0&0xf) as u32;
ddi.ops[0] = opcond(bcond);
ddi.ops[1] = opreladdr(ddi, imm19<<2);
}
InstGroup::BRANCH => {
let imm26: i32 = sext((inst>>0&0x3ffffff) as i32 as i32, 26);
ddi.ops[0] = opreladdr(ddi, imm26<<2);
}
InstGroup::BFM => {
let sf: u32 = (inst>>31&0x1) as u32;
let immr: u32 = (inst>>16&0x3f) as u32;
let imms: u32 = (inst>>10&0x3f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, sf);
ddi.ops[1] = opreggp(rn, sf);
ddi.ops[2] = opimmsmall(immr);
ddi.ops[3] = opimmsmall(imms);
}
InstGroup::BRANCHREG => match mnem {
  InstKind::BR| InstKind::BRAAZ| InstKind::BRABZ| InstKind::BLR| InstKind::BLRAAZ| InstKind::BLRABZ| InstKind::RET
    =>{
let rn: u32 = (inst>>5&0x1f) as u32;
ddi.ops[0] = opreggp(rn, 1);
},
  InstKind::RETAA| InstKind::RETAB
    =>{
},
  InstKind::BRAA| InstKind::BRAB| InstKind::BLRAA| InstKind::BLRAB
    =>{
let rn: u32 = (inst>>5&0x1f) as u32;
let rm: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rn, 1);
ddi.ops[1] = opreggpsp(rm, 1);
},
  _ => unreachable!()
}
InstGroup::BRK => {
let imm16: u32 = (inst>>5&0xffff) as u32;
ddi.ops[0] = opuimm(imm16);
}
InstGroup::CBZ => {
let sf: u32 = (inst>>31&0x1) as u32;
let imm19: i32 = sext((inst>>5&0x7ffff) as i32 as i32, 19);
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, sf);
ddi.ops[1] = opreladdr(ddi, imm19<<2);
}
InstGroup::TBZ => {
let b5: u32 = (inst>>31&0x1) as u32;
let b40: u32 = (inst>>19&0x1f) as u32;
let imm14: i32 = sext((inst>>5&0x3fff) as i32 as i32, 14);
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, b5);
ddi.ops[1] = opimmsmall(b5<<5|b40);
ddi.ops[2] = opreladdr(ddi, imm14<<2);
}
InstGroup::CCMP_IMM => {
let sf: u32 = (inst>>31&0x1) as u32;
let imm5: u32 = (inst>>16&0x1f) as u32;
let cond: u32 = (inst>>12&0xf) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let nzcv: u32 = (inst>>0&0xf) as u32;
ddi.ops[0] = opreggp(rn, sf);
ddi.ops[1] = opimmsmall(imm5);
ddi.ops[2] = opimmsmall(nzcv);
ddi.ops[3] = opcond(cond);
}
InstGroup::CCMP_REG => {
let sf: u32 = (inst>>31&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let cond: u32 = (inst>>12&0xf) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let nzcv: u32 = (inst>>0&0xf) as u32;
ddi.ops[0] = opreggp(rn, sf);
ddi.ops[1] = opreggp(rm, sf);
ddi.ops[2] = opimmsmall(nzcv);
ddi.ops[3] = opcond(cond);
}
InstGroup::CLREX => {
let crm: u32 = (inst>>8&0xf) as u32;
ddi.ops[0] = opimmsmall(crm);
}
InstGroup::DSB => {
let crm: u32 = (inst>>8&0xf) as u32;
ddi.ops[0] = opimmsmall(crm);
}
InstGroup::HINT => {
let imm: u32 = (inst>>5&0x7f) as u32;
ddi.ops[0] = opuimm(imm);
}
InstGroup::HLT => {
let imm16: u32 = (inst>>5&0xffff) as u32;
ddi.ops[0] = opuimm(imm16);
}
InstGroup::SVC => {
let imm16: u32 = (inst>>5&0xffff) as u32;
ddi.ops[0] = opuimm(imm16);
}
InstGroup::DCPS => {
let imm16: u32 = (inst>>5&0xffff) as u32;
ddi.ops[0] = opuimm(imm16);
}
InstGroup::ERET => {
}
InstGroup::DRPS => {
}
InstGroup::CLZ => {
let sf: u32 = (inst>>31&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, sf);
ddi.ops[1] = opreggp(rn, sf);
}
InstGroup::MINMAX_IMM => match mnem {
  InstKind::SMAX_GP_IMM| InstKind::SMIN_GP_IMM
    =>{
let sf: u32 = (inst>>31&0x1) as u32;
let imm8: u32 = (inst>>10&0xff) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, sf);
ddi.ops[1] = opreggp(rn, sf);
ddi.ops[2] = opsimm(sext(imm8 as _, 8));
},
  InstKind::UMAX_GP_IMM| InstKind::UMIN_GP_IMM
    =>{
let sf: u32 = (inst>>31&0x1) as u32;
let imm8: u32 = (inst>>10&0xff) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, sf);
ddi.ops[1] = opreggp(rn, sf);
ddi.ops[2] = opuimm(imm8);
},
  _ => unreachable!()
}
InstGroup::MINMAX_REG => {
let sf: u32 = (inst>>31&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, sf);
ddi.ops[1] = opreggp(rn, sf);
ddi.ops[2] = opreggp(rm, sf);
}
InstGroup::CSEL => {
let sf: u32 = (inst>>31&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let cond: u32 = (inst>>12&0xf) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, sf);
ddi.ops[1] = opreggp(rn, sf);
ddi.ops[2] = opreggp(rm, sf);
ddi.ops[3] = opcond(cond);
}
InstGroup::EXTR => {
let sf: u32 = (inst>>31&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let imms: u32 = (inst>>10&0x3f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, sf);
ddi.ops[1] = opreggp(rn, sf);
ddi.ops[2] = opreggp(rm, sf);
ddi.ops[3] = opimmsmall(imms);
}
InstGroup::MOV => {
let sf: u32 = (inst>>31&0x1) as u32;
let hw: u32 = (inst>>21&0x3) as u32;
let imm16: u32 = (inst>>5&0xffff) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, sf);
ddi.ops[1] = opuimmshift(imm16, 0, hw*16);
}
InstGroup::SYS => match mnem {
  InstKind::SYS
    =>{
let sysreg: u32 = (inst>>5&0xffff) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opsysreg(sysreg);
ddi.ops[1] = opreggp(rt, 1);
},
  InstKind::SYSL
    =>{
let sysreg: u32 = (inst>>5&0xffff) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, 1);
ddi.ops[1] = opsysreg(sysreg);
},
  _ => unreachable!()
}
InstGroup::MSR_REG => match mnem {
  InstKind::MSR
    =>{
let sysreg: u32 = (inst>>5&0xffff) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opsysreg(sysreg);
ddi.ops[1] = opreggp(rt, 1);
},
  InstKind::MRS
    =>{
let sysreg: u32 = (inst>>5&0xffff) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, 1);
ddi.ops[1] = opsysreg(sysreg);
},
  _ => unreachable!()
}
InstGroup::MSR_IMM => match mnem {
  InstKind::MSR_UAO| InstKind::MSR_PAN| InstKind::MSR_SPSel| InstKind::MSR_SSBS| InstKind::MSR_DIT| InstKind::MSR_TCO| InstKind::MSR_DAIFSet| InstKind::MSR_DAIFClr
    =>{
let crm: u32 = (inst>>8&0xf) as u32;
ddi.ops[0] = opimmsmall(crm&15);
},
  InstKind::MSR_ALLINT| InstKind::MSR_PM
    =>{
let crm: u32 = (inst>>8&0xf) as u32;
ddi.ops[0] = opimmsmall(crm&1);
},
  _ => unreachable!()
}
InstGroup::REV => {
let sf: u32 = (inst>>31&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, sf);
ddi.ops[1] = opreggp(rn, sf);
}
InstGroup::DIV => {
let sf: u32 = (inst>>31&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, sf);
ddi.ops[1] = opreggp(rn, sf);
ddi.ops[2] = opreggp(rm, sf);
}
InstGroup::MEMOR => {
let size: u32 = (inst>>30&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, (size==3) as u32);
ddi.ops[1] = opmemuoff(rn, 0);
}
InstGroup::MEMX => match mnem {
  InstKind::STXRB| InstKind::STLXRB| InstKind::STXRH| InstKind::STLXRH| InstKind::STXRW| InstKind::STLXRW| InstKind::STXRX| InstKind::STLXRX
    =>{
let size: u32 = (inst>>30&0x3) as u32;
let rs: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rs, 0);
ddi.ops[1] = opreggp(rt, (size==3) as u32);
ddi.ops[2] = opmemsoff(rn, 0);
},
  InstKind::LDXRB| InstKind::LDAXRB| InstKind::LDXRH| InstKind::LDAXRH| InstKind::LDXRW| InstKind::LDAXRW| InstKind::LDXRX| InstKind::LDAXRX
    =>{
let size: u32 = (inst>>30&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, (size==3) as u32);
ddi.ops[1] = opmemsoff(rn, 0);
},
  InstKind::STXPW| InstKind::STLXPW| InstKind::STXPX| InstKind::STLXPX
    =>{
let size: u32 = (inst>>30&0x3) as u32;
let rs: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rs, 0);
ddi.ops[1] = opreggp(rt, (size==3) as u32);
ddi.ops[2] = opreggp(rt, (size==3) as u32);
ddi.ops[3] = opmemsoff(rn, 0);
},
  InstKind::LDXPW| InstKind::LDAXPW| InstKind::LDXPX| InstKind::LDAXPX
    =>{
let size: u32 = (inst>>30&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, (size==3) as u32);
ddi.ops[1] = opreggp(rt, (size==3) as u32);
ddi.ops[2] = opmemsoff(rn, 0);
},
  _ => unreachable!()
}
InstGroup::MEMNP => {
let opc: u32 = (inst>>30&0x3) as u32;
let imm7: i32 = sext((inst>>15&0x7f) as i32 as i32, 7);
let rt2: u32 = (inst>>10&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, (opc>0) as u32);
ddi.ops[1] = opreggp(rt2, (opc>0) as u32);
ddi.ops[2] = opmemsoff(rn, imm7<<(2+(opc>=2) as u32));
}
InstGroup::MEMP => match mnem {
  InstKind::STPW_POST| InstKind::LDPW_POST| InstKind::LDPSW_POST
    =>{
let opc: u32 = (inst>>30&0x3) as u32;
let imm7: i32 = sext((inst>>15&0x7f) as i32 as i32, 7);
let rt2: u32 = (inst>>10&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, (opc>0) as u32);
ddi.ops[1] = opreggp(rt2, (opc>0) as u32);
ddi.ops[2] = opmemsoffpost(rn, imm7<<2);
},
  InstKind::STPW| InstKind::LDPW| InstKind::LDPSW
    =>{
let opc: u32 = (inst>>30&0x3) as u32;
let imm7: i32 = sext((inst>>15&0x7f) as i32 as i32, 7);
let rt2: u32 = (inst>>10&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, (opc>0) as u32);
ddi.ops[1] = opreggp(rt2, (opc>0) as u32);
ddi.ops[2] = opmemsoff(rn, imm7<<2);
},
  InstKind::STPW_PRE| InstKind::LDPW_PRE| InstKind::LDPSW_PRE
    =>{
let opc: u32 = (inst>>30&0x3) as u32;
let imm7: i32 = sext((inst>>15&0x7f) as i32 as i32, 7);
let rt2: u32 = (inst>>10&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, (opc>0) as u32);
ddi.ops[1] = opreggp(rt2, (opc>0) as u32);
ddi.ops[2] = opmemsoffpre(rn, imm7<<2);
},
  InstKind::STGP_POST
    =>{
let opc: u32 = (inst>>30&0x3) as u32;
let imm7: i32 = sext((inst>>15&0x7f) as i32 as i32, 7);
let rt2: u32 = (inst>>10&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, (opc>0) as u32);
ddi.ops[1] = opreggp(rt2, (opc>0) as u32);
ddi.ops[2] = opmemsoffpost(rn, imm7<<4);
},
  InstKind::STGP
    =>{
let opc: u32 = (inst>>30&0x3) as u32;
let imm7: i32 = sext((inst>>15&0x7f) as i32 as i32, 7);
let rt2: u32 = (inst>>10&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, (opc>0) as u32);
ddi.ops[1] = opreggp(rt2, (opc>0) as u32);
ddi.ops[2] = opmemsoff(rn, imm7<<4);
},
  InstKind::STGP_PRE
    =>{
let opc: u32 = (inst>>30&0x3) as u32;
let imm7: i32 = sext((inst>>15&0x7f) as i32 as i32, 7);
let rt2: u32 = (inst>>10&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, (opc>0) as u32);
ddi.ops[1] = opreggp(rt2, (opc>0) as u32);
ddi.ops[2] = opmemsoffpre(rn, imm7<<4);
},
  InstKind::STPX_POST| InstKind::LDPX_POST
    =>{
let opc: u32 = (inst>>30&0x3) as u32;
let imm7: i32 = sext((inst>>15&0x7f) as i32 as i32, 7);
let rt2: u32 = (inst>>10&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, (opc>0) as u32);
ddi.ops[1] = opreggp(rt2, (opc>0) as u32);
ddi.ops[2] = opmemsoffpost(rn, imm7<<3);
},
  InstKind::STPX| InstKind::LDPX
    =>{
let opc: u32 = (inst>>30&0x3) as u32;
let imm7: i32 = sext((inst>>15&0x7f) as i32 as i32, 7);
let rt2: u32 = (inst>>10&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, (opc>0) as u32);
ddi.ops[1] = opreggp(rt2, (opc>0) as u32);
ddi.ops[2] = opmemsoff(rn, imm7<<3);
},
  InstKind::STPX_PRE| InstKind::LDPX_PRE
    =>{
let opc: u32 = (inst>>30&0x3) as u32;
let imm7: i32 = sext((inst>>15&0x7f) as i32 as i32, 7);
let rt2: u32 = (inst>>10&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, (opc>0) as u32);
ddi.ops[1] = opreggp(rt2, (opc>0) as u32);
ddi.ops[2] = opmemsoffpre(rn, imm7<<3);
},
  _ => unreachable!()
}
InstGroup::MEMU => match mnem {
  InstKind::STURB| InstKind::STTRB| InstKind::LDURB| InstKind::LDTRB| InstKind::LDURSB| InstKind::LDTRSB| InstKind::LDURSBW| InstKind::LDTRSBW| InstKind::STURH| InstKind::STTRH| InstKind::LDURH| InstKind::LDTRH| InstKind::LDURSH| InstKind::LDTRSH| InstKind::LDURSHW| InstKind::LDTRSHW| InstKind::STURW| InstKind::STTRW| InstKind::LDURW| InstKind::LDTRW| InstKind::LDURSW| InstKind::LDTRSW| InstKind::STURX| InstKind::STTRX| InstKind::LDURX| InstKind::LDTRX| InstKind::PRFUM
    =>{
let size: u32 = (inst>>30&0x3) as u32;
let opc: u32 = (inst>>22&0x3) as u32;
let imm9: i32 = sext((inst>>12&0x1ff) as i32 as i32, 9);
let op2: u32 = (inst>>10&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggpprf((op2==0&&opc==2&&size==3) as u32, rt, (size>2||opc==2) as u32);
ddi.ops[1] = opmemsoff(rn, imm9);
},
  InstKind::STRB_POST| InstKind::LDRB_POST| InstKind::LDRSB_POST| InstKind::LDRSBW_POST| InstKind::STRH_POST| InstKind::LDRH_POST| InstKind::LDRSH_POST| InstKind::LDRSHW_POST| InstKind::STRW_POST| InstKind::LDRW_POST| InstKind::LDRSW_POST| InstKind::STRX_POST| InstKind::LDRX_POST
    =>{
let size: u32 = (inst>>30&0x3) as u32;
let opc: u32 = (inst>>22&0x3) as u32;
let imm9: i32 = sext((inst>>12&0x1ff) as i32 as i32, 9);
let op2: u32 = (inst>>10&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggpprf((op2==0&&opc==2&&size==3) as u32, rt, (size>2||opc==2) as u32);
ddi.ops[1] = opmemsoffpost(rn, imm9);
},
  InstKind::STRB_PRE| InstKind::LDRB_PRE| InstKind::LDRSB_PRE| InstKind::LDRSBW_PRE| InstKind::STRH_PRE| InstKind::LDRH_PRE| InstKind::LDRSH_PRE| InstKind::LDRSHW_PRE| InstKind::STRW_PRE| InstKind::LDRW_PRE| InstKind::LDRSW_PRE| InstKind::STRX_PRE| InstKind::LDRX_PRE
    =>{
let size: u32 = (inst>>30&0x3) as u32;
let opc: u32 = (inst>>22&0x3) as u32;
let imm9: i32 = sext((inst>>12&0x1ff) as i32 as i32, 9);
let op2: u32 = (inst>>10&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggpprf((op2==0&&opc==2&&size==3) as u32, rt, (size>2||opc==2) as u32);
ddi.ops[1] = opmemsoffpre(rn, imm9);
},
  _ => unreachable!()
}
InstGroup::MEM_IMM => {
let size: u32 = (inst>>30&0x3) as u32;
let opc: u32 = (inst>>22&0x3) as u32;
let imm12: u32 = (inst>>10&0xfff) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggpprf((opc==2&&size==3) as u32, rt, (size>2||opc==2) as u32);
ddi.ops[1] = opmemuoff(rn, imm12<<size);
}
InstGroup::MEM_REG => {
let size: u32 = (inst>>30&0x3) as u32;
let opc: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let option: u32 = (inst>>13&0x7) as u32;
let sc: u32 = (inst>>12&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggpprf((opc==2&&size==3) as u32, rt, (size>2||opc==2) as u32);
ddi.ops[1] = opmemreg(rn, rm, option, sc, size);
}
InstGroup::MEM_LIT => {
let opc: u32 = (inst>>30&0x3) as u32;
let imm19: i32 = sext((inst>>5&0x7ffff) as i32 as i32, 19);
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggpprf((opc==3) as u32, rt, (opc>0) as u32);
ddi.ops[1] = opreladdr(ddi, imm19<<2);
}
InstGroup::MEMP_FP => match mnem {
  InstKind::STNP_FP| InstKind::LDNP_FP| InstKind::STP_FP| InstKind::LDP_FP
    =>{
let opc: u32 = (inst>>30&0x3) as u32;
let imm7: i32 = sext((inst>>15&0x7f) as i32 as i32, 7);
let rt2: u32 = (inst>>10&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rt, opc+2);
ddi.ops[1] = opregfp(rt2, opc+2);
ddi.ops[2] = opmemsoff(rn, imm7<<(opc+2));
},
  InstKind::STP_FP_POST| InstKind::LDP_FP_POST
    =>{
let opc: u32 = (inst>>30&0x3) as u32;
let imm7: i32 = sext((inst>>15&0x7f) as i32 as i32, 7);
let rt2: u32 = (inst>>10&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rt, opc+2);
ddi.ops[1] = opregfp(rt2, opc+2);
ddi.ops[2] = opmemsoffpost(rn, imm7<<(opc+2));
},
  InstKind::STP_FP_PRE| InstKind::LDP_FP_PRE
    =>{
let opc: u32 = (inst>>30&0x3) as u32;
let imm7: i32 = sext((inst>>15&0x7f) as i32 as i32, 7);
let rt2: u32 = (inst>>10&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rt, opc+2);
ddi.ops[1] = opregfp(rt2, opc+2);
ddi.ops[2] = opmemsoffpre(rn, imm7<<(opc+2));
},
  _ => unreachable!()
}
InstGroup::MEMU_FP => match mnem {
  InstKind::STUR_FP| InstKind::LDUR_FP
    =>{
let size: u32 = (inst>>30&0x3) as u32;
let opc: u32 = (inst>>22&0x3) as u32;
let imm9: i32 = sext((inst>>12&0x1ff) as i32 as i32, 9);
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rt, size+(opc<<1&4));
ddi.ops[1] = opmemsoff(rn, imm9);
},
  InstKind::STR_FP_POST| InstKind::LDR_FP_POST
    =>{
let size: u32 = (inst>>30&0x3) as u32;
let opc: u32 = (inst>>22&0x3) as u32;
let imm9: i32 = sext((inst>>12&0x1ff) as i32 as i32, 9);
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rt, size+(opc<<1&4));
ddi.ops[1] = opmemsoffpost(rn, imm9);
},
  InstKind::STR_FP_PRE| InstKind::LDR_FP_PRE
    =>{
let size: u32 = (inst>>30&0x3) as u32;
let opc: u32 = (inst>>22&0x3) as u32;
let imm9: i32 = sext((inst>>12&0x1ff) as i32 as i32, 9);
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rt, size+(opc<<1&4));
ddi.ops[1] = opmemsoffpre(rn, imm9);
},
  _ => unreachable!()
}
InstGroup::MEM_IMM_FP => {
let size: u32 = (inst>>30&0x3) as u32;
let opc: u32 = (inst>>22&0x3) as u32;
let imm12: u32 = (inst>>10&0xfff) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rt, size+(opc<<1&4));
ddi.ops[1] = opmemuoff(rn, imm12<<(size+(opc<<1&4)));
}
InstGroup::MEM_REG_FP => {
let size: u32 = (inst>>30&0x3) as u32;
let opc: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let option: u32 = (inst>>13&0x7) as u32;
let sc: u32 = (inst>>12&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rt, size+(opc<<1&4));
ddi.ops[1] = opmemreg(rn, rm, option, sc, size+(opc<<1&4));
}
InstGroup::MEM_LIT_FP => {
let opc: u32 = (inst>>30&0x3) as u32;
let imm19: i32 = sext((inst>>5&0x7ffff) as i32 as i32, 19);
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rt, opc+2);
ddi.ops[1] = opreladdr(ddi, imm19<<2);
}
InstGroup::MEMSIMD_MULT => {
let q: u32 = (inst>>30&0x1) as u32;
let opcode: u32 = (inst>>12&0xf) as u32;
let size: u32 = (inst>>10&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvtbl(rt, size, q, 
if opcode & 1 != 0 {
    1
} else {
    4 - (opcode >> 2)
}
        );
ddi.ops[1] = opmemsoff(rn, 0);
}
InstGroup::MEMSIMD_MULT_POST => match mnem {
  InstKind::ST4_POST| InstKind::ST1_4_POST| InstKind::LD4_POST| InstKind::LD1_4_POST
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let size: u32 = (inst>>10&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvtbl(rt, size, q, 4);
ddi.ops[1] = opmemregsimdpost(rn, rm, 4<<(q+3));
},
  InstKind::ST3_POST| InstKind::ST1_3_POST| InstKind::LD3_POST| InstKind::LD1_3_POST
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let size: u32 = (inst>>10&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvtbl(rt, size, q, 3);
ddi.ops[1] = opmemregsimdpost(rn, rm, 3<<(q+3));
},
  InstKind::ST1_1_POST| InstKind::LD1_1_POST
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let size: u32 = (inst>>10&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvtbl(rt, size, q, 1);
ddi.ops[1] = opmemregsimdpost(rn, rm, 1<<(q+3));
},
  InstKind::ST2_POST| InstKind::ST1_2_POST| InstKind::LD2_POST| InstKind::LD1_2_POST
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let size: u32 = (inst>>10&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvtbl(rt, size, q, 2);
ddi.ops[1] = opmemregsimdpost(rn, rm, 2<<(q+3));
},
  _ => unreachable!()
}
InstGroup::MEMSIMD_SINGLE => match mnem {
  InstKind::ST1B| InstKind::ST1H| InstKind::ST1S| InstKind::ST1D| InstKind::LD1B| InstKind::LD1H| InstKind::LD1S| InstKind::LD1D
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let opc: u32 = (inst>>13&0x7) as u32;
let s: u32 = (inst>>12&0x1) as u32;
let size: u32 = (inst>>10&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvtblidx(rt, (opc>>1)+(if opc >=4 { size } else { 0 }), (q<<3|s<<2|size) >> ((opc>>1)+(if opc >=4 { size } else { 0 })), 1);
ddi.ops[1] = opmemsoff(rn, 0);
},
  InstKind::ST3B| InstKind::ST3H| InstKind::ST3S| InstKind::ST3D| InstKind::LD3B| InstKind::LD3H| InstKind::LD3S| InstKind::LD3D
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let opc: u32 = (inst>>13&0x7) as u32;
let s: u32 = (inst>>12&0x1) as u32;
let size: u32 = (inst>>10&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvtblidx(rt, (opc>>1)+(if opc >=4 { size } else { 0 }), (q<<3|s<<2|size) >> ((opc>>1)+(if opc >=4 { size } else { 0 })), 3);
ddi.ops[1] = opmemsoff(rn, 0);
},
  InstKind::ST2B| InstKind::ST2H| InstKind::ST2S| InstKind::ST2D| InstKind::LD2B| InstKind::LD2H| InstKind::LD2S| InstKind::LD2D
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let opc: u32 = (inst>>13&0x7) as u32;
let s: u32 = (inst>>12&0x1) as u32;
let size: u32 = (inst>>10&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvtblidx(rt, (opc>>1)+(if opc >=4 { size } else { 0 }), (q<<3|s<<2|size) >> ((opc>>1)+(if opc >=4 { size } else { 0 })), 2);
ddi.ops[1] = opmemsoff(rn, 0);
},
  InstKind::ST4B| InstKind::ST4H| InstKind::ST4S| InstKind::ST4D| InstKind::LD4B| InstKind::LD4H| InstKind::LD4S| InstKind::LD4D
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let opc: u32 = (inst>>13&0x7) as u32;
let s: u32 = (inst>>12&0x1) as u32;
let size: u32 = (inst>>10&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvtblidx(rt, (opc>>1)+(if opc >=4 { size } else { 0 }), (q<<3|s<<2|size) >> ((opc>>1)+(if opc >=4 { size } else { 0 })), 4);
ddi.ops[1] = opmemsoff(rn, 0);
},
  _ => unreachable!()
}
InstGroup::MEMSIMD_SINGLE_POST => match mnem {
  InstKind::ST1B_POST| InstKind::ST1H_POST| InstKind::ST1S_POST| InstKind::ST1D_POST| InstKind::LD1B_POST| InstKind::LD1H_POST| InstKind::LD1S_POST| InstKind::LD1D_POST
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let opc: u32 = (inst>>13&0x7) as u32;
let s: u32 = (inst>>12&0x1) as u32;
let size: u32 = (inst>>10&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvtblidx(rt, (opc>>1)+(if opc >=4 { size } else { 0 }), (q<<3|s<<2|size) >> ((opc>>1)+(if opc >=4 { size } else { 0 })), 1);
ddi.ops[1] = opmemregsimdpost(rn, rm, 1 << ((opc>>1)+(if opc >=4 { size } else { 0 })));
},
  InstKind::ST3B_POST| InstKind::ST3H_POST| InstKind::ST3S_POST| InstKind::ST3D_POST| InstKind::LD3B_POST| InstKind::LD3H_POST| InstKind::LD3S_POST| InstKind::LD3D_POST
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let opc: u32 = (inst>>13&0x7) as u32;
let s: u32 = (inst>>12&0x1) as u32;
let size: u32 = (inst>>10&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvtblidx(rt, (opc>>1)+(if opc >=4 { size } else { 0 }), (q<<3|s<<2|size) >> ((opc>>1)+(if opc >=4 { size } else { 0 })), 3);
ddi.ops[1] = opmemregsimdpost(rn, rm, 3 << ((opc>>1)+(if opc >=4 { size } else { 0 })));
},
  InstKind::ST2B_POST| InstKind::ST2H_POST| InstKind::ST2S_POST| InstKind::ST2D_POST| InstKind::LD2B_POST| InstKind::LD2H_POST| InstKind::LD2S_POST| InstKind::LD2D_POST
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let opc: u32 = (inst>>13&0x7) as u32;
let s: u32 = (inst>>12&0x1) as u32;
let size: u32 = (inst>>10&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvtblidx(rt, (opc>>1)+(if opc >=4 { size } else { 0 }), (q<<3|s<<2|size) >> ((opc>>1)+(if opc >=4 { size } else { 0 })), 2);
ddi.ops[1] = opmemregsimdpost(rn, rm, 2 << ((opc>>1)+(if opc >=4 { size } else { 0 })));
},
  InstKind::ST4B_POST| InstKind::ST4H_POST| InstKind::ST4S_POST| InstKind::ST4D_POST| InstKind::LD4B_POST| InstKind::LD4H_POST| InstKind::LD4S_POST| InstKind::LD4D_POST
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let opc: u32 = (inst>>13&0x7) as u32;
let s: u32 = (inst>>12&0x1) as u32;
let size: u32 = (inst>>10&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvtblidx(rt, (opc>>1)+(if opc >=4 { size } else { 0 }), (q<<3|s<<2|size) >> ((opc>>1)+(if opc >=4 { size } else { 0 })), 4);
ddi.ops[1] = opmemregsimdpost(rn, rm, 4 << ((opc>>1)+(if opc >=4 { size } else { 0 })));
},
  _ => unreachable!()
}
InstGroup::MEMSIMD_REP => match mnem {
  InstKind::LD1R
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>10&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvtbl(rt, size, q, 1);
ddi.ops[1] = opmemsoff(rn, 0);
},
  InstKind::LD3R
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>10&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvtbl(rt, size, q, 3);
ddi.ops[1] = opmemsoff(rn, 0);
},
  InstKind::LD2R
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>10&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvtbl(rt, size, q, 2);
ddi.ops[1] = opmemsoff(rn, 0);
},
  InstKind::LD4R
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>10&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvtbl(rt, size, q, 4);
ddi.ops[1] = opmemsoff(rn, 0);
},
  _ => unreachable!()
}
InstGroup::MEMSIMD_REP_POST => match mnem {
  InstKind::LD1R_POST
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let size: u32 = (inst>>10&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvtbl(rt, size, q, 1);
ddi.ops[1] = opmemregsimdpost(rn, rm, 1<<size);
},
  InstKind::LD3R_POST
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let size: u32 = (inst>>10&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvtbl(rt, size, q, 3);
ddi.ops[1] = opmemregsimdpost(rn, rm, 3<<size);
},
  InstKind::LD2R_POST
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let size: u32 = (inst>>10&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvtbl(rt, size, q, 2);
ddi.ops[1] = opmemregsimdpost(rn, rm, 2<<size);
},
  InstKind::LD4R_POST
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let size: u32 = (inst>>10&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvtbl(rt, size, q, 4);
ddi.ops[1] = opmemregsimdpost(rn, rm, 4<<size);
},
  _ => unreachable!()
}
InstGroup::FCVT_TOFIXED => {
let sf: u32 = (inst>>31&0x1) as u32;
let ftype: u32 = (inst>>22&0x3) as u32;
let scale: u32 = (inst>>10&0x3f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, sf);
ddi.ops[1] = opregfp(rn, ftype^2);
ddi.ops[2] = opimmsmall(64-scale);
}
InstGroup::FCVT_FROMFIXED => {
let sf: u32 = (inst>>31&0x1) as u32;
let ftype: u32 = (inst>>22&0x3) as u32;
let scale: u32 = (inst>>10&0x3f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, ftype^2);
ddi.ops[1] = opreggp(rn, sf);
ddi.ops[2] = opimmsmall(64-scale);
}
InstGroup::FCVT_TOINT => {
let sf: u32 = (inst>>31&0x1) as u32;
let ftype: u32 = (inst>>22&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, sf);
ddi.ops[1] = opregfp(rn, ftype^2);
}
InstGroup::FCVT_FROMINT => {
let sf: u32 = (inst>>31&0x1) as u32;
let ftype: u32 = (inst>>22&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, ftype^2);
ddi.ops[1] = opreggp(rn, sf);
}
InstGroup::FMOV_TOGP => match mnem {
  InstKind::FMOV_TOGP| InstKind::FMOV_TOGP_FP16
    =>{
let sf: u32 = (inst>>31&0x1) as u32;
let ftype: u32 = (inst>>22&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, sf);
ddi.ops[1] = opregfp(rn, ftype^2);
},
  InstKind::FMOV_TOGP_HIGH
    =>{
let sf: u32 = (inst>>31&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, sf);
ddi.ops[1] = opregvidx(rn, 3, 1);
},
  _ => unreachable!()
}
InstGroup::FMOV_FROMGP => match mnem {
  InstKind::FMOV_FROM| InstKind::FMOV_FROM_FP16
    =>{
let sf: u32 = (inst>>31&0x1) as u32;
let ftype: u32 = (inst>>22&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, ftype^2);
ddi.ops[1] = opreggp(rn, sf);
},
  InstKind::FMOV_FROM_HIGH
    =>{
let sf: u32 = (inst>>31&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvidx(rd, 3, 1);
ddi.ops[1] = opreggp(rn, sf);
},
  _ => unreachable!()
}
InstGroup::FJCVTZS => {
let sf: u32 = 0 as u32;
let ftype: u32 = 1 as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, sf);
ddi.ops[1] = opregfp(rn, ftype^2);
}
InstGroup::FCVT_FP => {
let ftype: u32 = (inst>>22&0x3) as u32;
let opc: u32 = (inst>>15&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, if opc==2{1}else{opc^2});
ddi.ops[1] = opregfp(rn, (if opc == 2 { 2 } else { ftype^2 }));
}
InstGroup::FRINT => {
let ftype: u32 = (inst>>22&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, ftype^2);
ddi.ops[1] = opregfp(rn, ftype^2);
}
InstGroup::FRINTTS => {
let ftype: u32 = (inst>>22&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, ftype^2);
ddi.ops[1] = opregfp(rn, ftype^2);
}
InstGroup::FARITH1 => {
let ftype: u32 = (inst>>22&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, ftype^2);
ddi.ops[1] = opregfp(rn, ftype^2);
}
InstGroup::FMOV_IMM => {
let ftype: u32 = (inst>>22&0x3) as u32;
let imm8: u32 = (inst>>13&0xff) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, ftype^2);
ddi.ops[1] = opimmfloat(ddi, imm8);
}
InstGroup::FARITH2 => {
let ftype: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, ftype^2);
ddi.ops[1] = opregfp(rn, ftype^2);
ddi.ops[2] = opregfp(rm, ftype^2);
}
InstGroup::FCMP => match mnem {
  InstKind::FCMP| InstKind::FCMPE| InstKind::FCMP_FP16| InstKind::FCMPE_FP16
    =>{
let ftype: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
ddi.ops[0] = opregfp(rn, ftype^2);
ddi.ops[1] = opregfp(rm, ftype^2);
},
  InstKind::FCMP_ZERO| InstKind::FCMPE_ZERO| InstKind::FCMP_FP16_ZERO| InstKind::FCMPE_FP16_ZERO
    =>{
let ftype: u32 = (inst>>22&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
ddi.ops[0] = opregfp(rn, ftype^2);
ddi.ops[1] = opimmfloatzero(ddi);
},
  _ => unreachable!()
}
InstGroup::FCCMP => {
let ftype: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let cond: u32 = (inst>>12&0xf) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let nzcv: u32 = (inst>>0&0xf) as u32;
ddi.ops[0] = opregfp(rn, ftype^2);
ddi.ops[1] = opregfp(rm, ftype^2);
ddi.ops[2] = opimmsmall(nzcv);
ddi.ops[3] = opcond(cond);
}
InstGroup::FCSEL => {
let ftype: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let cond: u32 = (inst>>12&0xf) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, ftype^2);
ddi.ops[1] = opregfp(rn, ftype^2);
ddi.ops[2] = opregfp(rm, ftype^2);
ddi.ops[3] = opcond(cond);
}
InstGroup::FMADD => {
let ftype: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let ra: u32 = (inst>>10&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, ftype^2);
ddi.ops[1] = opregfp(rn, ftype^2);
ddi.ops[2] = opregfp(rm, ftype^2);
ddi.ops[3] = opregfp(ra, ftype^2);
}
InstGroup::DUP_SCALAR => {
let imm5: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, ctz(imm5));
ddi.ops[1] = opregvidx(rn, ctz(imm5), imm5>>(ctz(imm5)+1));
}
InstGroup::DUP_VEC => match mnem {
  InstKind::DUP_ELEM
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let imm5: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, ctz(imm5), q);
ddi.ops[1] = opregvidx(rn, ctz(imm5), imm5>>(ctz(imm5)+1));
},
  InstKind::DUP_GP
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let imm5: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, ctz(imm5), q);
ddi.ops[1] = opreggp(rn, !(imm5&7));
},
  _ => unreachable!()
}
InstGroup::INS => match mnem {
  InstKind::INS_GP
    =>{
let imm5: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvidx(rd, ctz(imm5), imm5>>(ctz(imm5)+1));
ddi.ops[1] = opreggp(rn, !(imm5&7));
},
  InstKind::INS_ELEM
    =>{
let imm5: u32 = (inst>>16&0x1f) as u32;
let imm4: u32 = (inst>>11&0xf) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvidx(rd, ctz(imm5), imm5>>(ctz(imm5)+1));
ddi.ops[1] = opregvidx(rn, ctz(imm5), imm4>>ctz(imm5));
},
  _ => unreachable!()
}
InstGroup::MOV_TOGP => {
let q: u32 = (inst>>30&0x1) as u32;
let imm5: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, q);
ddi.ops[1] = opregvidx(rn, ctz(imm5), imm5>>(ctz(imm5)+1));
}
InstGroup::TBL => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = 0 as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let len: u32 = (inst>>13&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvtbl(rn, 0, 1, len+1);
ddi.ops[2] = opregvec(rm, size, q);
}
InstGroup::ZIP => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opregvec(rm, size, q);
}
InstGroup::EXT => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = 0 as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let imm4: u32 = (inst>>11&0xf) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opregvec(rm, size, q);
ddi.ops[3] = opimmsmall(imm4);
}
InstGroup::HADDSUB_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opregvec(rm, size, q);
}
InstGroup::QADDSUB_SCALAR => {
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, size);
ddi.ops[1] = opregfp(rn, size);
ddi.ops[2] = opregfp(rm, size);
}
InstGroup::QADDSUB_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opregvec(rm, size, q);
}
InstGroup::CMGT_SCALAR => {
let size: u32 = 3 as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, size);
ddi.ops[1] = opregfp(rn, size);
ddi.ops[2] = opregfp(rm, size);
}
InstGroup::CMGT_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opregvec(rm, size, q);
}
InstGroup::CMEQ_SCALAR => {
let size: u32 = 3 as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, size);
ddi.ops[1] = opregfp(rn, size);
ddi.ops[2] = opregfp(rm, size);
}
InstGroup::CMEQ_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opregvec(rm, size, q);
}
InstGroup::CMZERO_SCALAR => {
let size: u32 = 3 as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, size);
ddi.ops[1] = opregfp(rn, size);
ddi.ops[2] = opimmsmall(0);
}
InstGroup::CMZERO_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opimmsmall(0);
}
InstGroup::ARITH1_SCALAR => {
let size: u32 = (inst>>22&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, size);
ddi.ops[1] = opregfp(rn, size);
}
InstGroup::ARITH1_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvec(rn, size, q);
}
InstGroup::ADDLP_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size+1, q);
ddi.ops[1] = opregvec(rn, size, q);
}
InstGroup::CLZ_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvec(rn, size, q);
}
InstGroup::BIT_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 0, q);
ddi.ops[1] = opregvec(rn, 0, q);
}
InstGroup::REV_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvec(rn, size, q);
}
InstGroup::XTN_SCALAR => {
let size: u32 = (inst>>22&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, size);
ddi.ops[1] = opregfp(rn, size+1);
}
InstGroup::XTN_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvec(rn, size+1, 1);
}
InstGroup::SHL_REG_SCALAR => {
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, size);
ddi.ops[1] = opregfp(rn, size);
ddi.ops[2] = opregfp(rm, size);
}
InstGroup::SHL_REG_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opregvec(rm, size, q);
}
InstGroup::MINMAX_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opregvec(rm, size, q);
}
InstGroup::ABD_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opregvec(rm, size, q);
}
InstGroup::ADDSUB_SCALAR => {
let size: u32 = 3 as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, size);
ddi.ops[1] = opregfp(rn, size);
ddi.ops[2] = opregfp(rm, size);
}
InstGroup::ADDSUB_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opregvec(rm, size, q);
}
InstGroup::ADDP_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opregvec(rm, size, q);
}
InstGroup::MUL_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opregvec(rm, size, q);
}
InstGroup::SQDMULH_SCALAR => {
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, size);
ddi.ops[1] = opregfp(rn, size);
ddi.ops[2] = opregfp(rm, size);
}
InstGroup::SQDMULH_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opregvec(rm, size, q);
}
InstGroup::FMINMAX_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let sz: u32 = (inst>>22&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, sz+2, q);
ddi.ops[1] = opregvec(rn, sz+2, q);
ddi.ops[2] = opregvec(rm, sz+2, q);
}
InstGroup::FCMP_REG_SCALAR => {
let sz: u32 = (inst>>22&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, sz+2);
ddi.ops[1] = opregfp(rn, sz+2);
ddi.ops[2] = opregfp(rm, sz+2);
}
InstGroup::FCMP_ZERO_SCALAR => {
let sz: u32 = (inst>>22&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, sz+2);
ddi.ops[1] = opregfp(rn, sz+2);
ddi.ops[2] = opimmfloatzero(ddi);
}
InstGroup::FCMP_REG_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let sz: u32 = (inst>>22&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, sz+2, q);
ddi.ops[1] = opregvec(rn, sz+2, q);
ddi.ops[2] = opregvec(rm, sz+2, q);
}
InstGroup::FCMP_ZERO_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let sz: u32 = (inst>>22&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, sz+2, q);
ddi.ops[1] = opregvec(rn, sz+2, q);
ddi.ops[2] = opimmfloatzero(ddi);
}
InstGroup::FARITH1_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let sz: u32 = (inst>>22&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, sz+2, q);
ddi.ops[1] = opregvec(rn, sz+2, q);
}
InstGroup::FABD_SCALAR => {
let sz: u32 = (inst>>22&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, sz+2);
ddi.ops[1] = opregfp(rn, sz+2);
ddi.ops[2] = opregfp(rm, sz+2);
}
InstGroup::FADDSUB_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let sz: u32 = (inst>>22&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, sz+2, q);
ddi.ops[1] = opregvec(rn, sz+2, q);
ddi.ops[2] = opregvec(rm, sz+2, q);
}
InstGroup::FRECP_SCALAR => {
let sz: u32 = (inst>>22&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, sz+2);
ddi.ops[1] = opregfp(rn, sz+2);
}
InstGroup::FRECP_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvec(rn, size, q);
}
InstGroup::FRECP_STEP_SCALAR => {
let sz: u32 = (inst>>22&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, sz+2);
ddi.ops[1] = opregfp(rn, sz+2);
ddi.ops[2] = opregfp(rm, sz+2);
}
InstGroup::FRECP_STEP_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let sz: u32 = (inst>>22&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, sz+2, q);
ddi.ops[1] = opregvec(rn, sz+2, q);
ddi.ops[2] = opregvec(rm, sz+2, q);
}
InstGroup::FMULX_SCALAR => {
let sz: u32 = (inst>>22&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, sz+2);
ddi.ops[1] = opregfp(rn, sz+2);
ddi.ops[2] = opregfp(rm, sz+2);
}
InstGroup::FMUL_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let sz: u32 = (inst>>22&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, sz+2, q);
ddi.ops[1] = opregvec(rn, sz+2, q);
ddi.ops[2] = opregvec(rm, sz+2, q);
}
InstGroup::FMLA_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let sz: u32 = (inst>>22&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, sz+2, q);
ddi.ops[1] = opregvec(rn, sz+2, q);
ddi.ops[2] = opregvec(rm, sz+2, q);
}
InstGroup::FDIV_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let sz: u32 = (inst>>22&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, sz+2, q);
ddi.ops[1] = opregvec(rn, sz+2, q);
ddi.ops[2] = opregvec(rm, sz+2, q);
}
InstGroup::FP16_3REG_SCALAR => {
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, 1);
ddi.ops[1] = opregfp(rn, 1);
ddi.ops[2] = opregfp(rm, 1);
}
InstGroup::FP16_3REG_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 1, q);
ddi.ops[1] = opregvec(rn, 1, q);
ddi.ops[2] = opregvec(rm, 1, q);
}
InstGroup::FP16_2REG_SCALAR => match mnem {
  InstKind::FCVTNS_SCALAR_FP16| InstKind::FCVTMS_SCALAR_FP16| InstKind::FCVTAS_SCALAR_FP16| InstKind::SCVTF_SCALAR_FP16| InstKind::FCVTPS_SCALAR_FP16| InstKind::FCVTZS_SCALAR_FP16| InstKind::FRECPE_SCALAR_FP16| InstKind::FRECPX_SCALAR_FP16| InstKind::FCVTNU_SCALAR_FP16| InstKind::FCVTMU_SCALAR_FP16| InstKind::FCVTAU_SCALAR_FP16| InstKind::UCVTF_SCALAR_FP16| InstKind::FCVTPU_SCALAR_FP16| InstKind::FCVTZU_SCALAR_FP16| InstKind::FRSQRTE_SCALAR_FP16
    =>{
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, 1);
ddi.ops[1] = opregfp(rn, 1);
},
  InstKind::FCMGT_ZERO_SCALAR_FP16| InstKind::FCMEQ_ZERO_SCALAR_FP16| InstKind::FCMLT_ZERO_SCALAR_FP16| InstKind::FCMGE_ZERO_SCALAR_FP16| InstKind::FCMLE_ZERO_SCALAR_FP16
    =>{
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, 1);
ddi.ops[1] = opregfp(rn, 1);
ddi.ops[2] = opimmfloatzero(ddi);
},
  _ => unreachable!()
}
InstGroup::FP16_2REG_VEC => match mnem {
  InstKind::FRINTN_VEC_FP16| InstKind::FRINTM_VEC_FP16| InstKind::FCVTNS_VEC_FP16| InstKind::FCVTMS_VEC_FP16| InstKind::FCVTAS_VEC_FP16| InstKind::SCVTF_VEC_FP16| InstKind::FABS_VEC_FP16| InstKind::FRINTP_VEC_FP16| InstKind::FRINTZ_VEC_FP16| InstKind::FCVTPS_VEC_FP16| InstKind::FCVTZS_VEC_FP16| InstKind::FRECPE_VEC_FP16| InstKind::FRINTA_VEC_FP16| InstKind::FRINTX_VEC_FP16| InstKind::FCVTNU_VEC_FP16| InstKind::FCVTMU_VEC_FP16| InstKind::FCVTAU_VEC_FP16| InstKind::UCVTF_VEC_FP16| InstKind::FNEG_VEC_FP16| InstKind::FRINTI_VEC_FP16| InstKind::FCVTPU_VEC_FP16| InstKind::FCVTZU_VEC_FP16| InstKind::FRSQRTE_VEC_FP16| InstKind::FSQRT_VEC_FP16
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 1, q);
ddi.ops[1] = opregvec(rn, 1, q);
},
  InstKind::FCMGT_ZERO_VEC_FP16| InstKind::FCMEQ_ZERO_VEC_FP16| InstKind::FCMLT_ZERO_VEC_FP16| InstKind::FCMGE_ZERO_VEC_FP16| InstKind::FCMLE_ZERO_VEC_FP16
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 1, q);
ddi.ops[1] = opregvec(rn, 1, q);
ddi.ops[2] = opimmfloatzero(ddi);
},
  _ => unreachable!()
}
InstGroup::ANDOREOR_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 0, q);
ddi.ops[1] = opregvec(rn, 0, q);
ddi.ops[2] = opregvec(rm, 0, q);
}
InstGroup::ADDSUBL_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size+1, 1);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opregvec(rm, size, q);
}
InstGroup::ADDSUBW_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size+1, 1);
ddi.ops[1] = opregvec(rn, size+1, 1);
ddi.ops[2] = opregvec(rm, size, q);
}
InstGroup::ADDSUBHN_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvec(rn, size+1, 1);
ddi.ops[2] = opregvec(rm, size+1, 1);
}
InstGroup::ABDL_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size+1, 1);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opregvec(rm, size, q);
}
InstGroup::MULL_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size+1, 1);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opregvec(rm, size, q);
}
InstGroup::SQDMULL_SCALAR => {
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, size+1);
ddi.ops[1] = opregfp(rn, size);
ddi.ops[2] = opregfp(rm, size);
}
InstGroup::SQDMULL_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size+1, 1);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opregvec(rm, size, q);
}
InstGroup::PMULL_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size+1, 1);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opregvec(rm, size, q);
}
InstGroup::SQRDMLAH_SCALAR => {
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, size);
ddi.ops[1] = opregfp(rn, size);
ddi.ops[2] = opregfp(rm, size);
}
InstGroup::SQRDMLAH_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opregvec(rm, size, q);
}
InstGroup::SHR_SCALAR_IMM => {
let immh: u32 = (inst>>19&0xf) as u32;
let immb: u32 = (inst>>16&0x7) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, 3);
ddi.ops[1] = opregfp(rn, 3);
ddi.ops[2] = opimmsmall(128-(immh<<3|immb));
}
InstGroup::SHR_VEC_IMM => {
let q: u32 = (inst>>30&0x1) as u32;
let immh: u32 = (inst>>19&0xf) as u32;
let immb: u32 = (inst>>16&0x7) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 3-clz(immh, 4), q);
ddi.ops[1] = opregvec(rn, 3-clz(immh, 4), q);
ddi.ops[2] = opimmsmall((16<<(3-clz(immh, 4)))-(immh<<3|immb));
}
InstGroup::QSHL_SCALAR_IMM => {
let immh: u32 = (inst>>19&0xf) as u32;
let immb: u32 = (inst>>16&0x7) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, 3-clz(immh, 4));
ddi.ops[1] = opregfp(rn, 3-clz(immh, 4));
ddi.ops[2] = opimmsmall((immh<<3|immb)-(8<<(3-clz(immh, 4))));
}
InstGroup::QSHL_VEC_IMM => {
let q: u32 = (inst>>30&0x1) as u32;
let immh: u32 = (inst>>19&0xf) as u32;
let immb: u32 = (inst>>16&0x7) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 3-clz(immh, 4), q);
ddi.ops[1] = opregvec(rn, 3-clz(immh, 4), q);
ddi.ops[2] = opimmsmall((immh<<3|immb)-(8<<(3-clz(immh, 4))));
}
InstGroup::SHRN_SCALAR_IMM => {
let immh: u32 = (inst>>19&0xf) as u32;
let immb: u32 = (inst>>16&0x7) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, 3-clz(immh, 4));
ddi.ops[1] = opregfp(rn, 4-clz(immh, 4));
ddi.ops[2] = opimmsmall((16<<(3-clz(immh, 4)))-(immh<<3|immb));
}
InstGroup::SHRN_VEC_IMM => {
let q: u32 = (inst>>30&0x1) as u32;
let immh: u32 = (inst>>19&0xf) as u32;
let immb: u32 = (inst>>16&0x7) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 3-clz(immh, 4), q);
ddi.ops[1] = opregvec(rn, 4-clz(immh, 4), 1);
ddi.ops[2] = opimmsmall((16<<(3-clz(immh, 4)))-(immh<<3|immb));
}
InstGroup::SHLL_VEC_IMM => {
let q: u32 = (inst>>30&0x1) as u32;
let immh: u32 = (inst>>19&0xf) as u32;
let immb: u32 = (inst>>16&0x7) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 4-clz(immh, 4), 1);
ddi.ops[1] = opregvec(rn, 3-clz(immh, 4), q);
ddi.ops[2] = opimmsmall((immh<<3|immb)-(8<<(3-clz(immh, 4))));
}
InstGroup::SHLL_VEC_ESZ => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size+1, 1);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opimmsmall(8<<size);
}
InstGroup::SHIFT_SCALAR_IMM => {
let immh: u32 = (inst>>19&0xf) as u32;
let immb: u32 = (inst>>16&0x7) as u32;
let op: u32 = (inst>>12&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, 3);
ddi.ops[1] = opregfp(rn, 3);
ddi.ops[2] = opimmsmall(if op != 0{(immh<<3|immb)-64}else{128-(immh<<3|immb)});
}
InstGroup::SHIFT_VEC_IMM => {
let q: u32 = (inst>>30&0x1) as u32;
let immh: u32 = (inst>>19&0xf) as u32;
let immb: u32 = (inst>>16&0x7) as u32;
let op: u32 = (inst>>12&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 3-clz(immh, 4), q);
ddi.ops[1] = opregvec(rn, 3-clz(immh, 4), q);
ddi.ops[2] = opimmsmall(
if op!=0 {
    (immh << 3 | immb) - (8 << (3 - clz(immh, 4)))
} else {
    (16 << (3 - clz(immh, 4))) - (immh << 3 | immb)
}

        );
}
InstGroup::FCVT_SCALAR_FIXED => {
let immh: u32 = (inst>>19&0xf) as u32;
let immb: u32 = (inst>>16&0x7) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, 3-clz(immh, 4));
ddi.ops[1] = opregfp(rn, 3-clz(immh, 4));
ddi.ops[2] = opimmsmall((16<<(3-clz(immh, 4)))-(immh<<3|immb));
}
InstGroup::FCVT_VEC_FIXED => {
let q: u32 = (inst>>30&0x1) as u32;
let immh: u32 = (inst>>19&0xf) as u32;
let immb: u32 = (inst>>16&0x7) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 3-clz(immh, 4), q);
ddi.ops[1] = opregvec(rn, 3-clz(immh, 4), q);
ddi.ops[2] = opimmsmall((16<<(3-clz(immh, 4)))-(immh<<3|immb));
}
InstGroup::FCVT_SCALAR => {
let sz: u32 = (inst>>22&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, sz+2);
ddi.ops[1] = opregfp(rn, sz+2);
}
InstGroup::FCVT_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let sz: u32 = (inst>>22&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, sz+2, q);
ddi.ops[1] = opregvec(rn, sz+2, q);
}
InstGroup::FCVTL_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let sz: u32 = (inst>>22&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, sz+2, 1);
ddi.ops[1] = opregvec(rn, sz+1, q);
}
InstGroup::FCVT_FROMINT_SCALAR => {
let sz: u32 = (inst>>22&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, sz+2);
ddi.ops[1] = opregfp(rn, sz+2);
}
InstGroup::FCVT_FROMINT_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let sz: u32 = (inst>>22&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, sz+2, q);
ddi.ops[1] = opregvec(rn, sz+2, q);
}
InstGroup::FCVTN_SCALAR => {
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, 2);
ddi.ops[1] = opregfp(rn, 3);
}
InstGroup::FCVTN_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let sz: u32 = (inst>>22&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, sz+1, q);
ddi.ops[1] = opregvec(rn, sz+2, 1);
}
InstGroup::FRINT_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let sz: u32 = (inst>>22&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, sz+2, q);
ddi.ops[1] = opregvec(rn, sz+2, q);
}
InstGroup::FRINTTS_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let sz: u32 = (inst>>22&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, sz+2, q);
ddi.ops[1] = opregvec(rn, sz+2, q);
}
InstGroup::INT_HORZ_SCALAR => {
let size: u32 = 3 as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, size);
ddi.ops[1] = opregvec(rn, 3, 1);
}
InstGroup::INT_HORZ_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let opcode: u32 = (inst>>12&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, size+!(opcode&8));
ddi.ops[1] = opregvec(rn, size, q);
}
InstGroup::FP_HORZ_SCALAR => {
let u: u32 = (inst>>29&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, (size&1)+1+u);
ddi.ops[1] = opregvec(rn, 
if (u | (size & 1)) != 0 {
    (u << 1) | (size & 1)
} else {
    4
}
        , u&size&1);
}
InstGroup::FP_HORZ_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let u: u32 = (inst>>29&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, u+1);
ddi.ops[1] = opregvec(rn, u+1, q);
}
InstGroup::MUL_ELEM_SCALAR => {
let size: u32 = (inst>>22&0x3) as u32;
let l: u32 = (inst>>21&0x1) as u32;
let m: u32 = (inst>>20&0x1) as u32;
let rm: u32 = (inst>>16&0xf) as u32;
let h: u32 = (inst>>11&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, size);
ddi.ops[1] = opregfp(rn, size);
ddi.ops[2] = opregvidx(rm+(if size >= 2 {m<<4}else{0}), size, if size>=2{2*h+l}else{4*h+2*l+m});
}
InstGroup::MUL_ELEM => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let l: u32 = (inst>>21&0x1) as u32;
let m: u32 = (inst>>20&0x1) as u32;
let rm: u32 = (inst>>16&0xf) as u32;
let h: u32 = (inst>>11&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opregvidx(rm+(if size >= 2 {m<<4}else{0}), size, if size>=2{2*h+l}else{4*h+2*l+m});
}
InstGroup::MULL_ELEM_SCALAR => {
let size: u32 = (inst>>22&0x3) as u32;
let l: u32 = (inst>>21&0x1) as u32;
let m: u32 = (inst>>20&0x1) as u32;
let rm: u32 = (inst>>16&0xf) as u32;
let h: u32 = (inst>>11&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, size+1);
ddi.ops[1] = opregfp(rn, size);
ddi.ops[2] = opregvidx(rm+(if size >= 2 {m<<4}else{0}), size, if size>=2{2*h+l}else{4*h+2*l+m});
}
InstGroup::MULL_ELEM => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let l: u32 = (inst>>21&0x1) as u32;
let m: u32 = (inst>>20&0x1) as u32;
let rm: u32 = (inst>>16&0xf) as u32;
let h: u32 = (inst>>11&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size+1, 1);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opregvidx(rm+(if size >= 2 {m<<4}else{0}), size, if size>=2{2*h+l}else{4*h+2*l+m});
}
InstGroup::FMUL_ELEM_SCALAR => {
let sz: u32 = (inst>>22&0x1) as u32;
let l: u32 = (inst>>21&0x1) as u32;
let m: u32 = (inst>>20&0x1) as u32;
let rm: u32 = (inst>>16&0xf) as u32;
let h: u32 = (inst>>11&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, sz+2);
ddi.ops[1] = opregfp(rn, sz+2);
ddi.ops[2] = opregvidx(rm+(m<<4), sz+2, (if sz != 0 { h } else { 2 })*h+l);
}
InstGroup::FMUL_ELEM_SCALAR_FP16 => {
let l: u32 = (inst>>21&0x1) as u32;
let m: u32 = (inst>>20&0x1) as u32;
let rm: u32 = (inst>>16&0xf) as u32;
let h: u32 = (inst>>11&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, 1);
ddi.ops[1] = opregfp(rn, 1);
ddi.ops[2] = opregvidx(rm, 1, 4*h+2*l+m);
}
InstGroup::FMUL_ELEM => {
let q: u32 = (inst>>30&0x1) as u32;
let sz: u32 = (inst>>22&0x1) as u32;
let l: u32 = (inst>>21&0x1) as u32;
let m: u32 = (inst>>20&0x1) as u32;
let rm: u32 = (inst>>16&0xf) as u32;
let h: u32 = (inst>>11&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, sz+2, q);
ddi.ops[1] = opregvec(rn, sz+2, q);
ddi.ops[2] = opregvidx(rm+(m<<4), sz+2, (if sz != 0 { h } else { 2 })*h+l);
}
InstGroup::FMUL_ELEM_FP16 => {
let q: u32 = (inst>>30&0x1) as u32;
let l: u32 = (inst>>21&0x1) as u32;
let m: u32 = (inst>>20&0x1) as u32;
let rm: u32 = (inst>>16&0xf) as u32;
let h: u32 = (inst>>11&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 1, q);
ddi.ops[1] = opregvec(rn, 1, q);
ddi.ops[2] = opregvidx(rm, 1, 4*h+2*l+m);
}
InstGroup::DOT_VEC => match mnem {
  InstKind::SDOT_VEC| InstKind::USDOT_VEC| InstKind::UDOT_VEC| InstKind::SMMLA_VEC| InstKind::USMMLA_VEC| InstKind::UMMLA_VEC
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 2, q);
ddi.ops[1] = opregvec(rn, 0, q);
ddi.ops[2] = opregvec(rm, 0, q);
},
  InstKind::BFDOT_VEC| InstKind::BFMMLA_VEC
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 2, q);
ddi.ops[1] = opregvec(rn, 1, q);
ddi.ops[2] = opregvec(rm, 1, q);
},
  _ => unreachable!()
}
InstGroup::DOT_ELEM => match mnem {
  InstKind::SUDOT_ELEM| InstKind::SDOT_ELEM| InstKind::USDOT_ELEM| InstKind::UDOT_ELEM
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let l: u32 = (inst>>21&0x1) as u32;
let m: u32 = (inst>>20&0x1) as u32;
let rm: u32 = (inst>>16&0xf) as u32;
let h: u32 = (inst>>11&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 2, q);
ddi.ops[1] = opregvec(rn, 0, q);
ddi.ops[2] = opregvidx(rm+(m<<4), 6, h<<1|l);
},
  InstKind::BFDOT_ELEM
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let l: u32 = (inst>>21&0x1) as u32;
let m: u32 = (inst>>20&0x1) as u32;
let rm: u32 = (inst>>16&0xf) as u32;
let h: u32 = (inst>>11&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 2, q);
ddi.ops[1] = opregvec(rn, 1, q);
ddi.ops[2] = opregvidx(rm+(m<<4), 7, h<<1|l);
},
  _ => unreachable!()
}
InstGroup::FMLAL_VEC => {
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 2, 1);
ddi.ops[1] = opregvec(rn, 1, 1);
ddi.ops[2] = opregvec(rm, 1, 1);
}
InstGroup::FMLAL_ELEM => {
let l: u32 = (inst>>21&0x1) as u32;
let m: u32 = (inst>>20&0x1) as u32;
let rm: u32 = (inst>>16&0xf) as u32;
let h: u32 = (inst>>11&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 2, 1);
ddi.ops[1] = opregvec(rn, 1, 1);
ddi.ops[2] = opregvidx(rm, 1, (h<<3|l<<2|m<<1|rm>>3)>>1);
}
InstGroup::FHM_VEC => {
let q: u32 = (inst>>30&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 2, q);
ddi.ops[1] = opregvec(rn, if q != 0 { 1 } else { 4 }, 0);
ddi.ops[2] = opregvec(rm, if q != 0 { 1 } else { 4 }, 0);
}
InstGroup::FHM_ELEM => {
let q: u32 = (inst>>30&0x1) as u32;
let l: u32 = (inst>>21&0x1) as u32;
let m: u32 = (inst>>20&0x1) as u32;
let rm: u32 = (inst>>16&0xf) as u32;
let h: u32 = (inst>>11&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 2, q);
ddi.ops[1] = opregvec(rn, if q != 0 { 1 } else { 4 }, 0);
ddi.ops[2] = opregvidx(rm, 1, h<<2|l<<1|m<<0);
}
InstGroup::FCMLA_VEC => match mnem {
  InstKind::FCMLA_VEC
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rot: u32 = (inst>>11&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opregvec(rm, size, q);
ddi.ops[3] = opuimm(rot*90);
},
  InstKind::FCADD_VEC
    =>{
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rot: u32 = (inst>>11&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opregvec(rm, size, q);
ddi.ops[3] = opuimm(rot*90+90);
},
  _ => unreachable!()
}
InstGroup::FCMLA_ELEM => {
let q: u32 = (inst>>30&0x1) as u32;
let size: u32 = (inst>>22&0x3) as u32;
let l: u32 = (inst>>21&0x1) as u32;
let m: u32 = (inst>>20&0x1) as u32;
let rm: u32 = (inst>>16&0xf) as u32;
let rot: u32 = (inst>>13&0x3) as u32;
let h: u32 = (inst>>11&0x1) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, size, q);
ddi.ops[1] = opregvec(rn, size, q);
ddi.ops[2] = opregvidx(rm|m<<4, size, (h<<2|l<<1|m<<0)>>size);
ddi.ops[3] = opuimm(rot*90);
}
InstGroup::SIMD_IMM => {
let q: u32 = (inst>>30&0x1) as u32;
let op: u32 = (inst>>29&0x1) as u32;
let immh: u32 = (inst>>16&0x7) as u32;
let cmode: u32 = (inst>>12&0xf) as u32;
let o2: u32 = (inst>>11&0x1) as u32;
let imml: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = 
if op !=0 && cmode >= 14 && q == 0 {
    opregfp(rd, 3)
} else {
    let mode = if cmode < 8 {
        2
    } else if cmode < 12 {
        1
    } else if cmode < 14 {
        2
    } else if cmode == 14 {
        if op!=0 { 3 } else { 0 }
    } else {
        if op!=0 { 3 } else if o2!=0 { 1 } else { 2 }
    };
    opregvec(rd, mode, q)
}
        ;
ddi.ops[1] = 
if cmode < 14 {
    let shift = if cmode < 12 {
        (cmode >> 1 & 3) * 8
    } else {
        (cmode & 1) * 8 + 8
    };
    opuimmshift((immh << 5) | imml, (cmode >= 12) as u32, shift)
} else if cmode == 14 {
    if op == 0 {
        opuimm((immh << 5) | imml)
    } else {
        opimmsimdmask(ddi, (immh << 5) | imml)
    }
} else {
    opimmfloat(ddi, (immh << 5) | imml)
}
        ;
}
InstGroup::AUT => match mnem {
  InstKind::PACIA| InstKind::PACIB| InstKind::PACDA| InstKind::PACDB| InstKind::AUTIA| InstKind::AUTIB| InstKind::AUTDA| InstKind::AUTDB
    =>{
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, 1);
ddi.ops[1] = opreggpsp(rn, 1);
},
  InstKind::PACIZA| InstKind::PACIZB| InstKind::PACDZA| InstKind::PACDZB| InstKind::AUTIZA| InstKind::AUTIZB| InstKind::AUTDZA| InstKind::AUTDZB
    =>{
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, 1);
},
  _ => unreachable!()
}
InstGroup::LDRAUT => match mnem {
  InstKind::LDRAA| InstKind::LDRAB
    =>{
let s: i32 = sext((inst>>22&0x1) as i32 as i32, 1);
let imm9: u32 = (inst>>12&0x1ff) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, 1);
ddi.ops[1] = opmemsoff(rn, s*0x1000+imm9 as i32*8);
},
  InstKind::LDRAA_PRE| InstKind::LDRAB_PRE
    =>{
let s: i32 = sext((inst>>22&0x1) as i32 as i32, 1);
let imm9: u32 = (inst>>12&0x1ff) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, 1);
ddi.ops[1] = opmemsoffpre(rn, s*0x1000+imm9 as i32*8);
},
  _ => unreachable!()
}
InstGroup::XPAC => {
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, 1);
}
InstGroup::PACGA => {
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, 1);
ddi.ops[1] = opreggp(rn, 1);
ddi.ops[2] = opreggpsp(rm, 1);
}
InstGroup::CAS => {
let size: u32 = (inst>>30&0x3) as u32;
let rs: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rs, (size==3) as u32);
ddi.ops[1] = opreggp(rt, (size==3) as u32);
ddi.ops[2] = opmemsoff(rn, 0);
}
InstGroup::CASP => {
let size: u32 = (inst>>30&0x1) as u32;
let rs: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rs, (size==3) as u32);
ddi.ops[1] = opreggp(rs+1, (size==3) as u32);
ddi.ops[2] = opreggp(rt, (size==3) as u32);
ddi.ops[3] = opreggp(rt+1, (size==3) as u32);
ddi.ops[4] = opmemsoff(rn, 0);
}
InstGroup::SWP => {
let size: u32 = (inst>>30&0x3) as u32;
let rs: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rs, (size==3) as u32);
ddi.ops[1] = opreggp(rt, (size==3) as u32);
ddi.ops[2] = opmemsoff(rn, 0);
}
InstGroup::LDATOMIC => {
let size: u32 = (inst>>30&0x3) as u32;
let rs: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rs, (size==3) as u32);
ddi.ops[1] = opreggp(rt, (size==3) as u32);
ddi.ops[2] = opmemsoff(rn, 0);
}
InstGroup::RCPCU => {
let size: u32 = (inst>>30&0x3) as u32;
let opc: u32 = (inst>>22&0x3) as u32;
let imm9: i32 = sext((inst>>12&0x1ff) as i32 as i32, 9);
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, (size>2||opc==2) as u32);
ddi.ops[1] = opmemsoff(rn, imm9);
}
InstGroup::RCPC => {
let size: u32 = (inst>>30&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, (size>=3) as u32);
ddi.ops[1] = opmemsoff(rn, 0);
}
InstGroup::CRC32 => {
let sf: u32 = (inst>>31&0x1) as u32;
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, 0);
ddi.ops[1] = opreggp(rn, 0);
ddi.ops[2] = opreggp(rm, sf);
}
InstGroup::ADDSUBG => {
let uimm6: u32 = (inst>>16&0x3f) as u32;
let uimm4: u32 = (inst>>10&0xf) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggpsp(rd, 1);
ddi.ops[1] = opreggpsp(rn, 1);
ddi.ops[2] = opuimm(uimm6<<4);
ddi.ops[3] = opimmsmall(uimm4);
}
InstGroup::TAGINSERT => match mnem {
  InstKind::IRG
    =>{
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggpsp(rd, 1);
ddi.ops[1] = opreggpsp(rn, 1);
ddi.ops[2] = opreggp(rm, 1);
},
  InstKind::GMI
    =>{
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, 1);
ddi.ops[1] = opreggpsp(rn, 1);
ddi.ops[2] = opreggp(rm, 1);
},
  _ => unreachable!()
}
InstGroup::SUBP => {
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, 1);
ddi.ops[1] = opreggpsp(rn, 1);
ddi.ops[2] = opreggpsp(rm, 1);
}
InstGroup::STG => match mnem {
  InstKind::STG_POST| InstKind::STZG_POST| InstKind::ST2G_POST| InstKind::STZ2G_POST
    =>{
let imm9: i32 = sext((inst>>12&0x1ff) as i32 as i32, 9);
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggpsp(rt, 1);
ddi.ops[1] = opmemsoffpost(rn, imm9*16);
},
  InstKind::STG| InstKind::STZG| InstKind::ST2G| InstKind::STZ2G
    =>{
let imm9: i32 = sext((inst>>12&0x1ff) as i32 as i32, 9);
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggpsp(rt, 1);
ddi.ops[1] = opmemsoff(rn, imm9*16);
},
  InstKind::STG_PRE| InstKind::STZG_PRE| InstKind::ST2G_PRE| InstKind::STZ2G_PRE
    =>{
let imm9: i32 = sext((inst>>12&0x1ff) as i32 as i32, 9);
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggpsp(rt, 1);
ddi.ops[1] = opmemsoffpre(rn, imm9*16);
},
  _ => unreachable!()
}
InstGroup::LDG => {
let imm9: i32 = sext((inst>>12&0x1ff) as i32 as i32, 9);
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, 1);
ddi.ops[1] = opmemsoff(rn, imm9*16);
}
InstGroup::MEMGM => {
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, 1);
ddi.ops[1] = opmemsoff(rn, 0);
}
InstGroup::MSR_FLAGM => {
}
InstGroup::RMIF => {
let imm6: u32 = (inst>>15&0x3f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let mask: u32 = (inst>>0&0xf) as u32;
ddi.ops[0] = opreggp(rn, 1);
ddi.ops[1] = opimmsmall(imm6);
ddi.ops[2] = opimmsmall(mask);
}
InstGroup::SETF => {
let rn: u32 = (inst>>5&0x1f) as u32;
ddi.ops[0] = opreggp(rn, 0);
}
InstGroup::SB => {
}
InstGroup::TCANCEL => {
let imm16: u32 = (inst>>5&0xffff) as u32;
ddi.ops[0] = opuimm(imm16);
}
InstGroup::TCOMMIT => {
}
InstGroup::TSTART => {
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, 1);
}
InstGroup::TTEST => {
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, 1);
}
InstGroup::WFXT => {
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rd, 1);
}
InstGroup::LS64 => {
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rt, 1);
ddi.ops[1] = opmemsoff(rn, 0);
}
InstGroup::LS64V => {
let rs: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rt: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opreggp(rs, 1);
ddi.ops[1] = opreggp(rt, 1);
ddi.ops[2] = opmemsoff(rn, 0);
}
InstGroup::CPY => {
let rs: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opmeminc(rd);
ddi.ops[1] = opmeminc(rs);
ddi.ops[2] = opreggpinc(rn);
}
InstGroup::SET => {
let rs: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opmeminc(rd);
ddi.ops[1] = opreggpinc(rn);
ddi.ops[2] = opreggp(rs, 1);
}
InstGroup::AES => {
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 0, 1);
ddi.ops[1] = opregvec(rn, 0, 1);
}
InstGroup::SHA2_3REG => match mnem {
  InstKind::SHA1C| InstKind::SHA1P| InstKind::SHA1M
    =>{
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, 4);
ddi.ops[1] = opregfp(rn, 2);
ddi.ops[2] = opregvec(rm, 2, 1);
},
  InstKind::SHA1SU0| InstKind::SHA256SU1
    =>{
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 2, 1);
ddi.ops[1] = opregvec(rn, 2, 1);
ddi.ops[2] = opregvec(rm, 2, 1);
},
  InstKind::SHA256H| InstKind::SHA256H2
    =>{
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, 4);
ddi.ops[1] = opregfp(rn, 4);
ddi.ops[2] = opregvec(rm, 2, 1);
},
  _ => unreachable!()
}
InstGroup::SHA2_2REG => match mnem {
  InstKind::SHA1H
    =>{
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, 2);
ddi.ops[1] = opregfp(rn, 2);
},
  InstKind::SHA1SU1| InstKind::SHA256SU0
    =>{
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 2, 1);
ddi.ops[1] = opregvec(rn, 2, 1);
},
  _ => unreachable!()
}
InstGroup::SM3TT => {
let rm: u32 = (inst>>16&0x1f) as u32;
let imm2: u32 = (inst>>12&0x3) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 2, 1);
ddi.ops[1] = opregvec(rn, 2, 1);
ddi.ops[2] = opregvidx(rm, 2, imm2);
}
InstGroup::SHA3_4REG => match mnem {
  InstKind::EOR3| InstKind::BCAX
    =>{
let rm: u32 = (inst>>16&0x1f) as u32;
let ra: u32 = (inst>>10&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 0, 1);
ddi.ops[1] = opregvec(rn, 0, 1);
ddi.ops[2] = opregvec(rm, 0, 1);
ddi.ops[3] = opregvec(ra, 0, 1);
},
  InstKind::SM3SS1
    =>{
let rm: u32 = (inst>>16&0x1f) as u32;
let ra: u32 = (inst>>10&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 2, 1);
ddi.ops[1] = opregvec(rn, 2, 1);
ddi.ops[2] = opregvec(rm, 2, 1);
ddi.ops[3] = opregvec(ra, 2, 1);
},
  _ => unreachable!()
}
InstGroup::SHA512_2REG => match mnem {
  InstKind::SHA512SU0
    =>{
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 3, 1);
ddi.ops[1] = opregvec(rn, 3, 1);
},
  InstKind::SM4E
    =>{
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 2, 1);
ddi.ops[1] = opregvec(rn, 2, 1);
},
  _ => unreachable!()
}
InstGroup::SHA512_3REG => match mnem {
  InstKind::SHA512H| InstKind::SHA512H2
    =>{
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregfp(rd, 4);
ddi.ops[1] = opregfp(rn, 4);
ddi.ops[2] = opregvec(rm, 3, 1);
},
  InstKind::SHA512SU1| InstKind::RAX1
    =>{
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 3, 1);
ddi.ops[1] = opregvec(rn, 3, 1);
ddi.ops[2] = opregvec(rm, 3, 1);
},
  _ => unreachable!()
}
InstGroup::SM3_3REG => {
let rm: u32 = (inst>>16&0x1f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 2, 1);
ddi.ops[1] = opregvec(rn, 2, 1);
ddi.ops[2] = opregvec(rm, 2, 1);
}
InstGroup::XAR => {
let rm: u32 = (inst>>16&0x1f) as u32;
let imm6: u32 = (inst>>10&0x3f) as u32;
let rn: u32 = (inst>>5&0x1f) as u32;
let rd: u32 = (inst>>0&0x1f) as u32;
ddi.ops[0] = opregvec(rd, 3, 1);
ddi.ops[1] = opregvec(rn, 3, 1);
ddi.ops[2] = opregvec(rm, 3, 1);
ddi.ops[3] = opimmsmall(imm6);
}
} true }
