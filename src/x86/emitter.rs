use super::opcodes::*;
use crate::core::emitter::*;
use crate::core::operand::*;
use crate::AsmError;
const NOREG: Operand = Operand::new();

pub trait X86EmitterExplicit: Emitter {
    fn add8mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADD8MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn add8rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADD8RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn add16mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADD16MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn add16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADD16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn add32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADD32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn add32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADD32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn add64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADD64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn add64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADD64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn add8rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADD8RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn add16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADD16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn add32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADD32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn add64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADD64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn add8ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADD8RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn add16ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADD16RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn add32ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADD32RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn add64ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADD64RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn or8mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            OR8MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn or8rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            OR8RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn or16mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            OR16MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn or16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            OR16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn or32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            OR32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn or32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            OR32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn or64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            OR64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn or64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            OR64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn or8rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            OR8RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn or16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            OR16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn or32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            OR32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn or64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            OR64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn or8ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            OR8RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn or16ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            OR16RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn or32ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            OR32RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn or64ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            OR64RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adc8mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADC8MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adc8rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADC8RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adc16mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADC16MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adc16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADC16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adc32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADC32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adc32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADC32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adc64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADC64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adc64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADC64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adc8rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADC8RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adc16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADC16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adc32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADC32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adc64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADC64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adc8ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADC8RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adc16ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADC16RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adc32ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADC32RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adc64ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADC64RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sbb8mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SBB8MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sbb8rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SBB8RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sbb16mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SBB16MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sbb16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SBB16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sbb32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SBB32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sbb32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SBB32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sbb64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SBB64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sbb64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SBB64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sbb8rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SBB8RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sbb16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SBB16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sbb32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SBB32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sbb64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SBB64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sbb8ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SBB8RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sbb16ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SBB16RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sbb32ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SBB32RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sbb64ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SBB64RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn and8mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AND8MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn and8rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AND8RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn and16mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AND16MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn and16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AND16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn and32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AND32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn and32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AND32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn and64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AND64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn and64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AND64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn and8rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AND8RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn and16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AND16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn and32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AND32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn and64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AND64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn and8ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AND8RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn and16ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AND16RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn and32ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AND32RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn and64ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AND64RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sub8mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SUB8MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sub8rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SUB8RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sub16mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SUB16MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sub16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SUB16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sub32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SUB32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sub32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SUB32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sub64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SUB64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sub64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SUB64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sub8rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SUB8RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sub16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SUB16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sub32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SUB32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sub64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SUB64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sub8ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SUB8RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sub16ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SUB16RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sub32ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SUB32RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sub64ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SUB64RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xor8mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XOR8MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xor8rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XOR8RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xor16mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XOR16MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xor16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XOR16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xor32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XOR32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xor32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XOR32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xor64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XOR64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xor64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XOR64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xor8rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XOR8RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xor16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XOR16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xor32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XOR32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xor64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XOR64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xor8ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XOR8RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xor16ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XOR16RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xor32ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XOR32RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xor64ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XOR64RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmp8mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMP8MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmp8rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMP8RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmp16mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMP16MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmp16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMP16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmp32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMP32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmp32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMP32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmp64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMP64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmp64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMP64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmp8rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMP8RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmp16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMP16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmp32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMP32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmp64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMP64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmp8ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMP8RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmp16ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMP16RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmp32ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMP32RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmp64ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMP64RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn push16r(&mut self, op0: impl OperandCast) {
        self.emit(
            PUSH16R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn pushr(&mut self, op0: impl OperandCast) {
        self.emit(
            PUSHR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn pop16r(&mut self, op0: impl OperandCast) {
        self.emit(
            POP16R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn popr(&mut self, op0: impl OperandCast) {
        self.emit(
            POPR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movsxr16m32(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVSXR16M32,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movsxr16r32(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVSXR16R32,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movsxr32m32(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVSXR32M32,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movsxr32r32(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVSXR32R32,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movsxr64m32(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVSXR64M32,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movsxr64r32(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVSXR64R32,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn push16i(&mut self, op0: impl OperandCast) {
        self.emit(
            PUSH16I,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn pushi(&mut self, op0: impl OperandCast) {
        self.emit(
            PUSHI,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn imul16rmi(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            IMUL16RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn imul16rri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            IMUL16RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn imul32rmi(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            IMUL32RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn imul32rri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            IMUL32RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn imul64rmi(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            IMUL64RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn imul64rri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            IMUL64RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn ins8(&mut self) {
        self.emit(
            INS8, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ins16(&mut self) {
        self.emit(
            INS16, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ins32(&mut self) {
        self.emit(
            INS32, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ins64(&mut self) {
        self.emit(
            INS64, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn outs8(&mut self) {
        self.emit(
            OUTS8, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn outs16(&mut self) {
        self.emit(
            OUTS16, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn outs32(&mut self) {
        self.emit(
            OUTS32, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn outs64(&mut self) {
        self.emit(
            OUTS64, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn jo(&mut self, op0: impl OperandCast) {
        self.emit(
            JO,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn jno(&mut self, op0: impl OperandCast) {
        self.emit(
            JNO,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn jc(&mut self, op0: impl OperandCast) {
        self.emit(
            JC,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn jnc(&mut self, op0: impl OperandCast) {
        self.emit(
            JNC,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn jz(&mut self, op0: impl OperandCast) {
        self.emit(
            JZ,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn jnz(&mut self, op0: impl OperandCast) {
        self.emit(
            JNZ,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn jbe(&mut self, op0: impl OperandCast) {
        self.emit(
            JBE,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ja(&mut self, op0: impl OperandCast) {
        self.emit(
            JA,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn js(&mut self, op0: impl OperandCast) {
        self.emit(
            JS,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn jns(&mut self, op0: impl OperandCast) {
        self.emit(
            JNS,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn jp(&mut self, op0: impl OperandCast) {
        self.emit(
            JP,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn jnp(&mut self, op0: impl OperandCast) {
        self.emit(
            JNP,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn jl(&mut self, op0: impl OperandCast) {
        self.emit(
            JL,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn jge(&mut self, op0: impl OperandCast) {
        self.emit(
            JGE,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn jle(&mut self, op0: impl OperandCast) {
        self.emit(
            JLE,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn jg(&mut self, op0: impl OperandCast) {
        self.emit(
            JG,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn add8mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADD8MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn or8mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            OR8MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adc8mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADC8MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sbb8mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SBB8MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn and8mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AND8MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sub8mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SUB8MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xor8mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XOR8MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmp8mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMP8MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn add16mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADD16MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn add32mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADD32MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn add64mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADD64MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn or16mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            OR16MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn or32mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            OR32MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn or64mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            OR64MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adc16mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADC16MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adc32mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADC32MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adc64mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADC64MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sbb16mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SBB16MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sbb32mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SBB32MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sbb64mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SBB64MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn and16mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AND16MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn and32mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AND32MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn and64mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AND64MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sub16mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SUB16MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sub32mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SUB32MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sub64mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SUB64MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xor16mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XOR16MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xor32mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XOR32MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xor64mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XOR64MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmp16mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMP16MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmp32mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMP32MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmp64mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMP64MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn test8mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            TEST8MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn test8rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            TEST8RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn test16mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            TEST16MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn test16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            TEST16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn test32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            TEST32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn test32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            TEST32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn test64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            TEST64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn test64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            TEST64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xchg8mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XCHG8MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xchg8rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XCHG8RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xchg16mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XCHG16MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xchg16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XCHG16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xchg32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XCHG32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xchg32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XCHG32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xchg64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XCHG64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xchg64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XCHG64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov8mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV8MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov8rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV8RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov16mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV16MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov8rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV8RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov_s2gmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV_S2GMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov_s2grr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV_S2GRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lea16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LEA16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lea32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LEA32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lea64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LEA64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov_g2srm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV_G2SRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov_g2srr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV_G2SRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn pop16m(&mut self, op0: impl OperandCast) {
        self.emit(
            POP16M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn popm(&mut self, op0: impl OperandCast) {
        self.emit(
            POPM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn c_ex16(&mut self) {
        self.emit(
            C_EX16, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cbw(&mut self) {
        self.emit(
            CBW, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn c_ex32(&mut self) {
        self.emit(
            C_EX32, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cwde(&mut self) {
        self.emit(
            CWDE, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn c_ex64(&mut self) {
        self.emit(
            C_EX64, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cdqe(&mut self) {
        self.emit(
            CDQE, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn c_sep16(&mut self) {
        self.emit(
            C_SEP16, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cwd(&mut self) {
        self.emit(
            CWD, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn c_sep32(&mut self) {
        self.emit(
            C_SEP32, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cdq(&mut self) {
        self.emit(
            CDQ, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn c_sep64(&mut self) {
        self.emit(
            C_SEP64, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cqo(&mut self) {
        self.emit(
            CQO, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fwait(&mut self) {
        self.emit(
            FWAIT, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn pushf16(&mut self) {
        self.emit(
            PUSHF16, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn pushf(&mut self) {
        self.emit(
            PUSHF, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn popf16(&mut self) {
        self.emit(
            POPF16, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn popf(&mut self) {
        self.emit(
            POPF, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sahf(&mut self) {
        self.emit(
            SAHF, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lahf(&mut self) {
        self.emit(
            LAHF, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov8ra(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV8RA,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov16ra(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV16RA,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov32ra(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV32RA,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov64ra(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV64RA,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov8ar(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV8AR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov16ar(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV16AR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov32ar(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV32AR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov64ar(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV64AR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movs8(&mut self) {
        self.emit(
            MOVS8, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movs16(&mut self) {
        self.emit(
            MOVS16, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movs32(&mut self) {
        self.emit(
            MOVS32, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movs64(&mut self) {
        self.emit(
            MOVS64, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmps8(&mut self) {
        self.emit(
            CMPS8, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn repz_cmps8(&mut self) {
        self.emit(
            REPZ_CMPS8, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmps16(&mut self) {
        self.emit(
            CMPS16, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn repz_cmps16(&mut self) {
        self.emit(
            REPZ_CMPS16,
            &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmps32(&mut self) {
        self.emit(
            CMPS32, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn repz_cmps32(&mut self) {
        self.emit(
            REPZ_CMPS32,
            &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmps64(&mut self) {
        self.emit(
            CMPS64, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn repz_cmps64(&mut self) {
        self.emit(
            REPZ_CMPS64,
            &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn test8ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            TEST8RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn test16ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            TEST16RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn test32ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            TEST32RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn test64ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            TEST64RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn stos8(&mut self) {
        self.emit(
            STOS8, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn stos16(&mut self) {
        self.emit(
            STOS16, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn stos32(&mut self) {
        self.emit(
            STOS32, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn stos64(&mut self) {
        self.emit(
            STOS64, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lods8(&mut self) {
        self.emit(
            LODS8, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lods16(&mut self) {
        self.emit(
            LODS16, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lods32(&mut self) {
        self.emit(
            LODS32, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lods64(&mut self) {
        self.emit(
            LODS64, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn scas8(&mut self) {
        self.emit(
            SCAS8, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn repz_scas8(&mut self) {
        self.emit(
            REPZ_SCAS8, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn scas16(&mut self) {
        self.emit(
            SCAS16, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn repz_scas16(&mut self) {
        self.emit(
            REPZ_SCAS16,
            &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn scas32(&mut self) {
        self.emit(
            SCAS32, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn repz_scas32(&mut self) {
        self.emit(
            REPZ_SCAS32,
            &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn scas64(&mut self) {
        self.emit(
            SCAS64, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn repz_scas64(&mut self) {
        self.emit(
            REPZ_SCAS64,
            &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov8ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV8RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov16ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV16RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov32ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV32RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov64ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV64RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rol8mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROL8MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rol8ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROL8RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ror8mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROR8MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ror8ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROR8RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcl8mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCL8MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcl8ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCL8RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcr8mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCR8MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcr8ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCR8RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shl8mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHL8MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shl8ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHL8RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shr8mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHR8MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shr8ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHR8RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sar8mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SAR8MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sar8ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SAR8RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rol16mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROL16MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rol16ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROL16RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rol32mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROL32MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rol32ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROL32RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rol64mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROL64MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rol64ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROL64RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ror16mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROR16MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ror16ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROR16RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ror32mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROR32MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ror32ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROR32RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ror64mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROR64MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ror64ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROR64RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcl16mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCL16MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcl16ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCL16RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcl32mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCL32MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcl32ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCL32RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcl64mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCL64MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcl64ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCL64RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcr16mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCR16MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcr16ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCR16RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcr32mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCR32MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcr32ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCR32RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcr64mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCR64MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcr64ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCR64RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shl16mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHL16MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shl16ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHL16RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shl32mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHL32MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shl32ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHL32RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shl64mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHL64MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shl64ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHL64RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shr16mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHR16MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shr16ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHR16RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shr32mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHR32MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shr32ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHR32RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shr64mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHR64MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shr64ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHR64RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sar16mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SAR16MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sar16ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SAR16RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sar32mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SAR32MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sar32ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SAR32RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sar64mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SAR64MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sar64ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SAR64RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn reti(&mut self, op0: impl OperandCast) {
        self.emit(
            RETI,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ret(&mut self) {
        self.emit(
            RET, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov8mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV8MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xaborti(&mut self, op0: impl OperandCast) {
        self.emit(
            XABORTI,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov16mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV16MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov32mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV32MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov64mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV64MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xbegin(&mut self, op0: impl OperandCast) {
        self.emit(
            XBEGIN,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn enter16i(&mut self, op0: impl OperandCast) {
        self.emit(
            ENTER16I,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn enteri(&mut self, op0: impl OperandCast) {
        self.emit(
            ENTERI,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn leave16(&mut self) {
        self.emit(
            LEAVE16, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn leave(&mut self) {
        self.emit(
            LEAVE, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn retf16i(&mut self, op0: impl OperandCast) {
        self.emit(
            RETF16I,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn retf32i(&mut self, op0: impl OperandCast) {
        self.emit(
            RETF32I,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn retf64i(&mut self, op0: impl OperandCast) {
        self.emit(
            RETF64I,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn retf16(&mut self) {
        self.emit(
            RETF16, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn retf32(&mut self) {
        self.emit(
            RETF32, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn retf64(&mut self) {
        self.emit(
            RETF64, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn int3(&mut self) {
        self.emit(
            INT3, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn inti(&mut self, op0: impl OperandCast) {
        self.emit(
            INTI,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn iret16(&mut self) {
        self.emit(
            IRET16, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn iret32(&mut self) {
        self.emit(
            IRET32, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn iret64(&mut self) {
        self.emit(
            IRET64, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rol8mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROL8MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rol8rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROL8RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ror8mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROR8MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ror8rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROR8RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcl8mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCL8MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcl8rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCL8RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcr8mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCR8MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcr8rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCR8RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shl8mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHL8MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shl8rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHL8RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shr8mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHR8MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shr8rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHR8RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sar8mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SAR8MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sar8rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SAR8RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rol16mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROL16MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rol16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROL16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rol32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROL32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rol32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROL32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rol64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROL64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rol64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROL64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ror16mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROR16MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ror16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROR16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ror32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROR32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ror32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROR32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ror64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROR64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ror64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ROR64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcl16mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCL16MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcl16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCL16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcl32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCL32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcl32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCL32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcl64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCL64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcl64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCL64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcr16mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCR16MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcr16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCR16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcr32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCR32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcr32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCR32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcr64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCR64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rcr64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            RCR64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shl16mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHL16MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shl16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHL16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shl32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHL32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shl32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHL32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shl64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHL64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shl64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHL64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shr16mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHR16MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shr16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHR16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shr32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHR32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shr32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHR32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shr64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHR64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shr64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHR64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sar16mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SAR16MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sar16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SAR16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sar32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SAR32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sar32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SAR32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sar64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SAR64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sar64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SAR64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xlatb(&mut self) {
        self.emit(
            XLATB, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn loopnz(&mut self, op0: impl OperandCast) {
        self.emit(
            LOOPNZ,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn loopz(&mut self, op0: impl OperandCast) {
        self.emit(
            LOOPZ,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn r#loop(&mut self, op0: impl OperandCast) {
        self.emit(
            LOOP,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn jcxz(&mut self, op0: impl OperandCast) {
        self.emit(
            JCXZ,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn in8ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            IN8RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn in16ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            IN16RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn in32ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            IN32RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn in64ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            IN64RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn out8ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            OUT8RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn out16ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            OUT16RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn out32ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            OUT32RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn out64ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            OUT64RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn call(&mut self, op0: impl OperandCast) {
        self.emit(
            CALL,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn jmp(&mut self, op0: impl OperandCast) {
        self.emit(
            JMP,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn in8(&mut self) {
        self.emit(
            IN8, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn in16(&mut self) {
        self.emit(
            IN16, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn in32(&mut self) {
        self.emit(
            IN32, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn in64(&mut self) {
        self.emit(
            IN64, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn out8(&mut self) {
        self.emit(
            OUT8, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn out16(&mut self) {
        self.emit(
            OUT16, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn out32(&mut self) {
        self.emit(
            OUT32, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn out64(&mut self) {
        self.emit(
            OUT64, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn int1(&mut self) {
        self.emit(
            INT1, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn hlt(&mut self) {
        self.emit(
            HLT, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmc(&mut self) {
        self.emit(
            CMC, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn test8mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            TEST8MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn not8r(&mut self, op0: impl OperandCast) {
        self.emit(
            NOT8R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn not8m(&mut self, op0: impl OperandCast) {
        self.emit(
            NOT8M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn neg8r(&mut self, op0: impl OperandCast) {
        self.emit(
            NEG8R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn neg8m(&mut self, op0: impl OperandCast) {
        self.emit(
            NEG8M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mul8r(&mut self, op0: impl OperandCast) {
        self.emit(
            MUL8R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mul8m(&mut self, op0: impl OperandCast) {
        self.emit(
            MUL8M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn imul8r(&mut self, op0: impl OperandCast) {
        self.emit(
            IMUL8R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn imul8m(&mut self, op0: impl OperandCast) {
        self.emit(
            IMUL8M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn div8r(&mut self, op0: impl OperandCast) {
        self.emit(
            DIV8R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn div8m(&mut self, op0: impl OperandCast) {
        self.emit(
            DIV8M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn idiv8r(&mut self, op0: impl OperandCast) {
        self.emit(
            IDIV8R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn idiv8m(&mut self, op0: impl OperandCast) {
        self.emit(
            IDIV8M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn test16mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            TEST16MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn test32mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            TEST32MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn test64mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            TEST64MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn not16r(&mut self, op0: impl OperandCast) {
        self.emit(
            NOT16R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn not16m(&mut self, op0: impl OperandCast) {
        self.emit(
            NOT16M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn not32r(&mut self, op0: impl OperandCast) {
        self.emit(
            NOT32R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn not32m(&mut self, op0: impl OperandCast) {
        self.emit(
            NOT32M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn not64r(&mut self, op0: impl OperandCast) {
        self.emit(
            NOT64R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn not64m(&mut self, op0: impl OperandCast) {
        self.emit(
            NOT64M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn neg16r(&mut self, op0: impl OperandCast) {
        self.emit(
            NEG16R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn neg16m(&mut self, op0: impl OperandCast) {
        self.emit(
            NEG16M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn neg32r(&mut self, op0: impl OperandCast) {
        self.emit(
            NEG32R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn neg32m(&mut self, op0: impl OperandCast) {
        self.emit(
            NEG32M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn neg64r(&mut self, op0: impl OperandCast) {
        self.emit(
            NEG64R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn neg64m(&mut self, op0: impl OperandCast) {
        self.emit(
            NEG64M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mul16r(&mut self, op0: impl OperandCast) {
        self.emit(
            MUL16R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mul16m(&mut self, op0: impl OperandCast) {
        self.emit(
            MUL16M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mul32r(&mut self, op0: impl OperandCast) {
        self.emit(
            MUL32R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mul32m(&mut self, op0: impl OperandCast) {
        self.emit(
            MUL32M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mul64r(&mut self, op0: impl OperandCast) {
        self.emit(
            MUL64R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mul64m(&mut self, op0: impl OperandCast) {
        self.emit(
            MUL64M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn imul16r(&mut self, op0: impl OperandCast) {
        self.emit(
            IMUL16R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn imul16m(&mut self, op0: impl OperandCast) {
        self.emit(
            IMUL16M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn imul32r(&mut self, op0: impl OperandCast) {
        self.emit(
            IMUL32R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn imul32m(&mut self, op0: impl OperandCast) {
        self.emit(
            IMUL32M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn imul64r(&mut self, op0: impl OperandCast) {
        self.emit(
            IMUL64R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn imul64m(&mut self, op0: impl OperandCast) {
        self.emit(
            IMUL64M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn div16r(&mut self, op0: impl OperandCast) {
        self.emit(
            DIV16R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn div16m(&mut self, op0: impl OperandCast) {
        self.emit(
            DIV16M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn div32r(&mut self, op0: impl OperandCast) {
        self.emit(
            DIV32R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn div32m(&mut self, op0: impl OperandCast) {
        self.emit(
            DIV32M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn div64r(&mut self, op0: impl OperandCast) {
        self.emit(
            DIV64R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn div64m(&mut self, op0: impl OperandCast) {
        self.emit(
            DIV64M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn idiv16r(&mut self, op0: impl OperandCast) {
        self.emit(
            IDIV16R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn idiv16m(&mut self, op0: impl OperandCast) {
        self.emit(
            IDIV16M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn idiv32r(&mut self, op0: impl OperandCast) {
        self.emit(
            IDIV32R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn idiv32m(&mut self, op0: impl OperandCast) {
        self.emit(
            IDIV32M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn idiv64r(&mut self, op0: impl OperandCast) {
        self.emit(
            IDIV64R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn idiv64m(&mut self, op0: impl OperandCast) {
        self.emit(
            IDIV64M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn clc(&mut self) {
        self.emit(
            CLC, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn stc(&mut self) {
        self.emit(
            STC, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cli(&mut self) {
        self.emit(
            CLI, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sti(&mut self) {
        self.emit(
            STI, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cld(&mut self) {
        self.emit(
            CLD, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn std(&mut self) {
        self.emit(
            STD, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn inc8r(&mut self, op0: impl OperandCast) {
        self.emit(
            INC8R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn inc8m(&mut self, op0: impl OperandCast) {
        self.emit(
            INC8M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn dec8r(&mut self, op0: impl OperandCast) {
        self.emit(
            DEC8R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn dec8m(&mut self, op0: impl OperandCast) {
        self.emit(
            DEC8M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn inc16r(&mut self, op0: impl OperandCast) {
        self.emit(
            INC16R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn inc16m(&mut self, op0: impl OperandCast) {
        self.emit(
            INC16M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn inc32r(&mut self, op0: impl OperandCast) {
        self.emit(
            INC32R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn inc32m(&mut self, op0: impl OperandCast) {
        self.emit(
            INC32M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn inc64r(&mut self, op0: impl OperandCast) {
        self.emit(
            INC64R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn inc64m(&mut self, op0: impl OperandCast) {
        self.emit(
            INC64M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn dec16r(&mut self, op0: impl OperandCast) {
        self.emit(
            DEC16R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn dec16m(&mut self, op0: impl OperandCast) {
        self.emit(
            DEC16M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn dec32r(&mut self, op0: impl OperandCast) {
        self.emit(
            DEC32R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn dec32m(&mut self, op0: impl OperandCast) {
        self.emit(
            DEC32M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn dec64r(&mut self, op0: impl OperandCast) {
        self.emit(
            DEC64R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn dec64m(&mut self, op0: impl OperandCast) {
        self.emit(
            DEC64M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn callr(&mut self, op0: impl OperandCast) {
        self.emit(
            CALLR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn callm(&mut self, op0: impl OperandCast) {
        self.emit(
            CALLM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn callf16m(&mut self, op0: impl OperandCast) {
        self.emit(
            CALLF16M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn callf32m(&mut self, op0: impl OperandCast) {
        self.emit(
            CALLF32M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn callf64m(&mut self, op0: impl OperandCast) {
        self.emit(
            CALLF64M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn jmpr(&mut self, op0: impl OperandCast) {
        self.emit(
            JMPR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn jmpm(&mut self, op0: impl OperandCast) {
        self.emit(
            JMPM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn jmpf16m(&mut self, op0: impl OperandCast) {
        self.emit(
            JMPF16M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn jmpf32m(&mut self, op0: impl OperandCast) {
        self.emit(
            JMPF32M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn jmpf64m(&mut self, op0: impl OperandCast) {
        self.emit(
            JMPF64M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn push16m(&mut self, op0: impl OperandCast) {
        self.emit(
            PUSH16M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn pushm(&mut self, op0: impl OperandCast) {
        self.emit(
            PUSHM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sldtr(&mut self, op0: impl OperandCast) {
        self.emit(
            SLDTR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sldtm(&mut self, op0: impl OperandCast) {
        self.emit(
            SLDTM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn strr(&mut self, op0: impl OperandCast) {
        self.emit(
            STRR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn strm(&mut self, op0: impl OperandCast) {
        self.emit(
            STRM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lldtr(&mut self, op0: impl OperandCast) {
        self.emit(
            LLDTR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lldtm(&mut self, op0: impl OperandCast) {
        self.emit(
            LLDTM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ltrr(&mut self, op0: impl OperandCast) {
        self.emit(
            LTRR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ltrm(&mut self, op0: impl OperandCast) {
        self.emit(
            LTRM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn verrr(&mut self, op0: impl OperandCast) {
        self.emit(
            VERRR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn verrm(&mut self, op0: impl OperandCast) {
        self.emit(
            VERRM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn verwr(&mut self, op0: impl OperandCast) {
        self.emit(
            VERWR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn verwm(&mut self, op0: impl OperandCast) {
        self.emit(
            VERWM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sgdtm(&mut self, op0: impl OperandCast) {
        self.emit(
            SGDTM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sidtm(&mut self, op0: impl OperandCast) {
        self.emit(
            SIDTM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lgdtm(&mut self, op0: impl OperandCast) {
        self.emit(
            LGDTM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lidtm(&mut self, op0: impl OperandCast) {
        self.emit(
            LIDTM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn smswm(&mut self, op0: impl OperandCast) {
        self.emit(
            SMSWM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn smsw16r(&mut self, op0: impl OperandCast) {
        self.emit(
            SMSW16R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn smsw32r(&mut self, op0: impl OperandCast) {
        self.emit(
            SMSW32R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn smsw64r(&mut self, op0: impl OperandCast) {
        self.emit(
            SMSW64R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lmswr(&mut self, op0: impl OperandCast) {
        self.emit(
            LMSWR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lmswm(&mut self, op0: impl OperandCast) {
        self.emit(
            LMSWM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn invlpg8m(&mut self, op0: impl OperandCast) {
        self.emit(
            INVLPG8M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn enclv(&mut self) {
        self.emit(
            ENCLV, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn monitor(&mut self) {
        self.emit(
            MONITOR, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mwait(&mut self) {
        self.emit(
            MWAIT, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn clac(&mut self) {
        self.emit(
            CLAC, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn stac(&mut self) {
        self.emit(
            STAC, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn encls(&mut self) {
        self.emit(
            ENCLS, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xgetbv(&mut self) {
        self.emit(
            XGETBV, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xsetbv(&mut self) {
        self.emit(
            XSETBV, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xend(&mut self) {
        self.emit(
            XEND, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xtest(&mut self) {
        self.emit(
            XTEST, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn enclu(&mut self) {
        self.emit(
            ENCLU, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn swapgs(&mut self) {
        self.emit(
            SWAPGS, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rdtscp(&mut self) {
        self.emit(
            RDTSCP, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lar16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LAR16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lar16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LAR16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lar32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LAR32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lar32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LAR32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lar64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LAR64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lar64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LAR64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lsl16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LSL16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lsl16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LSL16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lsl32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LSL32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lsl32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LSL32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lsl64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LSL64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lsl64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LSL64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn syscall(&mut self) {
        self.emit(
            SYSCALL, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn clts(&mut self) {
        self.emit(
            CLTS, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sysret(&mut self) {
        self.emit(
            SYSRET, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn invd(&mut self) {
        self.emit(
            INVD, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn wbinvd(&mut self) {
        self.emit(
            WBINVD, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ud2(&mut self) {
        self.emit(
            UD2, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn prefetchm(&mut self, op0: impl OperandCast) {
        self.emit(
            PREFETCHM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn prefetchwm(&mut self, op0: impl OperandCast) {
        self.emit(
            PREFETCHWM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn prefetchwt1m(&mut self, op0: impl OperandCast) {
        self.emit(
            PREFETCHWT1M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn femms(&mut self) {
        self.emit(
            FEMMS, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn _3dnowrmi(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            _3DNOWRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn _3dnowrri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            _3DNOWRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn prefetchntam(&mut self, op0: impl OperandCast) {
        self.emit(
            PREFETCHNTAM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn prefetcht0m(&mut self, op0: impl OperandCast) {
        self.emit(
            PREFETCHT0M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn prefetcht1m(&mut self, op0: impl OperandCast) {
        self.emit(
            PREFETCHT1M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn prefetcht2m(&mut self, op0: impl OperandCast) {
        self.emit(
            PREFETCHT2M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn prefetchit1m(&mut self, op0: impl OperandCast) {
        self.emit(
            PREFETCHIT1M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn prefetchit0m(&mut self, op0: impl OperandCast) {
        self.emit(
            PREFETCHIT0M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn nop16r(&mut self, op0: impl OperandCast) {
        self.emit(
            NOP16R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn nop16m(&mut self, op0: impl OperandCast) {
        self.emit(
            NOP16M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn nop32r(&mut self, op0: impl OperandCast) {
        self.emit(
            NOP32R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn nop32m(&mut self, op0: impl OperandCast) {
        self.emit(
            NOP32M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn nop64r(&mut self, op0: impl OperandCast) {
        self.emit(
            NOP64R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn nop64m(&mut self, op0: impl OperandCast) {
        self.emit(
            NOP64M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov_cr2grr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV_CR2GRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov_dr2grr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV_DR2GRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov_g2crrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV_G2CRRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mov_g2drrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOV_G2DRRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn wrmsr(&mut self) {
        self.emit(
            WRMSR, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rdtsc(&mut self) {
        self.emit(
            RDTSC, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rdmsr(&mut self) {
        self.emit(
            RDMSR, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rdpmc(&mut self) {
        self.emit(
            RDPMC, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sysenter(&mut self) {
        self.emit(
            SYSENTER, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sysexit(&mut self) {
        self.emit(
            SYSEXIT, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn getsec(&mut self) {
        self.emit(
            GETSEC, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovo16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVO16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovo16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVO16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovo32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVO32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovo32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVO32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovo64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVO64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovo64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVO64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovno16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNO16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovno16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNO16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovno32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNO32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovno32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNO32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovno64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNO64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovno64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNO64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovc16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVC16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovc16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVC16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovc32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVC32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovc32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVC32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovc64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVC64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovc64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVC64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovnc16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNC16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovnc16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNC16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovnc32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNC32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovnc32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNC32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovnc64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNC64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovnc64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNC64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovz16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVZ16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovz16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVZ16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovz32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVZ32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovz32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVZ32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovz64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVZ64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovz64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVZ64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovnz16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNZ16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovnz16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNZ16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovnz32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNZ32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovnz32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNZ32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovnz64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNZ64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovnz64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNZ64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovbe16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVBE16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovbe16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVBE16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovbe32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVBE32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovbe32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVBE32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovbe64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVBE64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovbe64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVBE64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmova16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVA16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmova16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVA16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmova32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVA32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmova32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVA32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmova64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVA64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmova64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVA64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovs16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVS16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovs16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVS16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovs32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVS32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovs32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVS32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovs64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVS64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovs64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVS64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovns16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNS16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovns16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNS16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovns32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNS32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovns32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNS32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovns64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNS64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovns64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNS64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovp16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVP16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovp16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVP16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovp32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVP32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovp32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVP32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovp64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVP64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovp64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVP64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovnp16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNP16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovnp16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNP16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovnp32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNP32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovnp32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNP32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovnp64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNP64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovnp64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVNP64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovl16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVL16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovl16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVL16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovl32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVL32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovl32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVL32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovl64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVL64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovl64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVL64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovge16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVGE16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovge16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVGE16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovge32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVGE32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovge32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVGE32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovge64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVGE64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovge64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVGE64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovle16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVLE16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovle16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVLE16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovle32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVLE32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovle32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVLE32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovle64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVLE64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovle64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVLE64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovg16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVG16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovg16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVG16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovg32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVG32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovg32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVG32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovg64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVG64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmovg64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMOVG64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn seto8r(&mut self, op0: impl OperandCast) {
        self.emit(
            SETO8R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn seto8m(&mut self, op0: impl OperandCast) {
        self.emit(
            SETO8M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setno8r(&mut self, op0: impl OperandCast) {
        self.emit(
            SETNO8R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setno8m(&mut self, op0: impl OperandCast) {
        self.emit(
            SETNO8M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setc8r(&mut self, op0: impl OperandCast) {
        self.emit(
            SETC8R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setc8m(&mut self, op0: impl OperandCast) {
        self.emit(
            SETC8M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setnc8r(&mut self, op0: impl OperandCast) {
        self.emit(
            SETNC8R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setnc8m(&mut self, op0: impl OperandCast) {
        self.emit(
            SETNC8M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setz8r(&mut self, op0: impl OperandCast) {
        self.emit(
            SETZ8R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setz8m(&mut self, op0: impl OperandCast) {
        self.emit(
            SETZ8M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setnz8r(&mut self, op0: impl OperandCast) {
        self.emit(
            SETNZ8R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setnz8m(&mut self, op0: impl OperandCast) {
        self.emit(
            SETNZ8M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setbe8r(&mut self, op0: impl OperandCast) {
        self.emit(
            SETBE8R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setbe8m(&mut self, op0: impl OperandCast) {
        self.emit(
            SETBE8M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn seta8r(&mut self, op0: impl OperandCast) {
        self.emit(
            SETA8R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn seta8m(&mut self, op0: impl OperandCast) {
        self.emit(
            SETA8M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sets8r(&mut self, op0: impl OperandCast) {
        self.emit(
            SETS8R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sets8m(&mut self, op0: impl OperandCast) {
        self.emit(
            SETS8M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setns8r(&mut self, op0: impl OperandCast) {
        self.emit(
            SETNS8R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setns8m(&mut self, op0: impl OperandCast) {
        self.emit(
            SETNS8M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setp8r(&mut self, op0: impl OperandCast) {
        self.emit(
            SETP8R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setp8m(&mut self, op0: impl OperandCast) {
        self.emit(
            SETP8M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setnp8r(&mut self, op0: impl OperandCast) {
        self.emit(
            SETNP8R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setnp8m(&mut self, op0: impl OperandCast) {
        self.emit(
            SETNP8M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setl8r(&mut self, op0: impl OperandCast) {
        self.emit(
            SETL8R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setl8m(&mut self, op0: impl OperandCast) {
        self.emit(
            SETL8M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setge8r(&mut self, op0: impl OperandCast) {
        self.emit(
            SETGE8R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setge8m(&mut self, op0: impl OperandCast) {
        self.emit(
            SETGE8M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setle8r(&mut self, op0: impl OperandCast) {
        self.emit(
            SETLE8R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setle8m(&mut self, op0: impl OperandCast) {
        self.emit(
            SETLE8M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setg8r(&mut self, op0: impl OperandCast) {
        self.emit(
            SETG8R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setg8m(&mut self, op0: impl OperandCast) {
        self.emit(
            SETG8M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn push_seg16r(&mut self, op0: impl OperandCast) {
        self.emit(
            PUSH_SEG16R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn push_segr(&mut self, op0: impl OperandCast) {
        self.emit(
            PUSH_SEGR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn pop_seg16r(&mut self, op0: impl OperandCast) {
        self.emit(
            POP_SEG16R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn pop_segr(&mut self, op0: impl OperandCast) {
        self.emit(
            POP_SEGR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cpuid(&mut self) {
        self.emit(
            CPUID, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bt16mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BT16MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bt16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BT16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bt32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BT32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bt32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BT32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bt64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BT64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bt64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BT64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shld16mri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHLD16MRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shld16rri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHLD16RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shld32mri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHLD32MRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shld32rri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHLD32RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shld64mri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHLD64MRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shld64rri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHLD64RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shld16rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHLD16RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shld16mrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHLD16MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shld32rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHLD32RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shld32mrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHLD32MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shld64rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHLD64RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shld64mrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHLD64MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn rsm(&mut self) {
        self.emit(
            RSM, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bts16mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTS16MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bts16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTS16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bts32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTS32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bts32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTS32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bts64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTS64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bts64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTS64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn shrd16mri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHRD16MRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shrd16rri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHRD16RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shrd32mri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHRD32MRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shrd32rri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHRD32RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shrd64mri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHRD64MRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shrd64rri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHRD64RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shrd16rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHRD16RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shrd16mrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHRD16MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shrd32rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHRD32RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shrd32mrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHRD32MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shrd64rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHRD64RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shrd64mrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHRD64MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn imul16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            IMUL16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn imul16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            IMUL16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn imul32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            IMUL32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn imul32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            IMUL32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn imul64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            IMUL64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn imul64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            IMUL64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmpxchg8mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMPXCHG8MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmpxchg8rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMPXCHG8RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmpxchg16mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMPXCHG16MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmpxchg16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMPXCHG16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmpxchg32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMPXCHG32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmpxchg32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMPXCHG32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmpxchg64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMPXCHG64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmpxchg64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CMPXCHG64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lss16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LSS16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lss32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LSS32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lss64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LSS64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn btr16mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTR16MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn btr16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTR16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn btr32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTR32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn btr32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTR32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn btr64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTR64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn btr64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTR64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lfs16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LFS16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lfs32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LFS32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lfs64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LFS64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lgs16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LGS16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lgs32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LGS32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lgs64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LGS64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movzxr16m8(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVZXR16M8,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movzxr16r8(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVZXR16R8,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movzxr32m8(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVZXR32M8,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movzxr32r8(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVZXR32R8,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movzxr64m8(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVZXR64M8,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movzxr64r8(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVZXR64R8,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movzxr16m16(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVZXR16M16,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movzxr16r16(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVZXR16R16,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movzxr32m16(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVZXR32M16,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movzxr32r16(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVZXR32R16,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movzxr64m16(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVZXR64M16,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movzxr64r16(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVZXR64R16,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn popcnt16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            POPCNT16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn popcnt16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            POPCNT16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn popcnt32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            POPCNT32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn popcnt32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            POPCNT32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn popcnt64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            POPCNT64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn popcnt64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            POPCNT64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ud1_16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            UD1_16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ud1_16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            UD1_16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ud1_32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            UD1_32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ud1_32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            UD1_32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ud1_64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            UD1_64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ud1_64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            UD1_64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bt16mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BT16MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bt16ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BT16RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bt32mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BT32MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bt32ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BT32RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bt64mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BT64MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bt64ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BT64RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bts16mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTS16MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bts16ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTS16RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bts32mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTS32MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bts32ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTS32RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bts64mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTS64MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bts64ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTS64RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn btr16mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTR16MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn btr16ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTR16RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn btr32mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTR32MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn btr32ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTR32RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn btr64mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTR64MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn btr64ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTR64RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn btc16mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTC16MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn btc16ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTC16RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn btc32mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTC32MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn btc32ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTC32RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn btc64mi(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTC64MI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn btc64ri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTC64RI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn btc16mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTC16MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn btc16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTC16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn btc32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTC32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn btc32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTC32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn btc64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTC64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn btc64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BTC64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bsf16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BSF16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bsf16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BSF16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bsf32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BSF32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bsf32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BSF32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bsf64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BSF64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bsf64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BSF64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn tzcnt16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            TZCNT16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn tzcnt16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            TZCNT16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn tzcnt32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            TZCNT32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn tzcnt32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            TZCNT32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn tzcnt64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            TZCNT64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn tzcnt64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            TZCNT64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bsr16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BSR16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bsr16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BSR16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bsr32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BSR32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bsr32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BSR32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bsr64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BSR64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bsr64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BSR64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lzcnt16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LZCNT16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lzcnt16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LZCNT16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lzcnt32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LZCNT32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lzcnt32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LZCNT32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lzcnt64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LZCNT64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lzcnt64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LZCNT64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movsxr16m8(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVSXR16M8,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movsxr16r8(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVSXR16R8,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movsxr32m8(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVSXR32M8,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movsxr32r8(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVSXR32R8,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movsxr64m8(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVSXR64M8,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movsxr64r8(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVSXR64R8,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movsxr16m16(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVSXR16M16,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movsxr16r16(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVSXR16R16,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movsxr32m16(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVSXR32M16,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movsxr32r16(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVSXR32R16,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movsxr64m16(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVSXR64M16,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movsxr64r16(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVSXR64R16,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xadd8mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XADD8MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xadd8rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XADD8RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xadd16mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XADD16MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xadd16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XADD16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xadd32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XADD32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xadd32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XADD32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xadd64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XADD64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xadd64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            XADD64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movnti32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVNTI32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movnti64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVNTI64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmpxchgd32m(&mut self, op0: impl OperandCast) {
        self.emit(
            CMPXCHGD32M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmpxchg8bm(&mut self, op0: impl OperandCast) {
        self.emit(
            CMPXCHG8BM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmpxchgd64m(&mut self, op0: impl OperandCast) {
        self.emit(
            CMPXCHGD64M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmpxchg16bm(&mut self, op0: impl OperandCast) {
        self.emit(
            CMPXCHG16BM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bswap16r(&mut self, op0: impl OperandCast) {
        self.emit(
            BSWAP16R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bswap32r(&mut self, op0: impl OperandCast) {
        self.emit(
            BSWAP32R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bswap64r(&mut self, op0: impl OperandCast) {
        self.emit(
            BSWAP64R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ud0_16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            UD0_16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ud0_16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            UD0_16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ud0_32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            UD0_32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ud0_32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            UD0_32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ud0_64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            UD0_64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ud0_64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            UD0_64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movbe16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVBE16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movbe32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVBE32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movbe64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVBE64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn crc32_8rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CRC32_8RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn crc32_8rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CRC32_8RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movbe16mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVBE16MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movbe32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVBE32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movbe64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVBE64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn crc32_16rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CRC32_16RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn crc32_16rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CRC32_16RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn crc32_32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CRC32_32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn crc32_32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CRC32_32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn crc32_64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CRC32_64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn crc32_64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            CRC32_64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_cvtpi2psrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_CVTPI2PSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_cvtpi2psrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_CVTPI2PSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_cvtpi2pdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_CVTPI2PDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_cvtpi2pdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_CVTPI2PDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_cvttps2pirm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_CVTTPS2PIRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_cvttps2pirr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_CVTTPS2PIRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_cvttpd2pirm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_CVTTPD2PIRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_cvttpd2pirr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_CVTTPD2PIRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_cvtps2pirm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_CVTPS2PIRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_cvtps2pirr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_CVTPS2PIRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_cvtpd2pirm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_CVTPD2PIRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_cvtpd2pirr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_CVTPD2PIRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_punpcklbwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PUNPCKLBWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_punpcklbwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PUNPCKLBWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_punpcklwdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PUNPCKLWDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_punpcklwdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PUNPCKLWDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_punpckldqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PUNPCKLDQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_punpckldqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PUNPCKLDQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_packsswbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PACKSSWBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_packsswbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PACKSSWBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pcmpgtbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PCMPGTBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pcmpgtbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PCMPGTBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pcmpgtwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PCMPGTWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pcmpgtwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PCMPGTWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pcmpgtdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PCMPGTDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pcmpgtdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PCMPGTDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_packuswbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PACKUSWBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_packuswbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PACKUSWBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_punpckhbwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PUNPCKHBWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_punpckhbwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PUNPCKHBWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_punpckhwdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PUNPCKHWDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_punpckhwdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PUNPCKHWDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_punpckhdqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PUNPCKHDQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_punpckhdqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PUNPCKHDQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_packssdwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PACKSSDWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_packssdwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PACKSSDWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_movd_g2mrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_MOVD_G2MRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_movd_g2mrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_MOVD_G2MRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_movq_g2mrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_MOVQ_G2MRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_movq_g2mrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_MOVQ_G2MRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_movqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_MOVQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_movqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_MOVQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pshufwrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            MMX_PSHUFWRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn mmx_pshufwrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            MMX_PSHUFWRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn mmx_psrlwri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSRLWRI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psrawri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSRAWRI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psllwri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSLLWRI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psrldri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSRLDRI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psradri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSRADRI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pslldri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSLLDRI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psrlqri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSRLQRI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psllqri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSLLQRI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pcmpeqbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PCMPEQBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pcmpeqbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PCMPEQBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pcmpeqwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PCMPEQWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pcmpeqwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PCMPEQWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pcmpeqdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PCMPEQDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pcmpeqdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PCMPEQDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_emms(&mut self) {
        self.emit(
            MMX_EMMS, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_movd_m2gmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_MOVD_M2GMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_movd_m2grr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_MOVD_M2GRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_movq_m2gmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_MOVQ_M2GMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_movq_m2grr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_MOVQ_M2GRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_movqmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_MOVQMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pinsrwrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            MMX_PINSRWRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn mmx_pinsrwrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            MMX_PINSRWRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn mmx_pextrwrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            MMX_PEXTRWRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn mmx_psrlwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSRLWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psrlwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSRLWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psrldrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSRLDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psrldrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSRLDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psrlqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSRLQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psrlqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSRLQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_paddqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PADDQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_paddqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PADDQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pmullwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PMULLWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pmullwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PMULLWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_movdq2qrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_MOVDQ2QRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_movq2dqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_MOVQ2DQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pmovmskbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PMOVMSKBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psubusbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSUBUSBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psubusbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSUBUSBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psubuswrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSUBUSWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psubuswrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSUBUSWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pminubrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PMINUBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pminubrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PMINUBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pandrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PANDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pandrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PANDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_paddusbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PADDUSBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_paddusbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PADDUSBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_padduswrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PADDUSWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_padduswrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PADDUSWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pmaxubrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PMAXUBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pmaxubrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PMAXUBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pandnrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PANDNRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pandnrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PANDNRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pavgbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PAVGBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pavgbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PAVGBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psrawrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSRAWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psrawrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSRAWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psradrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSRADRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psradrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSRADRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pavgwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PAVGWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pavgwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PAVGWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pmulhuwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PMULHUWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pmulhuwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PMULHUWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pmulhwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PMULHWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pmulhwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PMULHWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_movntqmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_MOVNTQMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psubsbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSUBSBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psubsbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSUBSBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psubswrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSUBSWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psubswrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSUBSWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_porrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PORRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_porrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PORRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_paddsbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PADDSBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_paddsbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PADDSBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pminswrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PMINSWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pminswrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PMINSWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pmaxswrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PMAXSWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pmaxswrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PMAXSWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_paddswrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PADDSWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_paddswrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PADDSWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pxorrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PXORRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pxorrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PXORRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psllwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSLLWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psllwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSLLWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pslldrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSLLDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pslldrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSLLDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psllqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSLLQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psllqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSLLQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pmuludqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PMULUDQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pmuludqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PMULUDQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pmaddwdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PMADDWDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pmaddwdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PMADDWDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psadbwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSADBWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psadbwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSADBWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psubbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSUBBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psubbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSUBBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psubwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSUBWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psubwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSUBWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psubdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSUBDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psubdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSUBDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psubqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSUBQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psubqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSUBQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_paddbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PADDBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_paddbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PADDBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_paddwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PADDWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_paddwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PADDWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_padddrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PADDDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_padddrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PADDDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pshufbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSHUFBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pshufbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSHUFBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_phaddwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PHADDWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_phaddwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PHADDWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_phadddrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PHADDDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_phadddrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PHADDDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_phaddswrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PHADDSWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_phaddswrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PHADDSWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pmaddubswrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PMADDUBSWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pmaddubswrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PMADDUBSWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_phsubwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PHSUBWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_phsubwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PHSUBWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_phsubdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PHSUBDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_phsubdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PHSUBDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_phsubswrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PHSUBSWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_phsubswrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PHSUBSWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psignbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSIGNBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psignbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSIGNBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psignwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSIGNWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psignwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSIGNWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psigndrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSIGNDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_psigndrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PSIGNDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pmulhrswrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PMULHRSWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pmulhrswrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PMULHRSWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pabsbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PABSBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pabsbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PABSBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pabswrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PABSWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pabswrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PABSWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pabsdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PABSDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_pabsdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MMX_PABSDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mmx_palignrrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            MMX_PALIGNRRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn mmx_palignrrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            MMX_PALIGNRRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_movupsrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVUPSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movupsrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVUPSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movupdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVUPDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movupdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVUPDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movssrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVSSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movssrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVSSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movsdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVSDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movsdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVSDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movupsmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVUPSMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movupdmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVUPDMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movssmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVSSMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movsdmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVSDMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movlpsrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVLPSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movhlpsrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVHLPSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movlpdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVLPDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movslduprm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVSLDUPRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movslduprr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVSLDUPRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movdduprm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVDDUPRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movdduprr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVDDUPRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movlpsmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVLPSMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movlpdmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVLPDMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_unpcklpsrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_UNPCKLPSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_unpcklpsrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_UNPCKLPSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_unpcklpdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_UNPCKLPDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_unpcklpdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_UNPCKLPDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_unpckhpsrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_UNPCKHPSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_unpckhpsrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_UNPCKHPSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_unpckhpdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_UNPCKHPDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_unpckhpdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_UNPCKHPDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movhpsrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVHPSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movlhpsrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVLHPSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movhpdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVHPDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movshduprm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVSHDUPRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movshduprr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVSHDUPRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movhpsmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVHPSMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movhpdmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVHPDMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movapsrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVAPSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movapsrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVAPSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movapdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVAPDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movapdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVAPDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movapsmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVAPSMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movapdmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVAPDMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtsi2ss32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTSI2SS32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtsi2ss32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTSI2SS32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtsi2ss64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTSI2SS64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtsi2ss64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTSI2SS64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtsi2sd32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTSI2SD32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtsi2sd32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTSI2SD32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtsi2sd64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTSI2SD64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtsi2sd64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTSI2SD64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movntpsmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVNTPSMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movntpdmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVNTPDMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movntssmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVNTSSMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movntsdmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVNTSDMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvttss2si32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTTSS2SI32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvttss2si32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTTSS2SI32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvttss2si64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTTSS2SI64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvttss2si64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTTSS2SI64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvttsd2si32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTTSD2SI32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvttsd2si32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTTSD2SI32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvttsd2si64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTTSD2SI64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvttsd2si64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTTSD2SI64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtss2si32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTSS2SI32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtss2si32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTSS2SI32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtss2si64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTSS2SI64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtss2si64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTSS2SI64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtsd2si32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTSD2SI32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtsd2si32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTSD2SI32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtsd2si64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTSD2SI64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtsd2si64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTSD2SI64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_ucomissrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_UCOMISSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_ucomissrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_UCOMISSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_ucomisdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_UCOMISDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_ucomisdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_UCOMISDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_comissrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_COMISSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_comissrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_COMISSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_comisdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_COMISDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_comisdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_COMISDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movmskpsrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVMSKPSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movmskpdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVMSKPDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_sqrtpsrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_SQRTPSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_sqrtpsrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_SQRTPSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_sqrtpdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_SQRTPDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_sqrtpdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_SQRTPDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_sqrtssrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_SQRTSSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_sqrtssrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_SQRTSSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_sqrtsdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_SQRTSDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_sqrtsdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_SQRTSDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_rsqrtpsrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_RSQRTPSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_rsqrtpsrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_RSQRTPSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_rsqrtssrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_RSQRTSSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_rsqrtssrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_RSQRTSSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_rcppsrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_RCPPSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_rcppsrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_RCPPSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_rcpssrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_RCPSSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_rcpssrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_RCPSSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_andpsrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_ANDPSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_andpsrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_ANDPSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_andpdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_ANDPDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_andpdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_ANDPDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_andnpsrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_ANDNPSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_andnpsrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_ANDNPSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_andnpdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_ANDNPDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_andnpdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_ANDNPDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_orpsrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_ORPSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_orpsrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_ORPSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_orpdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_ORPDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_orpdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_ORPDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_xorpsrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_XORPSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_xorpsrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_XORPSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_xorpdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_XORPDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_xorpdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_XORPDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_addpsrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_ADDPSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_addpsrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_ADDPSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_addpdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_ADDPDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_addpdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_ADDPDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_addssrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_ADDSSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_addssrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_ADDSSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_addsdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_ADDSDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_addsdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_ADDSDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_mulpsrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MULPSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_mulpsrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MULPSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_mulpdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MULPDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_mulpdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MULPDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_mulssrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MULSSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_mulssrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MULSSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_mulsdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MULSDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_mulsdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MULSDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtps2pdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTPS2PDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtps2pdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTPS2PDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtpd2psrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTPD2PSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtpd2psrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTPD2PSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtss2sdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTSS2SDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtss2sdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTSS2SDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtsd2ssrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTSD2SSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtsd2ssrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTSD2SSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtdq2psrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTDQ2PSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtdq2psrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTDQ2PSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtps2dqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTPS2DQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtps2dqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTPS2DQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvttps2dqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTTPS2DQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvttps2dqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTTPS2DQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_subpsrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_SUBPSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_subpsrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_SUBPSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_subpdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_SUBPDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_subpdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_SUBPDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_subssrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_SUBSSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_subssrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_SUBSSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_subsdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_SUBSDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_subsdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_SUBSDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_minpsrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MINPSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_minpsrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MINPSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_minpdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MINPDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_minpdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MINPDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_minssrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MINSSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_minssrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MINSSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_minsdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MINSDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_minsdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MINSDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_divpsrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_DIVPSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_divpsrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_DIVPSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_divpdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_DIVPDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_divpdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_DIVPDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_divssrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_DIVSSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_divssrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_DIVSSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_divsdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_DIVSDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_divsdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_DIVSDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_maxpsrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MAXPSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_maxpsrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MAXPSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_maxpdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MAXPDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_maxpdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MAXPDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_maxssrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MAXSSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_maxssrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MAXSSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_maxsdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MAXSDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_maxsdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MAXSDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_punpcklbwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PUNPCKLBWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_punpcklbwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PUNPCKLBWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_punpcklwdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PUNPCKLWDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_punpcklwdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PUNPCKLWDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_punpckldqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PUNPCKLDQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_punpckldqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PUNPCKLDQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_packsswbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PACKSSWBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_packsswbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PACKSSWBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pcmpgtbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PCMPGTBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pcmpgtbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PCMPGTBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pcmpgtwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PCMPGTWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pcmpgtwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PCMPGTWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pcmpgtdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PCMPGTDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pcmpgtdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PCMPGTDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_packuswbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PACKUSWBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_packuswbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PACKUSWBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_punpckhbwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PUNPCKHBWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_punpckhbwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PUNPCKHBWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_punpckhwdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PUNPCKHWDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_punpckhwdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PUNPCKHWDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_punpckhdqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PUNPCKHDQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_punpckhdqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PUNPCKHDQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_packssdwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PACKSSDWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_packssdwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PACKSSDWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_punpcklqdqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PUNPCKLQDQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_punpcklqdqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PUNPCKLQDQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_punpckhqdqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PUNPCKHQDQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_punpckhqdqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PUNPCKHQDQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movd_g2xrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVD_G2XRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movd_g2xrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVD_G2XRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movq_g2xrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVQ_G2XRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movq_g2xrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVQ_G2XRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movdqarm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVDQARM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movdqarr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVDQARR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movdqurm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVDQURM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movdqurr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVDQURR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pshufdrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PSHUFDRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pshufdrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PSHUFDRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pshufhwrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PSHUFHWRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pshufhwrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PSHUFHWRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pshuflwrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PSHUFLWRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pshuflwrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PSHUFLWRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_psrlwri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSRLWRI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psrawri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSRAWRI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psllwri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSLLWRI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psrldri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSRLDRI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psradri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSRADRI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pslldri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSLLDRI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psrlqri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSRLQRI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psrldqri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSRLDQRI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psllqri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSLLQRI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pslldqri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSLLDQRI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pcmpeqbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PCMPEQBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pcmpeqbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PCMPEQBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pcmpeqwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PCMPEQWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pcmpeqwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PCMPEQWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pcmpeqdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PCMPEQDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pcmpeqdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PCMPEQDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_extrqri(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_EXTRQRI,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_insertqrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_INSERTQRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_extrqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_EXTRQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_insertqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_INSERTQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_haddpdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_HADDPDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_haddpdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_HADDPDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_haddpsrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_HADDPSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_haddpsrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_HADDPSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_hsubpdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_HSUBPDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_hsubpdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_HSUBPDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_hsubpsrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_HSUBPSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_hsubpsrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_HSUBPSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movd_x2gmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVD_X2GMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movd_x2grr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVD_X2GRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movq_x2gmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVQ_X2GMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movq_x2grr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVQ_X2GRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movdqamr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVDQAMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movdqumr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVDQUMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fxsave32m(&mut self, op0: impl OperandCast) {
        self.emit(
            FXSAVE32M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fxsave64m(&mut self, op0: impl OperandCast) {
        self.emit(
            FXSAVE64M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fxrstor32m(&mut self, op0: impl OperandCast) {
        self.emit(
            FXRSTOR32M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fxrstor64m(&mut self, op0: impl OperandCast) {
        self.emit(
            FXRSTOR64M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ldmxcsrm(&mut self, op0: impl OperandCast) {
        self.emit(
            LDMXCSRM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn stmxcsrm(&mut self, op0: impl OperandCast) {
        self.emit(
            STMXCSRM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lfence(&mut self) {
        self.emit(
            LFENCE, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mfence(&mut self) {
        self.emit(
            MFENCE, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sfence(&mut self) {
        self.emit(
            SFENCE, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cmppsrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_CMPPSRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_cmppsrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_CMPPSRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_cmppdrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_CMPPDRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_cmppdrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_CMPPDRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_cmpssrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_CMPSSRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_cmpssrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_CMPSSRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_cmpsdrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_CMPSDRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_cmpsdrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_CMPSDRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pinsrwrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PINSRWRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pinsrwrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PINSRWRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pextrwrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PEXTRWRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_shufpsrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_SHUFPSRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_shufpsrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_SHUFPSRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_shufpdrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_SHUFPDRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_shufpdrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_SHUFPDRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_addsubpdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_ADDSUBPDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_addsubpdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_ADDSUBPDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_addsubpsrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_ADDSUBPSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_addsubpsrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_ADDSUBPSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psrlwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSRLWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psrlwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSRLWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psrldrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSRLDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psrldrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSRLDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psrlqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSRLQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psrlqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSRLQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_paddqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PADDQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_paddqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PADDQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmullwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMULLWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmullwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMULLWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movqmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVQMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmovmskbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMOVMSKBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psubusbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSUBUSBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psubusbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSUBUSBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psubuswrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSUBUSWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psubuswrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSUBUSWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pminubrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMINUBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pminubrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMINUBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pandrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PANDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pandrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PANDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_paddusbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PADDUSBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_paddusbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PADDUSBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_padduswrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PADDUSWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_padduswrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PADDUSWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmaxubrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMAXUBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmaxubrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMAXUBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pandnrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PANDNRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pandnrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PANDNRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pavgbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PAVGBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pavgbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PAVGBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psrawrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSRAWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psrawrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSRAWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psradrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSRADRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psradrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSRADRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pavgwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PAVGWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pavgwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PAVGWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmulhuwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMULHUWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmulhuwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMULHUWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmulhwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMULHWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmulhwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMULHWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvttpd2dqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTTPD2DQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvttpd2dqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTTPD2DQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtdq2pdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTDQ2PDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtdq2pdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTDQ2PDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtpd2dqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTPD2DQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_cvtpd2dqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_CVTPD2DQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movntdqmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVNTDQMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psubsbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSUBSBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psubsbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSUBSBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psubswrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSUBSWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psubswrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSUBSWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_porrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PORRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_porrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PORRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_paddsbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PADDSBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_paddsbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PADDSBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pminswrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMINSWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pminswrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMINSWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmaxswrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMAXSWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmaxswrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMAXSWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_paddswrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PADDSWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_paddswrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PADDSWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pxorrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PXORRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pxorrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PXORRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_lddqurm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_LDDQURM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psllwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSLLWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psllwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSLLWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pslldrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSLLDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pslldrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSLLDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psllqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSLLQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psllqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSLLQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmuludqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMULUDQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmuludqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMULUDQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmaddwdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMADDWDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmaddwdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMADDWDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psadbwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSADBWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psadbwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSADBWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psubbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSUBBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psubbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSUBBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psubwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSUBWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psubwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSUBWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psubdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSUBDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psubdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSUBDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psubqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSUBQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psubqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSUBQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_paddbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PADDBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_paddbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PADDBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_paddwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PADDWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_paddwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PADDWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_padddrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PADDDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_padddrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PADDDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pshufbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSHUFBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pshufbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSHUFBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_phaddwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PHADDWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_phaddwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PHADDWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_phadddrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PHADDDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_phadddrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PHADDDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_phaddswrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PHADDSWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_phaddswrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PHADDSWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmaddubswrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMADDUBSWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmaddubswrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMADDUBSWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_phsubwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PHSUBWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_phsubwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PHSUBWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_phsubdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PHSUBDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_phsubdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PHSUBDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_phsubswrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PHSUBSWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_phsubswrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PHSUBSWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psignbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSIGNBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psignbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSIGNBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psignwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSIGNWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psignwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSIGNWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psigndrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSIGNDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_psigndrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PSIGNDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmulhrswrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMULHRSWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmulhrswrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMULHRSWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pblendvbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PBLENDVBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pblendvbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PBLENDVBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_blendvpsrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_BLENDVPSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_blendvpsrmr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_BLENDVPSRMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_blendvpdrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_BLENDVPDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_blendvpdrmr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_BLENDVPDRMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_ptestrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PTESTRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_ptestrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PTESTRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pabsbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PABSBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pabsbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PABSBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pabswrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PABSWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pabswrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PABSWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pabsdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PABSDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pabsdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PABSDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmovsxbwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMOVSXBWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmovsxbwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMOVSXBWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmovsxbdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMOVSXBDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmovsxbdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMOVSXBDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmovsxbqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMOVSXBQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmovsxbqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMOVSXBQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmovsxwdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMOVSXWDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmovsxwdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMOVSXWDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmovsxwqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMOVSXWQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmovsxwqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMOVSXWQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmovsxdqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMOVSXDQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmovsxdqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMOVSXDQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmuldqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMULDQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmuldqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMULDQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pcmpeqqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PCMPEQQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pcmpeqqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PCMPEQQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_movntdqarm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_MOVNTDQARM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_packusdwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PACKUSDWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_packusdwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PACKUSDWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmovzxbwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMOVZXBWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmovzxbwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMOVZXBWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmovzxbdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMOVZXBDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmovzxbdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMOVZXBDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmovzxbqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMOVZXBQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmovzxbqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMOVZXBQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmovzxwdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMOVZXWDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmovzxwdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMOVZXWDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmovzxwqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMOVZXWQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmovzxwqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMOVZXWQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmovzxdqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMOVZXDQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmovzxdqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMOVZXDQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pcmpgtqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PCMPGTQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pcmpgtqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PCMPGTQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pminsbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMINSBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pminsbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMINSBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pminsdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMINSDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pminsdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMINSDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pminuwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMINUWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pminuwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMINUWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pminudrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMINUDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pminudrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMINUDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmaxsbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMAXSBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmaxsbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMAXSBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmaxsdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMAXSDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmaxsdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMAXSDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmaxuwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMAXUWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmaxuwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMAXUWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmaxudrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMAXUDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmaxudrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMAXUDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmulldrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMULLDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_pmulldrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PMULLDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_phminposuwrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PHMINPOSUWRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_phminposuwrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SSE_PHMINPOSUWRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movdir64brm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVDIR64BRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movdiri32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVDIRI32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn movdiri64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            MOVDIRI64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sse_roundpsrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_ROUNDPSRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_roundpsrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_ROUNDPSRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_roundpdrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_ROUNDPDRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_roundpdrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_ROUNDPDRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_roundssrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_ROUNDSSRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_roundssrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_ROUNDSSRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_roundsdrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_ROUNDSDRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_roundsdrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_ROUNDSDRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_blendpsrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_BLENDPSRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_blendpsrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_BLENDPSRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_blendpdrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_BLENDPDRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_blendpdrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_BLENDPDRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pblendwrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PBLENDWRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pblendwrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PBLENDWRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_palignrrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PALIGNRRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_palignrrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PALIGNRRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pextrbmri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PEXTRBMRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pextrbrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PEXTRBRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pextrwmri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PEXTRWMRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pextrdmri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PEXTRDMRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pextrdrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PEXTRDRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pextrqmri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PEXTRQMRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pextrqrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PEXTRQRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_extractpsmri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_EXTRACTPSMRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_extractpsrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_EXTRACTPSRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pinsrbrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PINSRBRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pinsrbrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PINSRBRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_insertpsrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_INSERTPSRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_insertpsrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_INSERTPSRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pinsrdrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PINSRDRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pinsrdrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PINSRDRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pinsrqrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PINSRQRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pinsrqrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PINSRQRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_dppsrmi(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SSE_DPPSRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_dppsrri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SSE_DPPSRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_dppdrmi(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SSE_DPPDRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_dppdrri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SSE_DPPDRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_mpsadbwrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_MPSADBWRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_mpsadbwrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_MPSADBWRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pclmulqdqrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PCLMULQDQRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pclmulqdqrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PCLMULQDQRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pcmpestrmrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PCMPESTRMRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pcmpestrmrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PCMPESTRMRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pcmpestrirmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PCMPESTRIRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pcmpestrirri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PCMPESTRIRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pcmpistrmrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PCMPISTRMRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pcmpistrmrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PCMPISTRMRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pcmpistrirmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PCMPISTRIRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sse_pcmpistrirri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SSE_PCMPISTRIRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn aesimcrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AESIMCRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn aesimcrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AESIMCRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn aesencrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AESENCRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn aesencrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AESENCRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn aesenclastrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AESENCLASTRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn aesenclastrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AESENCLASTRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn aesdecrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AESDECRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn aesdecrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AESDECRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn aesdeclastrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AESDECLASTRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn aesdeclastrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AESDECLASTRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn aeskeygenassistrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            AESKEYGENASSISTRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn aeskeygenassistrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            AESKEYGENASSISTRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaesimcrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VAESIMCRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vaesimcrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VAESIMCRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vaesenc128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESENC128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaesenc128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESENC128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaesenc256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESENC256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaesenc256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESENC256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaesenclast128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESENCLAST128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaesenclast128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESENCLAST128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaesenclast256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESENCLAST256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaesenclast256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESENCLAST256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaesdec128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESDEC128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaesdec128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESDEC128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaesdec256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESDEC256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaesdec256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESDEC256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaesdeclast128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESDECLAST128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaesdeclast128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESDECLAST128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaesdeclast256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESDECLAST256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaesdeclast256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESDECLAST256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaeskeygenassistrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESKEYGENASSISTRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaeskeygenassistrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESKEYGENASSISTRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmovups128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVUPS128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovups128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVUPS128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovups256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVUPS256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovups256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVUPS256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovupd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVUPD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovupd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVUPD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovupd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVUPD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovupd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVUPD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovssrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVSSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovssrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMOVSSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmovsdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVSDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovsdrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMOVSDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmovups128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVUPS128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovups256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVUPS256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovupd128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVUPD128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovupd256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVUPD256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovssmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVSSMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovsdmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVSDMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovlpsrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMOVLPSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmovhlpsrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMOVHLPSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmovlpdrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMOVLPDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmovddup128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDDUP128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovddup128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDDUP128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovddup256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDDUP256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovddup256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDDUP256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovsldup128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVSLDUP128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovsldup128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVSLDUP128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovsldup256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVSLDUP256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovsldup256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVSLDUP256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovlpsmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVLPSMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovlpdmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVLPDMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vunpcklps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKLPS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpcklps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKLPS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpcklps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKLPS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpcklps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKLPS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpcklpd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKLPD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpcklpd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKLPD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpcklpd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKLPD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpcklpd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKLPD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpckhps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKHPS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpckhps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKHPS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpckhps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKHPS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpckhps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKHPS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpckhpd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKHPD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpckhpd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKHPD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpckhpd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKHPD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpckhpd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKHPD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmovhpsrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMOVHPSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmovlhpsrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMOVLHPSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmovhpdrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMOVHPDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmovshdup128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVSHDUP128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovshdup128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVSHDUP128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovshdup256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVSHDUP256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovshdup256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVSHDUP256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovhpsmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVHPSMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovhpdmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVHPDMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovaps128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVAPS128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovaps128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVAPS128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovaps256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVAPS256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovaps256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVAPS256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovapd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVAPD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovapd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVAPD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovapd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVAPD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovapd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVAPD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovaps128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVAPS128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovaps256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVAPS256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovapd128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVAPD128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovapd256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVAPD256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsi2ss32rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSI2SS32RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsi2ss32rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSI2SS32RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsi2ss64rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSI2SS64RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsi2ss64rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSI2SS64RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsi2sd32rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSI2SD32RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsi2sd32rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSI2SD32RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsi2sd64rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSI2SD64RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsi2sd64rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSI2SD64RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmovntps128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVNTPS128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovntps256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVNTPS256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovntpd128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVNTPD128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovntpd256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVNTPD256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttss2si32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSS2SI32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttss2si32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSS2SI32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttss2si64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSS2SI64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttss2si64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSS2SI64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttsd2si32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSD2SI32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttsd2si32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSD2SI32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttsd2si64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSD2SI64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttsd2si64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSD2SI64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtss2si32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSS2SI32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtss2si32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSS2SI32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtss2si64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSS2SI64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtss2si64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSS2SI64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsd2si32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSD2SI32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsd2si32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSD2SI32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsd2si64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSD2SI64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsd2si64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSD2SI64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vucomissrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VUCOMISSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vucomissrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VUCOMISSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vucomisdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VUCOMISDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vucomisdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VUCOMISDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcomissrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCOMISSRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcomissrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCOMISSRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcomisdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCOMISDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcomisdrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCOMISDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovmskps128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVMSKPS128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovmskps256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVMSKPS256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovmskpd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVMSKPD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovmskpd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVMSKPD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtps128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPS128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtps128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPS128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtps256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPS256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtps256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPS256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtpd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtpd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtpd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtpd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtssrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VSQRTSSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsqrtssrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VSQRTSSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsqrtsdrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VSQRTSDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsqrtsdrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VSQRTSDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrsqrtps128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRTPS128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrtps128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRTPS128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrtps256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRTPS256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrtps256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRTPS256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrtssrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VRSQRTSSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrsqrtssrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VRSQRTSSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrcpps128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCPPS128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcpps128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCPPS128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcpps256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCPPS256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcpps256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCPPS256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcpssrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VRCPSSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrcpssrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VRCPSSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDPS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDPS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDPS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDPS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandpd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDPD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandpd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDPD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandpd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDPD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandpd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDPD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandnps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDNPS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandnps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDNPS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandnps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDNPS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandnps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDNPS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandnpd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDNPD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandnpd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDNPD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandnpd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDNPD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandnpd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDNPD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vorps128rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VORPS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vorps128rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VORPS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vorps256rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VORPS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vorps256rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VORPS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vorpd128rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VORPD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vorpd128rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VORPD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vorpd256rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VORPD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vorpd256rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VORPD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vxorps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VXORPS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vxorps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VXORPS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vxorps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VXORPS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vxorps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VXORPS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vxorpd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VXORPD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vxorpd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VXORPD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vxorpd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VXORPD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vxorpd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VXORPD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddpd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddpd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddpd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddpd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddssrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VADDSSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddssrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VADDSSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddsdrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VADDSDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddsdrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VADDSDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulpd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulpd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulpd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulpd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulssrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMULSSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulssrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMULSSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulsdrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMULSDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulsdrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMULSDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2pd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2PD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2pd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2PD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2pd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2PD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2pd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2PD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2ps128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2PS128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2ps128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2PS128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2ps256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2PS256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2ps256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2PS256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtss2sdrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSS2SDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtss2sdrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSS2SDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsd2ssrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSD2SSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsd2ssrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSD2SSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2ps128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PS128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2ps128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PS128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2ps256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PS256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2ps256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PS256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2dq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2DQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2dq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2DQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2dq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2DQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2dq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2DQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2dq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2DQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2dq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2DQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2dq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2DQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2dq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2DQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsubps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubpd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubpd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubpd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubpd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubssrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VSUBSSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubssrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VSUBSSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubsdrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VSUBSDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubsdrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VSUBSDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminpd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminpd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminpd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminpd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminssrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMINSSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminssrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMINSSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminsdrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMINSDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminsdrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMINSDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivpd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivpd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivpd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivpd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivssrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VDIVSSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivssrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VDIVSSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivsdrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VDIVSDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivsdrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VDIVSDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxpd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxpd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxpd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxpd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxssrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMAXSSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxssrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMAXSSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxsdrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMAXSDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxsdrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMAXSDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpcklbw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLBW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpcklbw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLBW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpcklbw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLBW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpcklbw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLBW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpcklwd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLWD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpcklwd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLWD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpcklwd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLWD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpcklwd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLWD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckldq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLDQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckldq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLDQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckldq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLDQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckldq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLDQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpacksswb128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKSSWB128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpacksswb128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKSSWB128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpacksswb256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKSSWB256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpacksswb256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKSSWB256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtb128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTB128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtb128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTB128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtb256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTB256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtb256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTB256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpackuswb128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKUSWB128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpackuswb128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKUSWB128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpackuswb256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKUSWB256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpackuswb256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKUSWB256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhbw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHBW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhbw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHBW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhbw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHBW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhbw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHBW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhwd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHWD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhwd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHWD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhwd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHWD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhwd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHWD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhdq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHDQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhdq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHDQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhdq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHDQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhdq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHDQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpackssdw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKSSDW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpackssdw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKSSDW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpackssdw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKSSDW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpackssdw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKSSDW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpcklqdq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLQDQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpcklqdq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLQDQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpcklqdq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLQDQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpcklqdq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLQDQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhqdq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHQDQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhqdq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHQDQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhqdq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHQDQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhqdq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHQDQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmovdrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovd_g2xrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVD_G2XRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovq_g2xrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVQ_G2XRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovq_g2xrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVQ_G2XRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqa128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQA128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqa128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQA128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqa256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQA256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqa256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQA256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpshufd128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFD128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufd128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFD128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufd256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFD256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufd256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFD256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufhw128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFHW128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufhw128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFHW128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufhw256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFHW256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufhw256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFHW256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshuflw128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFLW128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshuflw128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFLW128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshuflw256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFLW256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshuflw256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFLW256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlw128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLW128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlw256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLW256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraw128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAW128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraw256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAW256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllw128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLW128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllw256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLW256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrld128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLD128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrld256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLD256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrad128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAD128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrad256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAD256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpslld128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLD128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpslld256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLD256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlq128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLQ128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlq256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLQ256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrldq128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLDQ128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrldq256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLDQ256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllq128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLQ128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllq256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLQ256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpslldq128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLDQ128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpslldq256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLDQ256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqb128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQB128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqb128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQB128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqb256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQB256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqb256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQB256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vzeroupper(&mut self) {
        self.emit(
            VZEROUPPER, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vzeroall(&mut self) {
        self.emit(
            VZEROALL, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vhaddpd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VHADDPD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vhaddpd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VHADDPD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vhaddpd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VHADDPD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vhaddpd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VHADDPD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vhaddps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VHADDPS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vhaddps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VHADDPS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vhaddps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VHADDPS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vhaddps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VHADDPS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vhsubpd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VHSUBPD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vhsubpd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VHSUBPD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vhsubpd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VHSUBPD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vhsubpd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VHSUBPD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vhsubps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VHSUBPS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vhsubps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VHSUBPS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vhsubps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VHSUBPS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vhsubps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VHSUBPS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmovdmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovd_x2grr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVD_X2GRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovq_x2gmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVQ_X2GMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovq_x2grr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVQ_X2GRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovqrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVQRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovqrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVQRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqa128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQA128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqa256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQA256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vldmxcsrm(&mut self, op0: impl OperandCast) {
        self.emit(
            VLDMXCSRM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vstmxcsrm(&mut self, op0: impl OperandCast) {
        self.emit(
            VSTMXCSRM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcmpps128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPS128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpps128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPS128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpps256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPS256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpps256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPS256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmppd128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPD128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmppd128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPD128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmppd256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPD256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmppd256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPD256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpssrrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPSSRRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpssrrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPSSRRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpsdrrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPSDRRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpsdrrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPSDRRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpinsrwrrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPINSRWRRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpinsrwrrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPINSRWRRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpextrwrri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPEXTRWRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vshufps128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFPS128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufps128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFPS128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufps256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFPS256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufps256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFPS256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufpd128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFPD128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufpd128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFPD128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufpd256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFPD256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufpd256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFPD256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vaddsubpd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDSUBPD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddsubpd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDSUBPD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddsubpd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDSUBPD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddsubpd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDSUBPD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddsubps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDSUBPS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddsubps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDSUBPS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddsubps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDSUBPS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddsubps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDSUBPS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrld128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrld128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrld256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrld256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmullw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULLW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmullw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULLW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmullw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULLW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmullw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULLW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmovqmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVQMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovmskb128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVMSKB128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovmskb256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVMSKB256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpsubusb128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBUSB128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubusb128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBUSB128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubusb256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBUSB256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubusb256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBUSB256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubusw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBUSW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubusw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBUSW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubusw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBUSW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubusw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBUSW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminub128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUB128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminub128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUB128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminub256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUB256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminub256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUB256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpand128rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPAND128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpand128rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPAND128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpand256rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPAND256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpand256rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPAND256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddusb128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDUSB128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddusb128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDUSB128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddusb256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDUSB256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddusb256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDUSB256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddusw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDUSW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddusw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDUSW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddusw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDUSW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddusw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDUSW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxub128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUB128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxub128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUB128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxub256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUB256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxub256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUB256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandn128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDN128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandn128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDN128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandn256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDN256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandn256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDN256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpavgb128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPAVGB128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpavgb128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPAVGB128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpavgb256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPAVGB256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpavgb256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPAVGB256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrad128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrad128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrad256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrad256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpavgw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPAVGW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpavgw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPAVGW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpavgw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPAVGW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpavgw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPAVGW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulhuw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULHUW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulhuw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULHUW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulhuw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULHUW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulhuw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULHUW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulhw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULHW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulhw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULHW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulhw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULHW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulhw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULHW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2dq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2DQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2dq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2DQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2dq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2DQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2dq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2DQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2pd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2pd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2pd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2pd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2dq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2DQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2dq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2DQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2dq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2DQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2dq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2DQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovntdq128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVNTDQ128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovntdq256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVNTDQ256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpsubsb128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBSB128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubsb128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBSB128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubsb256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBSB256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubsb256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBSB256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubsw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBSW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubsw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBSW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubsw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBSW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubsw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBSW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpor128rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPOR128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpor128rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPOR128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpor256rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPOR256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpor256rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPOR256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddsb128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDSB128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddsb128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDSB128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddsb256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDSB256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddsb256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDSB256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddsw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDSW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddsw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDSW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddsw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDSW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddsw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDSW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpxor128rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPXOR128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpxor128rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPXOR128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpxor256rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPXOR256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpxor256rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPXOR256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vlddqu128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VLDDQU128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vlddqu256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VLDDQU256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpsllw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpslld128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpslld128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpslld256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpslld256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmuludq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULUDQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmuludq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULUDQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmuludq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULUDQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmuludq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULUDQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaddwd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADDWD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaddwd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADDWD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaddwd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADDWD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaddwd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADDWD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsadbw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSADBW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsadbw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSADBW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsadbw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSADBW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsadbw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSADBW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubb128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBB128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubb128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBB128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubb256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBB256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubb256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBB256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddb128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDB128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddb128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDB128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddb256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDB256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddb256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDB256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufb128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFB128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufb128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFB128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufb256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFB256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufb256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFB256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vphaddw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPHADDW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vphaddw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPHADDW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vphaddw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPHADDW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vphaddw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPHADDW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vphaddd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPHADDD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vphaddd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPHADDD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vphaddd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPHADDD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vphaddd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPHADDD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vphaddsw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPHADDSW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vphaddsw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPHADDSW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vphaddsw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPHADDSW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vphaddsw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPHADDSW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaddubsw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADDUBSW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaddubsw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADDUBSW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaddubsw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADDUBSW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaddubsw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADDUBSW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vphsubw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPHSUBW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vphsubw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPHSUBW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vphsubw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPHSUBW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vphsubw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPHSUBW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vphsubd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPHSUBD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vphsubd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPHSUBD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vphsubd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPHSUBD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vphsubd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPHSUBD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vphsubsw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPHSUBSW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vphsubsw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPHSUBSW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vphsubsw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPHSUBSW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vphsubsw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPHSUBSW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsignb128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSIGNB128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsignb128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSIGNB128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsignb256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSIGNB256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsignb256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSIGNB256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsignw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSIGNW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsignw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSIGNW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsignw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSIGNW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsignw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSIGNW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsignd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSIGND128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsignd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSIGND128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsignd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSIGND256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsignd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSIGND256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulhrsw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULHRSW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulhrsw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULHRSW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulhrsw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULHRSW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulhrsw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULHRSW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilpd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilpd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilpd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilpd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vtestps128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VTESTPS128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vtestps128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VTESTPS128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vtestps256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VTESTPS256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vtestps256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VTESTPS256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vtestpd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VTESTPD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vtestpd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VTESTPD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vtestpd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VTESTPD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vtestpd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VTESTPD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2ps128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PS128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2ps128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PS128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2ps256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PS256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2ps256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PS256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpermps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMPS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMPS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptest128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPTEST128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vptest128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPTEST128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vptest256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPTEST256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vptest256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPTEST256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcastss128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTSS128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcastss128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTSS128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcastss256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTSS256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcastss256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTSS256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcastsd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTSD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcastsd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTSD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcastf128_256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTF128_256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcastf128_256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTF128_256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsb128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSB128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsb128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSB128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsb256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSB256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsb256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSB256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsw128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSW128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsw128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSW128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsw256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSW256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsw256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSW256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxbw128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXBW128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxbw128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXBW128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxbw256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXBW256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxbw256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXBW256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxbd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXBD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxbd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXBD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxbd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXBD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxbd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXBD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxbq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXBQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxbq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXBQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxbq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXBQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxbq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXBQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxwd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXWD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxwd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXWD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxwd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXWD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxwd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXWD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxwq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXWQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxwq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXWQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxwq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXWQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxwq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXWQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxdq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXDQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxdq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXDQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxdq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXDQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxdq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXDQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmuldq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULDQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmuldq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULDQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmuldq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULDQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmuldq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULDQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmovntdqa128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVNTDQA128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovntdqa256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVNTDQA256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpackusdw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKUSDW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpackusdw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKUSDW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpackusdw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKUSDW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpackusdw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKUSDW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxbw128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXBW128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxbw128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXBW128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxbw256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXBW256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxbw256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXBW256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxbd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXBD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxbd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXBD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxbd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXBD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxbd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXBD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxbq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXBQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxbq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXBQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxbq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXBQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxbq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXBQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxwd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXWD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxwd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXWD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxwd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXWD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxwd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXWD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxwq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXWQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxwq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXWQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxwq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXWQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxwq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXWQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxdq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXDQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxdq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXDQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxdq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXDQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxdq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXDQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpermd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsb128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSB128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsb128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSB128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsb256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSB256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsb256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSB256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminuw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminuw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminuw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminuw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminud128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminud128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminud256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminud256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsb128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSB128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsb128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSB128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsb256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSB256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsb256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSB256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxuw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxuw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxuw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxuw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxud128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxud128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxud256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxud256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulld128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULLD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulld128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULLD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulld256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULLD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulld256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULLD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vphminposuw128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPHMINPOSUW128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vphminposuw128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPHMINPOSUW128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpsrlvd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLVD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlvd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLVD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlvd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLVD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlvd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLVD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlvq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLVQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlvq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLVQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlvq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLVQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlvq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLVQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsravd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAVD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsravd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAVD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsravd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAVD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsravd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAVD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllvd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLVD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllvd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLVD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllvd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLVD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllvd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLVD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllvq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLVQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllvq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLVQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllvq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLVQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllvq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLVQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcasti128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTI128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastb128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTB128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastb128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTB128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastb256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTB256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastb256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTB256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastw128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTW128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastw128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTW128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastw256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTW256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastw256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTW256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpgatherdd128rmr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPGATHERDD128RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpgatherdd256rmr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPGATHERDD256RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpgatherdq128rmr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPGATHERDQ128RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpgatherdq256rmr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPGATHERDQ256RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpgatherqd128rmr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPGATHERQD128RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpgatherqd256rmr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPGATHERQD256RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpgatherqq128rmr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPGATHERQQ128RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpgatherqq256rmr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPGATHERQQ256RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgatherdps128rmr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGATHERDPS128RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgatherdps256rmr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGATHERDPS256RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgatherdpd128rmr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGATHERDPD128RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgatherdpd256rmr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGATHERDPD256RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgatherqps128rmr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGATHERQPS128RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgatherqps256rmr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGATHERQPS256RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgatherqpd128rmr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGATHERQPD128RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgatherqpd256rmr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGATHERQPD256RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132ps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132ps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132ps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132ps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132pd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132pd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132pd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132pd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132ps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132ps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132ps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132ps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132pd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132pd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132pd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132pd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132ps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132ps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132ps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132ps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132pd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132pd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132pd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132pd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132ssrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132SSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132ssrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132SSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132sdrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132SDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132sdrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132SDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132ps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132ps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132ps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132ps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132pd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132pd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132pd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132pd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132ssrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132SSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132ssrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132SSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132sdrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132SDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132sdrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132SDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132ps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132ps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132ps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132ps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132pd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132pd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132pd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132pd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132ssrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132SSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132ssrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132SSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132sdrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132SDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132sdrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132SDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132ps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132ps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132ps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132ps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132pd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132pd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132pd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132pd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132ssrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132SSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132ssrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132SSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132sdrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132SDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132sdrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132SDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213ps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213ps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213ps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213ps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213pd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213pd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213pd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213pd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213ps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213ps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213ps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213ps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213pd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213pd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213pd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213pd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213ps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213ps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213ps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213ps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213pd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213pd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213pd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213pd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213ssrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213SSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213ssrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213SSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213sdrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213SDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213sdrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213SDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213ps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213ps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213ps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213ps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213pd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213pd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213pd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213pd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213ssrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213SSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213ssrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213SSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213sdrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213SDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213sdrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213SDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213ps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213ps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213ps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213ps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213pd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213pd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213pd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213pd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213ssrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213SSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213ssrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213SSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213sdrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213SDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213sdrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213SDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213ps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213ps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213ps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213ps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213pd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213pd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213pd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213pd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213ssrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213SSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213ssrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213SSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213sdrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213SDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213sdrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213SDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231ps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231ps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231ps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231ps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231pd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231pd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231pd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231pd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231ps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231ps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231ps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231ps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231pd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231pd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231pd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231pd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231ps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231ps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231ps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231ps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231pd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231pd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231pd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231pd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231ssrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231SSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231ssrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231SSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231sdrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231SDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231sdrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231SDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231ps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231ps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231ps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231ps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231pd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231pd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231pd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231pd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231ssrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231SSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231ssrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231SSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231sdrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231SDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231sdrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231SDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231ps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231ps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231ps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231ps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231pd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231pd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231pd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231pd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231ssrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231SSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231ssrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231SSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231sdrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231SDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231sdrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231SDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231ps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231ps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231ps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231ps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231pd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231pd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231pd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231pd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231ssrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231SSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231ssrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231SSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231sdrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231SDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231sdrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231SDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermq256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMQ256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermq256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMQ256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermpd256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMPD256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermpd256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMPD256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendd128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPBLENDD128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpblendd128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPBLENDD128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpblendd256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPBLENDD256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpblendd256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPBLENDD256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpermilps128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPS128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilps128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPS128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilps256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPS256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilps256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPS256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilpd128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPD128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilpd128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPD128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilpd256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPD256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilpd256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPD256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vperm2f128_256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPERM2F128_256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vperm2f128_256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPERM2F128_256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vroundps128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VROUNDPS128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vroundps128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VROUNDPS128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vroundps256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VROUNDPS256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vroundps256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VROUNDPS256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vroundpd128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VROUNDPD128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vroundpd128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VROUNDPD128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vroundpd256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VROUNDPD256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vroundpd256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VROUNDPD256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vroundssrrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VROUNDSSRRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vroundssrrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VROUNDSSRRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vroundsdrrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VROUNDSDRRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vroundsdrrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VROUNDSDRRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vblendps128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VBLENDPS128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vblendps128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VBLENDPS128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vblendps256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VBLENDPS256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vblendps256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VBLENDPS256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vblendpd128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VBLENDPD128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vblendpd128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VBLENDPD128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vblendpd256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VBLENDPD256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vblendpd256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VBLENDPD256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpblendw128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPBLENDW128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpblendw128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPBLENDW128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpblendw256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPBLENDW256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpblendw256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPBLENDW256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpalignr128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPALIGNR128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpalignr128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPALIGNR128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpalignr256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPALIGNR256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpalignr256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPALIGNR256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpextrbmri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPEXTRBMRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpextrbrri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPEXTRBRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpextrwmri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPEXTRWMRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpextrdmri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPEXTRDMRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpextrdrri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPEXTRDRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpextrqmri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPEXTRQMRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpextrqrri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPEXTRQRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextractpsmri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTPSMRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextractpsrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTPSRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vinsertf128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTF128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinsertf128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTF128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vextractf128mri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTF128MRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextractf128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTF128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2ph128mri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTPS2PH128MRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2ph128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTPS2PH128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2ph256mri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTPS2PH256MRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2ph256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTPS2PH256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpinsrbrrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPINSRBRRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpinsrbrrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPINSRBRRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinsertpsrrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTPSRRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinsertpsrrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTPSRRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpinsrdrrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPINSRDRRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpinsrdrrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPINSRDRRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpinsrqrrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPINSRQRRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpinsrqrrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPINSRQRRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinserti128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTI128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinserti128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTI128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vextracti128mri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTI128MRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextracti128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTI128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdpps128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VDPPS128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vdpps128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VDPPS128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vdpps256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VDPPS256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vdpps256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VDPPS256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vdppd128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VDPPD128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vdppd128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VDPPD128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vmpsadbw128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VMPSADBW128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vmpsadbw128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VMPSADBW128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vmpsadbw256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VMPSADBW256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vmpsadbw256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VMPSADBW256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpclmulqdq128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCLMULQDQ128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpclmulqdq128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCLMULQDQ128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpclmulqdq256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCLMULQDQ256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpclmulqdq256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCLMULQDQ256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vperm2i128_256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPERM2I128_256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vperm2i128_256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPERM2I128_256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vblendvps128rrmr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VBLENDVPS128RRMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vblendvps128rrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VBLENDVPS128RRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vblendvps256rrmr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VBLENDVPS256RRMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vblendvps256rrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VBLENDVPS256RRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vblendvpd128rrmr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VBLENDVPD128RRMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vblendvpd128rrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VBLENDVPD128RRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vblendvpd256rrmr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VBLENDVPD256RRMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vblendvpd256rrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VBLENDVPD256RRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpblendvb128rrmr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPBLENDVB128RRMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpblendvb128rrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPBLENDVB128RRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpblendvb256rrmr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPBLENDVB256RRMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpblendvb256rrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPBLENDVB256RRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpestrmrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPESTRMRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpestrmrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPESTRMRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpestrirmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPESTRIRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpestrirri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPESTRIRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpistrmrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPISTRMRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpistrmrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPISTRMRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpistrirmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPISTRIRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpistrirri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPISTRIRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn andn32rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            ANDN32RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn andn32rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            ANDN32RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn andn64rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            ANDN64RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn andn64rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            ANDN64RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn blsr32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BLSR32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn blsr32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BLSR32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn blsr64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BLSR64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn blsr64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BLSR64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn blsmsk32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BLSMSK32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn blsmsk32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BLSMSK32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn blsmsk64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BLSMSK64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn blsmsk64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BLSMSK64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn blsi32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BLSI32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn blsi32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BLSI32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn blsi64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BLSI64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn blsi64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            BLSI64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn bextr32rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            BEXTR32RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn bextr32rmr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            BEXTR32RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn bextr64rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            BEXTR64RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn bextr64rmr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            BEXTR64RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn rorx32rmi(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            RORX32RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn rorx32rri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            RORX32RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn rorx64rmi(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            RORX64RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn rorx64rri(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            RORX64RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn bzhi32rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            BZHI32RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn bzhi32rmr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            BZHI32RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn bzhi64rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            BZHI64RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn bzhi64rmr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            BZHI64RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn pdep32rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            PDEP32RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn pdep32rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            PDEP32RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn pdep64rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            PDEP64RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn pdep64rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            PDEP64RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn pext32rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            PEXT32RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn pext32rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            PEXT32RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn pext64rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            PEXT64RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn pext64rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            PEXT64RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn mulx32rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            MULX32RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn mulx32rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            MULX32RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn mulx64rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            MULX64RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn mulx64rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            MULX64RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shlx32rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHLX32RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shlx32rmr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHLX32RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shlx64rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHLX64RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shlx64rmr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHLX64RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shrx32rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHRX32RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shrx32rmr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHRX32RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shrx64rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHRX64RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn shrx64rmr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SHRX64RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sarx32rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SARX32RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sarx32rmr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SARX32RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sarx64rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SARX64RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sarx64rmr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            SARX64RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn adcx32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADCX32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adcx32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADCX32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adcx64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADCX64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adcx64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADCX64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adox32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADOX32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adox32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADOX32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adox64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADOX64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn adox64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ADOX64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn faddm32(&mut self, op0: impl OperandCast) {
        self.emit(
            FADDM32,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fmulm32(&mut self, op0: impl OperandCast) {
        self.emit(
            FMULM32,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fcomm32(&mut self, op0: impl OperandCast) {
        self.emit(
            FCOMM32,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fcompm32(&mut self, op0: impl OperandCast) {
        self.emit(
            FCOMPM32,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fsubm32(&mut self, op0: impl OperandCast) {
        self.emit(
            FSUBM32,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fsubrm32(&mut self, op0: impl OperandCast) {
        self.emit(
            FSUBRM32,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fdivm32(&mut self, op0: impl OperandCast) {
        self.emit(
            FDIVM32,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fdivrm32(&mut self, op0: impl OperandCast) {
        self.emit(
            FDIVRM32,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn faddrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            FADDRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fmulrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            FMULRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fcomrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            FCOMRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fcomprr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            FCOMPRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fsubrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            FSUBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fsubrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            FSUBRRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fdivrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            FDIVRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fdivrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            FDIVRRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fldm32(&mut self, op0: impl OperandCast) {
        self.emit(
            FLDM32,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fstm32(&mut self, op0: impl OperandCast) {
        self.emit(
            FSTM32,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fstpm32(&mut self, op0: impl OperandCast) {
        self.emit(
            FSTPM32,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fldenvm(&mut self, op0: impl OperandCast) {
        self.emit(
            FLDENVM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fldcwm(&mut self, op0: impl OperandCast) {
        self.emit(
            FLDCWM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fstenvm(&mut self, op0: impl OperandCast) {
        self.emit(
            FSTENVM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fstcwm(&mut self, op0: impl OperandCast) {
        self.emit(
            FSTCWM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fldr(&mut self, op0: impl OperandCast) {
        self.emit(
            FLDR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fxchr(&mut self, op0: impl OperandCast) {
        self.emit(
            FXCHR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fnop(&mut self) {
        self.emit(
            FNOP, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fchs(&mut self) {
        self.emit(
            FCHS, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fabs(&mut self) {
        self.emit(
            FABS, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ftst(&mut self) {
        self.emit(
            FTST, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fxam(&mut self) {
        self.emit(
            FXAM, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fld1(&mut self) {
        self.emit(
            FLD1, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fldl2t(&mut self) {
        self.emit(
            FLDL2T, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fldl2e(&mut self) {
        self.emit(
            FLDL2E, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fldpi(&mut self) {
        self.emit(
            FLDPI, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fldlg2(&mut self) {
        self.emit(
            FLDLG2, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fldln2(&mut self) {
        self.emit(
            FLDLN2, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fldz(&mut self) {
        self.emit(
            FLDZ, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn f2xm1(&mut self) {
        self.emit(
            F2XM1, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fyl2x(&mut self) {
        self.emit(
            FYL2X, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fptan(&mut self) {
        self.emit(
            FPTAN, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fpatan(&mut self) {
        self.emit(
            FPATAN, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fxtract(&mut self) {
        self.emit(
            FXTRACT, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fprem1(&mut self) {
        self.emit(
            FPREM1, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fdecstp(&mut self) {
        self.emit(
            FDECSTP, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fincstp(&mut self) {
        self.emit(
            FINCSTP, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fprem(&mut self) {
        self.emit(
            FPREM, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fyl2xp1(&mut self) {
        self.emit(
            FYL2XP1, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fsqrt(&mut self) {
        self.emit(
            FSQRT, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fsincos(&mut self) {
        self.emit(
            FSINCOS, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn frndint(&mut self) {
        self.emit(
            FRNDINT, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fscale(&mut self) {
        self.emit(
            FSCALE, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fsin(&mut self) {
        self.emit(
            FSIN, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fcos(&mut self) {
        self.emit(
            FCOS, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fiaddm32(&mut self, op0: impl OperandCast) {
        self.emit(
            FIADDM32,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fimulm32(&mut self, op0: impl OperandCast) {
        self.emit(
            FIMULM32,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ficomm32(&mut self, op0: impl OperandCast) {
        self.emit(
            FICOMM32,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ficompm32(&mut self, op0: impl OperandCast) {
        self.emit(
            FICOMPM32,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fisubm32(&mut self, op0: impl OperandCast) {
        self.emit(
            FISUBM32,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fisubrm32(&mut self, op0: impl OperandCast) {
        self.emit(
            FISUBRM32,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fidivm32(&mut self, op0: impl OperandCast) {
        self.emit(
            FIDIVM32,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fidivrm32(&mut self, op0: impl OperandCast) {
        self.emit(
            FIDIVRM32,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fcmovbr(&mut self, op0: impl OperandCast) {
        self.emit(
            FCMOVBR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fcmover(&mut self, op0: impl OperandCast) {
        self.emit(
            FCMOVER,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fcmovber(&mut self, op0: impl OperandCast) {
        self.emit(
            FCMOVBER,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fcmovur(&mut self, op0: impl OperandCast) {
        self.emit(
            FCMOVUR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fucompp(&mut self) {
        self.emit(
            FUCOMPP, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fildm32(&mut self, op0: impl OperandCast) {
        self.emit(
            FILDM32,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fisttpm32(&mut self, op0: impl OperandCast) {
        self.emit(
            FISTTPM32,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fistm32(&mut self, op0: impl OperandCast) {
        self.emit(
            FISTM32,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fistpm32(&mut self, op0: impl OperandCast) {
        self.emit(
            FISTPM32,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fldm80(&mut self, op0: impl OperandCast) {
        self.emit(
            FLDM80,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fstpm80(&mut self, op0: impl OperandCast) {
        self.emit(
            FSTPM80,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fcmovnbr(&mut self, op0: impl OperandCast) {
        self.emit(
            FCMOVNBR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fcmovner(&mut self, op0: impl OperandCast) {
        self.emit(
            FCMOVNER,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fcmovnber(&mut self, op0: impl OperandCast) {
        self.emit(
            FCMOVNBER,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fcmovnur(&mut self, op0: impl OperandCast) {
        self.emit(
            FCMOVNUR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fclex(&mut self) {
        self.emit(
            FCLEX, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn finit(&mut self) {
        self.emit(
            FINIT, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fucomir(&mut self, op0: impl OperandCast) {
        self.emit(
            FUCOMIR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fcomir(&mut self, op0: impl OperandCast) {
        self.emit(
            FCOMIR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn faddm64(&mut self, op0: impl OperandCast) {
        self.emit(
            FADDM64,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fmulm64(&mut self, op0: impl OperandCast) {
        self.emit(
            FMULM64,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fcomm64(&mut self, op0: impl OperandCast) {
        self.emit(
            FCOMM64,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fcompm64(&mut self, op0: impl OperandCast) {
        self.emit(
            FCOMPM64,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fsubm64(&mut self, op0: impl OperandCast) {
        self.emit(
            FSUBM64,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fsubrm64(&mut self, op0: impl OperandCast) {
        self.emit(
            FSUBRM64,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fdivm64(&mut self, op0: impl OperandCast) {
        self.emit(
            FDIVM64,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fdivrm64(&mut self, op0: impl OperandCast) {
        self.emit(
            FDIVRM64,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fldm64(&mut self, op0: impl OperandCast) {
        self.emit(
            FLDM64,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fisttpm64(&mut self, op0: impl OperandCast) {
        self.emit(
            FISTTPM64,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fstm64(&mut self, op0: impl OperandCast) {
        self.emit(
            FSTM64,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fstpm64(&mut self, op0: impl OperandCast) {
        self.emit(
            FSTPM64,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn frstorm(&mut self, op0: impl OperandCast) {
        self.emit(
            FRSTORM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fsavem(&mut self, op0: impl OperandCast) {
        self.emit(
            FSAVEM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fstswm(&mut self, op0: impl OperandCast) {
        self.emit(
            FSTSWM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ffreer(&mut self, op0: impl OperandCast) {
        self.emit(
            FFREER,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fstr(&mut self, op0: impl OperandCast) {
        self.emit(
            FSTR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fstpr(&mut self, op0: impl OperandCast) {
        self.emit(
            FSTPR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fucomr(&mut self, op0: impl OperandCast) {
        self.emit(
            FUCOMR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fucompr(&mut self, op0: impl OperandCast) {
        self.emit(
            FUCOMPR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fiaddm16(&mut self, op0: impl OperandCast) {
        self.emit(
            FIADDM16,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fimulm16(&mut self, op0: impl OperandCast) {
        self.emit(
            FIMULM16,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ficomm16(&mut self, op0: impl OperandCast) {
        self.emit(
            FICOMM16,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ficompm16(&mut self, op0: impl OperandCast) {
        self.emit(
            FICOMPM16,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fisubm16(&mut self, op0: impl OperandCast) {
        self.emit(
            FISUBM16,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fisubrm16(&mut self, op0: impl OperandCast) {
        self.emit(
            FISUBRM16,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fidivm16(&mut self, op0: impl OperandCast) {
        self.emit(
            FIDIVM16,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fidivrm16(&mut self, op0: impl OperandCast) {
        self.emit(
            FIDIVRM16,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn faddprr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            FADDPRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fmulprr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            FMULPRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fcompp(&mut self) {
        self.emit(
            FCOMPP, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fsubrprr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            FSUBRPRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fsubprr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            FSUBPRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fdivrprr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            FDIVRPRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fdivprr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            FDIVPRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fildm16(&mut self, op0: impl OperandCast) {
        self.emit(
            FILDM16,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fisttpm16(&mut self, op0: impl OperandCast) {
        self.emit(
            FISTTPM16,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fistm16(&mut self, op0: impl OperandCast) {
        self.emit(
            FISTM16,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fistpm16(&mut self, op0: impl OperandCast) {
        self.emit(
            FISTPM16,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fbldm(&mut self, op0: impl OperandCast) {
        self.emit(
            FBLDM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fildm64(&mut self, op0: impl OperandCast) {
        self.emit(
            FILDM64,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fbstpm(&mut self, op0: impl OperandCast) {
        self.emit(
            FBSTPM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fistpm64(&mut self, op0: impl OperandCast) {
        self.emit(
            FISTPM64,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fstswr(&mut self, op0: impl OperandCast) {
        self.emit(
            FSTSWR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fucomiprr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            FUCOMIPRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn fcomiprr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            FCOMIPRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rstorsspm(&mut self, op0: impl OperandCast) {
        self.emit(
            RSTORSSPM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn setssbsy(&mut self) {
        self.emit(
            SETSSBSY, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn saveprevssp(&mut self) {
        self.emit(
            SAVEPREVSSP,
            &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rdssp32r(&mut self, op0: impl OperandCast) {
        self.emit(
            RDSSP32R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rdssp64r(&mut self, op0: impl OperandCast) {
        self.emit(
            RDSSP64R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn endbr64(&mut self) {
        self.emit(
            ENDBR64, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn endbr32(&mut self) {
        self.emit(
            ENDBR32, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn wruss32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            WRUSS32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn wruss64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            WRUSS64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn wrss32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            WRSS32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn wrss64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            WRSS64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn clrssbsym(&mut self, op0: impl OperandCast) {
        self.emit(
            CLRSSBSYM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn incssp32r(&mut self, op0: impl OperandCast) {
        self.emit(
            INCSSP32R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn incssp64r(&mut self, op0: impl OperandCast) {
        self.emit(
            INCSSP64R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cldemotem(&mut self, op0: impl OperandCast) {
        self.emit(
            CLDEMOTEM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xstore(&mut self) {
        self.emit(
            XSTORE, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn inveptrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            INVEPTRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn invvpidrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            INVVPIDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmcall(&mut self) {
        self.emit(
            VMCALL, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmclearm(&mut self, op0: impl OperandCast) {
        self.emit(
            VMCLEARM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmfunc(&mut self) {
        self.emit(
            VMFUNC, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmlaunch(&mut self) {
        self.emit(
            VMLAUNCH, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmresume(&mut self) {
        self.emit(
            VMRESUME, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmptrldm(&mut self, op0: impl OperandCast) {
        self.emit(
            VMPTRLDM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmptrstm(&mut self, op0: impl OperandCast) {
        self.emit(
            VMPTRSTM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmreadmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMREADMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmreadrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMREADRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmwriterm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMWRITERM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmwriterr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMWRITERR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmxoff(&mut self) {
        self.emit(
            VMXOFF, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmxonm(&mut self, op0: impl OperandCast) {
        self.emit(
            VMXONM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn tdcall(&mut self) {
        self.emit(
            TDCALL, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn seamret(&mut self) {
        self.emit(
            SEAMRET, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn seamops(&mut self) {
        self.emit(
            SEAMOPS, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn seamcall(&mut self) {
        self.emit(
            SEAMCALL, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn clzero16r(&mut self, op0: impl OperandCast) {
        self.emit(
            CLZERO16R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn clzero32r(&mut self, op0: impl OperandCast) {
        self.emit(
            CLZERO32R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn clzero64r(&mut self, op0: impl OperandCast) {
        self.emit(
            CLZERO64R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rdpru(&mut self) {
        self.emit(
            RDPRU, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmrun(&mut self) {
        self.emit(
            VMRUN, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmmcall(&mut self) {
        self.emit(
            VMMCALL, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmgexit(&mut self) {
        self.emit(
            VMGEXIT, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmload(&mut self) {
        self.emit(
            VMLOAD, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmsave(&mut self) {
        self.emit(
            VMSAVE, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn stgi(&mut self) {
        self.emit(
            STGI, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn clgi(&mut self) {
        self.emit(
            CLGI, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn skinit(&mut self) {
        self.emit(
            SKINIT, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn invlpga(&mut self) {
        self.emit(
            INVLPGA, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn monitorx(&mut self) {
        self.emit(
            MONITORX, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mcommit(&mut self) {
        self.emit(
            MCOMMIT, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn mwaitx(&mut self) {
        self.emit(
            MWAITX, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn invlpgb(&mut self) {
        self.emit(
            INVLPGB, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn tlbsync(&mut self) {
        self.emit(
            TLBSYNC, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rmpquery(&mut self) {
        self.emit(
            RMPQUERY, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rmpread(&mut self) {
        self.emit(
            RMPREAD, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rmpadjust(&mut self) {
        self.emit(
            RMPADJUST, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rmpupdate(&mut self) {
        self.emit(
            RMPUPDATE, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn psmash(&mut self) {
        self.emit(
            PSMASH, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn pvalidate(&mut self) {
        self.emit(
            PVALIDATE, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn tpauser(&mut self, op0: impl OperandCast) {
        self.emit(
            TPAUSER,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn umonitor32r(&mut self, op0: impl OperandCast) {
        self.emit(
            UMONITOR32R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn umonitor64r(&mut self, op0: impl OperandCast) {
        self.emit(
            UMONITOR64R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn umwaitr(&mut self, op0: impl OperandCast) {
        self.emit(
            UMWAITR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ptwrite32r(&mut self, op0: impl OperandCast) {
        self.emit(
            PTWRITE32R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ptwrite32m(&mut self, op0: impl OperandCast) {
        self.emit(
            PTWRITE32M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ptwrite64r(&mut self, op0: impl OperandCast) {
        self.emit(
            PTWRITE64R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ptwrite64m(&mut self, op0: impl OperandCast) {
        self.emit(
            PTWRITE64M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn gf2p8mulbrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            GF2P8MULBRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn gf2p8mulbrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            GF2P8MULBRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn gf2p8affineqbrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            GF2P8AFFINEQBRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn gf2p8affineqbrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            GF2P8AFFINEQBRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn gf2p8affineinvqbrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            GF2P8AFFINEINVQBRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn gf2p8affineinvqbrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            GF2P8AFFINEINVQBRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgf2p8mulb128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGF2P8MULB128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgf2p8mulb128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGF2P8MULB128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgf2p8mulb256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGF2P8MULB256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgf2p8mulb256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGF2P8MULB256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgf2p8affineqb128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGF2P8AFFINEQB128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vgf2p8affineqb128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGF2P8AFFINEQB128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vgf2p8affineqb256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGF2P8AFFINEQB256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vgf2p8affineqb256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGF2P8AFFINEQB256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vgf2p8affineinvqb128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGF2P8AFFINEINVQB128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vgf2p8affineinvqb128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGF2P8AFFINEINVQB128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vgf2p8affineinvqb256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGF2P8AFFINEINVQB256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vgf2p8affineinvqb256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGF2P8AFFINEINVQB256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vgf2p8mulb512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGF2P8MULB512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgf2p8mulb512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGF2P8MULB512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgf2p8affineqb128rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGF2P8AFFINEQB128RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vgf2p8affineqb256rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGF2P8AFFINEQB256RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vgf2p8affineqb512rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGF2P8AFFINEQB512RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vgf2p8affineqb512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGF2P8AFFINEQB512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vgf2p8affineqb512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGF2P8AFFINEQB512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vgf2p8affineinvqb128rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGF2P8AFFINEINVQB128RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vgf2p8affineinvqb256rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGF2P8AFFINEINVQB256RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vgf2p8affineinvqb512rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGF2P8AFFINEINVQB512RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vgf2p8affineinvqb512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGF2P8AFFINEINVQB512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vgf2p8affineinvqb512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGF2P8AFFINEINVQB512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn enqcmd32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ENQCMD32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn enqcmd64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ENQCMD64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn enqcmds32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ENQCMDS32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn enqcmds64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ENQCMDS64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn pconfig(&mut self) {
        self.emit(
            PCONFIG, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn wbnoinvd(&mut self) {
        self.emit(
            WBNOINVD, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rdpkru(&mut self) {
        self.emit(
            RDPKRU, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn wrpkru(&mut self) {
        self.emit(
            WRPKRU, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rdfsbase32r(&mut self, op0: impl OperandCast) {
        self.emit(
            RDFSBASE32R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rdfsbase64r(&mut self, op0: impl OperandCast) {
        self.emit(
            RDFSBASE64R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rdgsbase32r(&mut self, op0: impl OperandCast) {
        self.emit(
            RDGSBASE32R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rdgsbase64r(&mut self, op0: impl OperandCast) {
        self.emit(
            RDGSBASE64R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn wrfsbase32r(&mut self, op0: impl OperandCast) {
        self.emit(
            WRFSBASE32R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn wrfsbase64r(&mut self, op0: impl OperandCast) {
        self.emit(
            WRFSBASE64R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn wrgsbase32r(&mut self, op0: impl OperandCast) {
        self.emit(
            WRGSBASE32R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn wrgsbase64r(&mut self, op0: impl OperandCast) {
        self.emit(
            WRGSBASE64R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xsave32m(&mut self, op0: impl OperandCast) {
        self.emit(
            XSAVE32M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xsave64m(&mut self, op0: impl OperandCast) {
        self.emit(
            XSAVE64M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xrstor32m(&mut self, op0: impl OperandCast) {
        self.emit(
            XRSTOR32M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xrstor64m(&mut self, op0: impl OperandCast) {
        self.emit(
            XRSTOR64M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xsaveopt32m(&mut self, op0: impl OperandCast) {
        self.emit(
            XSAVEOPT32M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xsaveopt64m(&mut self, op0: impl OperandCast) {
        self.emit(
            XSAVEOPT64M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn clwbm(&mut self, op0: impl OperandCast) {
        self.emit(
            CLWBM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn clflushm(&mut self, op0: impl OperandCast) {
        self.emit(
            CLFLUSHM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn clflushoptm(&mut self, op0: impl OperandCast) {
        self.emit(
            CLFLUSHOPTM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xrstors32m(&mut self, op0: impl OperandCast) {
        self.emit(
            XRSTORS32M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xrstors64m(&mut self, op0: impl OperandCast) {
        self.emit(
            XRSTORS64M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xsavec32m(&mut self, op0: impl OperandCast) {
        self.emit(
            XSAVEC32M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xsavec64m(&mut self, op0: impl OperandCast) {
        self.emit(
            XSAVEC64M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xsaves32m(&mut self, op0: impl OperandCast) {
        self.emit(
            XSAVES32M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xsaves64m(&mut self, op0: impl OperandCast) {
        self.emit(
            XSAVES64M,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rdrand16r(&mut self, op0: impl OperandCast) {
        self.emit(
            RDRAND16R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rdrand32r(&mut self, op0: impl OperandCast) {
        self.emit(
            RDRAND32R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rdrand64r(&mut self, op0: impl OperandCast) {
        self.emit(
            RDRAND64R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rdseed16r(&mut self, op0: impl OperandCast) {
        self.emit(
            RDSEED16R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rdseed32r(&mut self, op0: impl OperandCast) {
        self.emit(
            RDSEED32R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rdseed64r(&mut self, op0: impl OperandCast) {
        self.emit(
            RDSEED64R,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rdpidr(&mut self, op0: impl OperandCast) {
        self.emit(
            RDPIDR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn invpcidrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            INVPCIDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sha1nexterm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHA1NEXTERM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sha1nexterr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHA1NEXTERR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sha1msg1rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHA1MSG1RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sha1msg1rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHA1MSG1RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sha1msg2rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHA1MSG2RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sha1msg2rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHA1MSG2RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sha256rnds2rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SHA256RNDS2RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sha256rnds2rmr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SHA256RNDS2RMR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sha256msg1rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHA256MSG1RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sha256msg1rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHA256MSG1RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sha256msg2rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHA256MSG2RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sha256msg2rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            SHA256MSG2RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sha1rnds4rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SHA1RNDS4RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn sha1rnds4rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            SHA1RNDS4RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn xsusldtrk(&mut self) {
        self.emit(
            XSUSLDTRK, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn xresldtrk(&mut self) {
        self.emit(
            XRESLDTRK, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpdpbuud128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUUD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbuud128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUUD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbuud256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUUD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbuud256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUUD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbusd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUSD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbusd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUSD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbusd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUSD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbusd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUSD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbsud128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBSUD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbsud128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBSUD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbsud256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBSUD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbsud256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBSUD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbssd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBSSD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbssd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBSSD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbssd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBSSD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbssd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBSSD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbuuds128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUUDS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbuuds128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUUDS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbuuds256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUUDS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbuuds256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUUDS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbusds128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUSDS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbusds128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUSDS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbusds256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUSDS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbusds256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUSDS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbsuds128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBSUDS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbsuds128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBSUDS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbsuds256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBSUDS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbsuds256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBSUDS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbssds128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBSSDS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbssds128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBSSDS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbssds256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBSSDS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbssds256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBSSDS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpwssd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPWSSD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpwssd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPWSSD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpwssd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPWSSD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpwssd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPWSSD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpwssds128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPWSSDS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpwssds128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPWSSDS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpwssds256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPWSSDS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpwssds256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPWSSDS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtneoph2ps128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTNEOPH2PS128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtneoph2ps256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTNEOPH2PS256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtneeph2ps128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTNEEPH2PS128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtneeph2ps256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTNEEPH2PS256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtneebf162ps128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTNEEBF162PS128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtneebf162ps256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTNEEBF162PS256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtneobf162ps128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTNEOBF162PS128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtneobf162ps256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTNEOBF162PS256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbcstnesh2ps128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBCSTNESH2PS128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbcstnesh2ps256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBCSTNESH2PS256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbcstnebf162ps128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBCSTNEBF162PS128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbcstnebf162ps256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBCSTNEBF162PS256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtneps2bf16_128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTNEPS2BF16_128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtneps2bf16_128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTNEPS2BF16_128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtneps2bf16_256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTNEPS2BF16_256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtneps2bf16_256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTNEPS2BF16_256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmadd52luq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADD52LUQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmadd52luq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADD52LUQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmadd52luq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADD52LUQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmadd52luq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADD52LUQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmadd52huq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADD52HUQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmadd52huq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADD52HUQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmadd52huq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADD52HUQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmadd52huq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADD52HUQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn hreseti(&mut self, op0: impl OperandCast) {
        self.emit(
            HRESETI,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn serialize(&mut self) {
        self.emit(
            SERIALIZE, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn uiret(&mut self) {
        self.emit(
            UIRET, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn testui(&mut self) {
        self.emit(
            TESTUI, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn clui(&mut self) {
        self.emit(
            CLUI, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn stui(&mut self) {
        self.emit(
            STUI, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn senduipir(&mut self, op0: impl OperandCast) {
        self.emit(
            SENDUIPIR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn wrmsrns(&mut self) {
        self.emit(
            WRMSRNS, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn rdmsrlist(&mut self) {
        self.emit(
            RDMSRLIST, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn wrmsrlist(&mut self) {
        self.emit(
            WRMSRLIST, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn aadd32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AADD32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn aadd64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AADD64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn aand32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AAND32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn aand64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AAND64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn axor32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AXOR32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn axor64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AXOR64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn aor32mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AOR32MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn aor64mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AOR64MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn cmpoxadd32mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPOXADD32MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmpoxadd64mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPOXADD64MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmpnoxadd32mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPNOXADD32MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmpnoxadd64mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPNOXADD64MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmpbxadd32mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPBXADD32MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmpbxadd64mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPBXADD64MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmpnbxadd32mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPNBXADD32MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmpnbxadd64mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPNBXADD64MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmpzxadd32mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPZXADD32MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmpzxadd64mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPZXADD64MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmpnzxadd32mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPNZXADD32MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmpnzxadd64mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPNZXADD64MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmpbexadd32mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPBEXADD32MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmpbexadd64mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPBEXADD64MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmpnbexadd32mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPNBEXADD32MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmpnbexadd64mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPNBEXADD64MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmpsxadd32mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPSXADD32MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmpsxadd64mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPSXADD64MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmpnsxadd32mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPNSXADD32MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmpnsxadd64mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPNSXADD64MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmppxadd32mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPPXADD32MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmppxadd64mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPPXADD64MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmpnpxadd32mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPNPXADD32MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmpnpxadd64mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPNPXADD64MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmplxadd32mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPLXADD32MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmplxadd64mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPLXADD64MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmpnlxadd32mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPNLXADD32MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmpnlxadd64mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPNLXADD64MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmplexadd32mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPLEXADD32MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmplexadd64mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPLEXADD64MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmpnlexadd32mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPNLEXADD32MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn cmpnlexadd64mrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            CMPNLEXADD64MRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn aesencwide128klm(&mut self, op0: impl OperandCast) {
        self.emit(
            AESENCWIDE128KLM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn aesdecwide128klm(&mut self, op0: impl OperandCast) {
        self.emit(
            AESDECWIDE128KLM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn aesencwide256klm(&mut self, op0: impl OperandCast) {
        self.emit(
            AESENCWIDE256KLM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn aesdecwide256klm(&mut self, op0: impl OperandCast) {
        self.emit(
            AESDECWIDE256KLM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn aesenc128klrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AESENC128KLRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn loadiwkeyrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            LOADIWKEYRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn aesdec128klrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AESDEC128KLRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn aesenc256klrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AESENC256KLRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn aesdec256klrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            AESDEC256KLRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn encodekey128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ENCODEKEY128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn encodekey256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            ENCODEKEY256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lkgsr(&mut self, op0: impl OperandCast) {
        self.emit(
            LKGSR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn lkgsm(&mut self, op0: impl OperandCast) {
        self.emit(
            LKGSM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn eretu(&mut self) {
        self.emit(
            ERETU, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn erets(&mut self) {
        self.emit(
            ERETS, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ldtilecfgm(&mut self, op0: impl OperandCast) {
        self.emit(
            LDTILECFGM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn sttilecfgm(&mut self, op0: impl OperandCast) {
        self.emit(
            STTILECFGM,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn tilerelease(&mut self) {
        self.emit(
            TILERELEASE,
            &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn tilezeror(&mut self, op0: impl OperandCast) {
        self.emit(
            TILEZEROR,
            op0.as_operand(),
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn tileloaddt1rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            TILELOADDT1RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn tilestoredmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            TILESTOREDMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn tileloaddrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            TILELOADDRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn tdpbf16psrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            TDPBF16PSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn tdpfp16psrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            TDPFP16PSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn tdpbuudrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            TDPBUUDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn tdpbusdrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            TDPBUSDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn tdpbsudrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            TDPBSUDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn tdpbssdrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            TDPBSSDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn tcmmrlfp16psrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            TCMMRLFP16PSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn tcmmimfp16psrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            TCMMIMFP16PSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddps512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPS512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddpd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddpd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddpd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddpd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddpd512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPD512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddpd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddssrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDSSRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddsdrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDSDRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaesenc512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESENC512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaesenc512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESENC512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaesenclast512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESENCLAST512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaesenclast512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESENCLAST512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaesdec512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESDEC512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaesdec512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESDEC512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaesdeclast512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESDECLAST512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaesdeclast512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VAESDECLAST512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDPS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDPS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDPS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDPS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDPS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandpd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDPD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandpd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDPD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandpd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDPD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandpd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDPD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandpd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDPD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandnps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDNPS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandnps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDNPS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandnps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDNPS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandnps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDNPS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandnps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDNPS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandnpd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDNPD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandnpd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDNPD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandnpd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDNPD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandnpd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDNPD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vandnpd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VANDNPD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcmpps128krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPS128KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpps128krbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPS128KRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpps128krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPS128KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpps256krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPS256KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpps256krbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPS256KRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpps256krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPS256KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpps512krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPS512KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpps512krbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPS512KRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpps512krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPS512KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpps512krri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPS512KRRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmppd128krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPD128KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmppd128krbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPD128KRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmppd128krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPD128KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmppd256krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPD256KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmppd256krbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPD256KRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmppd256krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPD256KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmppd512krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPD512KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmppd512krbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPD512KRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmppd512krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPD512KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmppd512krri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPD512KRRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpsskrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPSSKRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpsskrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPSSKRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpsskrri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPSSKRRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpsdkrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPSDKRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpsdkrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPSDKRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpsdkrri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPSDKRRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcomissrr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCOMISSRR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcomisdrr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCOMISDRR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2pd128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PD128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2pd256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PD256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2pd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2pd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2pd512rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PD512RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2pd512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PD512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2dq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2DQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2dq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2DQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2dq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2DQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2dq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2DQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2dq512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2DQ512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2dq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2DQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2ps128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PS128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2ps256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PS256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2ps512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PS512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2ps512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PS512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2ps512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PS512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2ps512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PS512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2dq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2DQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2dq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2DQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2dq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2DQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2dq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2DQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2dq512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2DQ512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2dq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2DQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2pd128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2PD128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2pd256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2PD256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2pd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2PD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2pd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2PD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2pd512rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2PD512RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2pd512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2PD512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2ps128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2PS128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2ps256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2PS256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2ps512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2PS512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2ps512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2PS512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2ps512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2PS512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2ps512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2PS512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtss2si32rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSS2SI32RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtss2si64rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSS2SI64RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsd2si32rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSD2SI32RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsd2si64rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSD2SI64RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtss2sdrrr_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSS2SDRRR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsd2ssrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSD2SSRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsi2ss32rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSI2SS32RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsi2ss64rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSI2SS64RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsi2sd32rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSI2SD32RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsi2sd64rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSI2SD64RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2dq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2DQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2dq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2DQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2dq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2DQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2dq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2DQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2dq512rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2DQ512RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2dq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2DQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2dq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2DQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2dq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2DQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2dq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2DQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2dq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2DQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2dq512rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2DQ512RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2dq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2DQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttsd2si32rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSD2SI32RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttsd2si64rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSD2SI64RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttss2si32rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSS2SI32RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttss2si64rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSS2SI64RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vdivps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivps512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPS512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivpd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivpd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivpd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivpd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivpd512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPD512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivpd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivssrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVSSRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivsdrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVSDRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxps512rrr_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPS512RRR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxpd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxpd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxpd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxpd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxpd512rrr_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPD512RRR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxpd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxssrrr_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXSSRRR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxsdrrr_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXSDRRR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminps512rrr_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPS512RRR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminpd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminpd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminpd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminpd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminpd512rrr_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPD512RRR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminpd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminssrrr_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINSSRRR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminsdrrr_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINSDRRR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmovaps512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVAPS512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovaps512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVAPS512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovapd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVAPD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovapd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVAPD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovaps512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVAPS512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovapd512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVAPD512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovddup512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDDUP512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovddup512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDDUP512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqa32_128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQA32_128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqa32_128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQA32_128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqa32_256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQA32_256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqa32_256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQA32_256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqa32_512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQA32_512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqa32_512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQA32_512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqa64_128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQA64_128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqa64_128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQA64_128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqa64_256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQA64_256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqa64_256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQA64_256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqa64_512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQA64_512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqa64_512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQA64_512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqa32_128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQA32_128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqa32_256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQA32_256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqa32_512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQA32_512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqa64_128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQA64_128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqa64_256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQA64_256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqa64_512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQA64_512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu32_128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU32_128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu32_128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU32_128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu32_256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU32_256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu32_256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU32_256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu32_512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU32_512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu32_512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU32_512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu64_128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU64_128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu64_128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU64_128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu64_256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU64_256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu64_256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU64_256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu64_512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU64_512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu64_512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU64_512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu32_128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU32_128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu32_256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU32_256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu32_512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU32_512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu64_128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU64_128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu64_256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU64_256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu64_512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU64_512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu8_128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU8_128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu8_128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU8_128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu8_256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU8_256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu8_256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU8_256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu8_512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU8_512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu8_512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU8_512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu16_128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU16_128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu16_128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU16_128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu16_256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU16_256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu16_256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU16_256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu16_512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU16_512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu16_512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU16_512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu8_128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU8_128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu8_256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU8_256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu8_512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU8_512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu16_128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU16_128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu16_256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU16_256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovdqu16_512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVDQU16_512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovntdqa512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVNTDQA512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovntdq512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVNTDQ512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovntps512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVNTPS512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovntpd512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVNTPD512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovsldup512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVSLDUP512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovsldup512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVSLDUP512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovshdup512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVSHDUP512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovshdup512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVSHDUP512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovups512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVUPS512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovups512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVUPS512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovupd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVUPD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovupd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVUPD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovups512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVUPS512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovupd512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVUPD512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmulps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulps512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPS512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulpd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulpd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulpd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulpd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulpd512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPD512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulpd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulssrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULSSRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulsdrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULSDRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vorps128rrb(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VORPS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vorps256rrb(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VORPS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vorps512rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VORPS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vorps512rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VORPS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vorps512rrb(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VORPS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vorpd128rrb(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VORPD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vorpd256rrb(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VORPD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vorpd512rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VORPD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vorpd512rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VORPD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vorpd512rrb(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VORPD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpabsb512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSB512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsb512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSB512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsw512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSW512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsw512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSW512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsd128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSD128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsd256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSD256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsd512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSD512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpabsq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPABSQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpacksswb512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKSSWB512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpacksswb512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKSSWB512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpackuswb512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKUSWB512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpackuswb512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKUSWB512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpackssdw128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKSSDW128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpackssdw256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKSSDW256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpackssdw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKSSDW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpackssdw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKSSDW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpackssdw512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKSSDW512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpackusdw128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKUSDW128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpackusdw256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKUSDW256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpackusdw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKUSDW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpackusdw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKUSDW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpackusdw512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPACKUSDW512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddb512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDB512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddb512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDB512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddsb512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDSB512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddsb512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDSB512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddsw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDSW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddsw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDSW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddusb512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDUSB512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddusb512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDUSB512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddusw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDUSW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpaddusw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPADDUSW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpalignr512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPALIGNR512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpalignr512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPALIGNR512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpandd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandnd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDND128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandnd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDND128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandnd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDND128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandnd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDND256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandnd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDND256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandnd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDND256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandnd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDND512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandnd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDND512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandnd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDND512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandnq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDNQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandnq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDNQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandnq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDNQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandnq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDNQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandnq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDNQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandnq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDNQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandnq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDNQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandnq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDNQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpandnq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPANDNQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpavgb512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPAVGB512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpavgb512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPAVGB512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpavgw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPAVGW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpavgw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPAVGW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpclmulqdq512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCLMULQDQ512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpclmulqdq512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCLMULQDQ512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpeqb128krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQB128KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqb128krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQB128KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqb256krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQB256KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqb256krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQB256KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqb512krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQB512KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqb512krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQB512KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqw128krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQW128KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqw128krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQW128KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqw256krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQW256KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqw256krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQW256KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqw512krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQW512KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqw512krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQW512KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqd128krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQD128KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqd128krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQD128KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqd128krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQD128KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqd256krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQD256KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqd256krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQD256KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqd256krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQD256KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqd512krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQD512KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqd512krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQD512KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqd512krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQD512KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqq128krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQQ128KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqq128krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQQ128KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqq128krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQQ128KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqq256krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQQ256KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqq256krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQQ256KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqq256krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQQ256KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqq512krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQQ512KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqq512krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQQ512KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpeqq512krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPEQQ512KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtb128krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTB128KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtb128krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTB128KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtb256krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTB256KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtb256krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTB256KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtb512krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTB512KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtb512krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTB512KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtw128krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTW128KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtw128krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTW128KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtw256krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTW256KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtw256krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTW256KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtw512krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTW512KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtw512krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTW512KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtd128krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTD128KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtd128krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTD128KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtd128krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTD128KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtd256krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTD256KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtd256krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTD256KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtd256krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTD256KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtd512krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTD512KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtd512krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTD512KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtd512krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTD512KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtq128krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTQ128KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtq128krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTQ128KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtq128krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTQ128KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtq256krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTQ256KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtq256krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTQ256KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtq256krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTQ256KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtq512krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTQ512KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtq512krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTQ512KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpcmpgtq512krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPCMPGTQ512KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaddubsw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADDUBSW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaddubsw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADDUBSW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaddwd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADDWD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaddwd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADDWD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminub512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUB512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminub512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUB512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxub512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUB512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxub512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUB512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsb512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSB512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsb512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSB512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminsq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINSQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminuw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminuw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminud128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminud256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminud512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminud512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminud512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminuq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminuq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminuq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminuq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminuq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminuq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminuq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminuq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpminuq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMINUQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsb512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSB512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsb512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSB512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxsq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXSQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxuw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxuw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxud128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxud256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxud512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxud512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxud512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxuq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxuq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxuq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxuq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxuq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxuq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxuq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxuq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmaxuq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMAXUQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxbw512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXBW512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxbw512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXBW512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxbd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXBD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxbd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXBD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxbq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXBQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxbq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXBQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxwd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXWD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxwd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXWD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxwq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXWQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxwq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXWQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxdq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXDQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsxdq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSXDQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxbw512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXBW512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxbw512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXBW512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxbd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXBD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxbd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXBD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxbq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXBQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxbq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXBQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxwd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXWD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxwd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXWD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxwq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXWQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxwq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXWQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxdq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXDQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovzxdq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVZXDQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmuldq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULDQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmuldq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULDQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmuldq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULDQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmuldq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULDQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmuldq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULDQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulhrsw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULHRSW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulhrsw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULHRSW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulhuw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULHUW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulhuw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULHUW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulhw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULHW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulhw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULHW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmullw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULLW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmullw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULLW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulld128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULLD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulld256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULLD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulld512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULLD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulld512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULLD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmulld512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULLD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmullq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULLQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmullq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULLQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmullq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULLQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmullq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULLQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmullq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULLQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmullq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULLQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmullq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULLQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmullq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULLQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmullq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULLQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmuludq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULUDQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmuludq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULUDQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmuludq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULUDQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmuludq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULUDQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmuludq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULUDQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpord128rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPORD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpord128rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPORD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpord128rrb(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPORD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpord256rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPORD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpord256rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPORD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpord256rrb(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPORD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpord512rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPORD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpord512rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPORD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpord512rrb(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPORD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vporq128rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPORQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vporq128rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPORQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vporq128rrb(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPORQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vporq256rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPORQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vporq256rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPORQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vporq256rrb(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPORQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vporq512rrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPORQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vporq512rrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPORQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vporq512rrb(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VPORQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsadbw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSADBW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsadbw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSADBW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufb512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFB512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufb512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFB512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufd128rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFD128RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufd256rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFD256RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufd512rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFD512RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufd512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFD512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufd512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFD512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufhw512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFHW512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufhw512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFHW512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshuflw512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFLW512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshuflw512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFLW512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlw128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLW128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlw256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLW256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlw512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLW512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlw512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLW512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraw128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAW128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraw256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAW256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraw512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAW512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraw512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAW512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllw128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLW128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllw256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLW256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllw512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLW512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllw512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLW512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrld128rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLD128RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrld128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLD128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrld256rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLD256RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrld256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLD256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrld512rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLD512RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrld512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLD512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrld512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLD512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrad128rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAD128RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrad128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAD128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrad256rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAD256RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrad256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAD256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrad512rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAD512RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrad512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAD512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrad512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAD512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpslld128rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLD128RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpslld128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLD128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpslld256rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLD256RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpslld256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLD256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpslld512rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLD512RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpslld512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLD512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpslld512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLD512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlq128rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLQ128RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlq128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLQ128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlq256rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLQ256RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlq256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLQ256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlq512rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLQ512RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlq512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLQ512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlq512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLQ512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraq128rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAQ128RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraq128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAQ128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraq128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAQ128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraq256rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAQ256RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraq256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAQ256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraq256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAQ256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraq512rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAQ512RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraq512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAQ512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraq512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAQ512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllq128rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLQ128RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllq128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLQ128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllq256rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLQ256RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllq256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLQ256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllq512rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLQ512RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllq512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLQ512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllq512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLQ512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrld512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrld512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrad512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrad512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsraq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpslld512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpslld512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrldq128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLDQ128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrldq256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLDQ256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrldq512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLDQ512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrldq512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLDQ512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpslldq128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLDQ128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpslldq256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLDQ256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpslldq512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLDQ512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpslldq512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLDQ512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubb512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBB512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubb512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBB512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubsb512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBSB512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubsb512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBSB512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubsw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBSW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubsw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBSW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubusb512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBUSB512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubusb512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBUSB512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubusw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBUSW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsubusw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSUBUSW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpcklbw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLBW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpcklbw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLBW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpcklwd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLWD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpcklwd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLWD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckldq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLDQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckldq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLDQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckldq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLDQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckldq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLDQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckldq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLDQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpcklqdq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLQDQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpcklqdq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLQDQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpcklqdq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLQDQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpcklqdq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLQDQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpcklqdq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKLQDQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhbw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHBW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhbw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHBW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhwd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHWD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhwd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHWD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhdq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHDQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhdq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHDQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhdq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHDQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhdq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHDQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhdq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHDQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhqdq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHQDQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhqdq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHQDQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhqdq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHQDQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhqdq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHQDQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpunpckhqdq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPUNPCKHQDQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpxord128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPXORD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpxord128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPXORD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpxord128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPXORD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpxord256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPXORD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpxord256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPXORD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpxord256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPXORD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpxord512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPXORD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpxord512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPXORD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpxord512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPXORD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpxorq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPXORQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpxorq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPXORQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpxorq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPXORQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpxorq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPXORQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpxorq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPXORQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpxorq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPXORQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpxorq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPXORQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpxorq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPXORQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpxorq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPXORQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vshufps128rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFPS128RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufps256rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFPS256RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufps512rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFPS512RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufps512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFPS512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufps512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFPS512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufpd128rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFPD128RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufpd256rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFPD256RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufpd512rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFPD512RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufpd512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFPD512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufpd512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFPD512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vsqrtps128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPS128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtps256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPS256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtps512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPS512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtps512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPS512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtps512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPS512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtps512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPS512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtpd128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPD128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtpd256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPD256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtpd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtpd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtpd512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPD512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtpd512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPD512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtssrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSQRTSSRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsqrtsdrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSQRTSDRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubps512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPS512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubpd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubpd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubpd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubpd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubpd512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPD512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubpd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubssrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBSSRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubsdrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBSDRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vucomissrr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VUCOMISSRR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vucomisdrr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VUCOMISDRR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vunpcklps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKLPS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpcklps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKLPS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpcklps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKLPS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpcklps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKLPS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpcklps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKLPS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpcklpd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKLPD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpcklpd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKLPD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpcklpd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKLPD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpcklpd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKLPD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpcklpd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKLPD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpckhps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKHPS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpckhps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKHPS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpckhps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKHPS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpckhps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKHPS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpckhps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKHPS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpckhpd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKHPD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpckhpd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKHPD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpckhpd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKHPD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpckhpd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKHPD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vunpckhpd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VUNPCKHPD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn valignd128rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VALIGND128RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn valignd128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VALIGND128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn valignd128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VALIGND128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn valignd256rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VALIGND256RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn valignd256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VALIGND256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn valignd256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VALIGND256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn valignd512rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VALIGND512RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn valignd512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VALIGND512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn valignd512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VALIGND512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn valignq128rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VALIGNQ128RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn valignq128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VALIGNQ128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn valignq128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VALIGNQ128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn valignq256rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VALIGNQ256RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn valignq256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VALIGNQ256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn valignq256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VALIGNQ256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn valignq512rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VALIGNQ512RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn valignq512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VALIGNQ512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn valignq512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VALIGNQ512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vblendmps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VBLENDMPS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vblendmps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VBLENDMPS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vblendmps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VBLENDMPS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vblendmps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VBLENDMPS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vblendmps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VBLENDMPS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vblendmps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VBLENDMPS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vblendmps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VBLENDMPS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vblendmps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VBLENDMPS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vblendmps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VBLENDMPS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vblendmpd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VBLENDMPD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vblendmpd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VBLENDMPD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vblendmpd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VBLENDMPD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vblendmpd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VBLENDMPD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vblendmpd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VBLENDMPD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vblendmpd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VBLENDMPD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vblendmpd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VBLENDMPD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vblendmpd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VBLENDMPD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vblendmpd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VBLENDMPD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vbroadcastss512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTSS512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcastss512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTSS512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcastf32x2_256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTF32X2_256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcastf32x2_256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTF32X2_256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcastf32x2_512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTF32X2_512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcastf32x2_512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTF32X2_512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcastsd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTSD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcastsd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTSD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcastf32x4_256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTF32X4_256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcastf32x4_512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTF32X4_512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcastf64x2_256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTF64X2_256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcastf64x2_512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTF64X2_512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcastf32x8_512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTF32X8_512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcastf64x4_512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTF64X4_512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcompressps128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCOMPRESSPS128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcompressps256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCOMPRESSPS256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcompressps512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCOMPRESSPS512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcompressps128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCOMPRESSPS128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcompressps256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCOMPRESSPS256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcompressps512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCOMPRESSPS512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcompresspd128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCOMPRESSPD128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcompresspd256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCOMPRESSPD256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcompresspd512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCOMPRESSPD512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcompresspd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCOMPRESSPD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcompresspd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCOMPRESSPD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcompresspd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCOMPRESSPD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtne2ps2bf16_128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTNE2PS2BF16_128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtne2ps2bf16_128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTNE2PS2BF16_128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtne2ps2bf16_128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTNE2PS2BF16_128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtne2ps2bf16_256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTNE2PS2BF16_256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtne2ps2bf16_256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTNE2PS2BF16_256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtne2ps2bf16_256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTNE2PS2BF16_256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtne2ps2bf16_512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTNE2PS2BF16_512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtne2ps2bf16_512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTNE2PS2BF16_512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtne2ps2bf16_512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTNE2PS2BF16_512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtneps2bf16_128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTNEPS2BF16_128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtneps2bf16_256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTNEPS2BF16_256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtneps2bf16_512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTNEPS2BF16_512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtneps2bf16_512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTNEPS2BF16_512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtneps2bf16_512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTNEPS2BF16_512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2qq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2QQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2qq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2QQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2qq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2QQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2qq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2QQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2qq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2QQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2qq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2QQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2qq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2QQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2qq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2QQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2qq512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2QQ512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2qq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2QQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2qq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2QQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2qq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2QQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2qq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2QQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2qq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2QQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2qq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2QQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2qq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2QQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2qq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2QQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2qq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2QQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2qq512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2QQ512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2qq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2QQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2udq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2UDQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2udq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2UDQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2udq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2UDQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2udq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2UDQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2udq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2UDQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2udq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2UDQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2udq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2UDQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2udq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2UDQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2udq512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2UDQ512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2udq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2UDQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2udq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2UDQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2udq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2UDQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2udq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2UDQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2udq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2UDQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2udq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2UDQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2udq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2UDQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2udq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2UDQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2udq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2UDQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2udq512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2UDQ512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2udq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2UDQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2uqq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2UQQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2uqq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2UQQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2uqq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2UQQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2uqq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2UQQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2uqq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2UQQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2uqq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2UQQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2uqq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2UQQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2uqq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2UQQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2uqq512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2UQQ512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2uqq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2UQQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2uqq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2UQQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2uqq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2UQQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2uqq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2UQQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2uqq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2UQQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2uqq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2UQQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2uqq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2UQQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2uqq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2UQQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2uqq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2UQQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2uqq512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2UQQ512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2uqq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2UQQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2ps512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PS512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2ps512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PS512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2ps512rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PS512RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2ph512mri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTPS2PH512MRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2ph512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTPS2PH512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2ph512rri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTPS2PH512RRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2pd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2pd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2pd128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PD128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2pd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2pd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2pd256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PD256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2pd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2pd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2pd512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PD512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2pd512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PD512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2ps128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PS128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2ps128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PS128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2ps128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PS128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2ps256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PS256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2ps256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PS256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2ps256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PS256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2ps512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PS512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2ps512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PS512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2ps512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PS512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2ps512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PS512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsd2usi32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSD2USI32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsd2usi32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSD2USI32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsd2usi32rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSD2USI32RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsd2usi64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSD2USI64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsd2usi64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSD2USI64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsd2usi64rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSD2USI64RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtss2usi32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSS2USI32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtss2usi32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSS2USI32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtss2usi32rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSS2USI32RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtss2usi64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSS2USI64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtss2usi64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSS2USI64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtss2usi64rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSS2USI64RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtusi2sd32rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTUSI2SD32RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtusi2sd32rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTUSI2SD32RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtusi2sd32rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTUSI2SD32RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtusi2sd64rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTUSI2SD64RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtusi2sd64rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTUSI2SD64RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtusi2sd64rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTUSI2SD64RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtusi2ss32rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTUSI2SS32RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtusi2ss32rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTUSI2SS32RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtusi2ss32rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTUSI2SS32RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtusi2ss64rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTUSI2SS64RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtusi2ss64rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTUSI2SS64RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtusi2ss64rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTUSI2SS64RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2qq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2QQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2qq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2QQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2qq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2QQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2qq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2QQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2qq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2QQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2qq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2QQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2qq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2QQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2qq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2QQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2qq512rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2QQ512RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2qq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2QQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2qq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2QQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2qq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2QQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2qq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2QQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2qq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2QQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2qq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2QQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2qq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2QQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2qq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2QQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2qq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2QQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2qq512rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2QQ512RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2qq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2QQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2udq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2UDQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2udq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2UDQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2udq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2UDQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2udq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2UDQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2udq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2UDQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2udq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2UDQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2udq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2UDQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2udq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2UDQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2udq512rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2UDQ512RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2udq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2UDQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2udq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2UDQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2udq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2UDQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2udq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2UDQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2udq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2UDQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2udq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2UDQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2udq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2UDQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2udq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2UDQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2udq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2UDQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2udq512rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2UDQ512RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2udq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2UDQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2uqq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2UQQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2uqq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2UQQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2uqq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2UQQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2uqq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2UQQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2uqq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2UQQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2uqq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2UQQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2uqq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2UQQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2uqq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2UQQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2uqq512rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2UQQ512RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttps2uqq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPS2UQQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2uqq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2UQQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2uqq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2UQQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2uqq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2UQQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2uqq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2UQQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2uqq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2UQQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2uqq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2UQQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2uqq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2UQQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2uqq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2UQQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2uqq512rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2UQQ512RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttpd2uqq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPD2UQQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttsd2usi32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSD2USI32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttsd2usi32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSD2USI32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttsd2usi32rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSD2USI32RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttsd2usi64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSD2USI64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttsd2usi64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSD2USI64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttsd2usi64rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSD2USI64RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttss2usi32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSS2USI32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttss2usi32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSS2USI32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttss2usi32rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSS2USI32RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttss2usi64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSS2USI64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttss2usi64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSS2USI64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttss2usi64rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSS2USI64RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2pd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2pd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2pd128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PD128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2pd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2pd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2pd256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PD256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2pd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2pd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2pd512rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PD512RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2pd512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PD512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2ps128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PS128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2ps128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PS128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2ps128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PS128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2ps256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PS256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2ps256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PS256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2ps256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PS256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2ps512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PS512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2ps512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PS512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2ps512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PS512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2ps512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PS512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2pd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2pd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2pd128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PD128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2pd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2pd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2pd256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PD256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2pd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2pd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2pd512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PD512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2pd512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PD512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2ps128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PS128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2ps128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PS128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2ps128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PS128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2ps256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PS256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2ps256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PS256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2ps256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PS256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2ps512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PS512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2ps512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PS512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2ps512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PS512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2ps512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PS512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vdbpsadbw128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VDBPSADBW128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vdbpsadbw128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VDBPSADBW128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vdbpsadbw256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VDBPSADBW256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vdbpsadbw256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VDBPSADBW256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vdbpsadbw512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VDBPSADBW512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vdbpsadbw512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VDBPSADBW512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vdpbf16ps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDPBF16PS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdpbf16ps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDPBF16PS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdpbf16ps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDPBF16PS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdpbf16ps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDPBF16PS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdpbf16ps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDPBF16PS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdpbf16ps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDPBF16PS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdpbf16ps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDPBF16PS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdpbf16ps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDPBF16PS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdpbf16ps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDPBF16PS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vexpandps128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VEXPANDPS128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vexpandps256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VEXPANDPS256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vexpandps512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VEXPANDPS512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vexpandps128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VEXPANDPS128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vexpandps256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VEXPANDPS256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vexpandps512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VEXPANDPS512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vexpandpd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VEXPANDPD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vexpandpd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VEXPANDPD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vexpandpd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VEXPANDPD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vexpandpd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VEXPANDPD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vexpandpd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VEXPANDPD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vexpandpd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VEXPANDPD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vextractf32x4_256mri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTF32X4_256MRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextractf32x4_256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTF32X4_256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextractf32x4_512mri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTF32X4_512MRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextractf32x4_512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTF32X4_512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextractf64x2_256mri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTF64X2_256MRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextractf64x2_256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTF64X2_256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextractf64x2_512mri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTF64X2_512MRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextractf64x2_512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTF64X2_512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextractf32x8_512mri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTF32X8_512MRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextractf32x8_512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTF32X8_512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextractf64x4_512mri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTF64X4_512MRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextractf64x4_512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTF64X4_512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextracti32x4_256mri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTI32X4_256MRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextracti32x4_256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTI32X4_256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextracti32x4_512mri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTI32X4_512MRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextracti32x4_512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTI32X4_512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextracti64x2_256mri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTI64X2_256MRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextracti64x2_256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTI64X2_256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextracti64x2_512mri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTI64X2_512MRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextracti64x2_512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTI64X2_512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextracti32x8_512mri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTI32X8_512MRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextracti32x8_512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTI32X8_512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextracti64x4_512mri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTI64X4_512MRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vextracti64x4_512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VEXTRACTI64X4_512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfixupimmps128rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMPS128RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfixupimmps128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMPS128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfixupimmps128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMPS128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfixupimmps256rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMPS256RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfixupimmps256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMPS256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfixupimmps256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMPS256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfixupimmps512rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMPS512RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfixupimmps512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMPS512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfixupimmps512rrri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMPS512RRRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfixupimmps512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMPS512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfixupimmpd128rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMPD128RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfixupimmpd128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMPD128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfixupimmpd128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMPD128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfixupimmpd256rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMPD256RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfixupimmpd256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMPD256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfixupimmpd256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMPD256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfixupimmpd512rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMPD512RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfixupimmpd512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMPD512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfixupimmpd512rrri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMPD512RRRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfixupimmpd512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMPD512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfixupimmssrrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMSSRRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfixupimmssrrri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMSSRRRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfixupimmssrrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMSSRRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfixupimmsdrrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMSDRRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfixupimmsdrrri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMSDRRRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfixupimmsdrrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VFIXUPIMMSDRRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfmaddsub132ps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132ps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132ps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132ps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132ps512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PS512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132ps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132pd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132pd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132pd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132pd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132pd512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PD512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132pd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132ps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132ps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132ps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132ps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132ps512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PS512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132ps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132pd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132pd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132pd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132pd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132pd512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PD512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132pd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132ps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132ps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132ps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132ps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132ps512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PS512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132ps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132pd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132pd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132pd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132pd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132pd512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PD512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132pd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132ssrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132SSRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132sdrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132SDRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132ps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132ps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132ps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132ps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132ps512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PS512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132ps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132pd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132pd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132pd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132pd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132pd512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PD512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132pd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132ssrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132SSRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132sdrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132SDRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132ps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132ps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132ps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132ps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132ps512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PS512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132ps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132pd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132pd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132pd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132pd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132pd512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PD512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132pd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132ssrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132SSRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132sdrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132SDRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132ps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132ps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132ps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132ps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132ps512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PS512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132ps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132pd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132pd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132pd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132pd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132pd512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PD512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132pd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132ssrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132SSRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132sdrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132SDRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213ps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213ps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213ps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213ps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213ps512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PS512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213ps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213pd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213pd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213pd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213pd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213pd512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PD512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213pd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213ps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213ps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213ps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213ps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213ps512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PS512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213ps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213pd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213pd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213pd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213pd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213pd512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PD512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213pd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213ps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213ps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213ps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213ps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213ps512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PS512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213ps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213pd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213pd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213pd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213pd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213pd512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PD512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213pd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213ssrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213SSRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213sdrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213SDRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213ps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213ps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213ps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213ps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213ps512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PS512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213ps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213pd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213pd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213pd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213pd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213pd512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PD512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213pd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213ssrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213SSRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213sdrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213SDRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213ps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213ps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213ps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213ps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213ps512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PS512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213ps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213pd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213pd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213pd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213pd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213pd512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PD512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213pd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213ssrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213SSRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213sdrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213SDRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213ps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213ps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213ps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213ps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213ps512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PS512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213ps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213pd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213pd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213pd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213pd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213pd512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PD512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213pd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213ssrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213SSRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213sdrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213SDRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231ps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231ps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231ps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231ps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231ps512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PS512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231ps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231pd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231pd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231pd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231pd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231pd512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PD512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231pd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231ps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231ps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231ps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231ps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231ps512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PS512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231ps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231pd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231pd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231pd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231pd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231pd512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PD512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231pd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231ps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231ps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231ps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231ps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231ps512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PS512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231ps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231pd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231pd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231pd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231pd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231pd512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PD512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231pd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231ssrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231SSRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231sdrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231SDRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231ps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231ps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231ps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231ps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231ps512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PS512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231ps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231pd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231pd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231pd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231pd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231pd512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PD512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231pd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231ssrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231SSRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231sdrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231SDRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231ps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231ps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231ps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231ps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231ps512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PS512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231ps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231pd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231pd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231pd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231pd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231pd512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PD512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231pd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231ssrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231SSRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231sdrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231SDRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231ps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231ps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231ps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231ps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231ps512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PS512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231ps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231pd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231pd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231pd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231pd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231pd512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PD512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231pd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231ssrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231SSRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231sdrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231SDRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclassps128kbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPS128KBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclassps128kri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPS128KRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclassps128kmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPS128KMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclassps256kbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPS256KBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclassps256kri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPS256KRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclassps256kmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPS256KMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclassps512kbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPS512KBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclassps512kri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPS512KRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclassps512kmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPS512KMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclasspd128kbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPD128KBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclasspd128kri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPD128KRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclasspd128kmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPD128KMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclasspd256kbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPD256KBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclasspd256kri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPD256KRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclasspd256kmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPD256KMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclasspd512kbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPD512KBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclasspd512kri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPD512KRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclasspd512kmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPD512KMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclasssskri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSSSKRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclasssskmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSSSKMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclasssdkri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSSDKRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclasssdkmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSSDKMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgatherdps128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGATHERDPS128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgatherdps256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGATHERDPS256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgatherdps512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGATHERDPS512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgatherdpd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGATHERDPD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgatherdpd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGATHERDPD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgatherdpd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGATHERDPD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgatherqps128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGATHERQPS128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgatherqps256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGATHERQPS256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgatherqps512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGATHERQPS512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgatherqpd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGATHERQPD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgatherqpd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGATHERQPD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgatherqpd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGATHERQPD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexpps128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPS128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexpps128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPS128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexpps128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPS128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexpps256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPS256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexpps256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPS256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexpps256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPS256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexpps512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPS512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexpps512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPS512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexpps512rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPS512RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexpps512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPS512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexppd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexppd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexppd128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPD128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexppd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexppd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexppd256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPD256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexppd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexppd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexppd512rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPD512RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexppd512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPD512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexpssrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETEXPSSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetexpssrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETEXPSSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetexpssrrr_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETEXPSSRRR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetexpsdrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETEXPSDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetexpsdrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETEXPSDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetexpsdrrr_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETEXPSDRRR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantps128rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPS128RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantps128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPS128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantps128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPS128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantps256rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPS256RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantps256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPS256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantps256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPS256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantps512rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPS512RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantps512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPS512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantps512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPS512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantps512rri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPS512RRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantpd128rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPD128RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantpd128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPD128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantpd128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPD128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantpd256rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPD256RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantpd256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPD256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantpd256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPD256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantpd512rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPD512RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantpd512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPD512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantpd512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPD512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantpd512rri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPD512RRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantssrrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGETMANTSSRRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vgetmantssrrri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGETMANTSSRRRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vgetmantssrrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGETMANTSSRRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vgetmantsdrrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGETMANTSDRRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vgetmantsdrrri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGETMANTSDRRRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vgetmantsdrrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGETMANTSDRRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinsertf32x4_256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTF32X4_256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinsertf32x4_256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTF32X4_256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinsertf32x4_512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTF32X4_512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinsertf32x4_512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTF32X4_512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinsertf64x2_256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTF64X2_256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinsertf64x2_256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTF64X2_256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinsertf64x2_512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTF64X2_512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinsertf64x2_512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTF64X2_512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinsertf32x8_512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTF32X8_512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinsertf32x8_512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTF32X8_512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinsertf64x4_512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTF64X4_512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinsertf64x4_512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTF64X4_512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinserti32x4_256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTI32X4_256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinserti32x4_256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTI32X4_256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinserti32x4_512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTI32X4_512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinserti32x4_512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTI32X4_512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinserti64x2_256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTI64X2_256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinserti64x2_256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTI64X2_256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinserti64x2_512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTI64X2_512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinserti64x2_512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTI64X2_512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinserti32x8_512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTI32X8_512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinserti32x8_512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTI32X8_512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinserti64x4_512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTI64X4_512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vinserti64x4_512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VINSERTI64X4_512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vp2intersectd128krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VP2INTERSECTD128KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vp2intersectd128krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VP2INTERSECTD128KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vp2intersectd128krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VP2INTERSECTD128KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vp2intersectd256krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VP2INTERSECTD256KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vp2intersectd256krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VP2INTERSECTD256KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vp2intersectd256krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VP2INTERSECTD256KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vp2intersectd512krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VP2INTERSECTD512KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vp2intersectd512krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VP2INTERSECTD512KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vp2intersectd512krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VP2INTERSECTD512KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vp2intersectq128krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VP2INTERSECTQ128KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vp2intersectq128krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VP2INTERSECTQ128KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vp2intersectq128krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VP2INTERSECTQ128KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vp2intersectq256krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VP2INTERSECTQ256KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vp2intersectq256krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VP2INTERSECTQ256KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vp2intersectq256krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VP2INTERSECTQ256KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vp2intersectq512krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VP2INTERSECTQ512KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vp2intersectq512krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VP2INTERSECTQ512KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vp2intersectq512krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VP2INTERSECTQ512KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmb128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMB128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmb128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMB128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmb256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMB256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmb256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMB256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmb512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMB512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmb512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMB512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpblendmq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPBLENDMQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastb_gp128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTB_GP128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastb_gp256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTB_GP256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastb_gp512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTB_GP512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastw_gp128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTW_GP128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastw_gp256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTW_GP256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastw_gp512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTW_GP512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastd_gp128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTD_GP128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastd_gp256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTD_GP256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastd_gp512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTD_GP512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastq_gp128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTQ_GP128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastq_gp256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTQ_GP256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastq_gp512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTQ_GP512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastb512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTB512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastb512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTB512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastw512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTW512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastw512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTW512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcasti32x2_128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTI32X2_128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcasti32x2_128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTI32X2_128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcasti32x2_256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTI32X2_256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcasti32x2_256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTI32X2_256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcasti32x2_512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTI32X2_512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcasti32x2_512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTI32X2_512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcasti32x4_256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTI32X4_256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcasti32x4_512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTI32X4_512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcasti64x2_256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTI64X2_256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcasti64x2_512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTI64X2_512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcasti32x8_512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTI32X8_512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vbroadcasti64x4_512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VBROADCASTI64X4_512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastmb2q128rk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTMB2Q128RK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastmb2q256rk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTMB2Q256RK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastmb2q512rk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTMB2Q512RK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastmw2d128rk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTMW2D128RK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastmw2d256rk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTMW2D256RK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpbroadcastmw2d512rk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPBROADCASTMW2D512RK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpcmpud128krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUD128KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpud128krbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUD128KRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpud128krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUD128KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpud256krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUD256KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpud256krbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUD256KRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpud256krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUD256KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpud512krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUD512KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpud512krbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUD512KRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpud512krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUD512KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpd128krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPD128KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpd128krbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPD128KRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpd128krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPD128KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpd256krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPD256KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpd256krbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPD256KRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpd256krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPD256KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpd512krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPD512KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpd512krbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPD512KRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpd512krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPD512KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpuq128krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUQ128KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpuq128krbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUQ128KRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpuq128krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUQ128KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpuq256krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUQ256KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpuq256krbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUQ256KRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpuq256krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUQ256KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpuq512krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUQ512KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpuq512krbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUQ512KRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpuq512krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUQ512KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpq128krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPQ128KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpq128krbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPQ128KRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpq128krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPQ128KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpq256krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPQ256KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpq256krbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPQ256KRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpq256krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPQ256KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpq512krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPQ512KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpq512krbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPQ512KRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpq512krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPQ512KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpub128krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUB128KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpub128krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUB128KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpub256krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUB256KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpub256krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUB256KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpub512krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUB512KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpub512krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUB512KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpb128krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPB128KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpb128krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPB128KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpb256krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPB256KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpb256krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPB256KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpb512krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPB512KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpb512krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPB512KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpuw128krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUW128KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpuw128krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUW128KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpuw256krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUW256KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpuw256krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUW256KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpuw512krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUW512KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpuw512krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPUW512KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpw128krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPW128KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpw128krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPW128KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpw256krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPW256KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpw256krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPW256KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpw512krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPW512KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcmpw512krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPCMPW512KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpcompressb128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCOMPRESSB128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpcompressb256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCOMPRESSB256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpcompressb512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCOMPRESSB512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpcompressb128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCOMPRESSB128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpcompressb256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCOMPRESSB256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpcompressb512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCOMPRESSB512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpcompressw128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCOMPRESSW128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpcompressw256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCOMPRESSW256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpcompressw512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCOMPRESSW512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpcompressw128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCOMPRESSW128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpcompressw256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCOMPRESSW256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpcompressw512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCOMPRESSW512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpcompressd128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCOMPRESSD128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpcompressd256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCOMPRESSD256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpcompressd512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCOMPRESSD512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpcompressd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCOMPRESSD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpcompressd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCOMPRESSD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpcompressd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCOMPRESSD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpcompressq128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCOMPRESSQ128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpcompressq256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCOMPRESSQ256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpcompressq512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCOMPRESSQ512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpcompressq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCOMPRESSQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpcompressq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCOMPRESSQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpcompressq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCOMPRESSQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpconflictd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCONFLICTD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpconflictd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCONFLICTD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpconflictd128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCONFLICTD128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpconflictd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCONFLICTD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpconflictd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCONFLICTD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpconflictd256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCONFLICTD256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpconflictd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCONFLICTD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpconflictd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCONFLICTD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpconflictd512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCONFLICTD512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpconflictq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCONFLICTQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpconflictq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCONFLICTQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpconflictq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCONFLICTQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpconflictq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCONFLICTQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpconflictq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCONFLICTQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpconflictq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCONFLICTQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpconflictq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCONFLICTQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpconflictq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCONFLICTQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpconflictq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPCONFLICTQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpdpbusd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUSD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbusd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUSD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbusd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUSD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbusd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUSD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbusd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUSD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbusds128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUSDS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbusds256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUSDS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbusds512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUSDS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbusds512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUSDS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpbusds512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPBUSDS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpwssd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPWSSD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpwssd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPWSSD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpwssd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPWSSD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpwssd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPWSSD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpwssd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPWSSD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpwssds128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPWSSDS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpwssds256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPWSSDS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpwssds512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPWSSDS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpwssds512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPWSSDS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpdpwssds512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPDPWSSDS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermb128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMB128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermb128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMB128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermb256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMB256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermb256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMB256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermb512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMB512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermb512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMB512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2b128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2B128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2b128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2B128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2b256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2B256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2b256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2B256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2b512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2B512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2b512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2B512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2w128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2W128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2w128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2W128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2w256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2W256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2w256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2W256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2w512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2W512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2w512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2W512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2d128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2D128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2d128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2D128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2d128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2D128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2d256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2D256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2d256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2D256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2d256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2D256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2d512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2D512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2d512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2D512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2d512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2D512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2q128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2Q128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2q128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2Q128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2q128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2Q128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2q256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2Q256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2q256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2Q256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2q256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2Q256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2q512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2Q512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2q512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2Q512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2q512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2Q512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2ps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2PS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2ps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2PS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2ps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2PS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2ps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2PS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2ps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2PS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2ps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2PS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2ps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2PS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2ps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2PS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2ps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2PS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2pd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2PD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2pd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2PD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2pd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2PD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2pd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2PD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2pd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2PD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2pd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2PD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2pd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2PD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2pd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2PD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermi2pd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMI2PD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilpd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilpd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilpd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilpd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilpd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilps128rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPS128RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilps256rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPS256RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilps512rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPS512RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilps512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPS512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilps512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPS512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilpd128rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPD128RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilpd256rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPD256RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilpd512rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPD512RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilpd512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPD512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermilpd512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMILPD512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMPS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMPS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMPS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMPS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermpd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMPD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermpd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMPD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermpd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMPD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermpd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMPD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermpd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMPD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermpd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMPD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermq256rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMQ256RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermq512rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMQ512RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermq512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMQ512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermq512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMQ512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermpd256rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMPD256RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermpd512rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMPD512RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermpd512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMPD512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermpd512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMPD512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2b128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2B128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2b128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2B128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2b256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2B256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2b256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2B256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2b512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2B512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2b512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2B512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2w128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2W128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2w128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2W128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2w256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2W256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2w256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2W256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2w512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2W512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2w512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2W512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2d128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2D128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2d128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2D128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2d128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2D128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2d256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2D256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2d256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2D256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2d256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2D256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2d512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2D512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2d512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2D512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2d512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2D512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2q128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2Q128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2q128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2Q128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2q128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2Q128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2q256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2Q256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2q256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2Q256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2q256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2Q256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2q512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2Q512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2q512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2Q512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2q512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2Q512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2ps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2PS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2ps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2PS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2ps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2PS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2ps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2PS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2ps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2PS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2ps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2PS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2ps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2PS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2ps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2PS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2ps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2PS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2pd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2PD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2pd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2PD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2pd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2PD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2pd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2PD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2pd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2PD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2pd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2PD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2pd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2PD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2pd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2PD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpermt2pd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPERMT2PD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpexpandb128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPEXPANDB128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpexpandb256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPEXPANDB256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpexpandb512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPEXPANDB512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpexpandb128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPEXPANDB128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpexpandb256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPEXPANDB256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpexpandb512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPEXPANDB512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpexpandw128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPEXPANDW128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpexpandw256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPEXPANDW256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpexpandw512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPEXPANDW512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpexpandw128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPEXPANDW128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpexpandw256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPEXPANDW256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpexpandw512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPEXPANDW512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpexpandd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPEXPANDD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpexpandd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPEXPANDD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpexpandd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPEXPANDD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpexpandd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPEXPANDD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpexpandd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPEXPANDD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpexpandd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPEXPANDD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpexpandq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPEXPANDQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpexpandq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPEXPANDQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpexpandq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPEXPANDQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpexpandq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPEXPANDQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpexpandq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPEXPANDQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpexpandq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPEXPANDQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpgatherdd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPGATHERDD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpgatherdd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPGATHERDD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpgatherdd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPGATHERDD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpgatherdq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPGATHERDQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpgatherdq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPGATHERDQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpgatherdq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPGATHERDQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpgatherqd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPGATHERQD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpgatherqd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPGATHERQD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpgatherqd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPGATHERQD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpgatherqq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPGATHERQQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpgatherqq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPGATHERQQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpgatherqq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPGATHERQQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vplzcntd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPLZCNTD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vplzcntd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPLZCNTD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vplzcntd128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPLZCNTD128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vplzcntd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPLZCNTD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vplzcntd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPLZCNTD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vplzcntd256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPLZCNTD256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vplzcntd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPLZCNTD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vplzcntd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPLZCNTD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vplzcntd512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPLZCNTD512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vplzcntq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPLZCNTQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vplzcntq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPLZCNTQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vplzcntq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPLZCNTQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vplzcntq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPLZCNTQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vplzcntq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPLZCNTQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vplzcntq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPLZCNTQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vplzcntq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPLZCNTQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vplzcntq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPLZCNTQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vplzcntq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPLZCNTQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmadd52luq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADD52LUQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmadd52luq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADD52LUQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmadd52luq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADD52LUQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmadd52luq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADD52LUQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmadd52luq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADD52LUQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmadd52huq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADD52HUQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmadd52huq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADD52HUQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmadd52huq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADD52HUQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmadd52huq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADD52HUQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmadd52huq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMADD52HUQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmovb2m128kr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVB2M128KR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovb2m256kr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVB2M256KR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovb2m512kr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVB2M512KR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovw2m128kr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVW2M128KR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovw2m256kr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVW2M256KR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovw2m512kr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVW2M512KR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovd2m128kr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVD2M128KR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovd2m256kr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVD2M256KR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovd2m512kr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVD2M512KR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovq2m128kr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVQ2M128KR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovq2m256kr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVQ2M256KR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovq2m512kr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVQ2M512KR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovm2b128rk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVM2B128RK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovm2b256rk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVM2B256RK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovm2b512rk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVM2B512RK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovm2w128rk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVM2W128RK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovm2w256rk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVM2W256RK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovm2w512rk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVM2W512RK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovm2d128rk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVM2D128RK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovm2d256rk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVM2D256RK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovm2d512rk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVM2D512RK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovm2q128rk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVM2Q128RK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovm2q256rk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVM2Q256RK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovm2q512rk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVM2Q512RK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovwb128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVWB128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovwb128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVWB128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovwb256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVWB256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovwb256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVWB256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovwb512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVWB512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovwb512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVWB512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovswb128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSWB128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovswb128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSWB128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovswb256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSWB256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovswb256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSWB256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovswb512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSWB512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovswb512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSWB512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovuswb128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSWB128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovuswb128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSWB128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovuswb256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSWB256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovuswb256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSWB256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovuswb512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSWB512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovuswb512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSWB512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovdb128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVDB128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovdb128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVDB128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovdb256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVDB256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovdb256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVDB256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovdb512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVDB512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovdb512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVDB512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsdb128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSDB128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsdb128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSDB128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsdb256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSDB256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsdb256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSDB256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsdb512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSDB512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsdb512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSDB512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusdb128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSDB128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusdb128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSDB128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusdb256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSDB256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusdb256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSDB256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusdb512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSDB512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusdb512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSDB512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovqb128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVQB128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovqb128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVQB128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovqb256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVQB256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovqb256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVQB256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovqb512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVQB512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovqb512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVQB512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsqb128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSQB128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsqb128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSQB128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsqb256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSQB256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsqb256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSQB256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsqb512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSQB512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsqb512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSQB512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusqb128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSQB128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusqb128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSQB128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusqb256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSQB256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusqb256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSQB256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusqb512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSQB512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusqb512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSQB512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovdw128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVDW128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovdw128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVDW128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovdw256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVDW256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovdw256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVDW256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovdw512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVDW512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovdw512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVDW512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsdw128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSDW128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsdw128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSDW128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsdw256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSDW256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsdw256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSDW256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsdw512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSDW512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsdw512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSDW512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusdw128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSDW128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusdw128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSDW128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusdw256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSDW256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusdw256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSDW256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusdw512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSDW512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusdw512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSDW512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovqw128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVQW128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovqw128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVQW128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovqw256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVQW256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovqw256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVQW256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovqw512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVQW512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovqw512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVQW512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsqw128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSQW128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsqw128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSQW128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsqw256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSQW256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsqw256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSQW256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsqw512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSQW512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsqw512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSQW512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusqw128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSQW128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusqw128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSQW128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusqw256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSQW256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusqw256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSQW256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusqw512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSQW512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusqw512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSQW512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovqd128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVQD128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovqd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVQD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovqd256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVQD256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovqd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVQD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovqd512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVQD512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovqd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVQD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsqd128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSQD128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsqd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSQD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsqd256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSQD256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsqd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSQD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsqd512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSQD512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovsqd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVSQD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusqd128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSQD128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusqd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSQD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusqd256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSQD256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusqd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSQD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusqd512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSQD512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmovusqd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPMOVUSQD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpmultishiftqb128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULTISHIFTQB128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmultishiftqb128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULTISHIFTQB128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmultishiftqb128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULTISHIFTQB128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmultishiftqb256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULTISHIFTQB256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmultishiftqb256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULTISHIFTQB256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmultishiftqb256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULTISHIFTQB256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmultishiftqb512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULTISHIFTQB512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmultishiftqb512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULTISHIFTQB512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpmultishiftqb512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPMULTISHIFTQB512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpopcntb128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTB128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntb128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTB128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntb256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTB256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntb256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTB256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntb512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTB512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntb512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTB512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntw128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTW128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntw128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTW128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntw256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTW256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntw256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTW256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntw512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTW512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntw512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTW512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntd128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTD128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntd256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTD256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntd512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTD512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpopcntq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPOPCNTQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vprorvd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORVD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorvd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORVD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorvd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORVD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorvd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORVD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorvd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORVD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorvd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORVD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorvd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORVD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorvd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORVD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorvd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORVD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorvq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORVQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorvq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORVQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorvq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORVQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorvq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORVQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorvq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORVQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorvq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORVQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorvq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORVQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorvq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORVQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorvq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORVQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprord128rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORD128RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprord128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORD128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprord128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORD128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprord256rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORD256RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprord256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORD256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprord256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORD256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprord512rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORD512RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprord512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORD512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprord512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORD512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorq128rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORQ128RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorq128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORQ128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorq128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORQ128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorq256rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORQ256RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorq256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORQ256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorq256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORQ256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorq512rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORQ512RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorq512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORQ512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprorq512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPRORQ512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolvd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLVD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolvd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLVD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolvd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLVD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolvd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLVD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolvd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLVD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolvd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLVD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolvd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLVD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolvd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLVD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolvd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLVD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolvq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLVQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolvq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLVQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolvq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLVQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolvq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLVQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolvq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLVQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolvq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLVQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolvq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLVQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolvq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLVQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolvq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLVQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprold128rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLD128RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprold128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLD128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprold128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLD128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprold256rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLD256RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprold256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLD256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprold256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLD256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprold512rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLD512RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprold512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLD512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprold512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLD512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolq128rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLQ128RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolq128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLQ128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolq128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLQ128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolq256rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLQ256RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolq256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLQ256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolq256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLQ256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolq512rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLQ512RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolq512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLQ512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vprolq512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPROLQ512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpscatterdd128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPSCATTERDD128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpscatterdd256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPSCATTERDD256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpscatterdd512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPSCATTERDD512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpscatterdq128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPSCATTERDQ128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpscatterdq256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPSCATTERDQ256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpscatterdq512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPSCATTERDQ512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpscatterqd128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPSCATTERQD128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpscatterqd256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPSCATTERQD256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpscatterqd512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPSCATTERQD512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpscatterqq128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPSCATTERQQ128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpscatterqq256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPSCATTERQQ256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpscatterqq512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VPSCATTERQQ512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vpshldw128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHLDW128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshldw128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHLDW128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshldw256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHLDW256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshldw256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHLDW256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshldw512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHLDW512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshldw512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHLDW512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshldd128rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHLDD128RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshldd128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHLDD128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshldd128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHLDD128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshldd256rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHLDD256RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshldd256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHLDD256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshldd256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHLDD256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshldd512rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHLDD512RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshldd512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHLDD512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshldd512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHLDD512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshldq128rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHLDQ128RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshldq128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHLDQ128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshldq128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHLDQ128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshldq256rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHLDQ256RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshldq256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHLDQ256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshldq256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHLDQ256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshldq512rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHLDQ512RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshldq512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHLDQ512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshldq512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHLDQ512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshldvw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHLDVW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshldvw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHLDVW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshldvw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHLDVW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshldvw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHLDVW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshldvw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHLDVW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshldvw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHLDVW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshldvd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHLDVD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshldvd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHLDVD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshldvd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHLDVD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshldvd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHLDVD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshldvd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHLDVD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshldvd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHLDVD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshldvd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHLDVD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshldvd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHLDVD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshldvd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHLDVD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshldvq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHLDVQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshldvq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHLDVQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshldvq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHLDVQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshldvq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHLDVQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshldvq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHLDVQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshldvq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHLDVQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshldvq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHLDVQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshldvq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHLDVQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshldvq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHLDVQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshrdw128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHRDW128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshrdw128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHRDW128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshrdw256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHRDW256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshrdw256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHRDW256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshrdw512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHRDW512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshrdw512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHRDW512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshrdd128rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHRDD128RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshrdd128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHRDD128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshrdd128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHRDD128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshrdd256rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHRDD256RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshrdd256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHRDD256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshrdd256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHRDD256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshrdd512rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHRDD512RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshrdd512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHRDD512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshrdd512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHRDD512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshrdq128rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHRDQ128RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshrdq128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHRDQ128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshrdq128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHRDQ128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshrdq256rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHRDQ256RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshrdq256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHRDQ256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshrdq256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHRDQ256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshrdq512rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHRDQ512RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshrdq512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHRDQ512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshrdq512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPSHRDQ512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpshrdvw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHRDVW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshrdvw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHRDVW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshrdvw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHRDVW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshrdvw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHRDVW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshrdvw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHRDVW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshrdvw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHRDVW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshrdvd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHRDVD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshrdvd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHRDVD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshrdvd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHRDVD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshrdvd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHRDVD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshrdvd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHRDVD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshrdvd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHRDVD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshrdvd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHRDVD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshrdvd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHRDVD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshrdvd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHRDVD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshrdvq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHRDVQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshrdvq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHRDVQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshrdvq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHRDVQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshrdvq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHRDVQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshrdvq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHRDVQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshrdvq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHRDVQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshrdvq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHRDVQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshrdvq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHRDVQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshrdvq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHRDVQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufbitqmb128krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFBITQMB128KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufbitqmb128krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFBITQMB128KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufbitqmb256krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFBITQMB256KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufbitqmb256krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFBITQMB256KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufbitqmb512krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFBITQMB512KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpshufbitqmb512krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSHUFBITQMB512KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllvw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLVW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllvw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLVW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllvw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLVW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllvw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLVW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllvw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLVW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllvw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLVW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllvd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLVD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllvd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLVD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllvd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLVD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllvd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLVD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllvd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLVD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllvq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLVQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllvq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLVQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllvq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLVQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllvq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLVQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsllvq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSLLVQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsravw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAVW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsravw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAVW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsravw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAVW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsravw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAVW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsravw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAVW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsravw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAVW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsravd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAVD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsravd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAVD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsravd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAVD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsravd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAVD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsravd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAVD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsravq128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAVQ128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsravq128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAVQ128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsravq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAVQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsravq256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAVQ256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsravq256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAVQ256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsravq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAVQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsravq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAVQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsravq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAVQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsravq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRAVQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlvw128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLVW128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlvw128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLVW128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlvw256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLVW256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlvw256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLVW256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlvw512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLVW512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlvw512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLVW512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlvd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLVD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlvd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLVD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlvd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLVD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlvd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLVD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlvd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLVD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlvq128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLVQ128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlvq256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLVQ256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlvq512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLVQ512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlvq512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLVQ512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpsrlvq512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPSRLVQ512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vpternlogd128rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPTERNLOGD128RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpternlogd128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPTERNLOGD128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpternlogd128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPTERNLOGD128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpternlogd256rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPTERNLOGD256RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpternlogd256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPTERNLOGD256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpternlogd256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPTERNLOGD256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpternlogd512rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPTERNLOGD512RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpternlogd512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPTERNLOGD512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpternlogd512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPTERNLOGD512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpternlogq128rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPTERNLOGQ128RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpternlogq128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPTERNLOGQ128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpternlogq128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPTERNLOGQ128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpternlogq256rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPTERNLOGQ256RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpternlogq256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPTERNLOGQ256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpternlogq256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPTERNLOGQ256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpternlogq512rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPTERNLOGQ512RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpternlogq512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPTERNLOGQ512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vpternlogq512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VPTERNLOGQ512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vptestmb128krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMB128KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmb128krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMB128KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmb256krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMB256KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmb256krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMB256KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmb512krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMB512KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmb512krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMB512KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmw128krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMW128KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmw128krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMW128KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmw256krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMW256KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmw256krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMW256KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmw512krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMW512KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmw512krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMW512KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmd128krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMD128KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmd128krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMD128KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmd128krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMD128KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmd256krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMD256KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmd256krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMD256KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmd256krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMD256KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmd512krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMD512KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmd512krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMD512KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmd512krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMD512KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmq128krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMQ128KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmq128krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMQ128KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmq128krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMQ128KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmq256krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMQ256KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmq256krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMQ256KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmq256krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMQ256KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmq512krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMQ512KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmq512krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMQ512KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestmq512krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTMQ512KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmb128krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMB128KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmb128krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMB128KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmb256krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMB256KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmb256krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMB256KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmb512krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMB512KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmb512krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMB512KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmw128krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMW128KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmw128krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMW128KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmw256krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMW256KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmw256krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMW256KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmw512krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMW512KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmw512krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMW512KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmd128krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMD128KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmd128krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMD128KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmd128krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMD128KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmd256krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMD256KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmd256krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMD256KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmd256krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMD256KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmd512krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMD512KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmd512krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMD512KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmd512krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMD512KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmq128krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMQ128KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmq128krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMQ128KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmq128krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMQ128KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmq256krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMQ256KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmq256krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMQ256KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmq256krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMQ256KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmq512krm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMQ512KRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmq512krr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMQ512KRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vptestnmq512krb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VPTESTNMQ512KRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrangeps128rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGEPS128RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrangeps128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGEPS128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrangeps128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGEPS128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrangeps256rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGEPS256RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrangeps256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGEPS256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrangeps256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGEPS256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrangeps512rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGEPS512RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrangeps512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGEPS512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrangeps512rrri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGEPS512RRRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrangeps512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGEPS512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrangepd128rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGEPD128RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrangepd128rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGEPD128RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrangepd128rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGEPD128RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrangepd256rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGEPD256RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrangepd256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGEPD256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrangepd256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGEPD256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrangepd512rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGEPD512RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrangepd512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGEPD512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrangepd512rrri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGEPD512RRRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrangepd512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGEPD512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrangessrrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGESSRRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrangessrrri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGESSRRRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrangessrrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGESSRRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrangesdrrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGESDRRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrangesdrrri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGESDRRRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrangesdrrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRANGESDRRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrcp14ps128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCP14PS128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcp14ps128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCP14PS128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcp14ps128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCP14PS128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcp14ps256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCP14PS256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcp14ps256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCP14PS256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcp14ps256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCP14PS256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcp14ps512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCP14PS512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcp14ps512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCP14PS512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcp14ps512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCP14PS512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcp14pd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCP14PD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcp14pd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCP14PD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcp14pd128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCP14PD128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcp14pd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCP14PD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcp14pd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCP14PD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcp14pd256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCP14PD256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcp14pd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCP14PD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcp14pd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCP14PD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcp14pd512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCP14PD512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcp14ssrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VRCP14SSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrcp14ssrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VRCP14SSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrcp14sdrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VRCP14SDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrcp14sdrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VRCP14SDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreduceps128rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPS128RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreduceps128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPS128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreduceps128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPS128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreduceps256rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPS256RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreduceps256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPS256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreduceps256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPS256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreduceps512rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPS512RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreduceps512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPS512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreduceps512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPS512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreduceps512rri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPS512RRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreducepd128rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPD128RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreducepd128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPD128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreducepd128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPD128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreducepd256rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPD256RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreducepd256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPD256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreducepd256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPD256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreducepd512rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPD512RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreducepd512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPD512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreducepd512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPD512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreducepd512rri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPD512RRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreducessrrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VREDUCESSRRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vreducessrrri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VREDUCESSRRRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vreducessrrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VREDUCESSRRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vreducesdrrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VREDUCESDRRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vreducesdrrri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VREDUCESDRRRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vreducesdrrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VREDUCESDRRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrndscaleps128rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPS128RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscaleps128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPS128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscaleps128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPS128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscaleps256rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPS256RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscaleps256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPS256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscaleps256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPS256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscaleps512rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPS512RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscaleps512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPS512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscaleps512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPS512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscaleps512rri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPS512RRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscalepd128rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPD128RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscalepd128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPD128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscalepd128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPD128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscalepd256rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPD256RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscalepd256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPD256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscalepd256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPD256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscalepd512rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPD512RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscalepd512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPD512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscalepd512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPD512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscalepd512rri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPD512RRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscalessrrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALESSRRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrndscalessrrri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALESSRRRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrndscalessrrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALESSRRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrndscalesdrrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALESDRRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrndscalesdrrri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALESDRRRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrndscalesdrrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALESDRRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrsqrt14ps128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRT14PS128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrt14ps128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRT14PS128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrt14ps128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRT14PS128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrt14ps256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRT14PS256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrt14ps256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRT14PS256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrt14ps256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRT14PS256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrt14ps512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRT14PS512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrt14ps512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRT14PS512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrt14ps512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRT14PS512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrt14pd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRT14PD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrt14pd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRT14PD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrt14pd128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRT14PD128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrt14pd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRT14PD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrt14pd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRT14PD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrt14pd256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRT14PD256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrt14pd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRT14PD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrt14pd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRT14PD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrt14pd512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRT14PD512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrt14ssrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRSQRT14SSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrsqrt14ssrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRSQRT14SSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrsqrt14sdrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRSQRT14SDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrsqrt14sdrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRSQRT14SDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefps128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPS128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefps128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPS128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefps256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPS256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefps256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPS256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefps512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPS512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefpd128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPD128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefpd128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPD128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefpd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefpd256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPD256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefpd256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPD256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefpd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefpd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefpd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefpd512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPD512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefpd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefssrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFSSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefssrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFSSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefssrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFSSRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefsdrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFSDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefsdrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFSDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefsdrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFSDRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscatterdps128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSCATTERDPS128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vscatterdps256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSCATTERDPS256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vscatterdps512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSCATTERDPS512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vscatterdpd128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSCATTERDPD128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vscatterdpd256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSCATTERDPD256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vscatterdpd512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSCATTERDPD512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vscatterqps128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSCATTERQPS128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vscatterqps256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSCATTERQPS256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vscatterqps512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSCATTERQPS512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vscatterqpd128mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSCATTERQPD128MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vscatterqpd256mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSCATTERQPD256MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vscatterqpd512mr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSCATTERQPD512MR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vshuff32x4_256rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFF32X4_256RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshuff32x4_256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFF32X4_256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshuff32x4_256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFF32X4_256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshuff32x4_512rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFF32X4_512RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshuff32x4_512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFF32X4_512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshuff32x4_512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFF32X4_512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshuff64x2_256rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFF64X2_256RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshuff64x2_256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFF64X2_256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshuff64x2_256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFF64X2_256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshuff64x2_512rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFF64X2_512RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshuff64x2_512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFF64X2_512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshuff64x2_512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFF64X2_512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufi32x4_256rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFI32X4_256RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufi32x4_256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFI32X4_256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufi32x4_256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFI32X4_256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufi32x4_512rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFI32X4_512RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufi32x4_512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFI32X4_512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufi32x4_512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFI32X4_512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufi64x2_256rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFI64X2_256RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufi64x2_256rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFI64X2_256RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufi64x2_256rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFI64X2_256RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufi64x2_512rrbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFI64X2_512RRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufi64x2_512rrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFI64X2_512RRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vshufi64x2_512rrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VSHUFI64X2_512RRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vxorps128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VXORPS128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vxorps256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VXORPS256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vxorps512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VXORPS512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vxorps512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VXORPS512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vxorps512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VXORPS512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vxorpd128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VXORPD128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vxorpd256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VXORPD256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vxorpd512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VXORPD512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vxorpd512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VXORPD512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vxorpd512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VXORPD512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kandbkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KANDBKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kandwkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KANDWKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kanddkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KANDDKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kandqkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KANDQKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kandnbkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KANDNBKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kandnwkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KANDNWKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kandndkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KANDNDKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kandnqkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KANDNQKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn knotbkk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KNOTBKK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn knotwkk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KNOTWKK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn knotdkk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KNOTDKK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn knotqkk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KNOTQKK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn korbkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KORBKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn korwkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KORWKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kordkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KORDKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn korqkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KORQKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kxnorbkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KXNORBKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kxnorwkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KXNORWKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kxnordkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KXNORDKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kxnorqkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KXNORQKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kxorbkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KXORBKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kxorwkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KXORWKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kxordkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KXORDKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kxorqkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KXORQKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kaddbkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KADDBKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kaddwkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KADDWKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kadddkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KADDDKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kaddqkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KADDQKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kunpckbwkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KUNPCKBWKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kunpckwdkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KUNPCKWDKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kunpckdqkkk(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KUNPCKDQKKK,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kortestbkk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KORTESTBKK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn kortestwkk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KORTESTWKK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn kortestdkk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KORTESTDKK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn kortestqkk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KORTESTQKK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn kmovbkm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KMOVBKM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn kmovbkk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KMOVBKK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn kmovwkm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KMOVWKM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn kmovwkk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KMOVWKK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn kmovdkm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KMOVDKM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn kmovdkk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KMOVDKK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn kmovqkm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KMOVQKM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn kmovqkk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KMOVQKK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn kmovbmk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KMOVBMK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn kmovwmk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KMOVWMK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn kmovdmk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KMOVDMK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn kmovqmk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KMOVQMK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn kmovbkr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KMOVBKR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn kmovwkr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KMOVWKR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn kmovdkr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KMOVDKR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn kmovqkr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KMOVQKR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn kmovbrk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KMOVBRK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn kmovwrk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KMOVWRK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn kmovdrk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KMOVDRK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn kmovqrk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KMOVQRK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ktestbkk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KTESTBKK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ktestwkk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KTESTWKK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ktestdkk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KTESTDKK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn ktestqkk(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            KTESTQKK,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn kshiftrbkki(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KSHIFTRBKKI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kshiftrwkki(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KSHIFTRWKKI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kshiftrdkki(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KSHIFTRDKKI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kshiftrqkki(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KSHIFTRQKKI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kshiftlbkki(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KSHIFTLBKKI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kshiftlwkki(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KSHIFTLWKKI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kshiftldkki(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KSHIFTLDKKI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn kshiftlqkki(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            KSHIFTLQKKI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscaleph128rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPH128RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscaleph128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPH128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscaleph128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPH128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscaleph256rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPH256RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscaleph256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPH256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscaleph256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPH256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscaleph512rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPH512RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscaleph512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPH512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscaleph512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPH512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscaleph512rri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALEPH512RRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrndscaleshrrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALESHRRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrndscaleshrrri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALESHRRRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vrndscaleshrrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VRNDSCALESHRRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vgetmantph128rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPH128RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantph128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPH128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantph128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPH128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantph256rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPH256RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantph256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPH256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantph256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPH256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantph512rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPH512RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantph512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPH512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantph512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPH512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantph512rri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETMANTPH512RRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetmantshrrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGETMANTSHRRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vgetmantshrrri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGETMANTSHRRRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vgetmantshrrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VGETMANTSHRRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vreduceph128rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPH128RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreduceph128rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPH128RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreduceph128rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPH128RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreduceph256rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPH256RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreduceph256rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPH256RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreduceph256rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPH256RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreduceph512rbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPH512RBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreduceph512rmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPH512RMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreduceph512rri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPH512RRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreduceph512rri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VREDUCEPH512RRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vreduceshrrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VREDUCESHRRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vreduceshrrri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VREDUCESHRRRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vreduceshrrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VREDUCESHRRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vfpclassph128kbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPH128KBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclassph128kri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPH128KRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclassph128kmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPH128KMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclassph256kbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPH256KBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclassph256kri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPH256KRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclassph256kmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPH256KMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclassph512kbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPH512KBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclassph512kri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPH512KRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclassph512kmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSPH512KMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclassshkri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSSHKRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfpclassshkmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFPCLASSSHKMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcmpph128krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPH128KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpph128krbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPH128KRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpph128krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPH128KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpph256krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPH256KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpph256krbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPH256KRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpph256krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPH256KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpph512krmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPH512KRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpph512krbi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPH512KRBI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpph512krri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPH512KRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpph512krri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPPH512KRRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpshkrmi(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPSHKRMI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpshkrri(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPSHKRRI,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vcmpshkrri_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
        op3: impl OperandCast,
    ) {
        self.emit(
            VCMPSHKRRI_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            op3.as_operand(),
        )
    }
    fn vmovshrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVSHRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovshrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMOVSHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmovshmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVSHMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtss2shrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSS2SHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtss2shrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSS2SHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtss2shrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSS2SHRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2phx128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2PHX128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2phx128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2PHX128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2phx128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2PHX128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2phx256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2PHX256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2phx256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2PHX256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2phx256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2PHX256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2phx512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2PHX512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2phx512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2PHX512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2phx512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2PHX512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtps2phx512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPS2PHX512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsi2sh32rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSI2SH32RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsi2sh32rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSI2SH32RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsi2sh32rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSI2SH32RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsi2sh64rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSI2SH64RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsi2sh64rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSI2SH64RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsi2sh64rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSI2SH64RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvttsh2si32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSH2SI32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttsh2si32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSH2SI32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttsh2si32rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSH2SI32RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttsh2si64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSH2SI64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttsh2si64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSH2SI64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttsh2si64rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSH2SI64RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsh2si32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSH2SI32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsh2si32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSH2SI32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsh2si32rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSH2SI32RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsh2si64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSH2SI64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsh2si64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSH2SI64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsh2si64rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSH2SI64RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vucomishrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VUCOMISHRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vucomishrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VUCOMISHRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vucomishrr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VUCOMISHRR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcomishrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCOMISHRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcomishrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCOMISHRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcomishrr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCOMISHRR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtph128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPH128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtph128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPH128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtph128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPH128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtph256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPH256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtph256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPH256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtph256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPH256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtph512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPH512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtph512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPH512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtph512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPH512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtph512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VSQRTPH512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsqrtshrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VSQRTSHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsqrtshrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VSQRTSHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsqrtshrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSQRTSHRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDPH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddshrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VADDSHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddshrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VADDSHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vaddshrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VADDSHRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULPH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulshrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMULSHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulshrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMULSHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmulshrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMULSHRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2pd128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PD128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2pd128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PD128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2pd128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PD128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2pd256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PD256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2pd256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PD256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2pd256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PD256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2pd512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PD512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2pd512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PD512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2pd512rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PD512RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2pd512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PD512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2ph128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2PH128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2ph128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2PH128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2ph128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2PH128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2ph256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2PH256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2ph256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2PH256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2ph256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2PH256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2ph512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2PH512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2ph512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2PH512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2ph512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2PH512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtpd2ph512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPD2PH512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsh2sdrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSH2SDRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsh2sdrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSH2SDRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsh2sdrrr_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSH2SDRRR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsd2shrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSD2SHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsd2shrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSD2SHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsd2shrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSD2SHRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2ph128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PH128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2ph128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PH128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2ph128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PH128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2ph256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PH256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2ph256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PH256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2ph256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PH256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2ph512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PH512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2ph512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PH512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2ph512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PH512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtdq2ph512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTDQ2PH512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2ph128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PH128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2ph128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PH128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2ph128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PH128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2ph256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PH256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2ph256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PH256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2ph256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PH256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2ph512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PH512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2ph512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PH512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2ph512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PH512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtqq2ph512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTQQ2PH512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2dq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2DQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2dq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2DQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2dq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2DQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2dq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2DQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2dq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2DQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2dq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2DQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2dq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2DQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2dq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2DQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2dq512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2DQ512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2dq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2DQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2dq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2DQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2dq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2DQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2dq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2DQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2dq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2DQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2dq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2DQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2dq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2DQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2dq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2DQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2dq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2DQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2dq512rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2DQ512RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2dq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2DQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vsubph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBPH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubshrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VSUBSHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubshrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VSUBSHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vsubshrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSUBSHRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminph512rrr_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPH512RRR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINPH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminshrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMINSHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminshrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMINSHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vminshrrr_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMINSHRRR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVPH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivshrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VDIVSHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivshrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VDIVSHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vdivshrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VDIVSHRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxph512rrr_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPH512RRR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXPH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxshrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMAXSHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxshrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VMAXSHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmaxshrrr_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VMAXSHRRR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vmovw_g2xrm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVW_G2XRM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovw_g2xrr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVW_G2XRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2udq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UDQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2udq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UDQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2udq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UDQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2udq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UDQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2udq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UDQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2udq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UDQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2udq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UDQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2udq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UDQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2udq512rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UDQ512RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2udq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UDQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2uqq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UQQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2uqq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UQQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2uqq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UQQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2uqq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UQQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2uqq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UQQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2uqq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UQQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2uqq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UQQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2uqq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UQQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2uqq512rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UQQ512RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2uqq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UQQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttsh2usi32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSH2USI32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttsh2usi32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSH2USI32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttsh2usi32rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSH2USI32RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttsh2usi64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSH2USI64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttsh2usi64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSH2USI64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttsh2usi64rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTSH2USI64RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2udq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UDQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2udq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UDQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2udq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UDQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2udq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UDQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2udq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UDQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2udq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UDQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2udq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UDQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2udq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UDQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2udq512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UDQ512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2udq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UDQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2uqq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UQQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2uqq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UQQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2uqq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UQQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2uqq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UQQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2uqq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UQQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2uqq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UQQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2uqq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UQQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2uqq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UQQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2uqq512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UQQ512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2uqq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UQQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsh2usi32rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSH2USI32RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsh2usi32rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSH2USI32RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsh2usi32rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSH2USI32RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsh2usi64rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSH2USI64RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsh2usi64rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSH2USI64RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsh2usi64rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTSH2USI64RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2qq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2QQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2qq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2QQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2qq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2QQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2qq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2QQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2qq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2QQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2qq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2QQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2qq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2QQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2qq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2QQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2qq512rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2QQ512RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2qq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2QQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2ph128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PH128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2ph128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PH128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2ph128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PH128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2ph256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PH256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2ph256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PH256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2ph256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PH256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2ph512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PH512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2ph512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PH512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2ph512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PH512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtudq2ph512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUDQ2PH512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2ph128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PH128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2ph128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PH128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2ph128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PH128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2ph256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PH256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2ph256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PH256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2ph256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PH256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2ph512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PH512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2ph512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PH512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2ph512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PH512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuqq2ph512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUQQ2PH512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2qq128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2QQ128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2qq128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2QQ128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2qq128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2QQ128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2qq256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2QQ256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2qq256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2QQ256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2qq256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2QQ256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2qq512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2QQ512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2qq512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2QQ512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2qq512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2QQ512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2qq512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2QQ512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtusi2sh32rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTUSI2SH32RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtusi2sh32rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTUSI2SH32RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtusi2sh32rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTUSI2SH32RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtusi2sh64rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTUSI2SH64RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtusi2sh64rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTUSI2SH64RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtusi2sh64rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTUSI2SH64RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2uw128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UW128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2uw128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UW128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2uw128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UW128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2uw256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UW256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2uw256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UW256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2uw256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UW256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2uw512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UW512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2uw512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UW512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2uw512rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UW512RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2uw512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2UW512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2w128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2W128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2w128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2W128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2w128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2W128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2w256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2W256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2w256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2W256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2w256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2W256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2w512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2W512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2w512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2W512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2w512rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2W512RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvttph2w512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTTPH2W512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2uw128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UW128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2uw128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UW128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2uw128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UW128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2uw256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UW256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2uw256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UW256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2uw256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UW256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2uw512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UW512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2uw512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UW512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2uw512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UW512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2uw512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2UW512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2w128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2W128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2w128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2W128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2w128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2W128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2w256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2W256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2w256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2W256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2w256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2W256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2w512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2W512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2w512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2W512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2w512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2W512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2w512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2W512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtw2ph128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTW2PH128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtw2ph128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTW2PH128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtw2ph128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTW2PH128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtw2ph256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTW2PH256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtw2ph256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTW2PH256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtw2ph256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTW2PH256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtw2ph512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTW2PH512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtw2ph512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTW2PH512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtw2ph512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTW2PH512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtw2ph512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTW2PH512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuw2ph128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUW2PH128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuw2ph128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUW2PH128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuw2ph128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUW2PH128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuw2ph256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUW2PH256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuw2ph256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUW2PH256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuw2ph256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUW2PH256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuw2ph512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUW2PH512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuw2ph512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUW2PH512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuw2ph512rr_er(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUW2PH512RR_ER,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtuw2ph512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTUW2PH512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovw_x2gmr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVW_X2GMR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vmovw_x2grr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VMOVW_X2GRR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2psx128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PSX128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2psx128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PSX128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2psx128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PSX128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2psx256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PSX256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2psx256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PSX256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2psx256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PSX256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2psx512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PSX512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2psx512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PSX512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2psx512rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PSX512RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtph2psx512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VCVTPH2PSX512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vcvtsh2ssrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSH2SSRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsh2ssrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSH2SSRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vcvtsh2ssrrr_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VCVTSH2SSRRR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFPH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefshrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFSHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefshrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFSHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vscalefshrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VSCALEFSHRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetexpph128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPH128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexpph128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPH128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexpph128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPH128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexpph256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPH256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexpph256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPH256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexpph256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPH256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexpph512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPH512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexpph512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPH512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexpph512rr_sae(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPH512RR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexpph512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VGETEXPPH512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vgetexpshrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETEXPSHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetexpshrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETEXPSHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vgetexpshrrr_sae(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VGETEXPSHRRR_SAE,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrcpph128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCPPH128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcpph128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCPPH128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcpph128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCPPH128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcpph256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCPPH256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcpph256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCPPH256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcpph256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCPPH256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcpph512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCPPH512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcpph512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCPPH512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcpph512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRCPPH512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrcpshrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VRCPSHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrcpshrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VRCPSHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrsqrtph128rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRTPH128RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrtph128rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRTPH128RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrtph128rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRTPH128RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrtph256rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRTPH256RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrtph256rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRTPH256RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrtph256rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRTPH256RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrtph512rm(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRTPH512RM,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrtph512rr(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRTPH512RR,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrtph512rb(&mut self, op0: impl OperandCast, op1: impl OperandCast) {
        self.emit(
            VRSQRTPH512RB,
            op0.as_operand(),
            op1.as_operand(),
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
    fn vrsqrtshrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VRSQRTSHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vrsqrtshrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VRSQRTSHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddcph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDCPH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddcph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDCPH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddcph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDCPH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddcph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDCPH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddcph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDCPH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddcph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDCPH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddcph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDCPH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddcph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDCPH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddcph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDCPH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddcph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDCPH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmaddcph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMADDCPH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmaddcph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMADDCPH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmaddcph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMADDCPH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmaddcph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMADDCPH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmaddcph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMADDCPH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmaddcph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMADDCPH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmaddcph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMADDCPH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmaddcph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMADDCPH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmaddcph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMADDCPH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmaddcph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMADDCPH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddcshrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDCSHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddcshrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDCSHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddcshrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDCSHRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmaddcshrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMADDCSHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmaddcshrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMADDCSHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmaddcshrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMADDCSHRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmulcph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMULCPH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmulcph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMULCPH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmulcph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMULCPH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmulcph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMULCPH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmulcph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMULCPH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmulcph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMULCPH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmulcph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMULCPH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmulcph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMULCPH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmulcph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMULCPH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmulcph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMULCPH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmulcph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMULCPH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmulcph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMULCPH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmulcph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMULCPH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmulcph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMULCPH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmulcph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMULCPH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmulcph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMULCPH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmulcph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMULCPH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmulcph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMULCPH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmulcph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMULCPH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmulcph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMULCPH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmulcshrrm(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VFMULCSHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmulcshrrr(&mut self, op0: impl OperandCast, op1: impl OperandCast, op2: impl OperandCast) {
        self.emit(
            VFMULCSHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmulcshrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMULCSHRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmulcshrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMULCSHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmulcshrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMULCSHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfcmulcshrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFCMULCSHRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132ph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132ph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132ph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132ph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132ph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132ph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132ph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132ph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132ph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub132ph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB132PH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213ph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213ph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213ph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213ph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213ph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213ph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213ph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213ph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213ph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub213ph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB213PH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231ph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231ph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231ph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231ph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231ph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231ph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231ph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231ph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231ph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmaddsub231ph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADDSUB231PH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132ph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132ph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132ph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132ph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132ph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132ph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132ph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132ph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132ph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd132ph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD132PH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213ph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213ph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213ph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213ph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213ph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213ph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213ph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213ph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213ph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd213ph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD213PH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231ph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231ph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231ph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231ph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231ph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231ph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231ph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231ph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231ph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsubadd231ph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUBADD231PH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132ph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132ph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132ph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132ph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132ph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132ph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132ph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132ph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132ph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132ph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132PH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213ph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213ph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213ph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213ph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213ph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213ph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213ph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213ph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213ph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213ph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213PH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231ph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231ph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231ph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231ph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231ph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231ph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231ph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231ph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231ph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231ph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231PH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132shrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132SHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132shrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132SHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd132shrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD132SHRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213shrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213SHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213shrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213SHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd213shrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD213SHRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231shrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231SHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231shrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231SHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmadd231shrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMADD231SHRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132ph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132ph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132ph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132ph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132ph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132ph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132ph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132ph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132ph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132ph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132PH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213ph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213ph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213ph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213ph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213ph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213ph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213ph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213ph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213ph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213ph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213PH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231ph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231ph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231ph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231ph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231ph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231ph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231ph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231ph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231ph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231ph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231PH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132shrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132SHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132shrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132SHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub132shrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB132SHRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213shrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213SHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213shrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213SHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub213shrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB213SHRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231shrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231SHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231shrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231SHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfmsub231shrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFMSUB231SHRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132ph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132ph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132ph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132ph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132ph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132ph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132ph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132ph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132ph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132ph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132PH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213ph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213ph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213ph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213ph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213ph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213ph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213ph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213ph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213ph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213ph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213PH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231ph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231ph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231ph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231ph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231ph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231ph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231ph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231ph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231ph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231ph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231PH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132shrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132SHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132shrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132SHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd132shrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD132SHRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213shrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213SHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213shrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213SHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd213shrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD213SHRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231shrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231SHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231shrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231SHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmadd231shrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMADD231SHRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132ph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132ph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132ph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132ph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132ph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132ph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132ph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132ph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132ph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132ph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132PH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213ph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213ph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213ph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213ph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213ph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213ph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213ph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213ph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213ph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213ph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213PH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231ph128rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PH128RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231ph128rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PH128RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231ph128rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PH128RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231ph256rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PH256RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231ph256rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PH256RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231ph256rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PH256RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231ph512rrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PH512RRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231ph512rrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PH512RRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231ph512rrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PH512RRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231ph512rrb(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231PH512RRB,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132shrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132SHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132shrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132SHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub132shrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB132SHRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213shrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213SHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213shrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213SHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub213shrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB213SHRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231shrrm(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231SHRRM,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231shrrr(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231SHRRR,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn vfnmsub231shrrr_er(
        &mut self,
        op0: impl OperandCast,
        op1: impl OperandCast,
        op2: impl OperandCast,
    ) {
        self.emit(
            VFNMSUB231SHRRR_ER,
            op0.as_operand(),
            op1.as_operand(),
            op2.as_operand(),
            &NOREG, /* op3 */
        )
    }
    fn nop(&mut self) {
        self.emit(
            NOP, &NOREG, /* op0 */
            &NOREG, /* op1 */
            &NOREG, /* op2 */
            &NOREG, /* op3 */
        )
    }
}
